<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20171004 19:55:46.676">
<suite id="s1" name="Tests" source="/tmp/fspcibld/19704/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw name="Clear System Entry From Knownhosts" library="connection_client">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:48.081">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status starttime="20171004 19:55:48.081" status="PASS" endtime="20171004 19:55:48.081"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:48.085">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:48.088">${rc} = 2</msg>
<msg level="INFO" timestamp="20171004 19:55:48.088">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status starttime="20171004 19:55:48.082" status="PASS" endtime="20171004 19:55:48.088"></status>
</kw>
<status starttime="20171004 19:55:48.081" status="PASS" endtime="20171004 19:55:48.089"></status>
</kw>
<status starttime="20171004 19:55:48.080" status="PASS" endtime="20171004 19:55:48.089"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:55:48.093">Dictionary does not contain key 'host'.</msg>
<status starttime="20171004 19:55:48.093" status="FAIL" endtime="20171004 19:55:48.093"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:48.093">${has_host} = False</msg>
<status starttime="20171004 19:55:48.092" status="PASS" endtime="20171004 19:55:48.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171004 19:55:48.095" status="PASS" endtime="20171004 19:55:48.095"></status>
</kw>
<status starttime="20171004 19:55:48.094" status="PASS" endtime="20171004 19:55:48.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:48.097">${port_num} = 22</msg>
<status starttime="20171004 19:55:48.096" status="PASS" endtime="20171004 19:55:48.097"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:48.097">${SSH_PORT} = 22</msg>
<status starttime="20171004 19:55:48.097" status="PASS" endtime="20171004 19:55:48.098"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:48.098">${https_num} = 443</msg>
<status starttime="20171004 19:55:48.098" status="PASS" endtime="20171004 19:55:48.098"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:48.099">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20171004 19:55:48.098" status="PASS" endtime="20171004 19:55:48.099"></status>
</kw>
<status starttime="20171004 19:55:48.096" status="PASS" endtime="20171004 19:55:48.099"></status>
</kw>
<status starttime="20171004 19:55:48.095" status="PASS" endtime="20171004 19:55:48.099"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:55:48.100">Dictionary does not contain key 'port'.</msg>
<status starttime="20171004 19:55:48.100" status="FAIL" endtime="20171004 19:55:48.100"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:48.100">${has_port} = False</msg>
<status starttime="20171004 19:55:48.100" status="PASS" endtime="20171004 19:55:48.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171004 19:55:48.103" status="PASS" endtime="20171004 19:55:48.103"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171004 19:55:48.103" status="PASS" endtime="20171004 19:55:48.104"></status>
</kw>
<status starttime="20171004 19:55:48.102" status="PASS" endtime="20171004 19:55:48.104"></status>
</kw>
<status starttime="20171004 19:55:48.101" status="PASS" endtime="20171004 19:55:48.104"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:48.105">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171004 19:55:49.831">Read output: root@witherspoon:~#</msg>
<status starttime="20171004 19:55:48.105" status="PASS" endtime="20171004 19:55:49.831"></status>
</kw>
<status starttime="20171004 19:55:48.090" status="PASS" endtime="20171004 19:55:49.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:49.833">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20171004 19:55:49.911">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171004 19:55:49.911">${output} = VERSION_ID="v1.99.10-105-g726c004"</msg>
<msg level="INFO" timestamp="20171004 19:55:49.911">${stderr} = </msg>
<status starttime="20171004 19:55:49.833" status="PASS" endtime="20171004 19:55:49.911"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:49.912">Length is 0</msg>
<status starttime="20171004 19:55:49.912" status="PASS" endtime="20171004 19:55:49.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:49.913">VERSION_ID="v1.99.10-105-g726c004"</msg>
<status starttime="20171004 19:55:49.912" status="PASS" endtime="20171004 19:55:49.913"></status>
</kw>
<status starttime="20171004 19:55:49.832" status="PASS" endtime="20171004 19:55:49.913"></status>
</kw>
<status starttime="20171004 19:55:49.832" status="PASS" endtime="20171004 19:55:49.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Get Host Software Objects Details" library="code_update_utils">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:49.914">${software} = []</msg>
<status starttime="20171004 19:55:49.914" status="PASS" endtime="20171004 19:55:49.914"></status>
</kw>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:49.915">${host_list} = []</msg>
<status starttime="20171004 19:55:49.915" status="PASS" endtime="20171004 19:55:49.915"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:49.919">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:49.918" status="PASS" endtime="20171004 19:55:49.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:49.920">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:49.920" status="PASS" endtime="20171004 19:55:49.920"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:49.921">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:49.921" status="PASS" endtime="20171004 19:55:49.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:49.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:49.921" status="PASS" endtime="20171004 19:55:49.922"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.155">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:49.923" status="PASS" endtime="20171004 19:55:50.155"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.156">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:50.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:49.922" status="PASS" endtime="20171004 19:55:50.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.156">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.156" status="PASS" endtime="20171004 19:55:50.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.157" status="PASS" endtime="20171004 19:55:50.157"></status>
</kw>
<status starttime="20171004 19:55:49.918" status="PASS" endtime="20171004 19:55:50.157"></status>
</kw>
<status starttime="20171004 19:55:49.917" status="PASS" endtime="20171004 19:55:50.158"></status>
</kw>
<status starttime="20171004 19:55:49.917" status="PASS" endtime="20171004 19:55:50.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.158">${base_uri} = /xyz/openbmc_project/software/</msg>
<status starttime="20171004 19:55:50.158" status="PASS" endtime="20171004 19:55:50.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.160">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20171004 19:55:50.160" status="PASS" endtime="20171004 19:55:50.160"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.161">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20171004 19:55:50.161" status="PASS" endtime="20171004 19:55:50.162"></status>
</kw>
<status starttime="20171004 19:55:50.161" status="PASS" endtime="20171004 19:55:50.162"></status>
</kw>
<status starttime="20171004 19:55:50.159" status="PASS" endtime="20171004 19:55:50.162"></status>
</kw>
<status starttime="20171004 19:55:50.159" status="PASS" endtime="20171004 19:55:50.162"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.229">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:50.230">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.162" status="PASS" endtime="20171004 19:55:50.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.231">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/fccb9e84", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_pr...</msg>
<status starttime="20171004 19:55:50.231" status="PASS" endtime="20171004 19:55:50.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.232">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/fccb9e84", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/96a2bd2f", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:50.232" status="PASS" endtime="20171004 19:55:50.232"></status>
</kw>
<status starttime="20171004 19:55:50.232" status="PASS" endtime="20171004 19:55:50.233"></status>
</kw>
<status starttime="20171004 19:55:50.230" status="PASS" endtime="20171004 19:55:50.233"></status>
</kw>
<status starttime="20171004 19:55:50.230" status="PASS" endtime="20171004 19:55:50.233"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:50.233">Delete All Sessions</msg>
<status starttime="20171004 19:55:50.233" status="PASS" endtime="20171004 19:55:50.233"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:49.916" status="PASS" endtime="20171004 19:55:50.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.234" status="PASS" endtime="20171004 19:55:50.234"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.235">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/fccb9e84", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/96a2bd2f", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:50.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:50.235">${content} = {u'data': [u'/xyz/openbmc_project/software/fccb9e84', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/96a2bd2f', u'/xyz/openbmc_proj...</msg>
<status starttime="20171004 19:55:50.235" status="PASS" endtime="20171004 19:55:50.235"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.235">${sw_list} = [u'/xyz/openbmc_project/software/fccb9e84', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/96a2bd2f', u'/xyz/openbmc_project/softwa...</msg>
<status starttime="20171004 19:55:49.916" status="PASS" endtime="20171004 19:55:50.235"></status>
</kw>
<kw name="${index} IN [ @{sw_list} ]" type="for">
<kw name="${index} = /xyz/openbmc_project/software/fccb9e84" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.239">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:50.238" status="PASS" endtime="20171004 19:55:50.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.240">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:50.239" status="PASS" endtime="20171004 19:55:50.240"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.240">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:50.240" status="PASS" endtime="20171004 19:55:50.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.241">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:50.241" status="PASS" endtime="20171004 19:55:50.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.425">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:50.242" status="PASS" endtime="20171004 19:55:50.425"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.425">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:50.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.241" status="PASS" endtime="20171004 19:55:50.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.426">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.426" status="PASS" endtime="20171004 19:55:50.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.426" status="PASS" endtime="20171004 19:55:50.427"></status>
</kw>
<status starttime="20171004 19:55:50.238" status="PASS" endtime="20171004 19:55:50.427"></status>
</kw>
<status starttime="20171004 19:55:50.237" status="PASS" endtime="20171004 19:55:50.427"></status>
</kw>
<status starttime="20171004 19:55:50.237" status="PASS" endtime="20171004 19:55:50.427"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.428">${base_uri} = /xyz/openbmc_project/software/fccb9e84/attr/Purpose</msg>
<status starttime="20171004 19:55:50.427" status="PASS" endtime="20171004 19:55:50.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:50.428" status="PASS" endtime="20171004 19:55:50.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.534">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fccb9e84/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:50.534">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.429" status="PASS" endtime="20171004 19:55:50.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:50.534" status="PASS" endtime="20171004 19:55:50.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:50.535">Delete All Sessions</msg>
<status starttime="20171004 19:55:50.535" status="PASS" endtime="20171004 19:55:50.535"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.236" status="PASS" endtime="20171004 19:55:50.536"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171004 19:55:50.536" status="PASS" endtime="20171004 19:55:50.536"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.537">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:50.537">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:50.537">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:50.536" status="PASS" endtime="20171004 19:55:50.537"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.537">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status starttime="20171004 19:55:50.236" status="PASS" endtime="20171004 19:55:50.537"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.538">Continuing for loop from the next iteration.</msg>
<status starttime="20171004 19:55:50.538" status="PASS" endtime="20171004 19:55:50.538"></status>
</kw>
<status starttime="20171004 19:55:50.236" status="PASS" endtime="20171004 19:55:50.538"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/active" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.542">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:50.541" status="PASS" endtime="20171004 19:55:50.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.542">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:50.542" status="PASS" endtime="20171004 19:55:50.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.543">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:50.543" status="PASS" endtime="20171004 19:55:50.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:50.544" status="PASS" endtime="20171004 19:55:50.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:50.545" status="PASS" endtime="20171004 19:55:50.743"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.743">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:50.743">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.544" status="PASS" endtime="20171004 19:55:50.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.744">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.744" status="PASS" endtime="20171004 19:55:50.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:50.745" status="PASS" endtime="20171004 19:55:50.745"></status>
</kw>
<status starttime="20171004 19:55:50.541" status="PASS" endtime="20171004 19:55:50.745"></status>
</kw>
<status starttime="20171004 19:55:50.540" status="PASS" endtime="20171004 19:55:50.745"></status>
</kw>
<status starttime="20171004 19:55:50.540" status="PASS" endtime="20171004 19:55:50.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.746">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status starttime="20171004 19:55:50.746" status="PASS" endtime="20171004 19:55:50.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:50.746" status="PASS" endtime="20171004 19:55:50.747"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:50.817">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171004 19:55:50.747" status="PASS" endtime="20171004 19:55:50.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:50.817" status="PASS" endtime="20171004 19:55:50.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:50.818">Delete All Sessions</msg>
<status starttime="20171004 19:55:50.818" status="PASS" endtime="20171004 19:55:50.818"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.818">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171004 19:55:50.539" status="PASS" endtime="20171004 19:55:50.818"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.819">Returning from the enclosing user keyword.</msg>
<status starttime="20171004 19:55:50.819" status="PASS" endtime="20171004 19:55:50.819"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:50.819">${attr_purpose} = None</msg>
<status starttime="20171004 19:55:50.539" status="PASS" endtime="20171004 19:55:50.819"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.820">Continuing for loop from the next iteration.</msg>
<status starttime="20171004 19:55:50.820" status="PASS" endtime="20171004 19:55:50.820"></status>
</kw>
<status starttime="20171004 19:55:50.538" status="PASS" endtime="20171004 19:55:50.820"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/7a9ef57c" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:50.823">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:50.823" status="PASS" endtime="20171004 19:55:50.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:50.824" status="PASS" endtime="20171004 19:55:50.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.825">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:50.825" status="PASS" endtime="20171004 19:55:50.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:50.826">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:50.825" status="PASS" endtime="20171004 19:55:50.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.015">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:50.827" status="PASS" endtime="20171004 19:55:51.015"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.015">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:51.015">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.826" status="PASS" endtime="20171004 19:55:51.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.016">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:51.015" status="PASS" endtime="20171004 19:55:51.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:51.016" status="PASS" endtime="20171004 19:55:51.016"></status>
</kw>
<status starttime="20171004 19:55:50.823" status="PASS" endtime="20171004 19:55:51.017"></status>
</kw>
<status starttime="20171004 19:55:50.822" status="PASS" endtime="20171004 19:55:51.017"></status>
</kw>
<status starttime="20171004 19:55:50.821" status="PASS" endtime="20171004 19:55:51.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.017">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status starttime="20171004 19:55:51.017" status="PASS" endtime="20171004 19:55:51.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:51.018" status="PASS" endtime="20171004 19:55:51.018"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.140">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:51.140">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.018" status="PASS" endtime="20171004 19:55:51.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:51.141" status="PASS" endtime="20171004 19:55:51.141"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:51.142">Delete All Sessions</msg>
<status starttime="20171004 19:55:51.141" status="PASS" endtime="20171004 19:55:51.142"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.142">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:50.821" status="PASS" endtime="20171004 19:55:51.142"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171004 19:55:51.142" status="PASS" endtime="20171004 19:55:51.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.143">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:51.143">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:51.143">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:51.143" status="PASS" endtime="20171004 19:55:51.143"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.144">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20171004 19:55:50.820" status="PASS" endtime="20171004 19:55:51.144"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20171004 19:55:51.144" status="PASS" endtime="20171004 19:55:51.144"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20171004 19:55:51.145" status="PASS" endtime="20171004 19:55:51.145"></status>
</kw>
<status starttime="20171004 19:55:50.820" status="PASS" endtime="20171004 19:55:51.145"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/96a2bd2f" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.148">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:51.148" status="PASS" endtime="20171004 19:55:51.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.149">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:51.149" status="PASS" endtime="20171004 19:55:51.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.150">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:51.149" status="PASS" endtime="20171004 19:55:51.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.150">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:51.150" status="PASS" endtime="20171004 19:55:51.150"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.388">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:51.151" status="PASS" endtime="20171004 19:55:51.388"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.388">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:51.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.151" status="PASS" endtime="20171004 19:55:51.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:51.388" status="PASS" endtime="20171004 19:55:51.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:51.389" status="PASS" endtime="20171004 19:55:51.389"></status>
</kw>
<status starttime="20171004 19:55:51.147" status="PASS" endtime="20171004 19:55:51.390"></status>
</kw>
<status starttime="20171004 19:55:51.147" status="PASS" endtime="20171004 19:55:51.390"></status>
</kw>
<status starttime="20171004 19:55:51.146" status="PASS" endtime="20171004 19:55:51.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.390">${base_uri} = /xyz/openbmc_project/software/96a2bd2f/attr/Purpose</msg>
<status starttime="20171004 19:55:51.390" status="PASS" endtime="20171004 19:55:51.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:51.391" status="PASS" endtime="20171004 19:55:51.391"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.496">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/96a2bd2f/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:51.496">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.391" status="PASS" endtime="20171004 19:55:51.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:51.496" status="PASS" endtime="20171004 19:55:51.497"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:51.497">Delete All Sessions</msg>
<status starttime="20171004 19:55:51.497" status="PASS" endtime="20171004 19:55:51.497"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.146" status="PASS" endtime="20171004 19:55:51.497"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171004 19:55:51.498" status="PASS" endtime="20171004 19:55:51.498"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.499">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:51.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:51.499">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:51.498" status="PASS" endtime="20171004 19:55:51.499"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.499">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status starttime="20171004 19:55:51.145" status="PASS" endtime="20171004 19:55:51.499"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.500">Continuing for loop from the next iteration.</msg>
<status starttime="20171004 19:55:51.499" status="PASS" endtime="20171004 19:55:51.500"></status>
</kw>
<status starttime="20171004 19:55:51.145" status="PASS" endtime="20171004 19:55:51.500"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.503">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:51.503" status="PASS" endtime="20171004 19:55:51.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:51.504" status="PASS" endtime="20171004 19:55:51.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.505">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:51.504" status="PASS" endtime="20171004 19:55:51.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:51.505" status="PASS" endtime="20171004 19:55:51.505"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.698">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:51.506" status="PASS" endtime="20171004 19:55:51.698"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.698">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:51.699">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.506" status="PASS" endtime="20171004 19:55:51.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.699">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:51.699" status="PASS" endtime="20171004 19:55:51.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:51.700" status="PASS" endtime="20171004 19:55:51.700"></status>
</kw>
<status starttime="20171004 19:55:51.502" status="PASS" endtime="20171004 19:55:51.700"></status>
</kw>
<status starttime="20171004 19:55:51.502" status="PASS" endtime="20171004 19:55:51.700"></status>
</kw>
<status starttime="20171004 19:55:51.501" status="PASS" endtime="20171004 19:55:51.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.701">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status starttime="20171004 19:55:51.701" status="PASS" endtime="20171004 19:55:51.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:51.701" status="PASS" endtime="20171004 19:55:51.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:51.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.702" status="PASS" endtime="20171004 19:55:51.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:51.819" status="PASS" endtime="20171004 19:55:51.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:51.820">Delete All Sessions</msg>
<status starttime="20171004 19:55:51.819" status="PASS" endtime="20171004 19:55:51.820"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.501" status="PASS" endtime="20171004 19:55:51.820"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171004 19:55:51.820" status="PASS" endtime="20171004 19:55:51.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.821">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:51.821">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:51.821">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:51.821" status="PASS" endtime="20171004 19:55:51.821"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:51.822">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20171004 19:55:51.500" status="PASS" endtime="20171004 19:55:51.822"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20171004 19:55:51.822" status="PASS" endtime="20171004 19:55:51.822"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20171004 19:55:51.823" status="PASS" endtime="20171004 19:55:51.823"></status>
</kw>
<status starttime="20171004 19:55:51.500" status="PASS" endtime="20171004 19:55:51.823"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/functional" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:51.826">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:51.826" status="PASS" endtime="20171004 19:55:51.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:51.827" status="PASS" endtime="20171004 19:55:51.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.828">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:51.827" status="PASS" endtime="20171004 19:55:51.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:51.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:51.828" status="PASS" endtime="20171004 19:55:51.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.020">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:51.829" status="PASS" endtime="20171004 19:55:52.020"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:52.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:51.829" status="PASS" endtime="20171004 19:55:52.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.021">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:52.021" status="PASS" endtime="20171004 19:55:52.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:52.022" status="PASS" endtime="20171004 19:55:52.022"></status>
</kw>
<status starttime="20171004 19:55:51.825" status="PASS" endtime="20171004 19:55:52.022"></status>
</kw>
<status starttime="20171004 19:55:51.825" status="PASS" endtime="20171004 19:55:52.022"></status>
</kw>
<status starttime="20171004 19:55:51.824" status="PASS" endtime="20171004 19:55:52.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.023">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status starttime="20171004 19:55:52.023" status="PASS" endtime="20171004 19:55:52.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:52.023" status="PASS" endtime="20171004 19:55:52.024"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.079">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:52.079">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171004 19:55:52.024" status="PASS" endtime="20171004 19:55:52.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:52.080" status="PASS" endtime="20171004 19:55:52.080"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:52.081">Delete All Sessions</msg>
<status starttime="20171004 19:55:52.080" status="PASS" endtime="20171004 19:55:52.081"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.081">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171004 19:55:51.824" status="PASS" endtime="20171004 19:55:52.081"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.082">Returning from the enclosing user keyword.</msg>
<status starttime="20171004 19:55:52.081" status="PASS" endtime="20171004 19:55:52.082"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.082">${attr_purpose} = None</msg>
<status starttime="20171004 19:55:51.823" status="PASS" endtime="20171004 19:55:52.082"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.082">Continuing for loop from the next iteration.</msg>
<status starttime="20171004 19:55:52.082" status="PASS" endtime="20171004 19:55:52.083"></status>
</kw>
<status starttime="20171004 19:55:51.823" status="PASS" endtime="20171004 19:55:52.083"></status>
</kw>
<status starttime="20171004 19:55:50.236" status="PASS" endtime="20171004 19:55:52.083"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.083">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status starttime="20171004 19:55:49.915" status="PASS" endtime="20171004 19:55:52.083"></status>
</kw>
<kw name="${pnor} IN [ @{pnor_details} ]" type="for">
<kw name="${pnor} = /xyz/openbmc_project/software/7a9ef57c" type="foritem">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.086">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:52.086" status="PASS" endtime="20171004 19:55:52.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.087">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:52.087" status="PASS" endtime="20171004 19:55:52.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.088">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:52.087" status="PASS" endtime="20171004 19:55:52.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.088">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:52.088" status="PASS" endtime="20171004 19:55:52.088"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.279">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:52.089" status="PASS" endtime="20171004 19:55:52.279"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.279">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:52.279">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:52.089" status="PASS" endtime="20171004 19:55:52.279"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.280">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:52.279" status="PASS" endtime="20171004 19:55:52.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:52.280" status="PASS" endtime="20171004 19:55:52.280"></status>
</kw>
<status starttime="20171004 19:55:52.085" status="PASS" endtime="20171004 19:55:52.281"></status>
</kw>
<status starttime="20171004 19:55:52.085" status="PASS" endtime="20171004 19:55:52.281"></status>
</kw>
<status starttime="20171004 19:55:52.084" status="PASS" endtime="20171004 19:55:52.281"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.281">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status starttime="20171004 19:55:52.281" status="PASS" endtime="20171004 19:55:52.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:52.282" status="PASS" endtime="20171004 19:55:52.282"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.455">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:52.455">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:52.282" status="PASS" endtime="20171004 19:55:52.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:52.455" status="PASS" endtime="20171004 19:55:52.455"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:52.456">Delete All Sessions</msg>
<status starttime="20171004 19:55:52.456" status="PASS" endtime="20171004 19:55:52.456"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.456">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:52.083" status="PASS" endtime="20171004 19:55:52.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.457">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:52.457">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:52.457">${json} = {u'data': {u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,ma...</msg>
<status starttime="20171004 19:55:52.457" status="PASS" endtime="20171004 19:55:52.457"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20171004 19:55:52.457" status="PASS" endtime="20171004 19:55:52.458"></status>
</kw>
<status starttime="20171004 19:55:52.083" status="PASS" endtime="20171004 19:55:52.458"></status>
</kw>
<kw name="${pnor} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.461">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:52.460" status="PASS" endtime="20171004 19:55:52.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.462">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:52.461" status="PASS" endtime="20171004 19:55:52.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.462">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:52.462" status="PASS" endtime="20171004 19:55:52.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.463">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:52.463" status="PASS" endtime="20171004 19:55:52.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:52.464" status="PASS" endtime="20171004 19:55:52.683"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.683">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:52.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:52.463" status="PASS" endtime="20171004 19:55:52.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:52.684" status="PASS" endtime="20171004 19:55:52.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:52.684" status="PASS" endtime="20171004 19:55:52.685"></status>
</kw>
<status starttime="20171004 19:55:52.460" status="PASS" endtime="20171004 19:55:52.685"></status>
</kw>
<status starttime="20171004 19:55:52.459" status="PASS" endtime="20171004 19:55:52.685"></status>
</kw>
<status starttime="20171004 19:55:52.459" status="PASS" endtime="20171004 19:55:52.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.686">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status starttime="20171004 19:55:52.685" status="PASS" endtime="20171004 19:55:52.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 19:55:52.686" status="PASS" endtime="20171004 19:55:52.686"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.827">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:52.827">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:52.687" status="PASS" endtime="20171004 19:55:52.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 19:55:52.828" status="PASS" endtime="20171004 19:55:52.828"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:52.828">Delete All Sessions</msg>
<status starttime="20171004 19:55:52.828" status="PASS" endtime="20171004 19:55:52.829"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:52.458" status="PASS" endtime="20171004 19:55:52.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.829">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:52.829">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:52.830">${json} = {u'data': {u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,...</msg>
<status starttime="20171004 19:55:52.829" status="PASS" endtime="20171004 19:55:52.830"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20171004 19:55:52.830" status="PASS" endtime="20171004 19:55:52.830"></status>
</kw>
<status starttime="20171004 19:55:52.458" status="PASS" endtime="20171004 19:55:52.830"></status>
</kw>
<status starttime="20171004 19:55:52.083" status="PASS" endtime="20171004 19:55:52.830"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:52.831">${software} = [{u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml...</msg>
<status starttime="20171004 19:55:49.914" status="PASS" endtime="20171004 19:55:52.831"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:52.831">[{u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2', u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Path': u'', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']]}, {u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Priority': 0, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Path': u'', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']]}]</msg>
<status starttime="20171004 19:55:52.831" status="PASS" endtime="20171004 19:55:52.831"></status>
</kw>
<status starttime="20171004 19:55:49.913" status="PASS" endtime="20171004 19:55:52.831"></status>
</kw>
<status starttime="20171004 19:55:49.913" status="PASS" endtime="20171004 19:55:52.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:52.855">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 19:55:52.855">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171004 19:55:53.594">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20171004 19:55:53.594">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:53.691">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171004 19:55:53.701">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171004 19:55:53.701">${stderr} = </msg>
<msg level="INFO" timestamp="20171004 19:55:53.701">${rc} = 0</msg>
<status starttime="20171004 19:55:52.833" status="PASS" endtime="20171004 19:55:53.701"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:53.702">Length is 0</msg>
<status starttime="20171004 19:55:53.702" status="PASS" endtime="20171004 19:55:53.702"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:53.703">Length is 11</msg>
<status starttime="20171004 19:55:53.702" status="PASS" endtime="20171004 19:55:53.703"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:53.703">${bmc_model} = Witherspoon</msg>
<status starttime="20171004 19:55:52.833" status="PASS" endtime="20171004 19:55:53.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:53.703">BMC Model=Witherspoon</msg>
<status starttime="20171004 19:55:53.703" status="PASS" endtime="20171004 19:55:53.703"></status>
</kw>
<status starttime="20171004 19:55:52.832" status="PASS" endtime="20171004 19:55:53.704"></status>
</kw>
<status starttime="20171004 19:55:52.832" status="PASS" endtime="20171004 19:55:53.704"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:55:53.706">Dictionary does not contain key 'host'.</msg>
<status starttime="20171004 19:55:53.706" status="FAIL" endtime="20171004 19:55:53.706"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:53.706">${has_host} = False</msg>
<status starttime="20171004 19:55:53.705" status="PASS" endtime="20171004 19:55:53.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171004 19:55:53.707" status="PASS" endtime="20171004 19:55:53.708"></status>
</kw>
<status starttime="20171004 19:55:53.707" status="PASS" endtime="20171004 19:55:53.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:53.710">${port_num} = 22</msg>
<status starttime="20171004 19:55:53.710" status="PASS" endtime="20171004 19:55:53.710"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:53.710">${SSH_PORT} = 22</msg>
<status starttime="20171004 19:55:53.710" status="PASS" endtime="20171004 19:55:53.711"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:53.711">${https_num} = 443</msg>
<status starttime="20171004 19:55:53.711" status="PASS" endtime="20171004 19:55:53.711"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:53.712">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20171004 19:55:53.711" status="PASS" endtime="20171004 19:55:53.712"></status>
</kw>
<status starttime="20171004 19:55:53.709" status="PASS" endtime="20171004 19:55:53.712"></status>
</kw>
<status starttime="20171004 19:55:53.708" status="PASS" endtime="20171004 19:55:53.712"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:55:53.713">Dictionary does not contain key 'port'.</msg>
<status starttime="20171004 19:55:53.713" status="FAIL" endtime="20171004 19:55:53.713"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:53.713">${has_port} = False</msg>
<status starttime="20171004 19:55:53.712" status="PASS" endtime="20171004 19:55:53.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171004 19:55:53.715" status="PASS" endtime="20171004 19:55:53.715"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171004 19:55:53.716" status="PASS" endtime="20171004 19:55:53.716"></status>
</kw>
<status starttime="20171004 19:55:53.715" status="PASS" endtime="20171004 19:55:53.716"></status>
</kw>
<status starttime="20171004 19:55:53.714" status="PASS" endtime="20171004 19:55:53.716"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:53.717">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.395">Read output: root@witherspoon:~#</msg>
<status starttime="20171004 19:55:53.716" status="PASS" endtime="20171004 19:55:55.395"></status>
</kw>
<status starttime="20171004 19:55:53.705" status="PASS" endtime="20171004 19:55:55.395"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.396">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.473">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.473">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20171004 19:55:55.473">${stderr} = </msg>
<status starttime="20171004 19:55:55.396" status="PASS" endtime="20171004 19:55:55.473"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.474">Length is 0</msg>
<status starttime="20171004 19:55:55.474" status="PASS" endtime="20171004 19:55:55.474"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.474">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20171004 19:55:55.395" status="PASS" endtime="20171004 19:55:55.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20171004 19:55:55.475" status="PASS" endtime="20171004 19:55:55.475"></status>
</kw>
<status starttime="20171004 19:55:53.705" status="PASS" endtime="20171004 19:55:55.475"></status>
</kw>
<status starttime="20171004 19:55:53.704" status="PASS" endtime="20171004 19:55:55.475"></status>
</kw>
<status starttime="20171004 19:55:48.079" status="PASS" endtime="20171004 19:55:55.475"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/19704/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/19704/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.518">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:55.517" status="PASS" endtime="20171004 19:55:55.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:55.518" status="PASS" endtime="20171004 19:55:55.519"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:55.519" status="PASS" endtime="20171004 19:55:55.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:55.520" status="PASS" endtime="20171004 19:55:55.520"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.716">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:55.521" status="PASS" endtime="20171004 19:55:55.716"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.716">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:55.716">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:55.521" status="PASS" endtime="20171004 19:55:55.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.717">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:55.717" status="PASS" endtime="20171004 19:55:55.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:55.717" status="PASS" endtime="20171004 19:55:55.718"></status>
</kw>
<status starttime="20171004 19:55:55.517" status="PASS" endtime="20171004 19:55:55.718"></status>
</kw>
<status starttime="20171004 19:55:55.516" status="PASS" endtime="20171004 19:55:55.718"></status>
</kw>
<status starttime="20171004 19:55:55.516" status="PASS" endtime="20171004 19:55:55.718"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20171004 19:55:55.719" status="PASS" endtime="20171004 19:55:55.719"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.736">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171004 19:55:55.720" status="PASS" endtime="20171004 19:55:55.736"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.752">${FFDC_DIR_PATH} = </msg>
<status starttime="20171004 19:55:55.736" status="PASS" endtime="20171004 19:55:55.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.755">${cur_time} = 2017-10-04 19:55:55:754366</msg>
<status starttime="20171004 19:55:55.754" status="PASS" endtime="20171004 19:55:55.755"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.756">${cur_time} = 20171004195555754366</msg>
<status starttime="20171004 19:55:55.755" status="PASS" endtime="20171004 19:55:55.756"></status>
</kw>
<status starttime="20171004 19:55:55.753" status="PASS" endtime="20171004 19:55:55.756"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.763">${FFDC_TIME} = 20171004195555754366</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.765">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20171004 19:55:55.764" status="PASS" endtime="20171004 19:55:55.765"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.765">${suite_name} = 20171004195555754366_TestsSecurityTestSsl</msg>
<status starttime="20171004 19:55:55.765" status="PASS" endtime="20171004 19:55:55.765"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.766">${test_name} = TestSSLConnection</msg>
<status starttime="20171004 19:55:55.766" status="PASS" endtime="20171004 19:55:55.766"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.767">${test_name} = 20171004195555754366_TestSSLConnection</msg>
<status starttime="20171004 19:55:55.766" status="PASS" endtime="20171004 19:55:55.767"></status>
</kw>
<status starttime="20171004 19:55:55.764" status="PASS" endtime="20171004 19:55:55.767"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.768">${FFDC_DIR_PATH} = /tmp/fspcibld/19704/obmc-robot/logs/20171004195555754366_TestsSecurityTestSsl/20171004195555754366_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20171004 19:55:55.776">${FFDC_PREFIX} = 20171004195555754366_</msg>
<status starttime="20171004 19:55:55.753" status="PASS" endtime="20171004 19:55:55.776"></status>
</kw>
<status starttime="20171004 19:55:55.752" status="PASS" endtime="20171004 19:55:55.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171004 19:55:55.776" status="PASS" endtime="20171004 19:55:55.777"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.778" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs"&gt;/tmp/fspcibld/19704/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20171004 19:55:55.777" status="PASS" endtime="20171004 19:55:55.778"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:55:55.779">File '/tmp/fspcibld/19704/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20171004 19:55:55.779" status="FAIL" endtime="20171004 19:55:55.779"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.779">${exist} = False</msg>
<status starttime="20171004 19:55:55.778" status="PASS" endtime="20171004 19:55:55.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.781" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 19:55:55.780" status="PASS" endtime="20171004 19:55:55.781"></status>
</kw>
<status starttime="20171004 19:55:55.780" status="PASS" endtime="20171004 19:55:55.781"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171004 19:55:55.781" status="PASS" endtime="20171004 19:55:55.781"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.782">${cur_time} = 2017-10-04 19:55:55:782023</msg>
<status starttime="20171004 19:55:55.782" status="PASS" endtime="20171004 19:55:55.782"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.783">${cur_time} = 20171004195555782023</msg>
<status starttime="20171004 19:55:55.782" status="PASS" endtime="20171004 19:55:55.783"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.783">${cur_time} = 20171004195555782023</msg>
<status starttime="20171004 19:55:55.781" status="PASS" endtime="20171004 19:55:55.783"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.784" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 19:55:55.783" status="PASS" endtime="20171004 19:55:55.784"></status>
</kw>
<status starttime="20171004 19:55:55.719" status="PASS" endtime="20171004 19:55:55.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status starttime="20171004 19:55:55.785" status="PASS" endtime="20171004 19:55:55.785"></status>
</kw>
<status starttime="20171004 19:55:55.718" status="PASS" endtime="20171004 19:55:55.785"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" starttime="20171004 19:55:55.515" status="PASS" endtime="20171004 19:55:55.785"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:55.786">Delete All Sessions</msg>
<status starttime="20171004 19:55:55.786" status="PASS" endtime="20171004 19:55:55.786"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20171004 19:55:55.477" status="PASS" endtime="20171004 19:55:55.786"></status>
</suite>
<status starttime="20171004 19:55:55.475" status="PASS" endtime="20171004 19:55:55.787"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/19704/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.829">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 19:55:55.828" status="PASS" endtime="20171004 19:55:55.829"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.829">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 19:55:55.829" status="PASS" endtime="20171004 19:55:55.829"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.830">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 19:55:55.828" status="PASS" endtime="20171004 19:55:55.830"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.831">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 19:55:55.831" status="PASS" endtime="20171004 19:55:55.831"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.832">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 19:55:55.832" status="PASS" endtime="20171004 19:55:55.832"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.833">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 19:55:55.830" status="PASS" endtime="20171004 19:55:55.833"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.834">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171004 19:55:55.834" status="PASS" endtime="20171004 19:55:55.834"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:55.834" status="PASS" endtime="20171004 19:55:55.835"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.840">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.843">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 19:55:55.843">${output} = /tmp/fspcibld/19704/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171004 19:55:55.835" status="PASS" endtime="20171004 19:55:55.843"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171004 19:55:55.846" status="PASS" endtime="20171004 19:55:55.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171004 19:55:55.848" status="PASS" endtime="20171004 19:55:55.848"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.848">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171004 19:55:55.847" status="PASS" endtime="20171004 19:55:55.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.849">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 19:55:55.849" status="PASS" endtime="20171004 19:55:55.849"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.850">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 19:55:55.834" status="PASS" endtime="20171004 19:55:55.850"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.850">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status starttime="20171004 19:55:55.850" status="PASS" endtime="20171004 19:55:55.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.851">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171004 19:55:55.850" status="PASS" endtime="20171004 19:55:55.851"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:55.851" status="PASS" endtime="20171004 19:55:55.882"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.887">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.902">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 19:55:55.902">${os_con_pid} = </msg>
<status starttime="20171004 19:55:55.882" status="PASS" endtime="20171004 19:55:55.902"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171004 19:55:55.904" status="PASS" endtime="20171004 19:55:55.905"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.905">${os_con_pid} = </msg>
<status starttime="20171004 19:55:55.833" status="PASS" endtime="20171004 19:55:55.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.906">${cmd_buf} = kill -9 </msg>
<status starttime="20171004 19:55:55.906" status="PASS" endtime="20171004 19:55:55.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:55.906" status="PASS" endtime="20171004 19:55:55.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.907">${rc} = None</msg>
<msg level="INFO" timestamp="20171004 19:55:55.907">${output} = None</msg>
<status starttime="20171004 19:55:55.907" status="PASS" endtime="20171004 19:55:55.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171004 19:55:55.908" status="PASS" endtime="20171004 19:55:55.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:55:55.910">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status starttime="20171004 19:55:55.910" status="FAIL" endtime="20171004 19:55:55.910"></status>
</kw>
<status starttime="20171004 19:55:55.909" status="PASS" endtime="20171004 19:55:55.910"></status>
</kw>
<status starttime="20171004 19:55:55.908" status="PASS" endtime="20171004 19:55:55.910"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.911">${output} = </msg>
<status starttime="20171004 19:55:55.911" status="PASS" endtime="20171004 19:55:55.911"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.912">${loc_quiet} = 1</msg>
<status starttime="20171004 19:55:55.911" status="PASS" endtime="20171004 19:55:55.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20171004 19:55:55.912" status="PASS" endtime="20171004 19:55:55.966"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.967">${rc} = 1</msg>
<msg level="INFO" timestamp="20171004 19:55:55.967">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status starttime="20171004 19:55:55.912" status="PASS" endtime="20171004 19:55:55.967"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.967">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status starttime="20171004 19:55:55.830" status="PASS" endtime="20171004 19:55:55.967"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:55.969" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 19:55:55.969" status="PASS" endtime="20171004 19:55:55.969"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.970">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171004 19:55:55.970" status="PASS" endtime="20171004 19:55:55.971"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:55.971" status="PASS" endtime="20171004 19:55:55.971"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.974">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.977">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 19:55:55.978">${output} = /tmp/fspcibld/19704/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171004 19:55:55.971" status="PASS" endtime="20171004 19:55:55.978"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171004 19:55:55.980" status="PASS" endtime="20171004 19:55:55.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171004 19:55:55.985" status="PASS" endtime="20171004 19:55:55.985"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.985">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171004 19:55:55.983" status="PASS" endtime="20171004 19:55:55.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.988">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 19:55:55.986" status="PASS" endtime="20171004 19:55:55.988"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:55.988">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 19:55:55.970" status="PASS" endtime="20171004 19:55:55.988"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.989">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status starttime="20171004 19:55:55.989" status="PASS" endtime="20171004 19:55:55.989"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:55.989" status="PASS" endtime="20171004 19:55:55.990"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:55.993">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20171004 19:55:55.996">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 19:55:55.996">${output} = </msg>
<status starttime="20171004 19:55:55.990" status="PASS" endtime="20171004 19:55:55.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171004 19:55:55.999" status="PASS" endtime="20171004 19:55:56.002"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.002">Slept 1 second</msg>
<status starttime="20171004 19:55:56.002" status="PASS" endtime="20171004 19:55:57.003"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.005">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171004 19:55:57.004" status="PASS" endtime="20171004 19:55:57.005"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:57.005" status="PASS" endtime="20171004 19:55:57.005"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.008">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:57.015">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 19:55:57.015">${output} = /tmp/fspcibld/19704/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171004 19:55:57.006" status="PASS" endtime="20171004 19:55:57.016"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171004 19:55:57.018" status="PASS" endtime="20171004 19:55:57.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171004 19:55:57.021" status="PASS" endtime="20171004 19:55:57.021"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:57.021">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171004 19:55:57.020" status="PASS" endtime="20171004 19:55:57.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.023">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 19:55:57.022" status="PASS" endtime="20171004 19:55:57.023"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:57.023">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 19:55:57.004" status="PASS" endtime="20171004 19:55:57.023"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.024">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status starttime="20171004 19:55:57.023" status="PASS" endtime="20171004 19:55:57.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.025">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171004 19:55:57.024" status="PASS" endtime="20171004 19:55:57.025"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 19:55:57.025" status="PASS" endtime="20171004 19:55:57.025"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.033">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 19:55:57.037">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 19:55:57.037">${os_con_pid} = 202</msg>
<status starttime="20171004 19:55:57.025" status="PASS" endtime="20171004 19:55:57.037"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171004 19:55:57.040" status="PASS" endtime="20171004 19:55:57.041"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:57.041">${os_con_pid} = 202</msg>
<status starttime="20171004 19:55:57.003" status="PASS" endtime="20171004 19:55:57.041"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.042">Length is 3</msg>
<status starttime="20171004 19:55:57.042" status="PASS" endtime="20171004 19:55:57.042"></status>
</kw>
<status starttime="20171004 19:55:55.827" status="PASS" endtime="20171004 19:55:57.042"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.043">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.046">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20171004 19:55:57.045" status="PASS" endtime="20171004 19:55:57.046"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.047">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171004 19:55:57.047" status="PASS" endtime="20171004 19:55:57.047"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.051">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:57.051" status="PASS" endtime="20171004 19:55:57.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:57.052" status="PASS" endtime="20171004 19:55:57.052"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.053">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:57.053" status="PASS" endtime="20171004 19:55:57.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.054">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:57.053" status="PASS" endtime="20171004 19:55:57.054"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:57.055" status="PASS" endtime="20171004 19:55:57.283"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:57.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:57.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:57.054" status="PASS" endtime="20171004 19:55:57.283"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:57.284" status="PASS" endtime="20171004 19:55:57.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:57.285" status="PASS" endtime="20171004 19:55:57.285"></status>
</kw>
<status starttime="20171004 19:55:57.050" status="PASS" endtime="20171004 19:55:57.285"></status>
</kw>
<status starttime="20171004 19:55:57.049" status="PASS" endtime="20171004 19:55:57.285"></status>
</kw>
<status starttime="20171004 19:55:57.048" status="PASS" endtime="20171004 19:55:57.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.286">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171004 19:55:57.286" status="PASS" endtime="20171004 19:55:57.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:57.286" status="PASS" endtime="20171004 19:55:57.287"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171004 19:55:57.287" status="PASS" endtime="20171004 19:55:57.287"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.289">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20171004 19:55:57.288" status="PASS" endtime="20171004 19:55:57.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171004 19:55:57.290" status="PASS" endtime="20171004 19:55:57.291"></status>
</kw>
<status starttime="20171004 19:55:57.290" status="PASS" endtime="20171004 19:55:57.291"></status>
</kw>
<status starttime="20171004 19:55:57.288" status="PASS" endtime="20171004 19:55:57.291"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.593">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171004 19:55:57.593">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:57.291" status="PASS" endtime="20171004 19:55:57.593"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.595">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:57.594" status="PASS" endtime="20171004 19:55:57.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.595">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:57.595" status="PASS" endtime="20171004 19:55:57.596"></status>
</kw>
<status starttime="20171004 19:55:57.595" status="PASS" endtime="20171004 19:55:57.596"></status>
</kw>
<status starttime="20171004 19:55:57.593" status="PASS" endtime="20171004 19:55:57.596"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:57.596">Delete All Sessions</msg>
<status starttime="20171004 19:55:57.596" status="PASS" endtime="20171004 19:55:57.596"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:57.596">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:57.047" status="PASS" endtime="20171004 19:55:57.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:57.597" status="PASS" endtime="20171004 19:55:57.597"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.598">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:57.598">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:57.598">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:57.598" status="PASS" endtime="20171004 19:55:57.598"></status>
</kw>
<status starttime="20171004 19:55:57.046" status="PASS" endtime="20171004 19:55:57.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171004 19:55:57.599" status="PASS" endtime="20171004 19:55:57.599"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:57.608">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:57.607" status="PASS" endtime="20171004 19:55:57.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.609">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:57.609" status="PASS" endtime="20171004 19:55:57.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.610">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:57.609" status="PASS" endtime="20171004 19:55:57.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:57.610">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:57.610" status="PASS" endtime="20171004 19:55:57.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:57.611" status="PASS" endtime="20171004 19:55:58.465"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:58.465">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:58.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:57.611" status="PASS" endtime="20171004 19:55:58.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:58.466" status="PASS" endtime="20171004 19:55:58.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:58.466" status="PASS" endtime="20171004 19:55:58.467"></status>
</kw>
<status starttime="20171004 19:55:57.606" status="PASS" endtime="20171004 19:55:58.467"></status>
</kw>
<status starttime="20171004 19:55:57.606" status="PASS" endtime="20171004 19:55:58.467"></status>
</kw>
<status starttime="20171004 19:55:57.605" status="PASS" endtime="20171004 19:55:58.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.468">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:55:58.467" status="PASS" endtime="20171004 19:55:58.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.470">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:55:58.469" status="PASS" endtime="20171004 19:55:58.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.471">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:55:58.470" status="PASS" endtime="20171004 19:55:58.471"></status>
</kw>
<status starttime="20171004 19:55:58.470" status="PASS" endtime="20171004 19:55:58.471"></status>
</kw>
<status starttime="20171004 19:55:58.468" status="PASS" endtime="20171004 19:55:58.471"></status>
</kw>
<status starttime="20171004 19:55:58.468" status="PASS" endtime="20171004 19:55:58.471"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.676">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:58.676">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:58.471" status="PASS" endtime="20171004 19:55:58.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.678">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:58.677" status="PASS" endtime="20171004 19:55:58.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.679">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:58.678" status="PASS" endtime="20171004 19:55:58.679"></status>
</kw>
<status starttime="20171004 19:55:58.678" status="PASS" endtime="20171004 19:55:58.679"></status>
</kw>
<status starttime="20171004 19:55:58.677" status="PASS" endtime="20171004 19:55:58.679"></status>
</kw>
<status starttime="20171004 19:55:58.676" status="PASS" endtime="20171004 19:55:58.679"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:58.679">Delete All Sessions</msg>
<status starttime="20171004 19:55:58.679" status="PASS" endtime="20171004 19:55:58.680"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:58.680">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:57.604" status="PASS" endtime="20171004 19:55:58.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:58.680" status="PASS" endtime="20171004 19:55:58.680"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.681">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:58.681">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:58.681">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:58.681" status="PASS" endtime="20171004 19:55:58.681"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:58.681">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:55:57.603" status="PASS" endtime="20171004 19:55:58.682"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:58.682">${power_state} = Off</msg>
<status starttime="20171004 19:55:57.602" status="PASS" endtime="20171004 19:55:58.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171004 19:55:58.682" status="PASS" endtime="20171004 19:55:58.682"></status>
</kw>
<status starttime="20171004 19:55:57.602" status="PASS" endtime="20171004 19:55:58.683"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:58.687">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:58.687" status="PASS" endtime="20171004 19:55:58.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.688">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:58.687" status="PASS" endtime="20171004 19:55:58.688"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.688">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:58.688" status="PASS" endtime="20171004 19:55:58.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:58.689">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:58.689" status="PASS" endtime="20171004 19:55:58.689"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:58.690" status="PASS" endtime="20171004 19:55:59.160"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:59.160">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:59.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:58.689" status="PASS" endtime="20171004 19:55:59.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.161">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:59.161" status="PASS" endtime="20171004 19:55:59.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:59.161" status="PASS" endtime="20171004 19:55:59.162"></status>
</kw>
<status starttime="20171004 19:55:58.686" status="PASS" endtime="20171004 19:55:59.162"></status>
</kw>
<status starttime="20171004 19:55:58.685" status="PASS" endtime="20171004 19:55:59.162"></status>
</kw>
<status starttime="20171004 19:55:58.685" status="PASS" endtime="20171004 19:55:59.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.163">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171004 19:55:59.162" status="PASS" endtime="20171004 19:55:59.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.165">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171004 19:55:59.165" status="PASS" endtime="20171004 19:55:59.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.167">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171004 19:55:59.166" status="PASS" endtime="20171004 19:55:59.167"></status>
</kw>
<status starttime="20171004 19:55:59.166" status="PASS" endtime="20171004 19:55:59.167"></status>
</kw>
<status starttime="20171004 19:55:59.163" status="PASS" endtime="20171004 19:55:59.167"></status>
</kw>
<status starttime="20171004 19:55:59.163" status="PASS" endtime="20171004 19:55:59.167"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.428">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:55:59.428">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:59.167" status="PASS" endtime="20171004 19:55:59.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.430">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:59.429" status="PASS" endtime="20171004 19:55:59.430"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.431">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:55:59.430" status="PASS" endtime="20171004 19:55:59.431"></status>
</kw>
<status starttime="20171004 19:55:59.430" status="PASS" endtime="20171004 19:55:59.431"></status>
</kw>
<status starttime="20171004 19:55:59.429" status="PASS" endtime="20171004 19:55:59.431"></status>
</kw>
<status starttime="20171004 19:55:59.428" status="PASS" endtime="20171004 19:55:59.431"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:55:59.431">Delete All Sessions</msg>
<status starttime="20171004 19:55:59.431" status="PASS" endtime="20171004 19:55:59.432"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:59.432">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:58.684" status="PASS" endtime="20171004 19:55:59.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:59.432" status="PASS" endtime="20171004 19:55:59.433"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.433">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:55:59.433">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:55:59.433">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:55:59.433" status="PASS" endtime="20171004 19:55:59.433"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:59.433">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20171004 19:55:58.683" status="PASS" endtime="20171004 19:55:59.434"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:59.434">${host_state} = Off</msg>
<status starttime="20171004 19:55:58.683" status="PASS" endtime="20171004 19:55:59.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171004 19:55:59.434" status="PASS" endtime="20171004 19:55:59.434"></status>
</kw>
<status starttime="20171004 19:55:57.602" status="PASS" endtime="20171004 19:55:59.435"></status>
</kw>
<status starttime="20171004 19:55:57.601" status="PASS" endtime="20171004 19:55:59.435"></status>
</kw>
<status starttime="20171004 19:55:57.600" status="PASS" endtime="20171004 19:55:59.435"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:59.435">${status} = True</msg>
<status starttime="20171004 19:55:57.600" status="PASS" endtime="20171004 19:55:59.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status starttime="20171004 19:55:59.435" status="PASS" endtime="20171004 19:55:59.436"></status>
</kw>
<status starttime="20171004 19:55:57.044" status="PASS" endtime="20171004 19:55:59.436"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.437">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20171004 19:55:59.436" status="PASS" endtime="20171004 19:55:59.437"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.438">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171004 19:55:59.438" status="PASS" endtime="20171004 19:55:59.438"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.441">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:55:59.440" status="PASS" endtime="20171004 19:55:59.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.442">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:59.441" status="PASS" endtime="20171004 19:55:59.442"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.442">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:55:59.442" status="PASS" endtime="20171004 19:55:59.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.443">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:55:59.442" status="PASS" endtime="20171004 19:55:59.443"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.661">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:55:59.444" status="PASS" endtime="20171004 19:55:59.661"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:55:59.661">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:55:59.661">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:59.443" status="PASS" endtime="20171004 19:55:59.661"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.662">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:59.661" status="PASS" endtime="20171004 19:55:59.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:55:59.662" status="PASS" endtime="20171004 19:55:59.662"></status>
</kw>
<status starttime="20171004 19:55:59.440" status="PASS" endtime="20171004 19:55:59.662"></status>
</kw>
<status starttime="20171004 19:55:59.439" status="PASS" endtime="20171004 19:55:59.663"></status>
</kw>
<status starttime="20171004 19:55:59.439" status="PASS" endtime="20171004 19:55:59.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.663">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171004 19:55:59.663" status="PASS" endtime="20171004 19:55:59.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:55:59.664" status="PASS" endtime="20171004 19:55:59.664"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171004 19:55:59.664" status="PASS" endtime="20171004 19:55:59.665"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:55:59.666">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20171004 19:55:59.665" status="PASS" endtime="20171004 19:55:59.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:55:59.667">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171004 19:55:59.667" status="PASS" endtime="20171004 19:55:59.667"></status>
</kw>
<status starttime="20171004 19:55:59.666" status="PASS" endtime="20171004 19:55:59.667"></status>
</kw>
<status starttime="20171004 19:55:59.665" status="PASS" endtime="20171004 19:55:59.667"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:00.731">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171004 19:56:00.731">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:59.668" status="PASS" endtime="20171004 19:56:00.731"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:00.732">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:00.732" status="PASS" endtime="20171004 19:56:00.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:00.733">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:00.733" status="PASS" endtime="20171004 19:56:00.733"></status>
</kw>
<status starttime="20171004 19:56:00.732" status="PASS" endtime="20171004 19:56:00.733"></status>
</kw>
<status starttime="20171004 19:56:00.731" status="PASS" endtime="20171004 19:56:00.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:56:00.734">Delete All Sessions</msg>
<status starttime="20171004 19:56:00.734" status="PASS" endtime="20171004 19:56:00.734"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:00.734">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:55:59.438" status="PASS" endtime="20171004 19:56:00.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:00.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:00.735" status="PASS" endtime="20171004 19:56:00.735"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:00.735">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:56:00.735">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:56:00.736">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:56:00.735" status="PASS" endtime="20171004 19:56:00.736"></status>
</kw>
<status starttime="20171004 19:55:59.437" status="PASS" endtime="20171004 19:56:00.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171004 19:56:00.736" status="PASS" endtime="20171004 19:56:00.736"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:00.741">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:56:00.741" status="PASS" endtime="20171004 19:56:00.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:00.742">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:56:00.742" status="PASS" endtime="20171004 19:56:00.742"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:00.743">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:56:00.743" status="PASS" endtime="20171004 19:56:00.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:00.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:56:00.743" status="PASS" endtime="20171004 19:56:00.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:03.015">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:56:00.745" status="PASS" endtime="20171004 19:56:03.015"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:03.015">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:56:03.015">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:00.744" status="PASS" endtime="20171004 19:56:03.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:03.016">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:03.015" status="PASS" endtime="20171004 19:56:03.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:03.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:03.016" status="PASS" endtime="20171004 19:56:03.017"></status>
</kw>
<status starttime="20171004 19:56:00.741" status="PASS" endtime="20171004 19:56:03.017"></status>
</kw>
<status starttime="20171004 19:56:00.740" status="PASS" endtime="20171004 19:56:03.017"></status>
</kw>
<status starttime="20171004 19:56:00.739" status="PASS" endtime="20171004 19:56:03.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:03.017">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:56:03.017" status="PASS" endtime="20171004 19:56:03.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:03.020">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:03.019" status="PASS" endtime="20171004 19:56:03.020"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:03.020">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:03.020" status="PASS" endtime="20171004 19:56:03.021"></status>
</kw>
<status starttime="20171004 19:56:03.020" status="PASS" endtime="20171004 19:56:03.021"></status>
</kw>
<status starttime="20171004 19:56:03.018" status="PASS" endtime="20171004 19:56:03.021"></status>
</kw>
<status starttime="20171004 19:56:03.018" status="PASS" endtime="20171004 19:56:03.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171004 19:56:13.034">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171004 19:56:16.115">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:56:16.115">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:03.021" status="PASS" endtime="20171004 19:56:16.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:16.118">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:16.118" status="PASS" endtime="20171004 19:56:16.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:16.120">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:16.119" status="PASS" endtime="20171004 19:56:16.120"></status>
</kw>
<status starttime="20171004 19:56:16.119" status="PASS" endtime="20171004 19:56:16.120"></status>
</kw>
<status starttime="20171004 19:56:16.117" status="PASS" endtime="20171004 19:56:16.120"></status>
</kw>
<status starttime="20171004 19:56:16.116" status="PASS" endtime="20171004 19:56:16.120"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:56:16.121">Delete All Sessions</msg>
<status starttime="20171004 19:56:16.120" status="PASS" endtime="20171004 19:56:16.121"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:16.121">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:00.739" status="PASS" endtime="20171004 19:56:16.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:16.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:16.121" status="PASS" endtime="20171004 19:56:16.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:16.122">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:56:16.122">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:56:16.122">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:56:16.122" status="PASS" endtime="20171004 19:56:16.122"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:16.123">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:56:00.738" status="PASS" endtime="20171004 19:56:16.123"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:16.123">${power_state} = Off</msg>
<status starttime="20171004 19:56:00.738" status="PASS" endtime="20171004 19:56:16.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:56:16.124">On != Off</msg>
<status starttime="20171004 19:56:16.123" status="FAIL" endtime="20171004 19:56:16.124"></status>
</kw>
<status starttime="20171004 19:56:00.737" status="FAIL" endtime="20171004 19:56:16.124"></status>
</kw>
<status starttime="20171004 19:56:00.737" status="FAIL" endtime="20171004 19:56:16.124"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.131">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:56:26.130" status="PASS" endtime="20171004 19:56:26.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.132">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:56:26.132" status="PASS" endtime="20171004 19:56:26.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.133">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:56:26.133" status="PASS" endtime="20171004 19:56:26.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:56:26.133" status="PASS" endtime="20171004 19:56:26.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:56:26.135" status="PASS" endtime="20171004 19:56:26.468"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:26.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:56:26.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:26.135" status="PASS" endtime="20171004 19:56:26.468"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:26.469" status="PASS" endtime="20171004 19:56:26.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:26.469" status="PASS" endtime="20171004 19:56:26.470"></status>
</kw>
<status starttime="20171004 19:56:26.129" status="PASS" endtime="20171004 19:56:26.470"></status>
</kw>
<status starttime="20171004 19:56:26.129" status="PASS" endtime="20171004 19:56:26.470"></status>
</kw>
<status starttime="20171004 19:56:26.128" status="PASS" endtime="20171004 19:56:26.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.471">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:56:26.470" status="PASS" endtime="20171004 19:56:26.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.473">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:26.473" status="PASS" endtime="20171004 19:56:26.474"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.474">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:26.474" status="PASS" endtime="20171004 19:56:26.475"></status>
</kw>
<status starttime="20171004 19:56:26.474" status="PASS" endtime="20171004 19:56:26.475"></status>
</kw>
<status starttime="20171004 19:56:26.472" status="PASS" endtime="20171004 19:56:26.475"></status>
</kw>
<status starttime="20171004 19:56:26.472" status="PASS" endtime="20171004 19:56:26.475"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.536">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:56:26.536">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:26.475" status="PASS" endtime="20171004 19:56:26.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.539">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:26.538" status="PASS" endtime="20171004 19:56:26.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.540">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:26.540" status="PASS" endtime="20171004 19:56:26.540"></status>
</kw>
<status starttime="20171004 19:56:26.539" status="PASS" endtime="20171004 19:56:26.540"></status>
</kw>
<status starttime="20171004 19:56:26.537" status="PASS" endtime="20171004 19:56:26.540"></status>
</kw>
<status starttime="20171004 19:56:26.537" status="PASS" endtime="20171004 19:56:26.541"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:56:26.541">Delete All Sessions</msg>
<status starttime="20171004 19:56:26.541" status="PASS" endtime="20171004 19:56:26.541"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:26.541">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:26.127" status="PASS" endtime="20171004 19:56:26.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:26.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:26.541" status="PASS" endtime="20171004 19:56:26.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:26.542">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:56:26.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:56:26.543">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:56:26.542" status="PASS" endtime="20171004 19:56:26.543"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:26.543">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:56:26.126" status="PASS" endtime="20171004 19:56:26.543"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:26.543">${power_state} = Off</msg>
<status starttime="20171004 19:56:26.126" status="PASS" endtime="20171004 19:56:26.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:56:26.544">On != Off</msg>
<status starttime="20171004 19:56:26.544" status="FAIL" endtime="20171004 19:56:26.544"></status>
</kw>
<status starttime="20171004 19:56:26.125" status="FAIL" endtime="20171004 19:56:26.544"></status>
</kw>
<status starttime="20171004 19:56:26.125" status="FAIL" endtime="20171004 19:56:26.545"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.550">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:56:36.550" status="PASS" endtime="20171004 19:56:36.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:56:36.551" status="PASS" endtime="20171004 19:56:36.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.552">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:56:36.552" status="PASS" endtime="20171004 19:56:36.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:56:36.552" status="PASS" endtime="20171004 19:56:36.553"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.766">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:56:36.554" status="PASS" endtime="20171004 19:56:36.766"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:36.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:56:36.766">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:36.553" status="PASS" endtime="20171004 19:56:36.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.767">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:36.767" status="PASS" endtime="20171004 19:56:36.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:36.767" status="PASS" endtime="20171004 19:56:36.768"></status>
</kw>
<status starttime="20171004 19:56:36.550" status="PASS" endtime="20171004 19:56:36.768"></status>
</kw>
<status starttime="20171004 19:56:36.549" status="PASS" endtime="20171004 19:56:36.768"></status>
</kw>
<status starttime="20171004 19:56:36.548" status="PASS" endtime="20171004 19:56:36.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.769">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:56:36.768" status="PASS" endtime="20171004 19:56:36.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.771">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:36.770" status="PASS" endtime="20171004 19:56:36.771"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.772">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:36.771" status="PASS" endtime="20171004 19:56:36.772"></status>
</kw>
<status starttime="20171004 19:56:36.771" status="PASS" endtime="20171004 19:56:36.772"></status>
</kw>
<status starttime="20171004 19:56:36.769" status="PASS" endtime="20171004 19:56:36.772"></status>
</kw>
<status starttime="20171004 19:56:36.769" status="PASS" endtime="20171004 19:56:36.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.835">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:56:36.836">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:36.772" status="PASS" endtime="20171004 19:56:36.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.840">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:36.837" status="PASS" endtime="20171004 19:56:36.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.841">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:36.841" status="PASS" endtime="20171004 19:56:36.841"></status>
</kw>
<status starttime="20171004 19:56:36.840" status="PASS" endtime="20171004 19:56:36.841"></status>
</kw>
<status starttime="20171004 19:56:36.836" status="PASS" endtime="20171004 19:56:36.841"></status>
</kw>
<status starttime="20171004 19:56:36.836" status="PASS" endtime="20171004 19:56:36.841"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:56:36.842">Delete All Sessions</msg>
<status starttime="20171004 19:56:36.842" status="PASS" endtime="20171004 19:56:36.842"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:36.842">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:36.547" status="PASS" endtime="20171004 19:56:36.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:36.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:36.842" status="PASS" endtime="20171004 19:56:36.843"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:36.843">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:56:36.843">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:56:36.843">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:56:36.843" status="PASS" endtime="20171004 19:56:36.844"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:36.844">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:56:36.547" status="PASS" endtime="20171004 19:56:36.844"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:36.844">${power_state} = Off</msg>
<status starttime="20171004 19:56:36.546" status="PASS" endtime="20171004 19:56:36.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:56:36.845">On != Off</msg>
<status starttime="20171004 19:56:36.844" status="FAIL" endtime="20171004 19:56:36.845"></status>
</kw>
<status starttime="20171004 19:56:36.546" status="FAIL" endtime="20171004 19:56:36.845"></status>
</kw>
<status starttime="20171004 19:56:36.545" status="FAIL" endtime="20171004 19:56:36.845"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:46.851">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:56:46.850" status="PASS" endtime="20171004 19:56:46.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:46.852">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:56:46.851" status="PASS" endtime="20171004 19:56:46.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:46.852">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:56:46.852" status="PASS" endtime="20171004 19:56:46.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:46.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:56:46.853" status="PASS" endtime="20171004 19:56:46.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:47.082">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:56:46.854" status="PASS" endtime="20171004 19:56:47.083"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:47.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:56:47.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:46.853" status="PASS" endtime="20171004 19:56:47.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:47.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:47.083" status="PASS" endtime="20171004 19:56:47.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:47.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:47.084" status="PASS" endtime="20171004 19:56:47.084"></status>
</kw>
<status starttime="20171004 19:56:46.850" status="PASS" endtime="20171004 19:56:47.085"></status>
</kw>
<status starttime="20171004 19:56:46.849" status="PASS" endtime="20171004 19:56:47.085"></status>
</kw>
<status starttime="20171004 19:56:46.849" status="PASS" endtime="20171004 19:56:47.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:47.085">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:56:47.085" status="PASS" endtime="20171004 19:56:47.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:47.087">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:47.087" status="PASS" endtime="20171004 19:56:47.087"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:47.088">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:47.088" status="PASS" endtime="20171004 19:56:47.089"></status>
</kw>
<status starttime="20171004 19:56:47.088" status="PASS" endtime="20171004 19:56:47.089"></status>
</kw>
<status starttime="20171004 19:56:47.086" status="PASS" endtime="20171004 19:56:47.089"></status>
</kw>
<status starttime="20171004 19:56:47.086" status="PASS" endtime="20171004 19:56:47.089"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:47.150">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:56:47.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:47.089" status="PASS" endtime="20171004 19:56:47.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:47.152">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:47.151" status="PASS" endtime="20171004 19:56:47.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:47.153">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:47.153" status="PASS" endtime="20171004 19:56:47.153"></status>
</kw>
<status starttime="20171004 19:56:47.152" status="PASS" endtime="20171004 19:56:47.153"></status>
</kw>
<status starttime="20171004 19:56:47.151" status="PASS" endtime="20171004 19:56:47.153"></status>
</kw>
<status starttime="20171004 19:56:47.150" status="PASS" endtime="20171004 19:56:47.153"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:56:47.154">Delete All Sessions</msg>
<status starttime="20171004 19:56:47.153" status="PASS" endtime="20171004 19:56:47.154"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:47.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:46.848" status="PASS" endtime="20171004 19:56:47.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:47.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:47.154" status="PASS" endtime="20171004 19:56:47.155"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:47.155">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:56:47.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:56:47.155">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:56:47.155" status="PASS" endtime="20171004 19:56:47.155"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:47.156">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:56:46.847" status="PASS" endtime="20171004 19:56:47.156"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:47.156">${power_state} = Off</msg>
<status starttime="20171004 19:56:46.847" status="PASS" endtime="20171004 19:56:47.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:56:47.157">On != Off</msg>
<status starttime="20171004 19:56:47.156" status="FAIL" endtime="20171004 19:56:47.157"></status>
</kw>
<status starttime="20171004 19:56:46.847" status="FAIL" endtime="20171004 19:56:47.157"></status>
</kw>
<status starttime="20171004 19:56:46.846" status="FAIL" endtime="20171004 19:56:47.157"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.163">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:56:57.163" status="PASS" endtime="20171004 19:56:57.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.164">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:56:57.164" status="PASS" endtime="20171004 19:56:57.164"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.165">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:56:57.165" status="PASS" endtime="20171004 19:56:57.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.166">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:56:57.165" status="PASS" endtime="20171004 19:56:57.166"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:56:57.166" status="PASS" endtime="20171004 19:56:57.364"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:57.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:56:57.364">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:57.166" status="PASS" endtime="20171004 19:56:57.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.365">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:57.365" status="PASS" endtime="20171004 19:56:57.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:57.365" status="PASS" endtime="20171004 19:56:57.366"></status>
</kw>
<status starttime="20171004 19:56:57.162" status="PASS" endtime="20171004 19:56:57.366"></status>
</kw>
<status starttime="20171004 19:56:57.161" status="PASS" endtime="20171004 19:56:57.366"></status>
</kw>
<status starttime="20171004 19:56:57.161" status="PASS" endtime="20171004 19:56:57.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.367">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:56:57.366" status="PASS" endtime="20171004 19:56:57.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.369">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:57.368" status="PASS" endtime="20171004 19:56:57.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.370">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:56:57.370" status="PASS" endtime="20171004 19:56:57.370"></status>
</kw>
<status starttime="20171004 19:56:57.369" status="PASS" endtime="20171004 19:56:57.370"></status>
</kw>
<status starttime="20171004 19:56:57.367" status="PASS" endtime="20171004 19:56:57.370"></status>
</kw>
<status starttime="20171004 19:56:57.367" status="PASS" endtime="20171004 19:56:57.370"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:56:57.444">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:57.371" status="PASS" endtime="20171004 19:56:57.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.446">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:57.445" status="PASS" endtime="20171004 19:56:57.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.447">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:56:57.447" status="PASS" endtime="20171004 19:56:57.447"></status>
</kw>
<status starttime="20171004 19:56:57.446" status="PASS" endtime="20171004 19:56:57.447"></status>
</kw>
<status starttime="20171004 19:56:57.445" status="PASS" endtime="20171004 19:56:57.447"></status>
</kw>
<status starttime="20171004 19:56:57.444" status="PASS" endtime="20171004 19:56:57.448"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:56:57.448">Delete All Sessions</msg>
<status starttime="20171004 19:56:57.448" status="PASS" endtime="20171004 19:56:57.448"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:57.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:56:57.160" status="PASS" endtime="20171004 19:56:57.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:56:57.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:56:57.448" status="PASS" endtime="20171004 19:56:57.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:56:57.449">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:56:57.449">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:56:57.450">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:56:57.449" status="PASS" endtime="20171004 19:56:57.450"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:57.450">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:56:57.159" status="PASS" endtime="20171004 19:56:57.450"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:56:57.450">${power_state} = Off</msg>
<status starttime="20171004 19:56:57.159" status="PASS" endtime="20171004 19:56:57.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:56:57.451">On != Off</msg>
<status starttime="20171004 19:56:57.451" status="FAIL" endtime="20171004 19:56:57.451"></status>
</kw>
<status starttime="20171004 19:56:57.159" status="FAIL" endtime="20171004 19:56:57.451"></status>
</kw>
<status starttime="20171004 19:56:57.158" status="FAIL" endtime="20171004 19:56:57.451"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.456">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:57:07.456" status="PASS" endtime="20171004 19:57:07.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:57:07.457" status="PASS" endtime="20171004 19:57:07.457"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.458">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:57:07.458" status="PASS" endtime="20171004 19:57:07.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.459">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:57:07.458" status="PASS" endtime="20171004 19:57:07.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:57:07.460" status="PASS" endtime="20171004 19:57:07.675"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:07.675">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:57:07.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:07.459" status="PASS" endtime="20171004 19:57:07.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:07.676" status="PASS" endtime="20171004 19:57:07.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:07.677" status="PASS" endtime="20171004 19:57:07.677"></status>
</kw>
<status starttime="20171004 19:57:07.456" status="PASS" endtime="20171004 19:57:07.677"></status>
</kw>
<status starttime="20171004 19:57:07.455" status="PASS" endtime="20171004 19:57:07.677"></status>
</kw>
<status starttime="20171004 19:57:07.454" status="PASS" endtime="20171004 19:57:07.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.678">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:57:07.678" status="PASS" endtime="20171004 19:57:07.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.680">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:07.679" status="PASS" endtime="20171004 19:57:07.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.681">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:07.681" status="PASS" endtime="20171004 19:57:07.681"></status>
</kw>
<status starttime="20171004 19:57:07.680" status="PASS" endtime="20171004 19:57:07.681"></status>
</kw>
<status starttime="20171004 19:57:07.679" status="PASS" endtime="20171004 19:57:07.682"></status>
</kw>
<status starttime="20171004 19:57:07.678" status="PASS" endtime="20171004 19:57:07.682"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.744">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:57:07.744">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:07.682" status="PASS" endtime="20171004 19:57:07.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.746">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:07.745" status="PASS" endtime="20171004 19:57:07.746"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.747">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:07.746" status="PASS" endtime="20171004 19:57:07.747"></status>
</kw>
<status starttime="20171004 19:57:07.746" status="PASS" endtime="20171004 19:57:07.747"></status>
</kw>
<status starttime="20171004 19:57:07.745" status="PASS" endtime="20171004 19:57:07.747"></status>
</kw>
<status starttime="20171004 19:57:07.744" status="PASS" endtime="20171004 19:57:07.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:57:07.747">Delete All Sessions</msg>
<status starttime="20171004 19:57:07.747" status="PASS" endtime="20171004 19:57:07.747"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:07.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:07.454" status="PASS" endtime="20171004 19:57:07.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:07.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:07.748" status="PASS" endtime="20171004 19:57:07.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:07.749">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:57:07.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:57:07.749">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:57:07.749" status="PASS" endtime="20171004 19:57:07.749"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:07.749">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:57:07.453" status="PASS" endtime="20171004 19:57:07.749"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:07.750">${power_state} = Off</msg>
<status starttime="20171004 19:57:07.453" status="PASS" endtime="20171004 19:57:07.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:57:07.750">On != Off</msg>
<status starttime="20171004 19:57:07.750" status="FAIL" endtime="20171004 19:57:07.750"></status>
</kw>
<status starttime="20171004 19:57:07.452" status="FAIL" endtime="20171004 19:57:07.751"></status>
</kw>
<status starttime="20171004 19:57:07.452" status="FAIL" endtime="20171004 19:57:07.751"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:17.757">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:57:17.756" status="PASS" endtime="20171004 19:57:17.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:17.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:57:17.757" status="PASS" endtime="20171004 19:57:17.758"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:17.758">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:57:17.758" status="PASS" endtime="20171004 19:57:17.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:17.759">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:57:17.759" status="PASS" endtime="20171004 19:57:17.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:17.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:57:17.760" status="PASS" endtime="20171004 19:57:17.962"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:17.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:57:17.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:17.759" status="PASS" endtime="20171004 19:57:17.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:17.963">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:17.963" status="PASS" endtime="20171004 19:57:17.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:17.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:17.964" status="PASS" endtime="20171004 19:57:17.964"></status>
</kw>
<status starttime="20171004 19:57:17.755" status="PASS" endtime="20171004 19:57:17.964"></status>
</kw>
<status starttime="20171004 19:57:17.755" status="PASS" endtime="20171004 19:57:17.964"></status>
</kw>
<status starttime="20171004 19:57:17.754" status="PASS" endtime="20171004 19:57:17.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:17.965">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:57:17.965" status="PASS" endtime="20171004 19:57:17.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:17.967">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:17.966" status="PASS" endtime="20171004 19:57:17.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:17.968">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:17.968" status="PASS" endtime="20171004 19:57:17.968"></status>
</kw>
<status starttime="20171004 19:57:17.967" status="PASS" endtime="20171004 19:57:17.968"></status>
</kw>
<status starttime="20171004 19:57:17.966" status="PASS" endtime="20171004 19:57:17.968"></status>
</kw>
<status starttime="20171004 19:57:17.965" status="PASS" endtime="20171004 19:57:17.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:18.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:57:18.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:17.969" status="PASS" endtime="20171004 19:57:18.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:18.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:18.067" status="PASS" endtime="20171004 19:57:18.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:18.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:18.069" status="PASS" endtime="20171004 19:57:18.069"></status>
</kw>
<status starttime="20171004 19:57:18.068" status="PASS" endtime="20171004 19:57:18.069"></status>
</kw>
<status starttime="20171004 19:57:18.067" status="PASS" endtime="20171004 19:57:18.070"></status>
</kw>
<status starttime="20171004 19:57:18.066" status="PASS" endtime="20171004 19:57:18.070"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:57:18.070">Delete All Sessions</msg>
<status starttime="20171004 19:57:18.070" status="PASS" endtime="20171004 19:57:18.070"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:18.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:17.753" status="PASS" endtime="20171004 19:57:18.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:18.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:18.071" status="PASS" endtime="20171004 19:57:18.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:18.071">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:57:18.072">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:57:18.072">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:57:18.071" status="PASS" endtime="20171004 19:57:18.072"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:18.072">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:57:17.753" status="PASS" endtime="20171004 19:57:18.072"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:18.072">${power_state} = Off</msg>
<status starttime="20171004 19:57:17.752" status="PASS" endtime="20171004 19:57:18.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:57:18.073">On != Off</msg>
<status starttime="20171004 19:57:18.073" status="FAIL" endtime="20171004 19:57:18.073"></status>
</kw>
<status starttime="20171004 19:57:17.752" status="FAIL" endtime="20171004 19:57:18.073"></status>
</kw>
<status starttime="20171004 19:57:17.751" status="FAIL" endtime="20171004 19:57:18.073"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.079">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:57:28.079" status="PASS" endtime="20171004 19:57:28.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:57:28.080" status="PASS" endtime="20171004 19:57:28.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.081">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:57:28.080" status="PASS" endtime="20171004 19:57:28.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:57:28.081" status="PASS" endtime="20171004 19:57:28.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:57:28.082" status="PASS" endtime="20171004 19:57:28.263"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:28.263">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:57:28.263">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:28.082" status="PASS" endtime="20171004 19:57:28.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.264">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:28.263" status="PASS" endtime="20171004 19:57:28.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:28.264" status="PASS" endtime="20171004 19:57:28.265"></status>
</kw>
<status starttime="20171004 19:57:28.078" status="PASS" endtime="20171004 19:57:28.265"></status>
</kw>
<status starttime="20171004 19:57:28.078" status="PASS" endtime="20171004 19:57:28.265"></status>
</kw>
<status starttime="20171004 19:57:28.077" status="PASS" endtime="20171004 19:57:28.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.266">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:57:28.265" status="PASS" endtime="20171004 19:57:28.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.268">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:28.267" status="PASS" endtime="20171004 19:57:28.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.269">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:28.268" status="PASS" endtime="20171004 19:57:28.269"></status>
</kw>
<status starttime="20171004 19:57:28.268" status="PASS" endtime="20171004 19:57:28.269"></status>
</kw>
<status starttime="20171004 19:57:28.266" status="PASS" endtime="20171004 19:57:28.269"></status>
</kw>
<status starttime="20171004 19:57:28.266" status="PASS" endtime="20171004 19:57:28.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.331">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:57:28.331">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:28.269" status="PASS" endtime="20171004 19:57:28.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.333">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:28.332" status="PASS" endtime="20171004 19:57:28.333"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.334">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:28.334" status="PASS" endtime="20171004 19:57:28.334"></status>
</kw>
<status starttime="20171004 19:57:28.333" status="PASS" endtime="20171004 19:57:28.334"></status>
</kw>
<status starttime="20171004 19:57:28.332" status="PASS" endtime="20171004 19:57:28.334"></status>
</kw>
<status starttime="20171004 19:57:28.331" status="PASS" endtime="20171004 19:57:28.334"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:57:28.335">Delete All Sessions</msg>
<status starttime="20171004 19:57:28.335" status="PASS" endtime="20171004 19:57:28.335"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:28.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:28.076" status="PASS" endtime="20171004 19:57:28.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:28.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:28.335" status="PASS" endtime="20171004 19:57:28.336"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:28.336">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:57:28.337">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:57:28.337">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:57:28.336" status="PASS" endtime="20171004 19:57:28.337"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:28.337">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:57:28.075" status="PASS" endtime="20171004 19:57:28.337"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:28.337">${power_state} = Off</msg>
<status starttime="20171004 19:57:28.075" status="PASS" endtime="20171004 19:57:28.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:57:28.338">On != Off</msg>
<status starttime="20171004 19:57:28.338" status="FAIL" endtime="20171004 19:57:28.338"></status>
</kw>
<status starttime="20171004 19:57:28.075" status="FAIL" endtime="20171004 19:57:28.338"></status>
</kw>
<status starttime="20171004 19:57:28.074" status="FAIL" endtime="20171004 19:57:28.338"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.344">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:57:38.343" status="PASS" endtime="20171004 19:57:38.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.345">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:57:38.344" status="PASS" endtime="20171004 19:57:38.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.345">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:57:38.345" status="PASS" endtime="20171004 19:57:38.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.346">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:57:38.346" status="PASS" endtime="20171004 19:57:38.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.535">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:57:38.347" status="PASS" endtime="20171004 19:57:38.536"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:38.536">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:57:38.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:38.346" status="PASS" endtime="20171004 19:57:38.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.537">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:38.536" status="PASS" endtime="20171004 19:57:38.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:38.537" status="PASS" endtime="20171004 19:57:38.538"></status>
</kw>
<status starttime="20171004 19:57:38.342" status="PASS" endtime="20171004 19:57:38.538"></status>
</kw>
<status starttime="20171004 19:57:38.342" status="PASS" endtime="20171004 19:57:38.538"></status>
</kw>
<status starttime="20171004 19:57:38.341" status="PASS" endtime="20171004 19:57:38.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.538">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:57:38.538" status="PASS" endtime="20171004 19:57:38.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.541">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:38.540" status="PASS" endtime="20171004 19:57:38.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.542">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:38.541" status="PASS" endtime="20171004 19:57:38.542"></status>
</kw>
<status starttime="20171004 19:57:38.541" status="PASS" endtime="20171004 19:57:38.542"></status>
</kw>
<status starttime="20171004 19:57:38.539" status="PASS" endtime="20171004 19:57:38.542"></status>
</kw>
<status starttime="20171004 19:57:38.539" status="PASS" endtime="20171004 19:57:38.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.604">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:57:38.605">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:38.542" status="PASS" endtime="20171004 19:57:38.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.606">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:38.606" status="PASS" endtime="20171004 19:57:38.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.608">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:38.607" status="PASS" endtime="20171004 19:57:38.608"></status>
</kw>
<status starttime="20171004 19:57:38.607" status="PASS" endtime="20171004 19:57:38.608"></status>
</kw>
<status starttime="20171004 19:57:38.605" status="PASS" endtime="20171004 19:57:38.608"></status>
</kw>
<status starttime="20171004 19:57:38.605" status="PASS" endtime="20171004 19:57:38.608"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:57:38.609">Delete All Sessions</msg>
<status starttime="20171004 19:57:38.608" status="PASS" endtime="20171004 19:57:38.609"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:38.609">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:38.341" status="PASS" endtime="20171004 19:57:38.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:38.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:38.609" status="PASS" endtime="20171004 19:57:38.610"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:38.610">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:57:38.610">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:57:38.610">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:57:38.610" status="PASS" endtime="20171004 19:57:38.610"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:38.611">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:57:38.340" status="PASS" endtime="20171004 19:57:38.611"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:38.611">${power_state} = Off</msg>
<status starttime="20171004 19:57:38.340" status="PASS" endtime="20171004 19:57:38.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:57:38.612">On != Off</msg>
<status starttime="20171004 19:57:38.611" status="FAIL" endtime="20171004 19:57:38.612"></status>
</kw>
<status starttime="20171004 19:57:38.339" status="FAIL" endtime="20171004 19:57:38.612"></status>
</kw>
<status starttime="20171004 19:57:38.339" status="FAIL" endtime="20171004 19:57:38.612"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.618">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:57:48.618" status="PASS" endtime="20171004 19:57:48.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:57:48.619" status="PASS" endtime="20171004 19:57:48.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.620">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:57:48.619" status="PASS" endtime="20171004 19:57:48.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.620">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:57:48.620" status="PASS" endtime="20171004 19:57:48.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.803">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:57:48.621" status="PASS" endtime="20171004 19:57:48.804"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:48.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:57:48.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:48.621" status="PASS" endtime="20171004 19:57:48.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.804">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:48.804" status="PASS" endtime="20171004 19:57:48.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:48.805" status="PASS" endtime="20171004 19:57:48.805"></status>
</kw>
<status starttime="20171004 19:57:48.617" status="PASS" endtime="20171004 19:57:48.805"></status>
</kw>
<status starttime="20171004 19:57:48.616" status="PASS" endtime="20171004 19:57:48.806"></status>
</kw>
<status starttime="20171004 19:57:48.615" status="PASS" endtime="20171004 19:57:48.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.806">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:57:48.806" status="PASS" endtime="20171004 19:57:48.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.808">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:48.808" status="PASS" endtime="20171004 19:57:48.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.809">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:48.809" status="PASS" endtime="20171004 19:57:48.809"></status>
</kw>
<status starttime="20171004 19:57:48.809" status="PASS" endtime="20171004 19:57:48.809"></status>
</kw>
<status starttime="20171004 19:57:48.807" status="PASS" endtime="20171004 19:57:48.810"></status>
</kw>
<status starttime="20171004 19:57:48.807" status="PASS" endtime="20171004 19:57:48.810"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.883">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:57:48.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:48.810" status="PASS" endtime="20171004 19:57:48.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.885">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:48.884" status="PASS" endtime="20171004 19:57:48.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.886">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:48.885" status="PASS" endtime="20171004 19:57:48.886"></status>
</kw>
<status starttime="20171004 19:57:48.885" status="PASS" endtime="20171004 19:57:48.886"></status>
</kw>
<status starttime="20171004 19:57:48.884" status="PASS" endtime="20171004 19:57:48.886"></status>
</kw>
<status starttime="20171004 19:57:48.883" status="PASS" endtime="20171004 19:57:48.886"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:57:48.886">Delete All Sessions</msg>
<status starttime="20171004 19:57:48.886" status="PASS" endtime="20171004 19:57:48.887"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:48.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:48.615" status="PASS" endtime="20171004 19:57:48.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:48.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:48.887" status="PASS" endtime="20171004 19:57:48.887"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:48.888">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:57:48.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:57:48.888">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:57:48.888" status="PASS" endtime="20171004 19:57:48.888"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:48.888">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:57:48.614" status="PASS" endtime="20171004 19:57:48.888"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:48.889">${power_state} = Off</msg>
<status starttime="20171004 19:57:48.614" status="PASS" endtime="20171004 19:57:48.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:57:48.889">On != Off</msg>
<status starttime="20171004 19:57:48.889" status="FAIL" endtime="20171004 19:57:48.889"></status>
</kw>
<status starttime="20171004 19:57:48.613" status="FAIL" endtime="20171004 19:57:48.890"></status>
</kw>
<status starttime="20171004 19:57:48.613" status="FAIL" endtime="20171004 19:57:48.890"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:58.895">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:57:58.895" status="PASS" endtime="20171004 19:57:58.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:58.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:57:58.896" status="PASS" endtime="20171004 19:57:58.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:58.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:57:58.897" status="PASS" endtime="20171004 19:57:58.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:58.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:57:58.898" status="PASS" endtime="20171004 19:57:58.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:59.089">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:57:58.899" status="PASS" endtime="20171004 19:57:59.089"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:59.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:57:59.089">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:58.898" status="PASS" endtime="20171004 19:57:59.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:59.090">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:59.089" status="PASS" endtime="20171004 19:57:59.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:59.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:59.090" status="PASS" endtime="20171004 19:57:59.090"></status>
</kw>
<status starttime="20171004 19:57:58.894" status="PASS" endtime="20171004 19:57:59.091"></status>
</kw>
<status starttime="20171004 19:57:58.894" status="PASS" endtime="20171004 19:57:59.091"></status>
</kw>
<status starttime="20171004 19:57:58.893" status="PASS" endtime="20171004 19:57:59.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:59.091">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:57:59.091" status="PASS" endtime="20171004 19:57:59.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:59.093">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:59.093" status="PASS" endtime="20171004 19:57:59.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:59.094">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:57:59.094" status="PASS" endtime="20171004 19:57:59.094"></status>
</kw>
<status starttime="20171004 19:57:59.094" status="PASS" endtime="20171004 19:57:59.095"></status>
</kw>
<status starttime="20171004 19:57:59.092" status="PASS" endtime="20171004 19:57:59.095"></status>
</kw>
<status starttime="20171004 19:57:59.092" status="PASS" endtime="20171004 19:57:59.095"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:59.156">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:57:59.157">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:59.095" status="PASS" endtime="20171004 19:57:59.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:59.158">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:59.158" status="PASS" endtime="20171004 19:57:59.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:59.164">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:57:59.164" status="PASS" endtime="20171004 19:57:59.164"></status>
</kw>
<status starttime="20171004 19:57:59.159" status="PASS" endtime="20171004 19:57:59.164"></status>
</kw>
<status starttime="20171004 19:57:59.157" status="PASS" endtime="20171004 19:57:59.165"></status>
</kw>
<status starttime="20171004 19:57:59.157" status="PASS" endtime="20171004 19:57:59.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:57:59.165">Delete All Sessions</msg>
<status starttime="20171004 19:57:59.165" status="PASS" endtime="20171004 19:57:59.165"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:59.165">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:57:58.892" status="PASS" endtime="20171004 19:57:59.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:57:59.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:57:59.166" status="PASS" endtime="20171004 19:57:59.166"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:57:59.167">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:57:59.167">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:57:59.167">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:57:59.166" status="PASS" endtime="20171004 19:57:59.167"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:59.168">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:57:58.892" status="PASS" endtime="20171004 19:57:59.168"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:57:59.168">${power_state} = Off</msg>
<status starttime="20171004 19:57:58.891" status="PASS" endtime="20171004 19:57:59.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:57:59.169">On != Off</msg>
<status starttime="20171004 19:57:59.168" status="FAIL" endtime="20171004 19:57:59.169"></status>
</kw>
<status starttime="20171004 19:57:58.891" status="FAIL" endtime="20171004 19:57:59.169"></status>
</kw>
<status starttime="20171004 19:57:58.890" status="FAIL" endtime="20171004 19:57:59.169"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.174">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:58:09.174" status="PASS" endtime="20171004 19:58:09.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.175">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:58:09.175" status="PASS" endtime="20171004 19:58:09.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.176">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:58:09.175" status="PASS" endtime="20171004 19:58:09.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:58:09.176" status="PASS" endtime="20171004 19:58:09.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.374">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:58:09.178" status="PASS" endtime="20171004 19:58:09.375"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:09.375">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:58:09.375">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:09.177" status="PASS" endtime="20171004 19:58:09.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.376">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:09.375" status="PASS" endtime="20171004 19:58:09.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:09.376" status="PASS" endtime="20171004 19:58:09.376"></status>
</kw>
<status starttime="20171004 19:58:09.173" status="PASS" endtime="20171004 19:58:09.378"></status>
</kw>
<status starttime="20171004 19:58:09.173" status="PASS" endtime="20171004 19:58:09.378"></status>
</kw>
<status starttime="20171004 19:58:09.172" status="PASS" endtime="20171004 19:58:09.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.379">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:58:09.378" status="PASS" endtime="20171004 19:58:09.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.382">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:09.381" status="PASS" endtime="20171004 19:58:09.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.382">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:09.382" status="PASS" endtime="20171004 19:58:09.383"></status>
</kw>
<status starttime="20171004 19:58:09.382" status="PASS" endtime="20171004 19:58:09.383"></status>
</kw>
<status starttime="20171004 19:58:09.380" status="PASS" endtime="20171004 19:58:09.383"></status>
</kw>
<status starttime="20171004 19:58:09.379" status="PASS" endtime="20171004 19:58:09.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.461">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:58:09.461">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:09.383" status="PASS" endtime="20171004 19:58:09.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:09.463" status="PASS" endtime="20171004 19:58:09.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:09.464" status="PASS" endtime="20171004 19:58:09.464"></status>
</kw>
<status starttime="20171004 19:58:09.463" status="PASS" endtime="20171004 19:58:09.464"></status>
</kw>
<status starttime="20171004 19:58:09.462" status="PASS" endtime="20171004 19:58:09.464"></status>
</kw>
<status starttime="20171004 19:58:09.462" status="PASS" endtime="20171004 19:58:09.465"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:58:09.465">Delete All Sessions</msg>
<status starttime="20171004 19:58:09.465" status="PASS" endtime="20171004 19:58:09.465"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:09.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:09.171" status="PASS" endtime="20171004 19:58:09.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:09.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:09.465" status="PASS" endtime="20171004 19:58:09.466"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:09.467">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:58:09.467">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:58:09.467">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:58:09.466" status="PASS" endtime="20171004 19:58:09.467"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:09.467">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:58:09.171" status="PASS" endtime="20171004 19:58:09.467"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:09.467">${power_state} = Off</msg>
<status starttime="20171004 19:58:09.171" status="PASS" endtime="20171004 19:58:09.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:58:09.468">On != Off</msg>
<status starttime="20171004 19:58:09.468" status="FAIL" endtime="20171004 19:58:09.468"></status>
</kw>
<status starttime="20171004 19:58:09.170" status="FAIL" endtime="20171004 19:58:09.468"></status>
</kw>
<status starttime="20171004 19:58:09.170" status="FAIL" endtime="20171004 19:58:09.468"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.474">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:58:19.474" status="PASS" endtime="20171004 19:58:19.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:58:19.475" status="PASS" endtime="20171004 19:58:19.475"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.476">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:58:19.475" status="PASS" endtime="20171004 19:58:19.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.476">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:58:19.476" status="PASS" endtime="20171004 19:58:19.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.673">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:58:19.477" status="PASS" endtime="20171004 19:58:19.673"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:19.673">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:58:19.673">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:19.477" status="PASS" endtime="20171004 19:58:19.673"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.674">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:19.674" status="PASS" endtime="20171004 19:58:19.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:19.674" status="PASS" endtime="20171004 19:58:19.675"></status>
</kw>
<status starttime="20171004 19:58:19.473" status="PASS" endtime="20171004 19:58:19.675"></status>
</kw>
<status starttime="20171004 19:58:19.472" status="PASS" endtime="20171004 19:58:19.675"></status>
</kw>
<status starttime="20171004 19:58:19.472" status="PASS" endtime="20171004 19:58:19.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.676">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:58:19.675" status="PASS" endtime="20171004 19:58:19.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.678">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:19.677" status="PASS" endtime="20171004 19:58:19.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.679">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:19.679" status="PASS" endtime="20171004 19:58:19.679"></status>
</kw>
<status starttime="20171004 19:58:19.678" status="PASS" endtime="20171004 19:58:19.679"></status>
</kw>
<status starttime="20171004 19:58:19.676" status="PASS" endtime="20171004 19:58:19.679"></status>
</kw>
<status starttime="20171004 19:58:19.676" status="PASS" endtime="20171004 19:58:19.679"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.751">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:58:19.751">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:19.680" status="PASS" endtime="20171004 19:58:19.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.753">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:19.752" status="PASS" endtime="20171004 19:58:19.753"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.754">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:19.753" status="PASS" endtime="20171004 19:58:19.754"></status>
</kw>
<status starttime="20171004 19:58:19.753" status="PASS" endtime="20171004 19:58:19.754"></status>
</kw>
<status starttime="20171004 19:58:19.752" status="PASS" endtime="20171004 19:58:19.754"></status>
</kw>
<status starttime="20171004 19:58:19.751" status="PASS" endtime="20171004 19:58:19.754"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:58:19.755">Delete All Sessions</msg>
<status starttime="20171004 19:58:19.755" status="PASS" endtime="20171004 19:58:19.755"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:19.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:19.471" status="PASS" endtime="20171004 19:58:19.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:19.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:19.755" status="PASS" endtime="20171004 19:58:19.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:19.757">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:58:19.757">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:58:19.757">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:58:19.756" status="PASS" endtime="20171004 19:58:19.757"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:19.757">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:58:19.470" status="PASS" endtime="20171004 19:58:19.757"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:19.757">${power_state} = Off</msg>
<status starttime="20171004 19:58:19.470" status="PASS" endtime="20171004 19:58:19.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:58:19.758">On != Off</msg>
<status starttime="20171004 19:58:19.758" status="FAIL" endtime="20171004 19:58:19.758"></status>
</kw>
<status starttime="20171004 19:58:19.470" status="FAIL" endtime="20171004 19:58:19.758"></status>
</kw>
<status starttime="20171004 19:58:19.469" status="FAIL" endtime="20171004 19:58:19.758"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:29.764">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:58:29.764" status="PASS" endtime="20171004 19:58:29.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:29.765">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:58:29.765" status="PASS" endtime="20171004 19:58:29.765"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:29.766">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:58:29.765" status="PASS" endtime="20171004 19:58:29.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:29.766">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:58:29.766" status="PASS" endtime="20171004 19:58:29.766"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:29.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:58:29.767" status="PASS" endtime="20171004 19:58:29.964"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:29.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:58:29.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:29.767" status="PASS" endtime="20171004 19:58:29.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:29.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:29.964" status="PASS" endtime="20171004 19:58:29.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:29.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:29.965" status="PASS" endtime="20171004 19:58:29.966"></status>
</kw>
<status starttime="20171004 19:58:29.763" status="PASS" endtime="20171004 19:58:29.966"></status>
</kw>
<status starttime="20171004 19:58:29.763" status="PASS" endtime="20171004 19:58:29.966"></status>
</kw>
<status starttime="20171004 19:58:29.762" status="PASS" endtime="20171004 19:58:29.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:29.967">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:58:29.966" status="PASS" endtime="20171004 19:58:29.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:29.969">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:29.968" status="PASS" endtime="20171004 19:58:29.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:29.970">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:29.969" status="PASS" endtime="20171004 19:58:29.970"></status>
</kw>
<status starttime="20171004 19:58:29.969" status="PASS" endtime="20171004 19:58:29.970"></status>
</kw>
<status starttime="20171004 19:58:29.967" status="PASS" endtime="20171004 19:58:29.970"></status>
</kw>
<status starttime="20171004 19:58:29.967" status="PASS" endtime="20171004 19:58:29.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:30.032">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:58:30.032">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:29.970" status="PASS" endtime="20171004 19:58:30.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:30.034">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:30.034" status="PASS" endtime="20171004 19:58:30.034"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:30.035">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:30.035" status="PASS" endtime="20171004 19:58:30.035"></status>
</kw>
<status starttime="20171004 19:58:30.034" status="PASS" endtime="20171004 19:58:30.035"></status>
</kw>
<status starttime="20171004 19:58:30.033" status="PASS" endtime="20171004 19:58:30.036"></status>
</kw>
<status starttime="20171004 19:58:30.033" status="PASS" endtime="20171004 19:58:30.036"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:58:30.036">Delete All Sessions</msg>
<status starttime="20171004 19:58:30.036" status="PASS" endtime="20171004 19:58:30.036"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:30.036">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:29.761" status="PASS" endtime="20171004 19:58:30.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:30.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:30.037" status="PASS" endtime="20171004 19:58:30.037"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:30.038">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:58:30.038">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:58:30.038">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:58:30.037" status="PASS" endtime="20171004 19:58:30.038"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:30.038">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:58:29.761" status="PASS" endtime="20171004 19:58:30.038"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:30.038">${power_state} = Off</msg>
<status starttime="20171004 19:58:29.760" status="PASS" endtime="20171004 19:58:30.038"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:58:30.039">On != Off</msg>
<status starttime="20171004 19:58:30.039" status="FAIL" endtime="20171004 19:58:30.039"></status>
</kw>
<status starttime="20171004 19:58:29.760" status="FAIL" endtime="20171004 19:58:30.039"></status>
</kw>
<status starttime="20171004 19:58:29.759" status="FAIL" endtime="20171004 19:58:30.039"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.045">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:58:40.045" status="PASS" endtime="20171004 19:58:40.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:58:40.046" status="PASS" endtime="20171004 19:58:40.046"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.047">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:58:40.046" status="PASS" endtime="20171004 19:58:40.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:58:40.047" status="PASS" endtime="20171004 19:58:40.047"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.239">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:58:40.048" status="PASS" endtime="20171004 19:58:40.239"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:40.239">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:58:40.239">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:40.048" status="PASS" endtime="20171004 19:58:40.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.240">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:40.239" status="PASS" endtime="20171004 19:58:40.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:40.240" status="PASS" endtime="20171004 19:58:40.241"></status>
</kw>
<status starttime="20171004 19:58:40.044" status="PASS" endtime="20171004 19:58:40.241"></status>
</kw>
<status starttime="20171004 19:58:40.043" status="PASS" endtime="20171004 19:58:40.241"></status>
</kw>
<status starttime="20171004 19:58:40.043" status="PASS" endtime="20171004 19:58:40.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.241">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:58:40.241" status="PASS" endtime="20171004 19:58:40.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.244">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:40.243" status="PASS" endtime="20171004 19:58:40.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.245">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:40.245" status="PASS" endtime="20171004 19:58:40.245"></status>
</kw>
<status starttime="20171004 19:58:40.244" status="PASS" endtime="20171004 19:58:40.245"></status>
</kw>
<status starttime="20171004 19:58:40.243" status="PASS" endtime="20171004 19:58:40.245"></status>
</kw>
<status starttime="20171004 19:58:40.242" status="PASS" endtime="20171004 19:58:40.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.319">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:58:40.320">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:40.246" status="PASS" endtime="20171004 19:58:40.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.322">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:40.321" status="PASS" endtime="20171004 19:58:40.322"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.323">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:40.322" status="PASS" endtime="20171004 19:58:40.323"></status>
</kw>
<status starttime="20171004 19:58:40.322" status="PASS" endtime="20171004 19:58:40.323"></status>
</kw>
<status starttime="20171004 19:58:40.321" status="PASS" endtime="20171004 19:58:40.323"></status>
</kw>
<status starttime="20171004 19:58:40.320" status="PASS" endtime="20171004 19:58:40.323"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:58:40.324">Delete All Sessions</msg>
<status starttime="20171004 19:58:40.324" status="PASS" endtime="20171004 19:58:40.324"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:40.324">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:40.042" status="PASS" endtime="20171004 19:58:40.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:40.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:40.324" status="PASS" endtime="20171004 19:58:40.325"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:40.326">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:58:40.326">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:58:40.326">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:58:40.325" status="PASS" endtime="20171004 19:58:40.326"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:40.326">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:58:40.041" status="PASS" endtime="20171004 19:58:40.326"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:40.327">${power_state} = Off</msg>
<status starttime="20171004 19:58:40.041" status="PASS" endtime="20171004 19:58:40.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:58:40.328">On != Off</msg>
<status starttime="20171004 19:58:40.327" status="FAIL" endtime="20171004 19:58:40.328"></status>
</kw>
<status starttime="20171004 19:58:40.040" status="FAIL" endtime="20171004 19:58:40.328"></status>
</kw>
<status starttime="20171004 19:58:40.040" status="FAIL" endtime="20171004 19:58:40.328"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.333">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:58:50.333" status="PASS" endtime="20171004 19:58:50.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.334">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:58:50.334" status="PASS" endtime="20171004 19:58:50.335"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.335">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:58:50.335" status="PASS" endtime="20171004 19:58:50.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.336">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:58:50.335" status="PASS" endtime="20171004 19:58:50.336"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.544">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:58:50.337" status="PASS" endtime="20171004 19:58:50.544"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:50.544">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:58:50.544">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:50.336" status="PASS" endtime="20171004 19:58:50.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.545">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:50.544" status="PASS" endtime="20171004 19:58:50.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:50.545" status="PASS" endtime="20171004 19:58:50.546"></status>
</kw>
<status starttime="20171004 19:58:50.333" status="PASS" endtime="20171004 19:58:50.546"></status>
</kw>
<status starttime="20171004 19:58:50.332" status="PASS" endtime="20171004 19:58:50.546"></status>
</kw>
<status starttime="20171004 19:58:50.331" status="PASS" endtime="20171004 19:58:50.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.547">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:58:50.546" status="PASS" endtime="20171004 19:58:50.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.549">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:50.548" status="PASS" endtime="20171004 19:58:50.549"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.550">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:58:50.549" status="PASS" endtime="20171004 19:58:50.550"></status>
</kw>
<status starttime="20171004 19:58:50.549" status="PASS" endtime="20171004 19:58:50.550"></status>
</kw>
<status starttime="20171004 19:58:50.547" status="PASS" endtime="20171004 19:58:50.550"></status>
</kw>
<status starttime="20171004 19:58:50.547" status="PASS" endtime="20171004 19:58:50.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.612">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:58:50.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:50.550" status="PASS" endtime="20171004 19:58:50.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.614">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:50.614" status="PASS" endtime="20171004 19:58:50.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.615">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:58:50.615" status="PASS" endtime="20171004 19:58:50.615"></status>
</kw>
<status starttime="20171004 19:58:50.615" status="PASS" endtime="20171004 19:58:50.616"></status>
</kw>
<status starttime="20171004 19:58:50.613" status="PASS" endtime="20171004 19:58:50.616"></status>
</kw>
<status starttime="20171004 19:58:50.613" status="PASS" endtime="20171004 19:58:50.616"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:58:50.616">Delete All Sessions</msg>
<status starttime="20171004 19:58:50.616" status="PASS" endtime="20171004 19:58:50.616"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:50.616">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:58:50.331" status="PASS" endtime="20171004 19:58:50.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:58:50.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:58:50.617" status="PASS" endtime="20171004 19:58:50.617"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:58:50.618">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:58:50.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:58:50.618">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:58:50.617" status="PASS" endtime="20171004 19:58:50.618"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:50.618">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:58:50.330" status="PASS" endtime="20171004 19:58:50.618"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:58:50.619">${power_state} = Off</msg>
<status starttime="20171004 19:58:50.330" status="PASS" endtime="20171004 19:58:50.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:58:50.619">On != Off</msg>
<status starttime="20171004 19:58:50.619" status="FAIL" endtime="20171004 19:58:50.619"></status>
</kw>
<status starttime="20171004 19:58:50.329" status="FAIL" endtime="20171004 19:58:50.619"></status>
</kw>
<status starttime="20171004 19:58:50.329" status="FAIL" endtime="20171004 19:58:50.620"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:00.626">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:59:00.625" status="PASS" endtime="20171004 19:59:00.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:00.627">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:59:00.626" status="PASS" endtime="20171004 19:59:00.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:00.628">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:59:00.627" status="PASS" endtime="20171004 19:59:00.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:00.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:59:00.629" status="PASS" endtime="20171004 19:59:00.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:01.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:59:00.630" status="PASS" endtime="20171004 19:59:01.051"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:01.052">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:59:01.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:00.629" status="PASS" endtime="20171004 19:59:01.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:01.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:01.052" status="PASS" endtime="20171004 19:59:01.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:01.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:01.053" status="PASS" endtime="20171004 19:59:01.053"></status>
</kw>
<status starttime="20171004 19:59:00.624" status="PASS" endtime="20171004 19:59:01.053"></status>
</kw>
<status starttime="20171004 19:59:00.624" status="PASS" endtime="20171004 19:59:01.053"></status>
</kw>
<status starttime="20171004 19:59:00.623" status="PASS" endtime="20171004 19:59:01.053"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:01.054">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:59:01.054" status="PASS" endtime="20171004 19:59:01.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:01.056">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:01.056" status="PASS" endtime="20171004 19:59:01.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:01.057">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:01.057" status="PASS" endtime="20171004 19:59:01.057"></status>
</kw>
<status starttime="20171004 19:59:01.056" status="PASS" endtime="20171004 19:59:01.058"></status>
</kw>
<status starttime="20171004 19:59:01.055" status="PASS" endtime="20171004 19:59:01.058"></status>
</kw>
<status starttime="20171004 19:59:01.054" status="PASS" endtime="20171004 19:59:01.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:01.163">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:59:01.163">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:01.058" status="PASS" endtime="20171004 19:59:01.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:01.165">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:01.164" status="PASS" endtime="20171004 19:59:01.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:01.166">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:01.165" status="PASS" endtime="20171004 19:59:01.166"></status>
</kw>
<status starttime="20171004 19:59:01.165" status="PASS" endtime="20171004 19:59:01.166"></status>
</kw>
<status starttime="20171004 19:59:01.164" status="PASS" endtime="20171004 19:59:01.166"></status>
</kw>
<status starttime="20171004 19:59:01.163" status="PASS" endtime="20171004 19:59:01.166"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:59:01.167">Delete All Sessions</msg>
<status starttime="20171004 19:59:01.167" status="PASS" endtime="20171004 19:59:01.167"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:01.167">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:00.622" status="PASS" endtime="20171004 19:59:01.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:01.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:01.167" status="PASS" endtime="20171004 19:59:01.168"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:01.168">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:59:01.168">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:59:01.169">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:59:01.168" status="PASS" endtime="20171004 19:59:01.169"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:01.169">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:59:00.622" status="PASS" endtime="20171004 19:59:01.169"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:01.169">${power_state} = Off</msg>
<status starttime="20171004 19:59:00.621" status="PASS" endtime="20171004 19:59:01.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:59:01.170">On != Off</msg>
<status starttime="20171004 19:59:01.170" status="FAIL" endtime="20171004 19:59:01.170"></status>
</kw>
<status starttime="20171004 19:59:00.621" status="FAIL" endtime="20171004 19:59:01.170"></status>
</kw>
<status starttime="20171004 19:59:00.620" status="FAIL" endtime="20171004 19:59:01.170"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.176">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:59:11.176" status="PASS" endtime="20171004 19:59:11.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:59:11.177" status="PASS" endtime="20171004 19:59:11.178"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.178">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:59:11.178" status="PASS" endtime="20171004 19:59:11.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.179">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:59:11.179" status="PASS" endtime="20171004 19:59:11.179"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:59:11.180" status="PASS" endtime="20171004 19:59:11.373"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:11.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:59:11.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:11.179" status="PASS" endtime="20171004 19:59:11.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:11.373" status="PASS" endtime="20171004 19:59:11.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:11.374" status="PASS" endtime="20171004 19:59:11.374"></status>
</kw>
<status starttime="20171004 19:59:11.175" status="PASS" endtime="20171004 19:59:11.375"></status>
</kw>
<status starttime="20171004 19:59:11.174" status="PASS" endtime="20171004 19:59:11.375"></status>
</kw>
<status starttime="20171004 19:59:11.173" status="PASS" endtime="20171004 19:59:11.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.376">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:59:11.375" status="PASS" endtime="20171004 19:59:11.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.379">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:11.378" status="PASS" endtime="20171004 19:59:11.379"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.381">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:11.380" status="PASS" endtime="20171004 19:59:11.381"></status>
</kw>
<status starttime="20171004 19:59:11.379" status="PASS" endtime="20171004 19:59:11.381"></status>
</kw>
<status starttime="20171004 19:59:11.377" status="PASS" endtime="20171004 19:59:11.381"></status>
</kw>
<status starttime="20171004 19:59:11.376" status="PASS" endtime="20171004 19:59:11.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.475">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:59:11.475">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:11.381" status="PASS" endtime="20171004 19:59:11.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.477">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:11.477" status="PASS" endtime="20171004 19:59:11.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.478">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:11.478" status="PASS" endtime="20171004 19:59:11.478"></status>
</kw>
<status starttime="20171004 19:59:11.477" status="PASS" endtime="20171004 19:59:11.478"></status>
</kw>
<status starttime="20171004 19:59:11.476" status="PASS" endtime="20171004 19:59:11.478"></status>
</kw>
<status starttime="20171004 19:59:11.476" status="PASS" endtime="20171004 19:59:11.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:59:11.479">Delete All Sessions</msg>
<status starttime="20171004 19:59:11.479" status="PASS" endtime="20171004 19:59:11.479"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:11.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:11.173" status="PASS" endtime="20171004 19:59:11.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:11.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:11.480" status="PASS" endtime="20171004 19:59:11.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:11.480">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:59:11.481">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:59:11.481">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:59:11.480" status="PASS" endtime="20171004 19:59:11.481"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:11.481">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:59:11.172" status="PASS" endtime="20171004 19:59:11.481"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:11.481">${power_state} = Off</msg>
<status starttime="20171004 19:59:11.172" status="PASS" endtime="20171004 19:59:11.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:59:11.482">On != Off</msg>
<status starttime="20171004 19:59:11.482" status="FAIL" endtime="20171004 19:59:11.483"></status>
</kw>
<status starttime="20171004 19:59:11.171" status="FAIL" endtime="20171004 19:59:11.483"></status>
</kw>
<status starttime="20171004 19:59:11.171" status="FAIL" endtime="20171004 19:59:11.483"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.489">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:59:21.489" status="PASS" endtime="20171004 19:59:21.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:59:21.490" status="PASS" endtime="20171004 19:59:21.490"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.491">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:59:21.490" status="PASS" endtime="20171004 19:59:21.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:59:21.491" status="PASS" endtime="20171004 19:59:21.491"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.668">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:59:21.492" status="PASS" endtime="20171004 19:59:21.668"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:21.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:59:21.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:21.492" status="PASS" endtime="20171004 19:59:21.668"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.669">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:21.669" status="PASS" endtime="20171004 19:59:21.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:21.669" status="PASS" endtime="20171004 19:59:21.670"></status>
</kw>
<status starttime="20171004 19:59:21.488" status="PASS" endtime="20171004 19:59:21.670"></status>
</kw>
<status starttime="20171004 19:59:21.487" status="PASS" endtime="20171004 19:59:21.670"></status>
</kw>
<status starttime="20171004 19:59:21.486" status="PASS" endtime="20171004 19:59:21.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.671">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:59:21.671" status="PASS" endtime="20171004 19:59:21.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.674">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:21.673" status="PASS" endtime="20171004 19:59:21.675"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.676">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:21.676" status="PASS" endtime="20171004 19:59:21.676"></status>
</kw>
<status starttime="20171004 19:59:21.675" status="PASS" endtime="20171004 19:59:21.676"></status>
</kw>
<status starttime="20171004 19:59:21.672" status="PASS" endtime="20171004 19:59:21.676"></status>
</kw>
<status starttime="20171004 19:59:21.671" status="PASS" endtime="20171004 19:59:21.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.779">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:59:21.779">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:21.677" status="PASS" endtime="20171004 19:59:21.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.781">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:21.780" status="PASS" endtime="20171004 19:59:21.781"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.786">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:21.785" status="PASS" endtime="20171004 19:59:21.786"></status>
</kw>
<status starttime="20171004 19:59:21.781" status="PASS" endtime="20171004 19:59:21.786"></status>
</kw>
<status starttime="20171004 19:59:21.780" status="PASS" endtime="20171004 19:59:21.786"></status>
</kw>
<status starttime="20171004 19:59:21.779" status="PASS" endtime="20171004 19:59:21.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:59:21.786">Delete All Sessions</msg>
<status starttime="20171004 19:59:21.786" status="PASS" endtime="20171004 19:59:21.787"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:21.787">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:21.486" status="PASS" endtime="20171004 19:59:21.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:21.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:21.787" status="PASS" endtime="20171004 19:59:21.788"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:21.788">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:59:21.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:59:21.788">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:59:21.788" status="PASS" endtime="20171004 19:59:21.789"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:21.789">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:59:21.485" status="PASS" endtime="20171004 19:59:21.789"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:21.789">${power_state} = Off</msg>
<status starttime="20171004 19:59:21.485" status="PASS" endtime="20171004 19:59:21.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:59:21.790">On != Off</msg>
<status starttime="20171004 19:59:21.789" status="FAIL" endtime="20171004 19:59:21.790"></status>
</kw>
<status starttime="20171004 19:59:21.484" status="FAIL" endtime="20171004 19:59:21.790"></status>
</kw>
<status starttime="20171004 19:59:21.484" status="FAIL" endtime="20171004 19:59:21.790"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:31.797">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:59:31.796" status="PASS" endtime="20171004 19:59:31.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:31.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:59:31.799" status="PASS" endtime="20171004 19:59:31.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:31.800">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:59:31.800" status="PASS" endtime="20171004 19:59:31.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:31.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:59:31.801" status="PASS" endtime="20171004 19:59:31.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:31.983">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:59:31.802" status="PASS" endtime="20171004 19:59:31.983"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:31.983">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:59:31.984">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:31.802" status="PASS" endtime="20171004 19:59:31.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:31.984">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:31.984" status="PASS" endtime="20171004 19:59:31.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:31.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:31.985" status="PASS" endtime="20171004 19:59:31.985"></status>
</kw>
<status starttime="20171004 19:59:31.796" status="PASS" endtime="20171004 19:59:31.985"></status>
</kw>
<status starttime="20171004 19:59:31.795" status="PASS" endtime="20171004 19:59:31.985"></status>
</kw>
<status starttime="20171004 19:59:31.794" status="PASS" endtime="20171004 19:59:31.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:31.986">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:59:31.986" status="PASS" endtime="20171004 19:59:31.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:31.989">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:31.988" status="PASS" endtime="20171004 19:59:31.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:31.990">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:31.990" status="PASS" endtime="20171004 19:59:31.990"></status>
</kw>
<status starttime="20171004 19:59:31.989" status="PASS" endtime="20171004 19:59:31.990"></status>
</kw>
<status starttime="20171004 19:59:31.987" status="PASS" endtime="20171004 19:59:31.990"></status>
</kw>
<status starttime="20171004 19:59:31.987" status="PASS" endtime="20171004 19:59:31.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:32.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:59:32.054">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:31.990" status="PASS" endtime="20171004 19:59:32.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:32.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:32.055" status="PASS" endtime="20171004 19:59:32.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:32.057">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:32.057" status="PASS" endtime="20171004 19:59:32.057"></status>
</kw>
<status starttime="20171004 19:59:32.056" status="PASS" endtime="20171004 19:59:32.057"></status>
</kw>
<status starttime="20171004 19:59:32.055" status="PASS" endtime="20171004 19:59:32.057"></status>
</kw>
<status starttime="20171004 19:59:32.054" status="PASS" endtime="20171004 19:59:32.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:59:32.058">Delete All Sessions</msg>
<status starttime="20171004 19:59:32.058" status="PASS" endtime="20171004 19:59:32.058"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:32.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:31.794" status="PASS" endtime="20171004 19:59:32.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:32.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:32.059" status="PASS" endtime="20171004 19:59:32.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:32.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:59:32.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:59:32.060">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:59:32.059" status="PASS" endtime="20171004 19:59:32.060"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:32.060">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:59:31.793" status="PASS" endtime="20171004 19:59:32.060"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:32.061">${power_state} = Off</msg>
<status starttime="20171004 19:59:31.793" status="PASS" endtime="20171004 19:59:32.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:59:32.061">On != Off</msg>
<status starttime="20171004 19:59:32.061" status="FAIL" endtime="20171004 19:59:32.062"></status>
</kw>
<status starttime="20171004 19:59:31.792" status="FAIL" endtime="20171004 19:59:32.062"></status>
</kw>
<status starttime="20171004 19:59:31.791" status="FAIL" endtime="20171004 19:59:32.062"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.069">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:59:42.068" status="PASS" endtime="20171004 19:59:42.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:59:42.069" status="PASS" endtime="20171004 19:59:42.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.070">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:59:42.070" status="PASS" endtime="20171004 19:59:42.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.071">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:59:42.071" status="PASS" endtime="20171004 19:59:42.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.249">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:59:42.072" status="PASS" endtime="20171004 19:59:42.249"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:42.250">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:59:42.250">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:42.071" status="PASS" endtime="20171004 19:59:42.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.250">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:42.250" status="PASS" endtime="20171004 19:59:42.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.251">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:42.251" status="PASS" endtime="20171004 19:59:42.251"></status>
</kw>
<status starttime="20171004 19:59:42.067" status="PASS" endtime="20171004 19:59:42.251"></status>
</kw>
<status starttime="20171004 19:59:42.067" status="PASS" endtime="20171004 19:59:42.251"></status>
</kw>
<status starttime="20171004 19:59:42.066" status="PASS" endtime="20171004 19:59:42.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.252">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:59:42.252" status="PASS" endtime="20171004 19:59:42.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.254">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:42.254" status="PASS" endtime="20171004 19:59:42.254"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.255">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:42.255" status="PASS" endtime="20171004 19:59:42.256"></status>
</kw>
<status starttime="20171004 19:59:42.255" status="PASS" endtime="20171004 19:59:42.256"></status>
</kw>
<status starttime="20171004 19:59:42.253" status="PASS" endtime="20171004 19:59:42.256"></status>
</kw>
<status starttime="20171004 19:59:42.252" status="PASS" endtime="20171004 19:59:42.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.326">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:59:42.327">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:42.256" status="PASS" endtime="20171004 19:59:42.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.329">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:42.328" status="PASS" endtime="20171004 19:59:42.329"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.331">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:42.330" status="PASS" endtime="20171004 19:59:42.331"></status>
</kw>
<status starttime="20171004 19:59:42.329" status="PASS" endtime="20171004 19:59:42.331"></status>
</kw>
<status starttime="20171004 19:59:42.328" status="PASS" endtime="20171004 19:59:42.331"></status>
</kw>
<status starttime="20171004 19:59:42.327" status="PASS" endtime="20171004 19:59:42.331"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:59:42.332">Delete All Sessions</msg>
<status starttime="20171004 19:59:42.332" status="PASS" endtime="20171004 19:59:42.332"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:42.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:42.065" status="PASS" endtime="20171004 19:59:42.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:42.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:42.333" status="PASS" endtime="20171004 19:59:42.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:42.334">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:59:42.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:59:42.334">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:59:42.334" status="PASS" endtime="20171004 19:59:42.334"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:42.335">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:59:42.065" status="PASS" endtime="20171004 19:59:42.335"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:42.335">${power_state} = Off</msg>
<status starttime="20171004 19:59:42.064" status="PASS" endtime="20171004 19:59:42.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:59:42.336">On != Off</msg>
<status starttime="20171004 19:59:42.336" status="FAIL" endtime="20171004 19:59:42.336"></status>
</kw>
<status starttime="20171004 19:59:42.064" status="FAIL" endtime="20171004 19:59:42.336"></status>
</kw>
<status starttime="20171004 19:59:42.063" status="FAIL" endtime="20171004 19:59:42.336"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.346">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 19:59:52.345" status="PASS" endtime="20171004 19:59:52.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 19:59:52.346" status="PASS" endtime="20171004 19:59:52.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 19:59:52.347" status="PASS" endtime="20171004 19:59:52.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 19:59:52.348" status="PASS" endtime="20171004 19:59:52.348"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 19:59:52.349" status="PASS" endtime="20171004 19:59:52.527"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:52.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 19:59:52.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:52.348" status="PASS" endtime="20171004 19:59:52.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:52.527" status="PASS" endtime="20171004 19:59:52.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:52.528" status="PASS" endtime="20171004 19:59:52.529"></status>
</kw>
<status starttime="20171004 19:59:52.345" status="PASS" endtime="20171004 19:59:52.529"></status>
</kw>
<status starttime="20171004 19:59:52.344" status="PASS" endtime="20171004 19:59:52.529"></status>
</kw>
<status starttime="20171004 19:59:52.343" status="PASS" endtime="20171004 19:59:52.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.530">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 19:59:52.529" status="PASS" endtime="20171004 19:59:52.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.532">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:52.531" status="PASS" endtime="20171004 19:59:52.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.533">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 19:59:52.532" status="PASS" endtime="20171004 19:59:52.533"></status>
</kw>
<status starttime="20171004 19:59:52.532" status="PASS" endtime="20171004 19:59:52.533"></status>
</kw>
<status starttime="20171004 19:59:52.530" status="PASS" endtime="20171004 19:59:52.533"></status>
</kw>
<status starttime="20171004 19:59:52.530" status="PASS" endtime="20171004 19:59:52.533"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.605">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 19:59:52.605">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:52.533" status="PASS" endtime="20171004 19:59:52.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.607">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:52.606" status="PASS" endtime="20171004 19:59:52.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.608">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 19:59:52.608" status="PASS" endtime="20171004 19:59:52.609"></status>
</kw>
<status starttime="20171004 19:59:52.607" status="PASS" endtime="20171004 19:59:52.609"></status>
</kw>
<status starttime="20171004 19:59:52.606" status="PASS" endtime="20171004 19:59:52.609"></status>
</kw>
<status starttime="20171004 19:59:52.605" status="PASS" endtime="20171004 19:59:52.610"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 19:59:52.611">Delete All Sessions</msg>
<status starttime="20171004 19:59:52.610" status="PASS" endtime="20171004 19:59:52.611"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:52.611">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 19:59:52.343" status="PASS" endtime="20171004 19:59:52.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 19:59:52.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 19:59:52.611" status="PASS" endtime="20171004 19:59:52.612"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 19:59:52.612">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 19:59:52.612">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 19:59:52.612">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 19:59:52.612" status="PASS" endtime="20171004 19:59:52.612"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:52.613">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 19:59:52.342" status="PASS" endtime="20171004 19:59:52.613"></status>
</kw>
<msg level="INFO" timestamp="20171004 19:59:52.613">${power_state} = Off</msg>
<status starttime="20171004 19:59:52.341" status="PASS" endtime="20171004 19:59:52.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 19:59:52.614">On != Off</msg>
<status starttime="20171004 19:59:52.613" status="FAIL" endtime="20171004 19:59:52.614"></status>
</kw>
<status starttime="20171004 19:59:52.341" status="FAIL" endtime="20171004 19:59:52.614"></status>
</kw>
<status starttime="20171004 19:59:52.340" status="FAIL" endtime="20171004 19:59:52.614"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.625">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:00:02.624" status="PASS" endtime="20171004 20:00:02.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.626">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:00:02.626" status="PASS" endtime="20171004 20:00:02.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.627">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:00:02.627" status="PASS" endtime="20171004 20:00:02.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:00:02.627" status="PASS" endtime="20171004 20:00:02.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.819">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:00:02.630" status="PASS" endtime="20171004 20:00:02.819"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:02.819">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:00:02.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:02.629" status="PASS" endtime="20171004 20:00:02.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.820">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:02.820" status="PASS" endtime="20171004 20:00:02.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:02.820" status="PASS" endtime="20171004 20:00:02.821"></status>
</kw>
<status starttime="20171004 20:00:02.623" status="PASS" endtime="20171004 20:00:02.821"></status>
</kw>
<status starttime="20171004 20:00:02.622" status="PASS" endtime="20171004 20:00:02.821"></status>
</kw>
<status starttime="20171004 20:00:02.622" status="PASS" endtime="20171004 20:00:02.821"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.822">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:00:02.821" status="PASS" endtime="20171004 20:00:02.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.824">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:02.823" status="PASS" endtime="20171004 20:00:02.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.825">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:02.825" status="PASS" endtime="20171004 20:00:02.825"></status>
</kw>
<status starttime="20171004 20:00:02.824" status="PASS" endtime="20171004 20:00:02.825"></status>
</kw>
<status starttime="20171004 20:00:02.822" status="PASS" endtime="20171004 20:00:02.825"></status>
</kw>
<status starttime="20171004 20:00:02.822" status="PASS" endtime="20171004 20:00:02.825"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.924">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:00:02.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:02.826" status="PASS" endtime="20171004 20:00:02.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.926">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:02.926" status="PASS" endtime="20171004 20:00:02.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.927">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:02.927" status="PASS" endtime="20171004 20:00:02.928"></status>
</kw>
<status starttime="20171004 20:00:02.926" status="PASS" endtime="20171004 20:00:02.928"></status>
</kw>
<status starttime="20171004 20:00:02.925" status="PASS" endtime="20171004 20:00:02.928"></status>
</kw>
<status starttime="20171004 20:00:02.924" status="PASS" endtime="20171004 20:00:02.928"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:00:02.928">Delete All Sessions</msg>
<status starttime="20171004 20:00:02.928" status="PASS" endtime="20171004 20:00:02.929"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:02.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:02.621" status="PASS" endtime="20171004 20:00:02.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:02.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:02.929" status="PASS" endtime="20171004 20:00:02.930"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:02.930">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:00:02.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:00:02.931">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:00:02.930" status="PASS" endtime="20171004 20:00:02.931"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:02.931">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:00:02.620" status="PASS" endtime="20171004 20:00:02.931"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:02.931">${power_state} = Off</msg>
<status starttime="20171004 20:00:02.619" status="PASS" endtime="20171004 20:00:02.932"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:00:02.932">On != Off</msg>
<status starttime="20171004 20:00:02.932" status="FAIL" endtime="20171004 20:00:02.932"></status>
</kw>
<status starttime="20171004 20:00:02.618" status="FAIL" endtime="20171004 20:00:02.932"></status>
</kw>
<status starttime="20171004 20:00:02.615" status="FAIL" endtime="20171004 20:00:02.933"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:12.942">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:00:12.942" status="PASS" endtime="20171004 20:00:12.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:12.943">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:00:12.943" status="PASS" endtime="20171004 20:00:12.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:12.944">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:00:12.944" status="PASS" endtime="20171004 20:00:12.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:12.945">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:00:12.944" status="PASS" endtime="20171004 20:00:12.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:13.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:00:12.945" status="PASS" endtime="20171004 20:00:13.131"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:13.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:00:13.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:12.945" status="PASS" endtime="20171004 20:00:13.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:13.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:13.132" status="PASS" endtime="20171004 20:00:13.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:13.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:13.132" status="PASS" endtime="20171004 20:00:13.133"></status>
</kw>
<status starttime="20171004 20:00:12.941" status="PASS" endtime="20171004 20:00:13.133"></status>
</kw>
<status starttime="20171004 20:00:12.941" status="PASS" endtime="20171004 20:00:13.133"></status>
</kw>
<status starttime="20171004 20:00:12.940" status="PASS" endtime="20171004 20:00:13.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:13.134">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:00:13.134" status="PASS" endtime="20171004 20:00:13.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:13.137">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:13.136" status="PASS" endtime="20171004 20:00:13.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:13.138">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:13.138" status="PASS" endtime="20171004 20:00:13.138"></status>
</kw>
<status starttime="20171004 20:00:13.137" status="PASS" endtime="20171004 20:00:13.138"></status>
</kw>
<status starttime="20171004 20:00:13.135" status="PASS" endtime="20171004 20:00:13.138"></status>
</kw>
<status starttime="20171004 20:00:13.134" status="PASS" endtime="20171004 20:00:13.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:13.227">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:00:13.227">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:13.139" status="PASS" endtime="20171004 20:00:13.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:13.230">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:13.228" status="PASS" endtime="20171004 20:00:13.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:13.231">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:13.231" status="PASS" endtime="20171004 20:00:13.232"></status>
</kw>
<status starttime="20171004 20:00:13.230" status="PASS" endtime="20171004 20:00:13.232"></status>
</kw>
<status starttime="20171004 20:00:13.228" status="PASS" endtime="20171004 20:00:13.232"></status>
</kw>
<status starttime="20171004 20:00:13.227" status="PASS" endtime="20171004 20:00:13.232"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:00:13.233">Delete All Sessions</msg>
<status starttime="20171004 20:00:13.232" status="PASS" endtime="20171004 20:00:13.233"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:13.233">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:12.939" status="PASS" endtime="20171004 20:00:13.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:13.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:13.233" status="PASS" endtime="20171004 20:00:13.234"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:13.234">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:00:13.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:00:13.235">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:00:13.234" status="PASS" endtime="20171004 20:00:13.235"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:13.235">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:00:12.938" status="PASS" endtime="20171004 20:00:13.235"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:13.235">${power_state} = Off</msg>
<status starttime="20171004 20:00:12.937" status="PASS" endtime="20171004 20:00:13.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:00:13.236">On != Off</msg>
<status starttime="20171004 20:00:13.235" status="FAIL" endtime="20171004 20:00:13.236"></status>
</kw>
<status starttime="20171004 20:00:12.937" status="FAIL" endtime="20171004 20:00:13.236"></status>
</kw>
<status starttime="20171004 20:00:12.934" status="FAIL" endtime="20171004 20:00:13.236"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.248">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:00:23.248" status="PASS" endtime="20171004 20:00:23.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:00:23.249" status="PASS" endtime="20171004 20:00:23.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:00:23.250" status="PASS" endtime="20171004 20:00:23.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:00:23.250" status="PASS" endtime="20171004 20:00:23.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:00:23.251" status="PASS" endtime="20171004 20:00:23.437"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:23.437">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:00:23.437">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:23.251" status="PASS" endtime="20171004 20:00:23.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.438">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:23.437" status="PASS" endtime="20171004 20:00:23.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:23.438" status="PASS" endtime="20171004 20:00:23.438"></status>
</kw>
<status starttime="20171004 20:00:23.246" status="PASS" endtime="20171004 20:00:23.439"></status>
</kw>
<status starttime="20171004 20:00:23.245" status="PASS" endtime="20171004 20:00:23.439"></status>
</kw>
<status starttime="20171004 20:00:23.244" status="PASS" endtime="20171004 20:00:23.439"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.439">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:00:23.439" status="PASS" endtime="20171004 20:00:23.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.442">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:23.441" status="PASS" endtime="20171004 20:00:23.442"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.443">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:23.442" status="PASS" endtime="20171004 20:00:23.443"></status>
</kw>
<status starttime="20171004 20:00:23.442" status="PASS" endtime="20171004 20:00:23.443"></status>
</kw>
<status starttime="20171004 20:00:23.440" status="PASS" endtime="20171004 20:00:23.443"></status>
</kw>
<status starttime="20171004 20:00:23.440" status="PASS" endtime="20171004 20:00:23.443"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:00:23.538">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:23.443" status="PASS" endtime="20171004 20:00:23.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.540">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:23.540" status="PASS" endtime="20171004 20:00:23.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.543">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:23.542" status="PASS" endtime="20171004 20:00:23.543"></status>
</kw>
<status starttime="20171004 20:00:23.541" status="PASS" endtime="20171004 20:00:23.543"></status>
</kw>
<status starttime="20171004 20:00:23.539" status="PASS" endtime="20171004 20:00:23.543"></status>
</kw>
<status starttime="20171004 20:00:23.539" status="PASS" endtime="20171004 20:00:23.543"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:00:23.544">Delete All Sessions</msg>
<status starttime="20171004 20:00:23.544" status="PASS" endtime="20171004 20:00:23.544"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:23.544">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:23.242" status="PASS" endtime="20171004 20:00:23.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:23.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:23.544" status="PASS" endtime="20171004 20:00:23.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:23.545">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:00:23.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:00:23.546">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:00:23.545" status="PASS" endtime="20171004 20:00:23.546"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:23.546">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:00:23.242" status="PASS" endtime="20171004 20:00:23.546"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:23.546">${power_state} = Off</msg>
<status starttime="20171004 20:00:23.241" status="PASS" endtime="20171004 20:00:23.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:00:23.547">On != Off</msg>
<status starttime="20171004 20:00:23.546" status="FAIL" endtime="20171004 20:00:23.547"></status>
</kw>
<status starttime="20171004 20:00:23.241" status="FAIL" endtime="20171004 20:00:23.547"></status>
</kw>
<status starttime="20171004 20:00:23.239" status="FAIL" endtime="20171004 20:00:23.547"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:00:33.553" status="PASS" endtime="20171004 20:00:33.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:00:33.554" status="PASS" endtime="20171004 20:00:33.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.555">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:00:33.554" status="PASS" endtime="20171004 20:00:33.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.556">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:00:33.555" status="PASS" endtime="20171004 20:00:33.556"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:00:33.556" status="PASS" endtime="20171004 20:00:33.736"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:33.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:00:33.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:33.556" status="PASS" endtime="20171004 20:00:33.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:33.736" status="PASS" endtime="20171004 20:00:33.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:33.737" status="PASS" endtime="20171004 20:00:33.738"></status>
</kw>
<status starttime="20171004 20:00:33.552" status="PASS" endtime="20171004 20:00:33.738"></status>
</kw>
<status starttime="20171004 20:00:33.552" status="PASS" endtime="20171004 20:00:33.738"></status>
</kw>
<status starttime="20171004 20:00:33.551" status="PASS" endtime="20171004 20:00:33.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.739">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:00:33.739" status="PASS" endtime="20171004 20:00:33.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.741">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:33.740" status="PASS" endtime="20171004 20:00:33.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.742">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:33.742" status="PASS" endtime="20171004 20:00:33.742"></status>
</kw>
<status starttime="20171004 20:00:33.742" status="PASS" endtime="20171004 20:00:33.743"></status>
</kw>
<status starttime="20171004 20:00:33.740" status="PASS" endtime="20171004 20:00:33.743"></status>
</kw>
<status starttime="20171004 20:00:33.739" status="PASS" endtime="20171004 20:00:33.743"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.805">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:00:33.805">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:33.743" status="PASS" endtime="20171004 20:00:33.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.807">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:33.807" status="PASS" endtime="20171004 20:00:33.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.809">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:33.808" status="PASS" endtime="20171004 20:00:33.809"></status>
</kw>
<status starttime="20171004 20:00:33.808" status="PASS" endtime="20171004 20:00:33.809"></status>
</kw>
<status starttime="20171004 20:00:33.806" status="PASS" endtime="20171004 20:00:33.809"></status>
</kw>
<status starttime="20171004 20:00:33.806" status="PASS" endtime="20171004 20:00:33.809"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:00:33.809">Delete All Sessions</msg>
<status starttime="20171004 20:00:33.809" status="PASS" endtime="20171004 20:00:33.810"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:33.810">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:33.550" status="PASS" endtime="20171004 20:00:33.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:33.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:33.810" status="PASS" endtime="20171004 20:00:33.811"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:33.811">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:00:33.811">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:00:33.811">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:00:33.811" status="PASS" endtime="20171004 20:00:33.811"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:33.812">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:00:33.550" status="PASS" endtime="20171004 20:00:33.812"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:33.812">${power_state} = Off</msg>
<status starttime="20171004 20:00:33.549" status="PASS" endtime="20171004 20:00:33.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:00:33.813">On != Off</msg>
<status starttime="20171004 20:00:33.812" status="FAIL" endtime="20171004 20:00:33.813"></status>
</kw>
<status starttime="20171004 20:00:33.549" status="FAIL" endtime="20171004 20:00:33.813"></status>
</kw>
<status starttime="20171004 20:00:33.548" status="FAIL" endtime="20171004 20:00:33.813"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:43.822">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:00:43.821" status="PASS" endtime="20171004 20:00:43.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:43.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:00:43.822" status="PASS" endtime="20171004 20:00:43.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:43.823">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:00:43.823" status="PASS" endtime="20171004 20:00:43.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:43.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:00:43.824" status="PASS" endtime="20171004 20:00:43.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:44.002">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:00:43.825" status="PASS" endtime="20171004 20:00:44.002"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:44.002">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:00:44.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:43.825" status="PASS" endtime="20171004 20:00:44.002"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:44.003">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:44.002" status="PASS" endtime="20171004 20:00:44.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:44.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:44.003" status="PASS" endtime="20171004 20:00:44.004"></status>
</kw>
<status starttime="20171004 20:00:43.820" status="PASS" endtime="20171004 20:00:44.004"></status>
</kw>
<status starttime="20171004 20:00:43.819" status="PASS" endtime="20171004 20:00:44.004"></status>
</kw>
<status starttime="20171004 20:00:43.817" status="PASS" endtime="20171004 20:00:44.004"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:44.005">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:00:44.005" status="PASS" endtime="20171004 20:00:44.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:44.007">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:44.007" status="PASS" endtime="20171004 20:00:44.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:44.008">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:44.008" status="PASS" endtime="20171004 20:00:44.008"></status>
</kw>
<status starttime="20171004 20:00:44.007" status="PASS" endtime="20171004 20:00:44.009"></status>
</kw>
<status starttime="20171004 20:00:44.006" status="PASS" endtime="20171004 20:00:44.009"></status>
</kw>
<status starttime="20171004 20:00:44.005" status="PASS" endtime="20171004 20:00:44.009"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:44.108">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:00:44.109">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:44.009" status="PASS" endtime="20171004 20:00:44.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:44.111">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:44.110" status="PASS" endtime="20171004 20:00:44.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:44.116">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:44.112" status="PASS" endtime="20171004 20:00:44.116"></status>
</kw>
<status starttime="20171004 20:00:44.111" status="PASS" endtime="20171004 20:00:44.116"></status>
</kw>
<status starttime="20171004 20:00:44.110" status="PASS" endtime="20171004 20:00:44.116"></status>
</kw>
<status starttime="20171004 20:00:44.109" status="PASS" endtime="20171004 20:00:44.117"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:00:44.117">Delete All Sessions</msg>
<status starttime="20171004 20:00:44.117" status="PASS" endtime="20171004 20:00:44.117"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:44.117">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:43.817" status="PASS" endtime="20171004 20:00:44.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:44.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:44.118" status="PASS" endtime="20171004 20:00:44.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:44.119">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:00:44.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:00:44.119">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:00:44.119" status="PASS" endtime="20171004 20:00:44.119"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:44.119">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:00:43.816" status="PASS" endtime="20171004 20:00:44.119"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:44.120">${power_state} = Off</msg>
<status starttime="20171004 20:00:43.815" status="PASS" endtime="20171004 20:00:44.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:00:44.121">On != Off</msg>
<status starttime="20171004 20:00:44.120" status="FAIL" endtime="20171004 20:00:44.121"></status>
</kw>
<status starttime="20171004 20:00:43.815" status="FAIL" endtime="20171004 20:00:44.121"></status>
</kw>
<status starttime="20171004 20:00:43.814" status="FAIL" endtime="20171004 20:00:44.121"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.130">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:00:54.130" status="PASS" endtime="20171004 20:00:54.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.132">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:00:54.132" status="PASS" endtime="20171004 20:00:54.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.133">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:00:54.133" status="PASS" endtime="20171004 20:00:54.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:00:54.133" status="PASS" endtime="20171004 20:00:54.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:00:54.135" status="PASS" endtime="20171004 20:00:54.318"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:54.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:00:54.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:54.135" status="PASS" endtime="20171004 20:00:54.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:54.318" status="PASS" endtime="20171004 20:00:54.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:54.319" status="PASS" endtime="20171004 20:00:54.319"></status>
</kw>
<status starttime="20171004 20:00:54.129" status="PASS" endtime="20171004 20:00:54.320"></status>
</kw>
<status starttime="20171004 20:00:54.129" status="PASS" endtime="20171004 20:00:54.320"></status>
</kw>
<status starttime="20171004 20:00:54.128" status="PASS" endtime="20171004 20:00:54.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.320">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:00:54.320" status="PASS" endtime="20171004 20:00:54.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.323">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:54.322" status="PASS" endtime="20171004 20:00:54.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.323">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:00:54.323" status="PASS" endtime="20171004 20:00:54.324"></status>
</kw>
<status starttime="20171004 20:00:54.323" status="PASS" endtime="20171004 20:00:54.324"></status>
</kw>
<status starttime="20171004 20:00:54.321" status="PASS" endtime="20171004 20:00:54.324"></status>
</kw>
<status starttime="20171004 20:00:54.321" status="PASS" endtime="20171004 20:00:54.324"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.386">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:00:54.386">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:54.324" status="PASS" endtime="20171004 20:00:54.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.388">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:54.388" status="PASS" endtime="20171004 20:00:54.388"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.389">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:00:54.389" status="PASS" endtime="20171004 20:00:54.389"></status>
</kw>
<status starttime="20171004 20:00:54.388" status="PASS" endtime="20171004 20:00:54.389"></status>
</kw>
<status starttime="20171004 20:00:54.387" status="PASS" endtime="20171004 20:00:54.389"></status>
</kw>
<status starttime="20171004 20:00:54.387" status="PASS" endtime="20171004 20:00:54.390"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:00:54.390">Delete All Sessions</msg>
<status starttime="20171004 20:00:54.390" status="PASS" endtime="20171004 20:00:54.390"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:54.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:00:54.127" status="PASS" endtime="20171004 20:00:54.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:00:54.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:00:54.391" status="PASS" endtime="20171004 20:00:54.391"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:00:54.392">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:00:54.392">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:00:54.392">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:00:54.391" status="PASS" endtime="20171004 20:00:54.392"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:54.392">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:00:54.126" status="PASS" endtime="20171004 20:00:54.392"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:00:54.392">${power_state} = Off</msg>
<status starttime="20171004 20:00:54.126" status="PASS" endtime="20171004 20:00:54.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:00:54.393">On != Off</msg>
<status starttime="20171004 20:00:54.393" status="FAIL" endtime="20171004 20:00:54.393"></status>
</kw>
<status starttime="20171004 20:00:54.125" status="FAIL" endtime="20171004 20:00:54.393"></status>
</kw>
<status starttime="20171004 20:00:54.124" status="FAIL" endtime="20171004 20:00:54.394"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.400">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:01:04.400" status="PASS" endtime="20171004 20:01:04.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:01:04.401" status="PASS" endtime="20171004 20:01:04.401"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.402">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:01:04.401" status="PASS" endtime="20171004 20:01:04.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.402">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:01:04.402" status="PASS" endtime="20171004 20:01:04.402"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:01:04.403" status="PASS" endtime="20171004 20:01:04.590"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:04.590">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:01:04.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:04.403" status="PASS" endtime="20171004 20:01:04.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.591">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:04.591" status="PASS" endtime="20171004 20:01:04.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:04.591" status="PASS" endtime="20171004 20:01:04.592"></status>
</kw>
<status starttime="20171004 20:01:04.398" status="PASS" endtime="20171004 20:01:04.592"></status>
</kw>
<status starttime="20171004 20:01:04.398" status="PASS" endtime="20171004 20:01:04.592"></status>
</kw>
<status starttime="20171004 20:01:04.397" status="PASS" endtime="20171004 20:01:04.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.593">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:01:04.592" status="PASS" endtime="20171004 20:01:04.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.595">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:04.594" status="PASS" endtime="20171004 20:01:04.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.596">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:04.596" status="PASS" endtime="20171004 20:01:04.596"></status>
</kw>
<status starttime="20171004 20:01:04.595" status="PASS" endtime="20171004 20:01:04.596"></status>
</kw>
<status starttime="20171004 20:01:04.593" status="PASS" endtime="20171004 20:01:04.596"></status>
</kw>
<status starttime="20171004 20:01:04.593" status="PASS" endtime="20171004 20:01:04.596"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.658">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:01:04.658">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:04.597" status="PASS" endtime="20171004 20:01:04.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.661">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:04.660" status="PASS" endtime="20171004 20:01:04.661"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.662">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:04.662" status="PASS" endtime="20171004 20:01:04.662"></status>
</kw>
<status starttime="20171004 20:01:04.661" status="PASS" endtime="20171004 20:01:04.663"></status>
</kw>
<status starttime="20171004 20:01:04.659" status="PASS" endtime="20171004 20:01:04.663"></status>
</kw>
<status starttime="20171004 20:01:04.658" status="PASS" endtime="20171004 20:01:04.663"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:01:04.663">Delete All Sessions</msg>
<status starttime="20171004 20:01:04.663" status="PASS" endtime="20171004 20:01:04.663"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:04.663">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:04.397" status="PASS" endtime="20171004 20:01:04.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:04.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:04.664" status="PASS" endtime="20171004 20:01:04.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:04.665">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:01:04.665">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:01:04.665">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:01:04.664" status="PASS" endtime="20171004 20:01:04.665"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:04.665">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:01:04.396" status="PASS" endtime="20171004 20:01:04.665"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:04.665">${power_state} = Off</msg>
<status starttime="20171004 20:01:04.395" status="PASS" endtime="20171004 20:01:04.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:01:04.666">On != Off</msg>
<status starttime="20171004 20:01:04.666" status="FAIL" endtime="20171004 20:01:04.666"></status>
</kw>
<status starttime="20171004 20:01:04.395" status="FAIL" endtime="20171004 20:01:04.666"></status>
</kw>
<status starttime="20171004 20:01:04.394" status="FAIL" endtime="20171004 20:01:04.667"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:14.673">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:01:14.673" status="PASS" endtime="20171004 20:01:14.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:14.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:01:14.674" status="PASS" endtime="20171004 20:01:14.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:14.675">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:01:14.675" status="PASS" endtime="20171004 20:01:14.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:14.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:01:14.675" status="PASS" endtime="20171004 20:01:14.676"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:14.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:01:14.677" status="PASS" endtime="20171004 20:01:14.863"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:14.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:01:14.863">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:14.676" status="PASS" endtime="20171004 20:01:14.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:14.864">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:14.864" status="PASS" endtime="20171004 20:01:14.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:14.865">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:14.864" status="PASS" endtime="20171004 20:01:14.865"></status>
</kw>
<status starttime="20171004 20:01:14.672" status="PASS" endtime="20171004 20:01:14.865"></status>
</kw>
<status starttime="20171004 20:01:14.672" status="PASS" endtime="20171004 20:01:14.865"></status>
</kw>
<status starttime="20171004 20:01:14.670" status="PASS" endtime="20171004 20:01:14.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:14.866">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:01:14.865" status="PASS" endtime="20171004 20:01:14.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:14.868">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:14.867" status="PASS" endtime="20171004 20:01:14.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:14.869">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:14.869" status="PASS" endtime="20171004 20:01:14.869"></status>
</kw>
<status starttime="20171004 20:01:14.868" status="PASS" endtime="20171004 20:01:14.869"></status>
</kw>
<status starttime="20171004 20:01:14.866" status="PASS" endtime="20171004 20:01:14.869"></status>
</kw>
<status starttime="20171004 20:01:14.866" status="PASS" endtime="20171004 20:01:14.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:15.016">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:01:15.016">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:14.870" status="PASS" endtime="20171004 20:01:15.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:15.018">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:15.017" status="PASS" endtime="20171004 20:01:15.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:15.019">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:15.019" status="PASS" endtime="20171004 20:01:15.019"></status>
</kw>
<status starttime="20171004 20:01:15.018" status="PASS" endtime="20171004 20:01:15.019"></status>
</kw>
<status starttime="20171004 20:01:15.017" status="PASS" endtime="20171004 20:01:15.019"></status>
</kw>
<status starttime="20171004 20:01:15.016" status="PASS" endtime="20171004 20:01:15.019"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:01:15.020">Delete All Sessions</msg>
<status starttime="20171004 20:01:15.020" status="PASS" endtime="20171004 20:01:15.020"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:15.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:14.670" status="PASS" endtime="20171004 20:01:15.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:15.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:15.020" status="PASS" endtime="20171004 20:01:15.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:15.021">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:01:15.021">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:01:15.021">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:01:15.021" status="PASS" endtime="20171004 20:01:15.022"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:15.022">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:01:14.669" status="PASS" endtime="20171004 20:01:15.022"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:15.022">${power_state} = Off</msg>
<status starttime="20171004 20:01:14.668" status="PASS" endtime="20171004 20:01:15.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:01:15.023">On != Off</msg>
<status starttime="20171004 20:01:15.022" status="FAIL" endtime="20171004 20:01:15.023"></status>
</kw>
<status starttime="20171004 20:01:14.668" status="FAIL" endtime="20171004 20:01:15.023"></status>
</kw>
<status starttime="20171004 20:01:14.667" status="FAIL" endtime="20171004 20:01:15.023"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.029">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:01:25.029" status="PASS" endtime="20171004 20:01:25.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:01:25.030" status="PASS" endtime="20171004 20:01:25.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.031">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:01:25.030" status="PASS" endtime="20171004 20:01:25.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.031">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:01:25.031" status="PASS" endtime="20171004 20:01:25.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:01:25.032" status="PASS" endtime="20171004 20:01:25.235"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:25.235">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:01:25.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:25.032" status="PASS" endtime="20171004 20:01:25.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:25.236" status="PASS" endtime="20171004 20:01:25.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:25.237" status="PASS" endtime="20171004 20:01:25.237"></status>
</kw>
<status starttime="20171004 20:01:25.028" status="PASS" endtime="20171004 20:01:25.237"></status>
</kw>
<status starttime="20171004 20:01:25.027" status="PASS" endtime="20171004 20:01:25.237"></status>
</kw>
<status starttime="20171004 20:01:25.027" status="PASS" endtime="20171004 20:01:25.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.238">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:01:25.238" status="PASS" endtime="20171004 20:01:25.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.240">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:25.240" status="PASS" endtime="20171004 20:01:25.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.241">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:25.241" status="PASS" endtime="20171004 20:01:25.241"></status>
</kw>
<status starttime="20171004 20:01:25.240" status="PASS" endtime="20171004 20:01:25.241"></status>
</kw>
<status starttime="20171004 20:01:25.239" status="PASS" endtime="20171004 20:01:25.242"></status>
</kw>
<status starttime="20171004 20:01:25.238" status="PASS" endtime="20171004 20:01:25.242"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.326">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:01:25.326">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:25.242" status="PASS" endtime="20171004 20:01:25.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.328">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:25.328" status="PASS" endtime="20171004 20:01:25.328"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.330">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:25.329" status="PASS" endtime="20171004 20:01:25.330"></status>
</kw>
<status starttime="20171004 20:01:25.328" status="PASS" endtime="20171004 20:01:25.330"></status>
</kw>
<status starttime="20171004 20:01:25.327" status="PASS" endtime="20171004 20:01:25.330"></status>
</kw>
<status starttime="20171004 20:01:25.327" status="PASS" endtime="20171004 20:01:25.330"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:01:25.330">Delete All Sessions</msg>
<status starttime="20171004 20:01:25.330" status="PASS" endtime="20171004 20:01:25.331"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:25.331">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:25.026" status="PASS" endtime="20171004 20:01:25.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:25.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:25.331" status="PASS" endtime="20171004 20:01:25.331"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:25.332">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:01:25.332">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:01:25.332">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:01:25.332" status="PASS" endtime="20171004 20:01:25.332"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:25.332">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:01:25.025" status="PASS" endtime="20171004 20:01:25.333"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:25.333">${power_state} = Off</msg>
<status starttime="20171004 20:01:25.025" status="PASS" endtime="20171004 20:01:25.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:01:25.333">On != Off</msg>
<status starttime="20171004 20:01:25.333" status="FAIL" endtime="20171004 20:01:25.334"></status>
</kw>
<status starttime="20171004 20:01:25.025" status="FAIL" endtime="20171004 20:01:25.334"></status>
</kw>
<status starttime="20171004 20:01:25.024" status="FAIL" endtime="20171004 20:01:25.334"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.339">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:01:35.339" status="PASS" endtime="20171004 20:01:35.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.340">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:01:35.340" status="PASS" endtime="20171004 20:01:35.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.341">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:01:35.341" status="PASS" endtime="20171004 20:01:35.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:01:35.341" status="PASS" endtime="20171004 20:01:35.342"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:01:35.342" status="PASS" endtime="20171004 20:01:35.563"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:35.563">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:01:35.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:35.342" status="PASS" endtime="20171004 20:01:35.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:35.563" status="PASS" endtime="20171004 20:01:35.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:35.564" status="PASS" endtime="20171004 20:01:35.564"></status>
</kw>
<status starttime="20171004 20:01:35.338" status="PASS" endtime="20171004 20:01:35.565"></status>
</kw>
<status starttime="20171004 20:01:35.338" status="PASS" endtime="20171004 20:01:35.565"></status>
</kw>
<status starttime="20171004 20:01:35.337" status="PASS" endtime="20171004 20:01:35.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.565">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:01:35.565" status="PASS" endtime="20171004 20:01:35.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.567">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:35.567" status="PASS" endtime="20171004 20:01:35.567"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.568">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:35.568" status="PASS" endtime="20171004 20:01:35.568"></status>
</kw>
<status starttime="20171004 20:01:35.568" status="PASS" endtime="20171004 20:01:35.569"></status>
</kw>
<status starttime="20171004 20:01:35.566" status="PASS" endtime="20171004 20:01:35.569"></status>
</kw>
<status starttime="20171004 20:01:35.566" status="PASS" endtime="20171004 20:01:35.569"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:01:35.635">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:35.569" status="PASS" endtime="20171004 20:01:35.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.637">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:35.636" status="PASS" endtime="20171004 20:01:35.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.638">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:35.637" status="PASS" endtime="20171004 20:01:35.638"></status>
</kw>
<status starttime="20171004 20:01:35.637" status="PASS" endtime="20171004 20:01:35.638"></status>
</kw>
<status starttime="20171004 20:01:35.636" status="PASS" endtime="20171004 20:01:35.638"></status>
</kw>
<status starttime="20171004 20:01:35.635" status="PASS" endtime="20171004 20:01:35.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:01:35.638">Delete All Sessions</msg>
<status starttime="20171004 20:01:35.638" status="PASS" endtime="20171004 20:01:35.638"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:35.639">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:35.337" status="PASS" endtime="20171004 20:01:35.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:35.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:35.639" status="PASS" endtime="20171004 20:01:35.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:35.640">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:01:35.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:01:35.640">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:01:35.640" status="PASS" endtime="20171004 20:01:35.640"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:35.640">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:01:35.336" status="PASS" endtime="20171004 20:01:35.641"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:35.641">${power_state} = Off</msg>
<status starttime="20171004 20:01:35.335" status="PASS" endtime="20171004 20:01:35.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:01:35.641">On != Off</msg>
<status starttime="20171004 20:01:35.641" status="FAIL" endtime="20171004 20:01:35.642"></status>
</kw>
<status starttime="20171004 20:01:35.335" status="FAIL" endtime="20171004 20:01:35.642"></status>
</kw>
<status starttime="20171004 20:01:35.334" status="FAIL" endtime="20171004 20:01:35.642"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.647">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:01:45.647" status="PASS" endtime="20171004 20:01:45.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.648">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:01:45.648" status="PASS" endtime="20171004 20:01:45.648"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.649">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:01:45.649" status="PASS" endtime="20171004 20:01:45.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:01:45.649" status="PASS" endtime="20171004 20:01:45.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.896">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:01:45.650" status="PASS" endtime="20171004 20:01:45.896"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:45.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:01:45.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:45.650" status="PASS" endtime="20171004 20:01:45.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:45.897" status="PASS" endtime="20171004 20:01:45.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:45.897" status="PASS" endtime="20171004 20:01:45.898"></status>
</kw>
<status starttime="20171004 20:01:45.646" status="PASS" endtime="20171004 20:01:45.898"></status>
</kw>
<status starttime="20171004 20:01:45.646" status="PASS" endtime="20171004 20:01:45.898"></status>
</kw>
<status starttime="20171004 20:01:45.645" status="PASS" endtime="20171004 20:01:45.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.899">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:01:45.898" status="PASS" endtime="20171004 20:01:45.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.901">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:45.900" status="PASS" endtime="20171004 20:01:45.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.902">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:45.901" status="PASS" endtime="20171004 20:01:45.902"></status>
</kw>
<status starttime="20171004 20:01:45.901" status="PASS" endtime="20171004 20:01:45.902"></status>
</kw>
<status starttime="20171004 20:01:45.899" status="PASS" endtime="20171004 20:01:45.902"></status>
</kw>
<status starttime="20171004 20:01:45.899" status="PASS" endtime="20171004 20:01:45.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.964">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:01:45.964">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:45.902" status="PASS" endtime="20171004 20:01:45.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.966">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:45.966" status="PASS" endtime="20171004 20:01:45.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.967">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:45.967" status="PASS" endtime="20171004 20:01:45.968"></status>
</kw>
<status starttime="20171004 20:01:45.966" status="PASS" endtime="20171004 20:01:45.968"></status>
</kw>
<status starttime="20171004 20:01:45.965" status="PASS" endtime="20171004 20:01:45.968"></status>
</kw>
<status starttime="20171004 20:01:45.965" status="PASS" endtime="20171004 20:01:45.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:01:45.968">Delete All Sessions</msg>
<status starttime="20171004 20:01:45.968" status="PASS" endtime="20171004 20:01:45.968"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:45.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:45.644" status="PASS" endtime="20171004 20:01:45.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:45.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:45.969" status="PASS" endtime="20171004 20:01:45.971"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:45.971">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:01:45.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:01:45.972">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:01:45.971" status="PASS" endtime="20171004 20:01:45.972"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:45.972">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:01:45.644" status="PASS" endtime="20171004 20:01:45.972"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:45.972">${power_state} = Off</msg>
<status starttime="20171004 20:01:45.643" status="PASS" endtime="20171004 20:01:45.972"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:01:45.973">On != Off</msg>
<status starttime="20171004 20:01:45.973" status="FAIL" endtime="20171004 20:01:45.973"></status>
</kw>
<status starttime="20171004 20:01:45.643" status="FAIL" endtime="20171004 20:01:45.973"></status>
</kw>
<status starttime="20171004 20:01:45.642" status="FAIL" endtime="20171004 20:01:45.973"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:55.978">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:01:55.978" status="PASS" endtime="20171004 20:01:55.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:55.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:01:55.979" status="PASS" endtime="20171004 20:01:55.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:55.980">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:01:55.980" status="PASS" endtime="20171004 20:01:55.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:55.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:01:55.981" status="PASS" endtime="20171004 20:01:55.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:56.164">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:01:55.982" status="PASS" endtime="20171004 20:01:56.164"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:56.164">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:01:56.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:55.981" status="PASS" endtime="20171004 20:01:56.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:56.165">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:56.165" status="PASS" endtime="20171004 20:01:56.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:56.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:56.165" status="PASS" endtime="20171004 20:01:56.166"></status>
</kw>
<status starttime="20171004 20:01:55.978" status="PASS" endtime="20171004 20:01:56.166"></status>
</kw>
<status starttime="20171004 20:01:55.977" status="PASS" endtime="20171004 20:01:56.166"></status>
</kw>
<status starttime="20171004 20:01:55.976" status="PASS" endtime="20171004 20:01:56.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:56.167">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:01:56.166" status="PASS" endtime="20171004 20:01:56.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:56.169">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:56.168" status="PASS" endtime="20171004 20:01:56.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:56.170">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:01:56.170" status="PASS" endtime="20171004 20:01:56.170"></status>
</kw>
<status starttime="20171004 20:01:56.169" status="PASS" endtime="20171004 20:01:56.170"></status>
</kw>
<status starttime="20171004 20:01:56.168" status="PASS" endtime="20171004 20:01:56.171"></status>
</kw>
<status starttime="20171004 20:01:56.167" status="PASS" endtime="20171004 20:01:56.171"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:56.233">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:01:56.233">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:56.171" status="PASS" endtime="20171004 20:01:56.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:56.235">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:56.234" status="PASS" endtime="20171004 20:01:56.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:56.236">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:01:56.235" status="PASS" endtime="20171004 20:01:56.236"></status>
</kw>
<status starttime="20171004 20:01:56.235" status="PASS" endtime="20171004 20:01:56.236"></status>
</kw>
<status starttime="20171004 20:01:56.234" status="PASS" endtime="20171004 20:01:56.236"></status>
</kw>
<status starttime="20171004 20:01:56.233" status="PASS" endtime="20171004 20:01:56.236"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:01:56.236">Delete All Sessions</msg>
<status starttime="20171004 20:01:56.236" status="PASS" endtime="20171004 20:01:56.237"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:56.237">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:01:55.976" status="PASS" endtime="20171004 20:01:56.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:01:56.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:01:56.237" status="PASS" endtime="20171004 20:01:56.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:01:56.238">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:01:56.238">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:01:56.238">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:01:56.238" status="PASS" endtime="20171004 20:01:56.238"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:56.238">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:01:55.975" status="PASS" endtime="20171004 20:01:56.239"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:01:56.239">${power_state} = Off</msg>
<status starttime="20171004 20:01:55.975" status="PASS" endtime="20171004 20:01:56.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:01:56.240">On != Off</msg>
<status starttime="20171004 20:01:56.239" status="FAIL" endtime="20171004 20:01:56.240"></status>
</kw>
<status starttime="20171004 20:01:55.974" status="FAIL" endtime="20171004 20:01:56.240"></status>
</kw>
<status starttime="20171004 20:01:55.974" status="FAIL" endtime="20171004 20:01:56.240"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.247">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:02:06.246" status="PASS" endtime="20171004 20:02:06.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:02:06.248" status="PASS" endtime="20171004 20:02:06.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.249">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:02:06.249" status="PASS" endtime="20171004 20:02:06.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:02:06.249" status="PASS" endtime="20171004 20:02:06.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.428">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:02:06.250" status="PASS" endtime="20171004 20:02:06.428"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:06.428">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:02:06.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:06.250" status="PASS" endtime="20171004 20:02:06.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.429">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:06.429" status="PASS" endtime="20171004 20:02:06.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:06.429" status="PASS" endtime="20171004 20:02:06.430"></status>
</kw>
<status starttime="20171004 20:02:06.245" status="PASS" endtime="20171004 20:02:06.430"></status>
</kw>
<status starttime="20171004 20:02:06.244" status="PASS" endtime="20171004 20:02:06.430"></status>
</kw>
<status starttime="20171004 20:02:06.243" status="PASS" endtime="20171004 20:02:06.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.431">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:02:06.430" status="PASS" endtime="20171004 20:02:06.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.433">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:06.432" status="PASS" endtime="20171004 20:02:06.433"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.434">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:06.434" status="PASS" endtime="20171004 20:02:06.434"></status>
</kw>
<status starttime="20171004 20:02:06.433" status="PASS" endtime="20171004 20:02:06.434"></status>
</kw>
<status starttime="20171004 20:02:06.432" status="PASS" endtime="20171004 20:02:06.434"></status>
</kw>
<status starttime="20171004 20:02:06.431" status="PASS" endtime="20171004 20:02:06.434"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.501">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:02:06.501">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:06.434" status="PASS" endtime="20171004 20:02:06.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.503">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:06.502" status="PASS" endtime="20171004 20:02:06.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.507">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:06.503" status="PASS" endtime="20171004 20:02:06.507"></status>
</kw>
<status starttime="20171004 20:02:06.503" status="PASS" endtime="20171004 20:02:06.507"></status>
</kw>
<status starttime="20171004 20:02:06.502" status="PASS" endtime="20171004 20:02:06.507"></status>
</kw>
<status starttime="20171004 20:02:06.501" status="PASS" endtime="20171004 20:02:06.507"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:02:06.508">Delete All Sessions</msg>
<status starttime="20171004 20:02:06.508" status="PASS" endtime="20171004 20:02:06.508"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:06.508">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:06.242" status="PASS" endtime="20171004 20:02:06.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:06.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:06.509" status="PASS" endtime="20171004 20:02:06.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:06.510">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:02:06.510">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:02:06.510">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:02:06.509" status="PASS" endtime="20171004 20:02:06.510"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:06.510">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:02:06.242" status="PASS" endtime="20171004 20:02:06.510"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:06.511">${power_state} = Off</msg>
<status starttime="20171004 20:02:06.241" status="PASS" endtime="20171004 20:02:06.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:02:06.511">On != Off</msg>
<status starttime="20171004 20:02:06.511" status="FAIL" endtime="20171004 20:02:06.511"></status>
</kw>
<status starttime="20171004 20:02:06.241" status="FAIL" endtime="20171004 20:02:06.512"></status>
</kw>
<status starttime="20171004 20:02:06.240" status="FAIL" endtime="20171004 20:02:06.512"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.517">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:02:16.517" status="PASS" endtime="20171004 20:02:16.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.518">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:02:16.518" status="PASS" endtime="20171004 20:02:16.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:02:16.518" status="PASS" endtime="20171004 20:02:16.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.519">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:02:16.519" status="PASS" endtime="20171004 20:02:16.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.711">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:02:16.520" status="PASS" endtime="20171004 20:02:16.711"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:16.711">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:02:16.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:16.520" status="PASS" endtime="20171004 20:02:16.711"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.712">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:16.712" status="PASS" endtime="20171004 20:02:16.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:16.712" status="PASS" endtime="20171004 20:02:16.713"></status>
</kw>
<status starttime="20171004 20:02:16.516" status="PASS" endtime="20171004 20:02:16.713"></status>
</kw>
<status starttime="20171004 20:02:16.516" status="PASS" endtime="20171004 20:02:16.713"></status>
</kw>
<status starttime="20171004 20:02:16.515" status="PASS" endtime="20171004 20:02:16.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.714">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:02:16.713" status="PASS" endtime="20171004 20:02:16.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.716">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:16.715" status="PASS" endtime="20171004 20:02:16.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.717">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:16.717" status="PASS" endtime="20171004 20:02:16.717"></status>
</kw>
<status starttime="20171004 20:02:16.716" status="PASS" endtime="20171004 20:02:16.717"></status>
</kw>
<status starttime="20171004 20:02:16.715" status="PASS" endtime="20171004 20:02:16.717"></status>
</kw>
<status starttime="20171004 20:02:16.714" status="PASS" endtime="20171004 20:02:16.717"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.782">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:02:16.782">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:16.718" status="PASS" endtime="20171004 20:02:16.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:16.783" status="PASS" endtime="20171004 20:02:16.784"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:16.784" status="PASS" endtime="20171004 20:02:16.785"></status>
</kw>
<status starttime="20171004 20:02:16.784" status="PASS" endtime="20171004 20:02:16.785"></status>
</kw>
<status starttime="20171004 20:02:16.783" status="PASS" endtime="20171004 20:02:16.785"></status>
</kw>
<status starttime="20171004 20:02:16.782" status="PASS" endtime="20171004 20:02:16.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:02:16.785">Delete All Sessions</msg>
<status starttime="20171004 20:02:16.785" status="PASS" endtime="20171004 20:02:16.786"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:16.786">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:16.514" status="PASS" endtime="20171004 20:02:16.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:16.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:16.786" status="PASS" endtime="20171004 20:02:16.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:16.787">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:02:16.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:02:16.787">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:02:16.787" status="PASS" endtime="20171004 20:02:16.787"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:16.787">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:02:16.514" status="PASS" endtime="20171004 20:02:16.788"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:16.788">${power_state} = Off</msg>
<status starttime="20171004 20:02:16.513" status="PASS" endtime="20171004 20:02:16.788"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:02:16.788">On != Off</msg>
<status starttime="20171004 20:02:16.788" status="FAIL" endtime="20171004 20:02:16.789"></status>
</kw>
<status starttime="20171004 20:02:16.513" status="FAIL" endtime="20171004 20:02:16.789"></status>
</kw>
<status starttime="20171004 20:02:16.512" status="FAIL" endtime="20171004 20:02:16.789"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:26.795">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:02:26.795" status="PASS" endtime="20171004 20:02:26.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:26.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:02:26.796" status="PASS" endtime="20171004 20:02:26.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:26.797">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:02:26.796" status="PASS" endtime="20171004 20:02:26.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:26.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:02:26.797" status="PASS" endtime="20171004 20:02:26.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:27.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:02:26.798" status="PASS" endtime="20171004 20:02:27.005"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:27.005">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:02:27.005">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:26.798" status="PASS" endtime="20171004 20:02:27.005"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:27.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:27.005" status="PASS" endtime="20171004 20:02:27.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:27.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:27.006" status="PASS" endtime="20171004 20:02:27.006"></status>
</kw>
<status starttime="20171004 20:02:26.794" status="PASS" endtime="20171004 20:02:27.007"></status>
</kw>
<status starttime="20171004 20:02:26.793" status="PASS" endtime="20171004 20:02:27.007"></status>
</kw>
<status starttime="20171004 20:02:26.792" status="PASS" endtime="20171004 20:02:27.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:27.007">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:02:27.007" status="PASS" endtime="20171004 20:02:27.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:27.009">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:27.009" status="PASS" endtime="20171004 20:02:27.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:27.010">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:27.010" status="PASS" endtime="20171004 20:02:27.011"></status>
</kw>
<status starttime="20171004 20:02:27.010" status="PASS" endtime="20171004 20:02:27.011"></status>
</kw>
<status starttime="20171004 20:02:27.008" status="PASS" endtime="20171004 20:02:27.011"></status>
</kw>
<status starttime="20171004 20:02:27.008" status="PASS" endtime="20171004 20:02:27.011"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:27.106">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:02:27.107">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:27.011" status="PASS" endtime="20171004 20:02:27.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:27.109">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:27.108" status="PASS" endtime="20171004 20:02:27.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:27.110">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:27.109" status="PASS" endtime="20171004 20:02:27.110"></status>
</kw>
<status starttime="20171004 20:02:27.109" status="PASS" endtime="20171004 20:02:27.110"></status>
</kw>
<status starttime="20171004 20:02:27.107" status="PASS" endtime="20171004 20:02:27.110"></status>
</kw>
<status starttime="20171004 20:02:27.107" status="PASS" endtime="20171004 20:02:27.110"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:02:27.111">Delete All Sessions</msg>
<status starttime="20171004 20:02:27.111" status="PASS" endtime="20171004 20:02:27.111"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:27.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:26.791" status="PASS" endtime="20171004 20:02:27.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:27.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:27.111" status="PASS" endtime="20171004 20:02:27.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:27.112">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:02:27.112">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:02:27.113">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:02:27.112" status="PASS" endtime="20171004 20:02:27.113"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:27.113">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:02:26.791" status="PASS" endtime="20171004 20:02:27.113"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:27.113">${power_state} = Off</msg>
<status starttime="20171004 20:02:26.790" status="PASS" endtime="20171004 20:02:27.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:02:27.114">On != Off</msg>
<status starttime="20171004 20:02:27.113" status="FAIL" endtime="20171004 20:02:27.114"></status>
</kw>
<status starttime="20171004 20:02:26.790" status="FAIL" endtime="20171004 20:02:27.114"></status>
</kw>
<status starttime="20171004 20:02:26.789" status="FAIL" endtime="20171004 20:02:27.114"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.119">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:02:37.119" status="PASS" endtime="20171004 20:02:37.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:02:37.120" status="PASS" endtime="20171004 20:02:37.120"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.121">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:02:37.121" status="PASS" endtime="20171004 20:02:37.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.122">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:02:37.121" status="PASS" endtime="20171004 20:02:37.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.316">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:02:37.122" status="PASS" endtime="20171004 20:02:37.316"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:37.316">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:02:37.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:37.122" status="PASS" endtime="20171004 20:02:37.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:37.317" status="PASS" endtime="20171004 20:02:37.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:37.317" status="PASS" endtime="20171004 20:02:37.318"></status>
</kw>
<status starttime="20171004 20:02:37.118" status="PASS" endtime="20171004 20:02:37.318"></status>
</kw>
<status starttime="20171004 20:02:37.118" status="PASS" endtime="20171004 20:02:37.318"></status>
</kw>
<status starttime="20171004 20:02:37.117" status="PASS" endtime="20171004 20:02:37.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.319">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:02:37.318" status="PASS" endtime="20171004 20:02:37.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.321">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:37.320" status="PASS" endtime="20171004 20:02:37.321"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.322">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:37.322" status="PASS" endtime="20171004 20:02:37.322"></status>
</kw>
<status starttime="20171004 20:02:37.321" status="PASS" endtime="20171004 20:02:37.323"></status>
</kw>
<status starttime="20171004 20:02:37.320" status="PASS" endtime="20171004 20:02:37.323"></status>
</kw>
<status starttime="20171004 20:02:37.319" status="PASS" endtime="20171004 20:02:37.323"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.402">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:02:37.402">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:37.323" status="PASS" endtime="20171004 20:02:37.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.404">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:37.404" status="PASS" endtime="20171004 20:02:37.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.405">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:37.405" status="PASS" endtime="20171004 20:02:37.405"></status>
</kw>
<status starttime="20171004 20:02:37.405" status="PASS" endtime="20171004 20:02:37.405"></status>
</kw>
<status starttime="20171004 20:02:37.403" status="PASS" endtime="20171004 20:02:37.406"></status>
</kw>
<status starttime="20171004 20:02:37.403" status="PASS" endtime="20171004 20:02:37.406"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:02:37.406">Delete All Sessions</msg>
<status starttime="20171004 20:02:37.406" status="PASS" endtime="20171004 20:02:37.406"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:37.406">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:37.117" status="PASS" endtime="20171004 20:02:37.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:37.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:37.407" status="PASS" endtime="20171004 20:02:37.407"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:37.408">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:02:37.408">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:02:37.408">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:02:37.407" status="PASS" endtime="20171004 20:02:37.408"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:37.408">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:02:37.116" status="PASS" endtime="20171004 20:02:37.408"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:37.408">${power_state} = Off</msg>
<status starttime="20171004 20:02:37.116" status="PASS" endtime="20171004 20:02:37.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:02:37.409">On != Off</msg>
<status starttime="20171004 20:02:37.409" status="FAIL" endtime="20171004 20:02:37.409"></status>
</kw>
<status starttime="20171004 20:02:37.115" status="FAIL" endtime="20171004 20:02:37.409"></status>
</kw>
<status starttime="20171004 20:02:37.115" status="FAIL" endtime="20171004 20:02:37.410"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.415">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:02:47.415" status="PASS" endtime="20171004 20:02:47.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.416">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:02:47.416" status="PASS" endtime="20171004 20:02:47.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.417">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:02:47.417" status="PASS" endtime="20171004 20:02:47.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.418">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:02:47.417" status="PASS" endtime="20171004 20:02:47.418"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:02:47.418" status="PASS" endtime="20171004 20:02:47.609"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:47.609">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:02:47.609">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:47.418" status="PASS" endtime="20171004 20:02:47.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.610">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:47.610" status="PASS" endtime="20171004 20:02:47.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:47.610" status="PASS" endtime="20171004 20:02:47.611"></status>
</kw>
<status starttime="20171004 20:02:47.414" status="PASS" endtime="20171004 20:02:47.611"></status>
</kw>
<status starttime="20171004 20:02:47.413" status="PASS" endtime="20171004 20:02:47.611"></status>
</kw>
<status starttime="20171004 20:02:47.413" status="PASS" endtime="20171004 20:02:47.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.612">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:02:47.611" status="PASS" endtime="20171004 20:02:47.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.614">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:47.613" status="PASS" endtime="20171004 20:02:47.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.615">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:47.614" status="PASS" endtime="20171004 20:02:47.615"></status>
</kw>
<status starttime="20171004 20:02:47.614" status="PASS" endtime="20171004 20:02:47.615"></status>
</kw>
<status starttime="20171004 20:02:47.612" status="PASS" endtime="20171004 20:02:47.615"></status>
</kw>
<status starttime="20171004 20:02:47.612" status="PASS" endtime="20171004 20:02:47.615"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.689">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:02:47.689">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:47.615" status="PASS" endtime="20171004 20:02:47.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.691">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:47.690" status="PASS" endtime="20171004 20:02:47.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.692">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:47.691" status="PASS" endtime="20171004 20:02:47.692"></status>
</kw>
<status starttime="20171004 20:02:47.691" status="PASS" endtime="20171004 20:02:47.692"></status>
</kw>
<status starttime="20171004 20:02:47.689" status="PASS" endtime="20171004 20:02:47.692"></status>
</kw>
<status starttime="20171004 20:02:47.689" status="PASS" endtime="20171004 20:02:47.692"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:02:47.693">Delete All Sessions</msg>
<status starttime="20171004 20:02:47.693" status="PASS" endtime="20171004 20:02:47.693"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:47.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:47.412" status="PASS" endtime="20171004 20:02:47.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:47.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:47.693" status="PASS" endtime="20171004 20:02:47.694"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:47.694">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:02:47.694">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:02:47.694">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:02:47.694" status="PASS" endtime="20171004 20:02:47.695"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:47.695">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:02:47.411" status="PASS" endtime="20171004 20:02:47.695"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:47.695">${power_state} = Off</msg>
<status starttime="20171004 20:02:47.411" status="PASS" endtime="20171004 20:02:47.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:02:47.696">On != Off</msg>
<status starttime="20171004 20:02:47.695" status="FAIL" endtime="20171004 20:02:47.696"></status>
</kw>
<status starttime="20171004 20:02:47.411" status="FAIL" endtime="20171004 20:02:47.696"></status>
</kw>
<status starttime="20171004 20:02:47.410" status="FAIL" endtime="20171004 20:02:47.696"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:57.702">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:02:57.701" status="PASS" endtime="20171004 20:02:57.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:02:57.702" status="PASS" endtime="20171004 20:02:57.703"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.703">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:02:57.703" status="PASS" endtime="20171004 20:02:57.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.704">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:02:57.703" status="PASS" endtime="20171004 20:02:57.704"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:57.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:02:57.705" status="PASS" endtime="20171004 20:02:57.919"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:57.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:02:57.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:57.704" status="PASS" endtime="20171004 20:02:57.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:57.919">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:57.919" status="PASS" endtime="20171004 20:02:57.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:57.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:57.920" status="PASS" endtime="20171004 20:02:57.920"></status>
</kw>
<status starttime="20171004 20:02:57.701" status="PASS" endtime="20171004 20:02:57.920"></status>
</kw>
<status starttime="20171004 20:02:57.700" status="PASS" endtime="20171004 20:02:57.921"></status>
</kw>
<status starttime="20171004 20:02:57.699" status="PASS" endtime="20171004 20:02:57.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.921">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:02:57.921" status="PASS" endtime="20171004 20:02:57.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.924">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:57.923" status="PASS" endtime="20171004 20:02:57.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:57.926">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:02:57.925" status="PASS" endtime="20171004 20:02:57.926"></status>
</kw>
<status starttime="20171004 20:02:57.924" status="PASS" endtime="20171004 20:02:57.926"></status>
</kw>
<status starttime="20171004 20:02:57.922" status="PASS" endtime="20171004 20:02:57.926"></status>
</kw>
<status starttime="20171004 20:02:57.922" status="PASS" endtime="20171004 20:02:57.926"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.996">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:02:57.996">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:57.926" status="PASS" endtime="20171004 20:02:57.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:57.998">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:57.997" status="PASS" endtime="20171004 20:02:57.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:57.999">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:02:57.998" status="PASS" endtime="20171004 20:02:57.999"></status>
</kw>
<status starttime="20171004 20:02:57.998" status="PASS" endtime="20171004 20:02:57.999"></status>
</kw>
<status starttime="20171004 20:02:57.997" status="PASS" endtime="20171004 20:02:57.999"></status>
</kw>
<status starttime="20171004 20:02:57.996" status="PASS" endtime="20171004 20:02:57.999"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:02:58.000">Delete All Sessions</msg>
<status starttime="20171004 20:02:57.999" status="PASS" endtime="20171004 20:02:58.000"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:58.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:02:57.699" status="PASS" endtime="20171004 20:02:58.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:02:58.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:02:58.000" status="PASS" endtime="20171004 20:02:58.001"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:02:58.001">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:02:58.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:02:58.002">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:02:58.001" status="PASS" endtime="20171004 20:02:58.002"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:58.002">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:02:57.698" status="PASS" endtime="20171004 20:02:58.002"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:02:58.002">${power_state} = Off</msg>
<status starttime="20171004 20:02:57.698" status="PASS" endtime="20171004 20:02:58.002"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:02:58.003">On != Off</msg>
<status starttime="20171004 20:02:58.003" status="FAIL" endtime="20171004 20:02:58.003"></status>
</kw>
<status starttime="20171004 20:02:57.697" status="FAIL" endtime="20171004 20:02:58.003"></status>
</kw>
<status starttime="20171004 20:02:57.697" status="FAIL" endtime="20171004 20:02:58.003"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.009">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:03:08.008" status="PASS" endtime="20171004 20:03:08.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:03:08.009" status="PASS" endtime="20171004 20:03:08.010"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:03:08.010" status="PASS" endtime="20171004 20:03:08.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:03:08.011" status="PASS" endtime="20171004 20:03:08.011"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:03:08.012" status="PASS" endtime="20171004 20:03:08.226"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:08.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:03:08.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:08.011" status="PASS" endtime="20171004 20:03:08.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:08.227" status="PASS" endtime="20171004 20:03:08.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:08.227" status="PASS" endtime="20171004 20:03:08.228"></status>
</kw>
<status starttime="20171004 20:03:08.007" status="PASS" endtime="20171004 20:03:08.228"></status>
</kw>
<status starttime="20171004 20:03:08.007" status="PASS" endtime="20171004 20:03:08.228"></status>
</kw>
<status starttime="20171004 20:03:08.006" status="PASS" endtime="20171004 20:03:08.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.229">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:03:08.229" status="PASS" endtime="20171004 20:03:08.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.231">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:08.230" status="PASS" endtime="20171004 20:03:08.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.232">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:08.232" status="PASS" endtime="20171004 20:03:08.232"></status>
</kw>
<status starttime="20171004 20:03:08.231" status="PASS" endtime="20171004 20:03:08.232"></status>
</kw>
<status starttime="20171004 20:03:08.230" status="PASS" endtime="20171004 20:03:08.232"></status>
</kw>
<status starttime="20171004 20:03:08.229" status="PASS" endtime="20171004 20:03:08.233"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.296">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:03:08.296">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:08.233" status="PASS" endtime="20171004 20:03:08.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.298">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:08.298" status="PASS" endtime="20171004 20:03:08.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.299">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:08.299" status="PASS" endtime="20171004 20:03:08.300"></status>
</kw>
<status starttime="20171004 20:03:08.298" status="PASS" endtime="20171004 20:03:08.300"></status>
</kw>
<status starttime="20171004 20:03:08.297" status="PASS" endtime="20171004 20:03:08.300"></status>
</kw>
<status starttime="20171004 20:03:08.297" status="PASS" endtime="20171004 20:03:08.300"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:03:08.300">Delete All Sessions</msg>
<status starttime="20171004 20:03:08.300" status="PASS" endtime="20171004 20:03:08.300"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:08.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:08.006" status="PASS" endtime="20171004 20:03:08.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:08.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:08.301" status="PASS" endtime="20171004 20:03:08.301"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:08.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:03:08.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:03:08.302">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:03:08.302" status="PASS" endtime="20171004 20:03:08.302"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:08.302">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:03:08.005" status="PASS" endtime="20171004 20:03:08.302"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:08.303">${power_state} = Off</msg>
<status starttime="20171004 20:03:08.005" status="PASS" endtime="20171004 20:03:08.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:03:08.303">On != Off</msg>
<status starttime="20171004 20:03:08.303" status="FAIL" endtime="20171004 20:03:08.303"></status>
</kw>
<status starttime="20171004 20:03:08.004" status="FAIL" endtime="20171004 20:03:08.304"></status>
</kw>
<status starttime="20171004 20:03:08.004" status="FAIL" endtime="20171004 20:03:08.304"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.309">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:03:18.308" status="PASS" endtime="20171004 20:03:18.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.310">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:03:18.309" status="PASS" endtime="20171004 20:03:18.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.310">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:03:18.310" status="PASS" endtime="20171004 20:03:18.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.311">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:03:18.311" status="PASS" endtime="20171004 20:03:18.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:03:18.312" status="PASS" endtime="20171004 20:03:18.503"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:18.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:03:18.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:18.311" status="PASS" endtime="20171004 20:03:18.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:18.503" status="PASS" endtime="20171004 20:03:18.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:18.504" status="PASS" endtime="20171004 20:03:18.505"></status>
</kw>
<status starttime="20171004 20:03:18.308" status="PASS" endtime="20171004 20:03:18.505"></status>
</kw>
<status starttime="20171004 20:03:18.307" status="PASS" endtime="20171004 20:03:18.505"></status>
</kw>
<status starttime="20171004 20:03:18.307" status="PASS" endtime="20171004 20:03:18.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.505">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:03:18.505" status="PASS" endtime="20171004 20:03:18.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.507">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:18.507" status="PASS" endtime="20171004 20:03:18.508"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.508">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:18.508" status="PASS" endtime="20171004 20:03:18.509"></status>
</kw>
<status starttime="20171004 20:03:18.508" status="PASS" endtime="20171004 20:03:18.509"></status>
</kw>
<status starttime="20171004 20:03:18.506" status="PASS" endtime="20171004 20:03:18.509"></status>
</kw>
<status starttime="20171004 20:03:18.506" status="PASS" endtime="20171004 20:03:18.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.601">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:03:18.601">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:18.509" status="PASS" endtime="20171004 20:03:18.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.603">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:18.602" status="PASS" endtime="20171004 20:03:18.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.604">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:18.604" status="PASS" endtime="20171004 20:03:18.604"></status>
</kw>
<status starttime="20171004 20:03:18.603" status="PASS" endtime="20171004 20:03:18.604"></status>
</kw>
<status starttime="20171004 20:03:18.602" status="PASS" endtime="20171004 20:03:18.604"></status>
</kw>
<status starttime="20171004 20:03:18.601" status="PASS" endtime="20171004 20:03:18.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:03:18.605">Delete All Sessions</msg>
<status starttime="20171004 20:03:18.605" status="PASS" endtime="20171004 20:03:18.605"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:18.605">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:18.306" status="PASS" endtime="20171004 20:03:18.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:18.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:18.605" status="PASS" endtime="20171004 20:03:18.606"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:18.606">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:03:18.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:03:18.606">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:03:18.606" status="PASS" endtime="20171004 20:03:18.606"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:18.607">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:03:18.305" status="PASS" endtime="20171004 20:03:18.607"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:18.607">${power_state} = Off</msg>
<status starttime="20171004 20:03:18.305" status="PASS" endtime="20171004 20:03:18.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:03:18.608">On != Off</msg>
<status starttime="20171004 20:03:18.607" status="FAIL" endtime="20171004 20:03:18.608"></status>
</kw>
<status starttime="20171004 20:03:18.305" status="FAIL" endtime="20171004 20:03:18.608"></status>
</kw>
<status starttime="20171004 20:03:18.304" status="FAIL" endtime="20171004 20:03:18.608"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.614">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:03:28.613" status="PASS" endtime="20171004 20:03:28.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:03:28.614" status="PASS" endtime="20171004 20:03:28.615"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:03:28.615" status="PASS" endtime="20171004 20:03:28.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:03:28.616" status="PASS" endtime="20171004 20:03:28.616"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:03:28.617" status="PASS" endtime="20171004 20:03:28.827"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:28.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:03:28.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:28.616" status="PASS" endtime="20171004 20:03:28.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:28.827" status="PASS" endtime="20171004 20:03:28.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:28.828" status="PASS" endtime="20171004 20:03:28.828"></status>
</kw>
<status starttime="20171004 20:03:28.612" status="PASS" endtime="20171004 20:03:28.829"></status>
</kw>
<status starttime="20171004 20:03:28.612" status="PASS" endtime="20171004 20:03:28.829"></status>
</kw>
<status starttime="20171004 20:03:28.611" status="PASS" endtime="20171004 20:03:28.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.829">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:03:28.829" status="PASS" endtime="20171004 20:03:28.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.832">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:28.831" status="PASS" endtime="20171004 20:03:28.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.833">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:28.832" status="PASS" endtime="20171004 20:03:28.833"></status>
</kw>
<status starttime="20171004 20:03:28.832" status="PASS" endtime="20171004 20:03:28.833"></status>
</kw>
<status starttime="20171004 20:03:28.830" status="PASS" endtime="20171004 20:03:28.833"></status>
</kw>
<status starttime="20171004 20:03:28.830" status="PASS" endtime="20171004 20:03:28.833"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.911">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:03:28.911">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:28.833" status="PASS" endtime="20171004 20:03:28.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.913">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:28.912" status="PASS" endtime="20171004 20:03:28.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.917">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:28.914" status="PASS" endtime="20171004 20:03:28.917"></status>
</kw>
<status starttime="20171004 20:03:28.913" status="PASS" endtime="20171004 20:03:28.917"></status>
</kw>
<status starttime="20171004 20:03:28.912" status="PASS" endtime="20171004 20:03:28.917"></status>
</kw>
<status starttime="20171004 20:03:28.912" status="PASS" endtime="20171004 20:03:28.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:03:28.918">Delete All Sessions</msg>
<status starttime="20171004 20:03:28.918" status="PASS" endtime="20171004 20:03:28.918"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:28.918">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:28.611" status="PASS" endtime="20171004 20:03:28.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:28.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:28.919" status="PASS" endtime="20171004 20:03:28.919"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:28.920">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:03:28.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:03:28.920">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:03:28.919" status="PASS" endtime="20171004 20:03:28.920"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:28.920">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:03:28.610" status="PASS" endtime="20171004 20:03:28.920"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:28.920">${power_state} = Off</msg>
<status starttime="20171004 20:03:28.609" status="PASS" endtime="20171004 20:03:28.920"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:03:28.921">On != Off</msg>
<status starttime="20171004 20:03:28.921" status="FAIL" endtime="20171004 20:03:28.921"></status>
</kw>
<status starttime="20171004 20:03:28.609" status="FAIL" endtime="20171004 20:03:28.922"></status>
</kw>
<status starttime="20171004 20:03:28.609" status="FAIL" endtime="20171004 20:03:28.922"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:38.927">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:03:38.926" status="PASS" endtime="20171004 20:03:38.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:38.928">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:03:38.927" status="PASS" endtime="20171004 20:03:38.928"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:38.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:03:38.928" status="PASS" endtime="20171004 20:03:38.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:38.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:03:38.929" status="PASS" endtime="20171004 20:03:38.929"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:39.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:03:38.930" status="PASS" endtime="20171004 20:03:39.142"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:39.142">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:03:39.142">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:38.929" status="PASS" endtime="20171004 20:03:39.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:39.143">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:39.142" status="PASS" endtime="20171004 20:03:39.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:39.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:39.143" status="PASS" endtime="20171004 20:03:39.144"></status>
</kw>
<status starttime="20171004 20:03:38.926" status="PASS" endtime="20171004 20:03:39.144"></status>
</kw>
<status starttime="20171004 20:03:38.925" status="PASS" endtime="20171004 20:03:39.144"></status>
</kw>
<status starttime="20171004 20:03:38.925" status="PASS" endtime="20171004 20:03:39.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:39.145">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:03:39.144" status="PASS" endtime="20171004 20:03:39.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:39.147">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:39.146" status="PASS" endtime="20171004 20:03:39.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:39.148">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:39.147" status="PASS" endtime="20171004 20:03:39.148"></status>
</kw>
<status starttime="20171004 20:03:39.147" status="PASS" endtime="20171004 20:03:39.148"></status>
</kw>
<status starttime="20171004 20:03:39.145" status="PASS" endtime="20171004 20:03:39.148"></status>
</kw>
<status starttime="20171004 20:03:39.145" status="PASS" endtime="20171004 20:03:39.148"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:39.213">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:03:39.214">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:39.148" status="PASS" endtime="20171004 20:03:39.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:39.216">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:39.215" status="PASS" endtime="20171004 20:03:39.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:39.218">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:39.218" status="PASS" endtime="20171004 20:03:39.218"></status>
</kw>
<status starttime="20171004 20:03:39.216" status="PASS" endtime="20171004 20:03:39.218"></status>
</kw>
<status starttime="20171004 20:03:39.215" status="PASS" endtime="20171004 20:03:39.218"></status>
</kw>
<status starttime="20171004 20:03:39.214" status="PASS" endtime="20171004 20:03:39.218"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:03:39.219">Delete All Sessions</msg>
<status starttime="20171004 20:03:39.219" status="PASS" endtime="20171004 20:03:39.219"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:39.219">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:38.924" status="PASS" endtime="20171004 20:03:39.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:39.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:39.219" status="PASS" endtime="20171004 20:03:39.220"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:39.220">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:03:39.220">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:03:39.220">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:03:39.220" status="PASS" endtime="20171004 20:03:39.220"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:39.221">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:03:38.924" status="PASS" endtime="20171004 20:03:39.221"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:39.221">${power_state} = Off</msg>
<status starttime="20171004 20:03:38.923" status="PASS" endtime="20171004 20:03:39.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:03:39.222">On != Off</msg>
<status starttime="20171004 20:03:39.221" status="FAIL" endtime="20171004 20:03:39.222"></status>
</kw>
<status starttime="20171004 20:03:38.923" status="FAIL" endtime="20171004 20:03:39.222"></status>
</kw>
<status starttime="20171004 20:03:38.922" status="FAIL" endtime="20171004 20:03:39.222"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.228">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:03:49.227" status="PASS" endtime="20171004 20:03:49.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.229">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:03:49.228" status="PASS" endtime="20171004 20:03:49.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.229">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:03:49.229" status="PASS" endtime="20171004 20:03:49.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.230">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:03:49.229" status="PASS" endtime="20171004 20:03:49.230"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.463">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:03:49.231" status="PASS" endtime="20171004 20:03:49.463"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:49.463">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:03:49.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:49.230" status="PASS" endtime="20171004 20:03:49.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.464">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:49.463" status="PASS" endtime="20171004 20:03:49.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:49.464" status="PASS" endtime="20171004 20:03:49.465"></status>
</kw>
<status starttime="20171004 20:03:49.226" status="PASS" endtime="20171004 20:03:49.465"></status>
</kw>
<status starttime="20171004 20:03:49.226" status="PASS" endtime="20171004 20:03:49.465"></status>
</kw>
<status starttime="20171004 20:03:49.225" status="PASS" endtime="20171004 20:03:49.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.465">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:03:49.465" status="PASS" endtime="20171004 20:03:49.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.468">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:49.467" status="PASS" endtime="20171004 20:03:49.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.468">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:49.468" status="PASS" endtime="20171004 20:03:49.469"></status>
</kw>
<status starttime="20171004 20:03:49.468" status="PASS" endtime="20171004 20:03:49.469"></status>
</kw>
<status starttime="20171004 20:03:49.466" status="PASS" endtime="20171004 20:03:49.469"></status>
</kw>
<status starttime="20171004 20:03:49.466" status="PASS" endtime="20171004 20:03:49.469"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.532">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:03:49.532">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:49.469" status="PASS" endtime="20171004 20:03:49.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.534">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:49.533" status="PASS" endtime="20171004 20:03:49.534"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.535">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:49.534" status="PASS" endtime="20171004 20:03:49.535"></status>
</kw>
<status starttime="20171004 20:03:49.534" status="PASS" endtime="20171004 20:03:49.535"></status>
</kw>
<status starttime="20171004 20:03:49.533" status="PASS" endtime="20171004 20:03:49.535"></status>
</kw>
<status starttime="20171004 20:03:49.532" status="PASS" endtime="20171004 20:03:49.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:03:49.536">Delete All Sessions</msg>
<status starttime="20171004 20:03:49.536" status="PASS" endtime="20171004 20:03:49.536"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:49.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:49.225" status="PASS" endtime="20171004 20:03:49.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:49.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:49.536" status="PASS" endtime="20171004 20:03:49.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:49.537">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:03:49.537">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:03:49.538">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:03:49.537" status="PASS" endtime="20171004 20:03:49.538"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:49.538">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:03:49.224" status="PASS" endtime="20171004 20:03:49.538"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:49.538">${power_state} = Off</msg>
<status starttime="20171004 20:03:49.224" status="PASS" endtime="20171004 20:03:49.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:03:49.539">On != Off</msg>
<status starttime="20171004 20:03:49.538" status="FAIL" endtime="20171004 20:03:49.539"></status>
</kw>
<status starttime="20171004 20:03:49.223" status="FAIL" endtime="20171004 20:03:49.539"></status>
</kw>
<status starttime="20171004 20:03:49.223" status="FAIL" endtime="20171004 20:03:49.539"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.544">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:03:59.544" status="PASS" endtime="20171004 20:03:59.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.545">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:03:59.545" status="PASS" endtime="20171004 20:03:59.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.546">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:03:59.545" status="PASS" endtime="20171004 20:03:59.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.546">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:03:59.546" status="PASS" endtime="20171004 20:03:59.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:03:59.547" status="PASS" endtime="20171004 20:03:59.752"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:59.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:03:59.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:59.547" status="PASS" endtime="20171004 20:03:59.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:59.753" status="PASS" endtime="20171004 20:03:59.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:59.753" status="PASS" endtime="20171004 20:03:59.754"></status>
</kw>
<status starttime="20171004 20:03:59.543" status="PASS" endtime="20171004 20:03:59.754"></status>
</kw>
<status starttime="20171004 20:03:59.543" status="PASS" endtime="20171004 20:03:59.754"></status>
</kw>
<status starttime="20171004 20:03:59.542" status="PASS" endtime="20171004 20:03:59.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.755">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:03:59.754" status="PASS" endtime="20171004 20:03:59.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.757">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:59.756" status="PASS" endtime="20171004 20:03:59.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.758">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:03:59.757" status="PASS" endtime="20171004 20:03:59.758"></status>
</kw>
<status starttime="20171004 20:03:59.757" status="PASS" endtime="20171004 20:03:59.758"></status>
</kw>
<status starttime="20171004 20:03:59.755" status="PASS" endtime="20171004 20:03:59.758"></status>
</kw>
<status starttime="20171004 20:03:59.755" status="PASS" endtime="20171004 20:03:59.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.827">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:03:59.827">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:59.758" status="PASS" endtime="20171004 20:03:59.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.829">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:59.829" status="PASS" endtime="20171004 20:03:59.829"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.830">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:03:59.830" status="PASS" endtime="20171004 20:03:59.830"></status>
</kw>
<status starttime="20171004 20:03:59.829" status="PASS" endtime="20171004 20:03:59.830"></status>
</kw>
<status starttime="20171004 20:03:59.828" status="PASS" endtime="20171004 20:03:59.830"></status>
</kw>
<status starttime="20171004 20:03:59.828" status="PASS" endtime="20171004 20:03:59.830"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:03:59.831">Delete All Sessions</msg>
<status starttime="20171004 20:03:59.831" status="PASS" endtime="20171004 20:03:59.831"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:59.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:03:59.542" status="PASS" endtime="20171004 20:03:59.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:03:59.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:03:59.832" status="PASS" endtime="20171004 20:03:59.832"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:03:59.832">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:03:59.833">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:03:59.833">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:03:59.832" status="PASS" endtime="20171004 20:03:59.833"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:59.833">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:03:59.541" status="PASS" endtime="20171004 20:03:59.833"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:03:59.833">${power_state} = Off</msg>
<status starttime="20171004 20:03:59.541" status="PASS" endtime="20171004 20:03:59.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:03:59.834">On != Off</msg>
<status starttime="20171004 20:03:59.834" status="FAIL" endtime="20171004 20:03:59.834"></status>
</kw>
<status starttime="20171004 20:03:59.540" status="FAIL" endtime="20171004 20:03:59.834"></status>
</kw>
<status starttime="20171004 20:03:59.540" status="FAIL" endtime="20171004 20:03:59.834"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:09.841">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:04:09.841" status="PASS" endtime="20171004 20:04:09.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:09.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:04:09.842" status="PASS" endtime="20171004 20:04:09.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:09.843">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:04:09.842" status="PASS" endtime="20171004 20:04:09.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:09.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:04:09.843" status="PASS" endtime="20171004 20:04:09.844"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:10.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:04:09.844" status="PASS" endtime="20171004 20:04:10.047"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:10.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:04:10.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:09.844" status="PASS" endtime="20171004 20:04:10.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:10.048">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:10.048" status="PASS" endtime="20171004 20:04:10.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:10.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:10.048" status="PASS" endtime="20171004 20:04:10.049"></status>
</kw>
<status starttime="20171004 20:04:09.840" status="PASS" endtime="20171004 20:04:10.049"></status>
</kw>
<status starttime="20171004 20:04:09.839" status="PASS" endtime="20171004 20:04:10.049"></status>
</kw>
<status starttime="20171004 20:04:09.838" status="PASS" endtime="20171004 20:04:10.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:10.050">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:04:10.049" status="PASS" endtime="20171004 20:04:10.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:10.052">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:10.051" status="PASS" endtime="20171004 20:04:10.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:10.053">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:10.053" status="PASS" endtime="20171004 20:04:10.053"></status>
</kw>
<status starttime="20171004 20:04:10.052" status="PASS" endtime="20171004 20:04:10.053"></status>
</kw>
<status starttime="20171004 20:04:10.050" status="PASS" endtime="20171004 20:04:10.053"></status>
</kw>
<status starttime="20171004 20:04:10.050" status="PASS" endtime="20171004 20:04:10.053"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:10.127">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:04:10.127">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:10.053" status="PASS" endtime="20171004 20:04:10.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:10.130">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:10.129" status="PASS" endtime="20171004 20:04:10.130"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:10.131">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:10.131" status="PASS" endtime="20171004 20:04:10.132"></status>
</kw>
<status starttime="20171004 20:04:10.130" status="PASS" endtime="20171004 20:04:10.132"></status>
</kw>
<status starttime="20171004 20:04:10.128" status="PASS" endtime="20171004 20:04:10.132"></status>
</kw>
<status starttime="20171004 20:04:10.128" status="PASS" endtime="20171004 20:04:10.132"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:04:10.133">Delete All Sessions</msg>
<status starttime="20171004 20:04:10.132" status="PASS" endtime="20171004 20:04:10.133"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:10.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:09.838" status="PASS" endtime="20171004 20:04:10.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:10.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:10.133" status="PASS" endtime="20171004 20:04:10.134"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:10.134">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:04:10.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:04:10.134">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:04:10.134" status="PASS" endtime="20171004 20:04:10.134"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:10.135">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:04:09.837" status="PASS" endtime="20171004 20:04:10.135"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:10.135">${power_state} = Off</msg>
<status starttime="20171004 20:04:09.837" status="PASS" endtime="20171004 20:04:10.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:04:10.136">On != Off</msg>
<status starttime="20171004 20:04:10.135" status="FAIL" endtime="20171004 20:04:10.136"></status>
</kw>
<status starttime="20171004 20:04:09.836" status="FAIL" endtime="20171004 20:04:10.136"></status>
</kw>
<status starttime="20171004 20:04:09.835" status="FAIL" endtime="20171004 20:04:10.136"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.141">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:04:20.141" status="PASS" endtime="20171004 20:04:20.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:04:20.142" status="PASS" endtime="20171004 20:04:20.142"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.143">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:04:20.142" status="PASS" endtime="20171004 20:04:20.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.143">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:04:20.143" status="PASS" endtime="20171004 20:04:20.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.370">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:04:20.144" status="PASS" endtime="20171004 20:04:20.370"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:20.371">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:04:20.371">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:20.144" status="PASS" endtime="20171004 20:04:20.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.371">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:20.371" status="PASS" endtime="20171004 20:04:20.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:20.372" status="PASS" endtime="20171004 20:04:20.372"></status>
</kw>
<status starttime="20171004 20:04:20.140" status="PASS" endtime="20171004 20:04:20.372"></status>
</kw>
<status starttime="20171004 20:04:20.140" status="PASS" endtime="20171004 20:04:20.373"></status>
</kw>
<status starttime="20171004 20:04:20.139" status="PASS" endtime="20171004 20:04:20.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.373">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:04:20.373" status="PASS" endtime="20171004 20:04:20.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.375">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:20.375" status="PASS" endtime="20171004 20:04:20.375"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.376">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:20.376" status="PASS" endtime="20171004 20:04:20.377"></status>
</kw>
<status starttime="20171004 20:04:20.376" status="PASS" endtime="20171004 20:04:20.377"></status>
</kw>
<status starttime="20171004 20:04:20.374" status="PASS" endtime="20171004 20:04:20.377"></status>
</kw>
<status starttime="20171004 20:04:20.374" status="PASS" endtime="20171004 20:04:20.377"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:04:20.440">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:20.377" status="PASS" endtime="20171004 20:04:20.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.442">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:20.441" status="PASS" endtime="20171004 20:04:20.442"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:20.442" status="PASS" endtime="20171004 20:04:20.443"></status>
</kw>
<status starttime="20171004 20:04:20.442" status="PASS" endtime="20171004 20:04:20.443"></status>
</kw>
<status starttime="20171004 20:04:20.441" status="PASS" endtime="20171004 20:04:20.443"></status>
</kw>
<status starttime="20171004 20:04:20.440" status="PASS" endtime="20171004 20:04:20.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:04:20.443">Delete All Sessions</msg>
<status starttime="20171004 20:04:20.443" status="PASS" endtime="20171004 20:04:20.443"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:20.444">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:20.138" status="PASS" endtime="20171004 20:04:20.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:20.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:20.444" status="PASS" endtime="20171004 20:04:20.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:20.445">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:04:20.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:04:20.445">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:04:20.445" status="PASS" endtime="20171004 20:04:20.445"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:20.445">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:04:20.138" status="PASS" endtime="20171004 20:04:20.445"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:20.446">${power_state} = Off</msg>
<status starttime="20171004 20:04:20.137" status="PASS" endtime="20171004 20:04:20.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:04:20.446">On != Off</msg>
<status starttime="20171004 20:04:20.446" status="FAIL" endtime="20171004 20:04:20.446"></status>
</kw>
<status starttime="20171004 20:04:20.137" status="FAIL" endtime="20171004 20:04:20.447"></status>
</kw>
<status starttime="20171004 20:04:20.136" status="FAIL" endtime="20171004 20:04:20.447"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.452">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:04:30.452" status="PASS" endtime="20171004 20:04:30.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:04:30.453" status="PASS" endtime="20171004 20:04:30.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:04:30.453" status="PASS" endtime="20171004 20:04:30.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:04:30.454" status="PASS" endtime="20171004 20:04:30.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.671">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:04:30.455" status="PASS" endtime="20171004 20:04:30.671"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:30.671">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:04:30.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:30.455" status="PASS" endtime="20171004 20:04:30.671"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.672">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:30.672" status="PASS" endtime="20171004 20:04:30.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:30.673" status="PASS" endtime="20171004 20:04:30.673"></status>
</kw>
<status starttime="20171004 20:04:30.451" status="PASS" endtime="20171004 20:04:30.673"></status>
</kw>
<status starttime="20171004 20:04:30.450" status="PASS" endtime="20171004 20:04:30.673"></status>
</kw>
<status starttime="20171004 20:04:30.450" status="PASS" endtime="20171004 20:04:30.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.675">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:04:30.674" status="PASS" endtime="20171004 20:04:30.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.678">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:30.677" status="PASS" endtime="20171004 20:04:30.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.679">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:30.679" status="PASS" endtime="20171004 20:04:30.679"></status>
</kw>
<status starttime="20171004 20:04:30.678" status="PASS" endtime="20171004 20:04:30.679"></status>
</kw>
<status starttime="20171004 20:04:30.676" status="PASS" endtime="20171004 20:04:30.679"></status>
</kw>
<status starttime="20171004 20:04:30.675" status="PASS" endtime="20171004 20:04:30.680"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.742">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:04:30.743">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:30.680" status="PASS" endtime="20171004 20:04:30.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.745">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:30.744" status="PASS" endtime="20171004 20:04:30.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.746">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:30.745" status="PASS" endtime="20171004 20:04:30.746"></status>
</kw>
<status starttime="20171004 20:04:30.745" status="PASS" endtime="20171004 20:04:30.746"></status>
</kw>
<status starttime="20171004 20:04:30.744" status="PASS" endtime="20171004 20:04:30.746"></status>
</kw>
<status starttime="20171004 20:04:30.743" status="PASS" endtime="20171004 20:04:30.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:04:30.747">Delete All Sessions</msg>
<status starttime="20171004 20:04:30.747" status="PASS" endtime="20171004 20:04:30.747"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:30.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:30.449" status="PASS" endtime="20171004 20:04:30.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:30.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:30.748" status="PASS" endtime="20171004 20:04:30.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:30.749">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:04:30.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:04:30.749">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:04:30.748" status="PASS" endtime="20171004 20:04:30.749"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:30.749">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:04:30.448" status="PASS" endtime="20171004 20:04:30.749"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:30.749">${power_state} = Off</msg>
<status starttime="20171004 20:04:30.448" status="PASS" endtime="20171004 20:04:30.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:04:30.750">On != Off</msg>
<status starttime="20171004 20:04:30.750" status="FAIL" endtime="20171004 20:04:30.750"></status>
</kw>
<status starttime="20171004 20:04:30.448" status="FAIL" endtime="20171004 20:04:30.750"></status>
</kw>
<status starttime="20171004 20:04:30.447" status="FAIL" endtime="20171004 20:04:30.750"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:40.756">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:04:40.755" status="PASS" endtime="20171004 20:04:40.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:40.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:04:40.756" status="PASS" endtime="20171004 20:04:40.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:40.757">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:04:40.757" status="PASS" endtime="20171004 20:04:40.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:40.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:04:40.758" status="PASS" endtime="20171004 20:04:40.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:40.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:04:40.759" status="PASS" endtime="20171004 20:04:40.961"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:40.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:04:40.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:40.758" status="PASS" endtime="20171004 20:04:40.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:40.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:40.962" status="PASS" endtime="20171004 20:04:40.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:40.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:40.963" status="PASS" endtime="20171004 20:04:40.963"></status>
</kw>
<status starttime="20171004 20:04:40.755" status="PASS" endtime="20171004 20:04:40.963"></status>
</kw>
<status starttime="20171004 20:04:40.754" status="PASS" endtime="20171004 20:04:40.963"></status>
</kw>
<status starttime="20171004 20:04:40.754" status="PASS" endtime="20171004 20:04:40.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:40.964">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:04:40.964" status="PASS" endtime="20171004 20:04:40.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:40.966">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:40.965" status="PASS" endtime="20171004 20:04:40.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:40.967">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:40.967" status="PASS" endtime="20171004 20:04:40.967"></status>
</kw>
<status starttime="20171004 20:04:40.966" status="PASS" endtime="20171004 20:04:40.967"></status>
</kw>
<status starttime="20171004 20:04:40.965" status="PASS" endtime="20171004 20:04:40.967"></status>
</kw>
<status starttime="20171004 20:04:40.964" status="PASS" endtime="20171004 20:04:40.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:41.029">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:04:41.029">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:40.968" status="PASS" endtime="20171004 20:04:41.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:41.031">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:41.031" status="PASS" endtime="20171004 20:04:41.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:41.032">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:41.032" status="PASS" endtime="20171004 20:04:41.033"></status>
</kw>
<status starttime="20171004 20:04:41.031" status="PASS" endtime="20171004 20:04:41.033"></status>
</kw>
<status starttime="20171004 20:04:41.030" status="PASS" endtime="20171004 20:04:41.033"></status>
</kw>
<status starttime="20171004 20:04:41.030" status="PASS" endtime="20171004 20:04:41.033"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:04:41.033">Delete All Sessions</msg>
<status starttime="20171004 20:04:41.033" status="PASS" endtime="20171004 20:04:41.033"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:41.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:40.753" status="PASS" endtime="20171004 20:04:41.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:41.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:41.034" status="PASS" endtime="20171004 20:04:41.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:41.035">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:04:41.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:04:41.035">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:04:41.035" status="PASS" endtime="20171004 20:04:41.035"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:41.036">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:04:40.752" status="PASS" endtime="20171004 20:04:41.036"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:41.036">${power_state} = Off</msg>
<status starttime="20171004 20:04:40.752" status="PASS" endtime="20171004 20:04:41.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:04:41.037">On != Off</msg>
<status starttime="20171004 20:04:41.036" status="FAIL" endtime="20171004 20:04:41.037"></status>
</kw>
<status starttime="20171004 20:04:40.752" status="FAIL" endtime="20171004 20:04:41.037"></status>
</kw>
<status starttime="20171004 20:04:40.751" status="FAIL" endtime="20171004 20:04:41.037"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.043">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:04:51.043" status="PASS" endtime="20171004 20:04:51.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:04:51.044" status="PASS" endtime="20171004 20:04:51.044"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.045">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:04:51.044" status="PASS" endtime="20171004 20:04:51.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:04:51.045" status="PASS" endtime="20171004 20:04:51.046"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:04:51.046" status="PASS" endtime="20171004 20:04:51.226"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:51.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:04:51.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:51.046" status="PASS" endtime="20171004 20:04:51.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:51.226" status="PASS" endtime="20171004 20:04:51.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:51.227" status="PASS" endtime="20171004 20:04:51.228"></status>
</kw>
<status starttime="20171004 20:04:51.042" status="PASS" endtime="20171004 20:04:51.228"></status>
</kw>
<status starttime="20171004 20:04:51.041" status="PASS" endtime="20171004 20:04:51.228"></status>
</kw>
<status starttime="20171004 20:04:51.041" status="PASS" endtime="20171004 20:04:51.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.229">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:04:51.228" status="PASS" endtime="20171004 20:04:51.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.231">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:51.230" status="PASS" endtime="20171004 20:04:51.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.232">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:04:51.231" status="PASS" endtime="20171004 20:04:51.232"></status>
</kw>
<status starttime="20171004 20:04:51.231" status="PASS" endtime="20171004 20:04:51.232"></status>
</kw>
<status starttime="20171004 20:04:51.229" status="PASS" endtime="20171004 20:04:51.232"></status>
</kw>
<status starttime="20171004 20:04:51.229" status="PASS" endtime="20171004 20:04:51.232"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.295">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:04:51.296">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:51.232" status="PASS" endtime="20171004 20:04:51.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.298">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:51.297" status="PASS" endtime="20171004 20:04:51.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.303">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:04:51.298" status="PASS" endtime="20171004 20:04:51.303"></status>
</kw>
<status starttime="20171004 20:04:51.298" status="PASS" endtime="20171004 20:04:51.303"></status>
</kw>
<status starttime="20171004 20:04:51.297" status="PASS" endtime="20171004 20:04:51.303"></status>
</kw>
<status starttime="20171004 20:04:51.296" status="PASS" endtime="20171004 20:04:51.303"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:04:51.304">Delete All Sessions</msg>
<status starttime="20171004 20:04:51.304" status="PASS" endtime="20171004 20:04:51.304"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:51.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:04:51.040" status="PASS" endtime="20171004 20:04:51.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:04:51.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:04:51.304" status="PASS" endtime="20171004 20:04:51.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:04:51.305">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:04:51.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:04:51.306">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:04:51.305" status="PASS" endtime="20171004 20:04:51.306"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:51.306">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:04:51.039" status="PASS" endtime="20171004 20:04:51.306"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:04:51.306">${power_state} = Off</msg>
<status starttime="20171004 20:04:51.039" status="PASS" endtime="20171004 20:04:51.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:04:51.307">On != Off</msg>
<status starttime="20171004 20:04:51.307" status="FAIL" endtime="20171004 20:04:51.307"></status>
</kw>
<status starttime="20171004 20:04:51.038" status="FAIL" endtime="20171004 20:04:51.307"></status>
</kw>
<status starttime="20171004 20:04:51.038" status="FAIL" endtime="20171004 20:04:51.308"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.313">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:05:01.313" status="PASS" endtime="20171004 20:05:01.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.314">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:05:01.314" status="PASS" endtime="20171004 20:05:01.314"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.315">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:05:01.315" status="PASS" endtime="20171004 20:05:01.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.316">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:05:01.315" status="PASS" endtime="20171004 20:05:01.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:05:01.316" status="PASS" endtime="20171004 20:05:01.496"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:01.496">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:05:01.496">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:01.316" status="PASS" endtime="20171004 20:05:01.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.497">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:01.497" status="PASS" endtime="20171004 20:05:01.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:01.497" status="PASS" endtime="20171004 20:05:01.498"></status>
</kw>
<status starttime="20171004 20:05:01.312" status="PASS" endtime="20171004 20:05:01.498"></status>
</kw>
<status starttime="20171004 20:05:01.311" status="PASS" endtime="20171004 20:05:01.498"></status>
</kw>
<status starttime="20171004 20:05:01.311" status="PASS" endtime="20171004 20:05:01.498"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.499">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:05:01.498" status="PASS" endtime="20171004 20:05:01.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.501">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:01.500" status="PASS" endtime="20171004 20:05:01.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.502">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:01.501" status="PASS" endtime="20171004 20:05:01.502"></status>
</kw>
<status starttime="20171004 20:05:01.501" status="PASS" endtime="20171004 20:05:01.502"></status>
</kw>
<status starttime="20171004 20:05:01.499" status="PASS" endtime="20171004 20:05:01.502"></status>
</kw>
<status starttime="20171004 20:05:01.499" status="PASS" endtime="20171004 20:05:01.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.565">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:05:01.565">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:01.502" status="PASS" endtime="20171004 20:05:01.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.567">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:01.566" status="PASS" endtime="20171004 20:05:01.567"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.567">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:01.567" status="PASS" endtime="20171004 20:05:01.568"></status>
</kw>
<status starttime="20171004 20:05:01.567" status="PASS" endtime="20171004 20:05:01.568"></status>
</kw>
<status starttime="20171004 20:05:01.566" status="PASS" endtime="20171004 20:05:01.568"></status>
</kw>
<status starttime="20171004 20:05:01.565" status="PASS" endtime="20171004 20:05:01.568"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:05:01.568">Delete All Sessions</msg>
<status starttime="20171004 20:05:01.568" status="PASS" endtime="20171004 20:05:01.568"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:01.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:01.310" status="PASS" endtime="20171004 20:05:01.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:01.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:01.569" status="PASS" endtime="20171004 20:05:01.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:01.570">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:05:01.570">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:05:01.570">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:05:01.570" status="PASS" endtime="20171004 20:05:01.570"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:01.570">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:05:01.310" status="PASS" endtime="20171004 20:05:01.570"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:01.571">${power_state} = Off</msg>
<status starttime="20171004 20:05:01.309" status="PASS" endtime="20171004 20:05:01.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:05:01.571">On != Off</msg>
<status starttime="20171004 20:05:01.571" status="FAIL" endtime="20171004 20:05:01.571"></status>
</kw>
<status starttime="20171004 20:05:01.309" status="FAIL" endtime="20171004 20:05:01.572"></status>
</kw>
<status starttime="20171004 20:05:01.308" status="FAIL" endtime="20171004 20:05:01.572"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.578">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:05:11.578" status="PASS" endtime="20171004 20:05:11.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:05:11.579" status="PASS" endtime="20171004 20:05:11.579"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.580">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:05:11.579" status="PASS" endtime="20171004 20:05:11.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.580">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:05:11.580" status="PASS" endtime="20171004 20:05:11.580"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.759">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:05:11.581" status="PASS" endtime="20171004 20:05:11.759"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:11.759">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:05:11.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:11.581" status="PASS" endtime="20171004 20:05:11.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.760">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:11.759" status="PASS" endtime="20171004 20:05:11.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:11.760" status="PASS" endtime="20171004 20:05:11.761"></status>
</kw>
<status starttime="20171004 20:05:11.577" status="PASS" endtime="20171004 20:05:11.761"></status>
</kw>
<status starttime="20171004 20:05:11.576" status="PASS" endtime="20171004 20:05:11.761"></status>
</kw>
<status starttime="20171004 20:05:11.575" status="PASS" endtime="20171004 20:05:11.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.762">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:05:11.761" status="PASS" endtime="20171004 20:05:11.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.764">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:11.763" status="PASS" endtime="20171004 20:05:11.764"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.765">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:11.765" status="PASS" endtime="20171004 20:05:11.765"></status>
</kw>
<status starttime="20171004 20:05:11.764" status="PASS" endtime="20171004 20:05:11.765"></status>
</kw>
<status starttime="20171004 20:05:11.763" status="PASS" endtime="20171004 20:05:11.765"></status>
</kw>
<status starttime="20171004 20:05:11.762" status="PASS" endtime="20171004 20:05:11.766"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.828">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:05:11.828">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:11.766" status="PASS" endtime="20171004 20:05:11.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.830">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:11.830" status="PASS" endtime="20171004 20:05:11.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.831">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:11.831" status="PASS" endtime="20171004 20:05:11.831"></status>
</kw>
<status starttime="20171004 20:05:11.830" status="PASS" endtime="20171004 20:05:11.832"></status>
</kw>
<status starttime="20171004 20:05:11.829" status="PASS" endtime="20171004 20:05:11.832"></status>
</kw>
<status starttime="20171004 20:05:11.829" status="PASS" endtime="20171004 20:05:11.832"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:05:11.832">Delete All Sessions</msg>
<status starttime="20171004 20:05:11.832" status="PASS" endtime="20171004 20:05:11.832"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:11.832">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:11.575" status="PASS" endtime="20171004 20:05:11.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:11.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:11.833" status="PASS" endtime="20171004 20:05:11.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:11.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:05:11.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:05:11.834">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:05:11.834" status="PASS" endtime="20171004 20:05:11.834"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:11.835">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:05:11.574" status="PASS" endtime="20171004 20:05:11.835"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:11.835">${power_state} = Off</msg>
<status starttime="20171004 20:05:11.574" status="PASS" endtime="20171004 20:05:11.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:05:11.836">On != Off</msg>
<status starttime="20171004 20:05:11.835" status="FAIL" endtime="20171004 20:05:11.836"></status>
</kw>
<status starttime="20171004 20:05:11.573" status="FAIL" endtime="20171004 20:05:11.836"></status>
</kw>
<status starttime="20171004 20:05:11.572" status="FAIL" endtime="20171004 20:05:11.836"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:21.847">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:05:21.847" status="PASS" endtime="20171004 20:05:21.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:21.849">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:05:21.848" status="PASS" endtime="20171004 20:05:21.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:21.849">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:05:21.849" status="PASS" endtime="20171004 20:05:21.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:21.850">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:05:21.850" status="PASS" endtime="20171004 20:05:21.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:22.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:05:21.851" status="PASS" endtime="20171004 20:05:22.030"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:22.031">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:05:22.031">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:21.850" status="PASS" endtime="20171004 20:05:22.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:22.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:22.031" status="PASS" endtime="20171004 20:05:22.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:22.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:22.032" status="PASS" endtime="20171004 20:05:22.032"></status>
</kw>
<status starttime="20171004 20:05:21.847" status="PASS" endtime="20171004 20:05:22.032"></status>
</kw>
<status starttime="20171004 20:05:21.846" status="PASS" endtime="20171004 20:05:22.032"></status>
</kw>
<status starttime="20171004 20:05:21.845" status="PASS" endtime="20171004 20:05:22.033"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:22.033">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:05:22.033" status="PASS" endtime="20171004 20:05:22.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:22.036">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:22.035" status="PASS" endtime="20171004 20:05:22.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:22.037">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:22.036" status="PASS" endtime="20171004 20:05:22.037"></status>
</kw>
<status starttime="20171004 20:05:22.036" status="PASS" endtime="20171004 20:05:22.037"></status>
</kw>
<status starttime="20171004 20:05:22.034" status="PASS" endtime="20171004 20:05:22.037"></status>
</kw>
<status starttime="20171004 20:05:22.034" status="PASS" endtime="20171004 20:05:22.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:22.099">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:05:22.099">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:22.037" status="PASS" endtime="20171004 20:05:22.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:22.101">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:22.100" status="PASS" endtime="20171004 20:05:22.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:22.102">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:22.102" status="PASS" endtime="20171004 20:05:22.102"></status>
</kw>
<status starttime="20171004 20:05:22.101" status="PASS" endtime="20171004 20:05:22.102"></status>
</kw>
<status starttime="20171004 20:05:22.100" status="PASS" endtime="20171004 20:05:22.102"></status>
</kw>
<status starttime="20171004 20:05:22.099" status="PASS" endtime="20171004 20:05:22.102"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:05:22.103">Delete All Sessions</msg>
<status starttime="20171004 20:05:22.102" status="PASS" endtime="20171004 20:05:22.103"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:22.103">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:21.844" status="PASS" endtime="20171004 20:05:22.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:22.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:22.103" status="PASS" endtime="20171004 20:05:22.104"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:22.104">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:05:22.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:05:22.104">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:05:22.104" status="PASS" endtime="20171004 20:05:22.104"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:22.105">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:05:21.843" status="PASS" endtime="20171004 20:05:22.105"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:22.105">${power_state} = Off</msg>
<status starttime="20171004 20:05:21.842" status="PASS" endtime="20171004 20:05:22.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:05:22.106">On != Off</msg>
<status starttime="20171004 20:05:22.105" status="FAIL" endtime="20171004 20:05:22.106"></status>
</kw>
<status starttime="20171004 20:05:21.841" status="FAIL" endtime="20171004 20:05:22.106"></status>
</kw>
<status starttime="20171004 20:05:21.838" status="FAIL" endtime="20171004 20:05:22.106"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.112">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:05:32.112" status="PASS" endtime="20171004 20:05:32.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.113">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:05:32.113" status="PASS" endtime="20171004 20:05:32.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.114">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:05:32.114" status="PASS" endtime="20171004 20:05:32.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.115">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:05:32.114" status="PASS" endtime="20171004 20:05:32.115"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.292">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:05:32.116" status="PASS" endtime="20171004 20:05:32.292"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:32.292">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:05:32.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:32.116" status="PASS" endtime="20171004 20:05:32.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.293">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:32.293" status="PASS" endtime="20171004 20:05:32.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:32.294" status="PASS" endtime="20171004 20:05:32.294"></status>
</kw>
<status starttime="20171004 20:05:32.111" status="PASS" endtime="20171004 20:05:32.294"></status>
</kw>
<status starttime="20171004 20:05:32.111" status="PASS" endtime="20171004 20:05:32.295"></status>
</kw>
<status starttime="20171004 20:05:32.110" status="PASS" endtime="20171004 20:05:32.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.295">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:05:32.295" status="PASS" endtime="20171004 20:05:32.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.297">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:32.297" status="PASS" endtime="20171004 20:05:32.297"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.298">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:32.298" status="PASS" endtime="20171004 20:05:32.298"></status>
</kw>
<status starttime="20171004 20:05:32.298" status="PASS" endtime="20171004 20:05:32.299"></status>
</kw>
<status starttime="20171004 20:05:32.296" status="PASS" endtime="20171004 20:05:32.299"></status>
</kw>
<status starttime="20171004 20:05:32.296" status="PASS" endtime="20171004 20:05:32.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.361">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:05:32.361">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:32.299" status="PASS" endtime="20171004 20:05:32.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.363">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:32.363" status="PASS" endtime="20171004 20:05:32.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.365">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:32.364" status="PASS" endtime="20171004 20:05:32.365"></status>
</kw>
<status starttime="20171004 20:05:32.363" status="PASS" endtime="20171004 20:05:32.365"></status>
</kw>
<status starttime="20171004 20:05:32.362" status="PASS" endtime="20171004 20:05:32.365"></status>
</kw>
<status starttime="20171004 20:05:32.362" status="PASS" endtime="20171004 20:05:32.365"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:05:32.366">Delete All Sessions</msg>
<status starttime="20171004 20:05:32.365" status="PASS" endtime="20171004 20:05:32.366"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:32.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:32.109" status="PASS" endtime="20171004 20:05:32.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:32.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:32.367" status="PASS" endtime="20171004 20:05:32.367"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:32.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:05:32.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:05:32.368">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:05:32.368" status="PASS" endtime="20171004 20:05:32.368"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:32.369">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:05:32.109" status="PASS" endtime="20171004 20:05:32.369"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:32.369">${power_state} = Off</msg>
<status starttime="20171004 20:05:32.108" status="PASS" endtime="20171004 20:05:32.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:05:32.370">On != Off</msg>
<status starttime="20171004 20:05:32.370" status="FAIL" endtime="20171004 20:05:32.370"></status>
</kw>
<status starttime="20171004 20:05:32.108" status="FAIL" endtime="20171004 20:05:32.370"></status>
</kw>
<status starttime="20171004 20:05:32.107" status="FAIL" endtime="20171004 20:05:32.370"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.378">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:05:42.377" status="PASS" endtime="20171004 20:05:42.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.379">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:05:42.378" status="PASS" endtime="20171004 20:05:42.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.379">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:05:42.379" status="PASS" endtime="20171004 20:05:42.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.380">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:05:42.380" status="PASS" endtime="20171004 20:05:42.380"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:05:42.381" status="PASS" endtime="20171004 20:05:42.557"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:42.557">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:05:42.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:42.380" status="PASS" endtime="20171004 20:05:42.558"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.558">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:42.558" status="PASS" endtime="20171004 20:05:42.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:42.559" status="PASS" endtime="20171004 20:05:42.560"></status>
</kw>
<status starttime="20171004 20:05:42.377" status="PASS" endtime="20171004 20:05:42.560"></status>
</kw>
<status starttime="20171004 20:05:42.376" status="PASS" endtime="20171004 20:05:42.560"></status>
</kw>
<status starttime="20171004 20:05:42.376" status="PASS" endtime="20171004 20:05:42.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.561">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:05:42.561" status="PASS" endtime="20171004 20:05:42.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.565">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:42.564" status="PASS" endtime="20171004 20:05:42.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.566">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:42.566" status="PASS" endtime="20171004 20:05:42.566"></status>
</kw>
<status starttime="20171004 20:05:42.565" status="PASS" endtime="20171004 20:05:42.567"></status>
</kw>
<status starttime="20171004 20:05:42.563" status="PASS" endtime="20171004 20:05:42.567"></status>
</kw>
<status starttime="20171004 20:05:42.562" status="PASS" endtime="20171004 20:05:42.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.647">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:05:42.647">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:42.568" status="PASS" endtime="20171004 20:05:42.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.650">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:42.650" status="PASS" endtime="20171004 20:05:42.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.653">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:42.652" status="PASS" endtime="20171004 20:05:42.653"></status>
</kw>
<status starttime="20171004 20:05:42.651" status="PASS" endtime="20171004 20:05:42.653"></status>
</kw>
<status starttime="20171004 20:05:42.649" status="PASS" endtime="20171004 20:05:42.653"></status>
</kw>
<status starttime="20171004 20:05:42.648" status="PASS" endtime="20171004 20:05:42.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:05:42.654">Delete All Sessions</msg>
<status starttime="20171004 20:05:42.654" status="PASS" endtime="20171004 20:05:42.654"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:42.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:42.375" status="PASS" endtime="20171004 20:05:42.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:42.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:42.655" status="PASS" endtime="20171004 20:05:42.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:42.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:05:42.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:05:42.657">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:05:42.657" status="PASS" endtime="20171004 20:05:42.657"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:42.658">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:05:42.374" status="PASS" endtime="20171004 20:05:42.658"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:42.658">${power_state} = Off</msg>
<status starttime="20171004 20:05:42.374" status="PASS" endtime="20171004 20:05:42.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:05:42.659">On != Off</msg>
<status starttime="20171004 20:05:42.659" status="FAIL" endtime="20171004 20:05:42.660"></status>
</kw>
<status starttime="20171004 20:05:42.373" status="FAIL" endtime="20171004 20:05:42.660"></status>
</kw>
<status starttime="20171004 20:05:42.372" status="FAIL" endtime="20171004 20:05:42.660"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.669">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:05:52.669" status="PASS" endtime="20171004 20:05:52.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:05:52.670" status="PASS" endtime="20171004 20:05:52.671"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.671">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:05:52.671" status="PASS" endtime="20171004 20:05:52.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.672">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:05:52.672" status="PASS" endtime="20171004 20:05:52.672"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:05:52.673" status="PASS" endtime="20171004 20:05:52.887"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:52.887">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:05:52.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:52.673" status="PASS" endtime="20171004 20:05:52.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.888">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:52.888" status="PASS" endtime="20171004 20:05:52.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:52.888" status="PASS" endtime="20171004 20:05:52.889"></status>
</kw>
<status starttime="20171004 20:05:52.667" status="PASS" endtime="20171004 20:05:52.889"></status>
</kw>
<status starttime="20171004 20:05:52.667" status="PASS" endtime="20171004 20:05:52.889"></status>
</kw>
<status starttime="20171004 20:05:52.665" status="PASS" endtime="20171004 20:05:52.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.890">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:05:52.890" status="PASS" endtime="20171004 20:05:52.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.893">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:52.892" status="PASS" endtime="20171004 20:05:52.893"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.894">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:05:52.894" status="PASS" endtime="20171004 20:05:52.894"></status>
</kw>
<status starttime="20171004 20:05:52.893" status="PASS" endtime="20171004 20:05:52.894"></status>
</kw>
<status starttime="20171004 20:05:52.891" status="PASS" endtime="20171004 20:05:52.895"></status>
</kw>
<status starttime="20171004 20:05:52.891" status="PASS" endtime="20171004 20:05:52.895"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.957">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:05:52.958">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:52.895" status="PASS" endtime="20171004 20:05:52.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.960">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:52.959" status="PASS" endtime="20171004 20:05:52.960"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.961">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:05:52.961" status="PASS" endtime="20171004 20:05:52.961"></status>
</kw>
<status starttime="20171004 20:05:52.960" status="PASS" endtime="20171004 20:05:52.961"></status>
</kw>
<status starttime="20171004 20:05:52.959" status="PASS" endtime="20171004 20:05:52.962"></status>
</kw>
<status starttime="20171004 20:05:52.958" status="PASS" endtime="20171004 20:05:52.962"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:05:52.962">Delete All Sessions</msg>
<status starttime="20171004 20:05:52.962" status="PASS" endtime="20171004 20:05:52.962"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:52.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:05:52.664" status="PASS" endtime="20171004 20:05:52.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:05:52.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:05:52.963" status="PASS" endtime="20171004 20:05:52.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:05:52.964">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:05:52.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:05:52.964">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:05:52.964" status="PASS" endtime="20171004 20:05:52.964"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:52.965">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:05:52.664" status="PASS" endtime="20171004 20:05:52.965"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:05:52.965">${power_state} = Off</msg>
<status starttime="20171004 20:05:52.663" status="PASS" endtime="20171004 20:05:52.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:05:52.966">On != Off</msg>
<status starttime="20171004 20:05:52.965" status="FAIL" endtime="20171004 20:05:52.966"></status>
</kw>
<status starttime="20171004 20:05:52.663" status="FAIL" endtime="20171004 20:05:52.966"></status>
</kw>
<status starttime="20171004 20:05:52.661" status="FAIL" endtime="20171004 20:05:52.966"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:02.977">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:02.977" status="PASS" endtime="20171004 20:06:02.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:02.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:02.978" status="PASS" endtime="20171004 20:06:02.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:02.979">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:02.979" status="PASS" endtime="20171004 20:06:02.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:02.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:02.980" status="PASS" endtime="20171004 20:06:02.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.175">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:02.981" status="PASS" endtime="20171004 20:06:03.175"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:03.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:03.175">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:02.980" status="PASS" endtime="20171004 20:06:03.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.176">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:03.176" status="PASS" endtime="20171004 20:06:03.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:03.176" status="PASS" endtime="20171004 20:06:03.177"></status>
</kw>
<status starttime="20171004 20:06:02.976" status="PASS" endtime="20171004 20:06:03.177"></status>
</kw>
<status starttime="20171004 20:06:02.975" status="PASS" endtime="20171004 20:06:03.177"></status>
</kw>
<status starttime="20171004 20:06:02.974" status="PASS" endtime="20171004 20:06:03.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:03.178">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171004 20:06:03.177" status="PASS" endtime="20171004 20:06:03.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:03.180">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:06:03.179" status="PASS" endtime="20171004 20:06:03.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.181">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171004 20:06:03.181" status="PASS" endtime="20171004 20:06:03.181"></status>
</kw>
<status starttime="20171004 20:06:03.180" status="PASS" endtime="20171004 20:06:03.181"></status>
</kw>
<status starttime="20171004 20:06:03.178" status="PASS" endtime="20171004 20:06:03.181"></status>
</kw>
<status starttime="20171004 20:06:03.178" status="PASS" endtime="20171004 20:06:03.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:03.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:03.269">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:03.181" status="PASS" endtime="20171004 20:06:03.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:03.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:06:03.271" status="PASS" endtime="20171004 20:06:03.271"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:06:03.272" status="PASS" endtime="20171004 20:06:03.272"></status>
</kw>
<status starttime="20171004 20:06:03.271" status="PASS" endtime="20171004 20:06:03.272"></status>
</kw>
<status starttime="20171004 20:06:03.270" status="PASS" endtime="20171004 20:06:03.272"></status>
</kw>
<status starttime="20171004 20:06:03.270" status="PASS" endtime="20171004 20:06:03.272"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:03.273">Delete All Sessions</msg>
<status starttime="20171004 20:06:03.273" status="PASS" endtime="20171004 20:06:03.273"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:03.273">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:02.973" status="PASS" endtime="20171004 20:06:03.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:03.273" status="PASS" endtime="20171004 20:06:03.274"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:03.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:03.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:06:03.275">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:06:03.274" status="PASS" endtime="20171004 20:06:03.275"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:03.275">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171004 20:06:02.972" status="PASS" endtime="20171004 20:06:03.275"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:03.275">${power_state} = Off</msg>
<status starttime="20171004 20:06:02.971" status="PASS" endtime="20171004 20:06:03.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:06:03.276">On != Off</msg>
<status starttime="20171004 20:06:03.275" status="FAIL" endtime="20171004 20:06:03.276"></status>
</kw>
<status starttime="20171004 20:06:02.970" status="FAIL" endtime="20171004 20:06:03.276"></status>
</kw>
<status starttime="20171004 20:06:02.969" status="FAIL" endtime="20171004 20:06:03.276"></status>
</kw>
<msg level="FAIL" timestamp="20171004 20:06:03.276">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status starttime="20171004 19:56:00.737" status="FAIL" endtime="20171004 20:06:03.276"></status>
</kw>
<status starttime="20171004 19:55:59.436" status="FAIL" endtime="20171004 20:06:03.277"></status>
</kw>
<status starttime="20171004 19:55:57.044" status="FAIL" endtime="20171004 20:06:03.277"></status>
</kw>
<status starttime="20171004 19:55:57.043" status="FAIL" endtime="20171004 20:06:03.277"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:03.310">Length is 10</msg>
<status starttime="20171004 20:06:03.309" status="PASS" endtime="20171004 20:06:03.310"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:03.322">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 20:06:06.323">${RC} = 0</msg>
<msg level="INFO" timestamp="20171004 20:06:06.323">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.959 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.641 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status starttime="20171004 20:06:03.310" status="PASS" endtime="20171004 20:06:06.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.326">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.959 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.641 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.575 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.625 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.575/0.700/0.959/0.151 ms</msg>
<status starttime="20171004 20:06:06.326" status="PASS" endtime="20171004 20:06:06.326"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171004 20:06:06.327" status="PASS" endtime="20171004 20:06:06.327"></status>
</kw>
<status starttime="20171004 20:06:03.309" status="PASS" endtime="20171004 20:06:06.327"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.383">${cur_time} = 2017-10-04 20:06:06:382742</msg>
<status starttime="20171004 20:06:06.382" status="PASS" endtime="20171004 20:06:06.383"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.387">${cur_time} = 20171004200606382742</msg>
<status starttime="20171004 20:06:06.384" status="PASS" endtime="20171004 20:06:06.387"></status>
</kw>
<status starttime="20171004 20:06:06.381" status="PASS" endtime="20171004 20:06:06.387"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.388">${FFDC_TIME} = 20171004200606382742</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.403">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20171004 20:06:06.403" status="PASS" endtime="20171004 20:06:06.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.404">${suite_name} = 20171004200606382742_TestsTestBasicPoweron</msg>
<status starttime="20171004 20:06:06.404" status="PASS" endtime="20171004 20:06:06.404"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.405">${test_name} = PowerOnTest</msg>
<status starttime="20171004 20:06:06.404" status="PASS" endtime="20171004 20:06:06.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.405">${test_name} = 20171004200606382742_PowerOnTest</msg>
<status starttime="20171004 20:06:06.405" status="PASS" endtime="20171004 20:06:06.405"></status>
</kw>
<status starttime="20171004 20:06:06.402" status="PASS" endtime="20171004 20:06:06.406"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.406">${FFDC_DIR_PATH} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/</msg>
<msg level="INFO" timestamp="20171004 20:06:06.406">${FFDC_PREFIX} = 20171004200606382742_</msg>
<msg level="INFO" timestamp="20171004 20:06:06.436">${LOG_PREFIX} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.438" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.437" status="PASS" endtime="20171004 20:06:06.438"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.447">${FFDC_FILE_PATH} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.477" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.476" status="PASS" endtime="20171004 20:06:06.477"></status>
</kw>
<status starttime="20171004 20:06:06.475" status="PASS" endtime="20171004 20:06:06.477"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.478" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.478" status="PASS" endtime="20171004 20:06:06.478"></status>
</kw>
<status starttime="20171004 20:06:06.477" status="PASS" endtime="20171004 20:06:06.479"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.480" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.479" status="PASS" endtime="20171004 20:06:06.480"></status>
</kw>
<status starttime="20171004 20:06:06.479" status="PASS" endtime="20171004 20:06:06.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.481" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.481" status="PASS" endtime="20171004 20:06:06.481"></status>
</kw>
<status starttime="20171004 20:06:06.480" status="PASS" endtime="20171004 20:06:06.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.482" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.482" status="PASS" endtime="20171004 20:06:06.483"></status>
</kw>
<status starttime="20171004 20:06:06.481" status="PASS" endtime="20171004 20:06:06.483"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.484" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.483" status="PASS" endtime="20171004 20:06:06.484"></status>
</kw>
<status starttime="20171004 20:06:06.483" status="PASS" endtime="20171004 20:06:06.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.486" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.485" status="PASS" endtime="20171004 20:06:06.486"></status>
</kw>
<status starttime="20171004 20:06:06.485" status="PASS" endtime="20171004 20:06:06.486"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.487" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.487" status="PASS" endtime="20171004 20:06:06.487"></status>
</kw>
<status starttime="20171004 20:06:06.486" status="PASS" endtime="20171004 20:06:06.487"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.492" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.491" status="PASS" endtime="20171004 20:06:06.492"></status>
</kw>
<status starttime="20171004 20:06:06.487" status="PASS" endtime="20171004 20:06:06.492"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.494" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.493" status="PASS" endtime="20171004 20:06:06.494"></status>
</kw>
<status starttime="20171004 20:06:06.493" status="PASS" endtime="20171004 20:06:06.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.495" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.495" status="PASS" endtime="20171004 20:06:06.495"></status>
</kw>
<status starttime="20171004 20:06:06.494" status="PASS" endtime="20171004 20:06:06.495"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.496" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.496" status="PASS" endtime="20171004 20:06:06.497"></status>
</kw>
<status starttime="20171004 20:06:06.495" status="PASS" endtime="20171004 20:06:06.497"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.498" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.497" status="PASS" endtime="20171004 20:06:06.498"></status>
</kw>
<status starttime="20171004 20:06:06.497" status="PASS" endtime="20171004 20:06:06.498"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.543">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:06.544">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171004 20:06:06.613">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171004 20:06:06.629">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171004 20:06:06.629">${stderr} = </msg>
<msg level="INFO" timestamp="20171004 20:06:06.629">${rc} = 0</msg>
<status starttime="20171004 20:06:06.499" status="PASS" endtime="20171004 20:06:06.629"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.631">Length is 0</msg>
<status starttime="20171004 20:06:06.630" status="PASS" endtime="20171004 20:06:06.631"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.632">Length is 11</msg>
<status starttime="20171004 20:06:06.631" status="PASS" endtime="20171004 20:06:06.632"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.632">${model_name} = Witherspoon</msg>
<status starttime="20171004 20:06:06.498" status="PASS" endtime="20171004 20:06:06.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.634" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.633" status="PASS" endtime="20171004 20:06:06.634"></status>
</kw>
<status starttime="20171004 20:06:06.633" status="PASS" endtime="20171004 20:06:06.634"></status>
</kw>
<status starttime="20171004 20:06:06.492" status="PASS" endtime="20171004 20:06:06.634"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.636" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.635" status="PASS" endtime="20171004 20:06:06.636"></status>
</kw>
<status starttime="20171004 20:06:06.635" status="PASS" endtime="20171004 20:06:06.636"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.637">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20171004 20:06:06.636" status="PASS" endtime="20171004 20:06:06.637"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.638" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.638" status="PASS" endtime="20171004 20:06:06.639"></status>
</kw>
<status starttime="20171004 20:06:06.637" status="PASS" endtime="20171004 20:06:06.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.640" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.639" status="PASS" endtime="20171004 20:06:06.640"></status>
</kw>
<status starttime="20171004 20:06:06.639" status="PASS" endtime="20171004 20:06:06.640"></status>
</kw>
<status starttime="20171004 20:06:06.637" status="PASS" endtime="20171004 20:06:06.640"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.643" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.642" status="PASS" endtime="20171004 20:06:06.643"></status>
</kw>
<status starttime="20171004 20:06:06.641" status="PASS" endtime="20171004 20:06:06.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.644" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.644" status="PASS" endtime="20171004 20:06:06.644"></status>
</kw>
<status starttime="20171004 20:06:06.643" status="PASS" endtime="20171004 20:06:06.645"></status>
</kw>
<status starttime="20171004 20:06:06.641" status="PASS" endtime="20171004 20:06:06.645"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.646" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.646" status="PASS" endtime="20171004 20:06:06.646"></status>
</kw>
<status starttime="20171004 20:06:06.645" status="PASS" endtime="20171004 20:06:06.646"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.647" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.647" status="PASS" endtime="20171004 20:06:06.647"></status>
</kw>
<status starttime="20171004 20:06:06.646" status="PASS" endtime="20171004 20:06:06.648"></status>
</kw>
<status starttime="20171004 20:06:06.645" status="PASS" endtime="20171004 20:06:06.648"></status>
</kw>
<status starttime="20171004 20:06:06.637" status="PASS" endtime="20171004 20:06:06.648"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.649" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.648" status="PASS" endtime="20171004 20:06:06.649"></status>
</kw>
<status starttime="20171004 20:06:06.648" status="PASS" endtime="20171004 20:06:06.649"></status>
</kw>
<status starttime="20171004 20:06:06.475" status="PASS" endtime="20171004 20:06:06.649"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.659">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20171004 20:06:06.659" status="PASS" endtime="20171004 20:06:06.659"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.661">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Sys Inventory Files', 'System Invent...</msg>
<status starttime="20171004 20:06:06.661" status="PASS" endtime="20171004 20:06:06.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20171004 20:06:06.662" status="PASS" endtime="20171004 20:06:06.662"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.662">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | OS FFDC | SEL Log | Sys Inventory Files | Core Files | BMC Specific Files ]</msg>
<status starttime="20171004 20:06:06.661" status="PASS" endtime="20171004 20:06:06.662"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:06.665" status="PASS" endtime="20171004 20:06:06.665"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:06.665">${ret_values} = None</msg>
<status starttime="20171004 20:06:06.664" status="PASS" endtime="20171004 20:06:06.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:06.665" status="PASS" endtime="20171004 20:06:06.666"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.710">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20171004 20:06:06.709" status="PASS" endtime="20171004 20:06:06.710"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.711">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20171004 20:06:06.711" status="PASS" endtime="20171004 20:06:06.711"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.720">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20171004 20:06:06.711" status="PASS" endtime="20171004 20:06:06.720"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.724" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.723" status="PASS" endtime="20171004 20:06:06.724"></status>
</kw>
<status starttime="20171004 20:06:06.722" status="PASS" endtime="20171004 20:06:06.724"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.725" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.725" status="PASS" endtime="20171004 20:06:06.725"></status>
</kw>
<status starttime="20171004 20:06:06.724" status="PASS" endtime="20171004 20:06:06.725"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.727" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.726" status="PASS" endtime="20171004 20:06:06.727"></status>
</kw>
<status starttime="20171004 20:06:06.726" status="PASS" endtime="20171004 20:06:06.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.728" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.728" status="PASS" endtime="20171004 20:06:06.728"></status>
</kw>
<status starttime="20171004 20:06:06.727" status="PASS" endtime="20171004 20:06:06.728"></status>
</kw>
<status starttime="20171004 20:06:06.722" status="PASS" endtime="20171004 20:06:06.728"></status>
</kw>
<status starttime="20171004 20:06:06.721" status="PASS" endtime="20171004 20:06:06.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.729">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status starttime="20171004 20:06:06.729" status="PASS" endtime="20171004 20:06:06.729"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.844">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:06.844">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20171004 20:06:06.914">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:06.781" status="PASS" endtime="20171004 20:06:06.915"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:06.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:06.915">${ret_values} = (u'20171004193035', u'', 0)</msg>
<status starttime="20171004 20:06:06.729" status="PASS" endtime="20171004 20:06:06.915"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.916">${stdout} = 20171004193035</msg>
<status starttime="20171004 20:06:06.915" status="PASS" endtime="20171004 20:06:06.916"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.916">${stderr} = </msg>
<status starttime="20171004 20:06:06.916" status="PASS" endtime="20171004 20:06:06.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.923" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.923" status="PASS" endtime="20171004 20:06:06.923"></status>
</kw>
<status starttime="20171004 20:06:06.922" status="PASS" endtime="20171004 20:06:06.924"></status>
</kw>
<status starttime="20171004 20:06:06.916" status="PASS" endtime="20171004 20:06:06.924"></status>
</kw>
<status starttime="20171004 20:06:06.720" status="PASS" endtime="20171004 20:06:06.924"></status>
</kw>
<status starttime="20171004 20:06:06.720" status="PASS" endtime="20171004 20:06:06.924"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.927" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.926" status="PASS" endtime="20171004 20:06:06.927"></status>
</kw>
<status starttime="20171004 20:06:06.926" status="PASS" endtime="20171004 20:06:06.927"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.929" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.928" status="PASS" endtime="20171004 20:06:06.929"></status>
</kw>
<status starttime="20171004 20:06:06.927" status="PASS" endtime="20171004 20:06:06.929"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.930" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.930" status="PASS" endtime="20171004 20:06:06.930"></status>
</kw>
<status starttime="20171004 20:06:06.929" status="PASS" endtime="20171004 20:06:06.930"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:06.931" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:06.931" status="PASS" endtime="20171004 20:06:06.931"></status>
</kw>
<status starttime="20171004 20:06:06.930" status="PASS" endtime="20171004 20:06:06.932"></status>
</kw>
<status starttime="20171004 20:06:06.925" status="PASS" endtime="20171004 20:06:06.932"></status>
</kw>
<status starttime="20171004 20:06:06.925" status="PASS" endtime="20171004 20:06:06.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:06.932">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20171004 20:06:06.932" status="PASS" endtime="20171004 20:06:06.933"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.050">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:07.050">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20171004 20:06:07.097">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:06.980" status="PASS" endtime="20171004 20:06:07.098"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:07.098">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:07.098">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-105"\nVERSION_ID="v1.99.10-105-g726c004"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status starttime="20171004 20:06:06.933" status="PASS" endtime="20171004 20:06:07.098"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.099">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-105"
VERSION_ID="v1.99.10-105-g726c004"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status starttime="20171004 20:06:07.099" status="PASS" endtime="20171004 20:06:07.099"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.100">${stderr} = </msg>
<status starttime="20171004 20:06:07.100" status="PASS" endtime="20171004 20:06:07.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.111" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.110" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:07.109" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:07.100" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:06.924" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:06.924" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:06.720" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:06.710" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<status starttime="20171004 20:06:06.710" status="PASS" endtime="20171004 20:06:07.111"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.112">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20171004 20:06:07.112" status="PASS" endtime="20171004 20:06:07.113"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.113">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20171004 20:06:07.113" status="PASS" endtime="20171004 20:06:07.113"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.116" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.116" status="PASS" endtime="20171004 20:06:07.117"></status>
</kw>
<status starttime="20171004 20:06:07.116" status="PASS" endtime="20171004 20:06:07.117"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.118" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.118" status="PASS" endtime="20171004 20:06:07.118"></status>
</kw>
<status starttime="20171004 20:06:07.117" status="PASS" endtime="20171004 20:06:07.118"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.120" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.119" status="PASS" endtime="20171004 20:06:07.120"></status>
</kw>
<status starttime="20171004 20:06:07.118" status="PASS" endtime="20171004 20:06:07.120"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.121" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.121" status="PASS" endtime="20171004 20:06:07.121"></status>
</kw>
<status starttime="20171004 20:06:07.120" status="PASS" endtime="20171004 20:06:07.121"></status>
</kw>
<status starttime="20171004 20:06:07.115" status="PASS" endtime="20171004 20:06:07.121"></status>
</kw>
<status starttime="20171004 20:06:07.115" status="PASS" endtime="20171004 20:06:07.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.122">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20171004 20:06:07.122" status="PASS" endtime="20171004 20:06:07.122"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.236">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:07.237">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20171004 20:06:07.325">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:07.172" status="PASS" endtime="20171004 20:06:07.326"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:07.326">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:07.326">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status starttime="20171004 20:06:07.122" status="PASS" endtime="20171004 20:06:07.326"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.327">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status starttime="20171004 20:06:07.327" status="PASS" endtime="20171004 20:06:07.327"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.328">${stderr} = </msg>
<status starttime="20171004 20:06:07.328" status="PASS" endtime="20171004 20:06:07.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.339" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.338" status="PASS" endtime="20171004 20:06:07.339"></status>
</kw>
<status starttime="20171004 20:06:07.337" status="PASS" endtime="20171004 20:06:07.339"></status>
</kw>
<status starttime="20171004 20:06:07.328" status="PASS" endtime="20171004 20:06:07.339"></status>
</kw>
<status starttime="20171004 20:06:07.114" status="PASS" endtime="20171004 20:06:07.339"></status>
</kw>
<status starttime="20171004 20:06:07.114" status="PASS" endtime="20171004 20:06:07.339"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.342" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.342" status="PASS" endtime="20171004 20:06:07.342"></status>
</kw>
<status starttime="20171004 20:06:07.341" status="PASS" endtime="20171004 20:06:07.343"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.344" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.344" status="PASS" endtime="20171004 20:06:07.344"></status>
</kw>
<status starttime="20171004 20:06:07.343" status="PASS" endtime="20171004 20:06:07.344"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.345" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.345" status="PASS" endtime="20171004 20:06:07.345"></status>
</kw>
<status starttime="20171004 20:06:07.344" status="PASS" endtime="20171004 20:06:07.345"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.347" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.346" status="PASS" endtime="20171004 20:06:07.347"></status>
</kw>
<status starttime="20171004 20:06:07.346" status="PASS" endtime="20171004 20:06:07.347"></status>
</kw>
<status starttime="20171004 20:06:07.341" status="PASS" endtime="20171004 20:06:07.347"></status>
</kw>
<status starttime="20171004 20:06:07.340" status="PASS" endtime="20171004 20:06:07.347"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.348">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20171004 20:06:07.347" status="PASS" endtime="20171004 20:06:07.348"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.465">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:07.465">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20171004 20:06:07.512">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:07.406" status="PASS" endtime="20171004 20:06:07.512"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:07.512">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:07.512">${ret_values} = (u' 20:06:22 up 14 min,  load average: 0.33, 0.63, 0.81', u'', 0)</msg>
<status starttime="20171004 20:06:07.348" status="PASS" endtime="20171004 20:06:07.512"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.513">${stdout} =  20:06:22 up 14 min,  load average: 0.33, 0.63, 0.81</msg>
<status starttime="20171004 20:06:07.513" status="PASS" endtime="20171004 20:06:07.513"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.514">${stderr} = </msg>
<status starttime="20171004 20:06:07.514" status="PASS" endtime="20171004 20:06:07.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.522" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.521" status="PASS" endtime="20171004 20:06:07.522"></status>
</kw>
<status starttime="20171004 20:06:07.520" status="PASS" endtime="20171004 20:06:07.522"></status>
</kw>
<status starttime="20171004 20:06:07.515" status="PASS" endtime="20171004 20:06:07.522"></status>
</kw>
<status starttime="20171004 20:06:07.340" status="PASS" endtime="20171004 20:06:07.522"></status>
</kw>
<status starttime="20171004 20:06:07.339" status="PASS" endtime="20171004 20:06:07.522"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.525" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.525" status="PASS" endtime="20171004 20:06:07.525"></status>
</kw>
<status starttime="20171004 20:06:07.524" status="PASS" endtime="20171004 20:06:07.525"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.527" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.526" status="PASS" endtime="20171004 20:06:07.527"></status>
</kw>
<status starttime="20171004 20:06:07.525" status="PASS" endtime="20171004 20:06:07.527"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.528" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.527" status="PASS" endtime="20171004 20:06:07.528"></status>
</kw>
<status starttime="20171004 20:06:07.527" status="PASS" endtime="20171004 20:06:07.528"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.530" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.529" status="PASS" endtime="20171004 20:06:07.530"></status>
</kw>
<status starttime="20171004 20:06:07.528" status="PASS" endtime="20171004 20:06:07.530"></status>
</kw>
<status starttime="20171004 20:06:07.524" status="PASS" endtime="20171004 20:06:07.530"></status>
</kw>
<status starttime="20171004 20:06:07.523" status="PASS" endtime="20171004 20:06:07.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.531">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20171004 20:06:07.530" status="PASS" endtime="20171004 20:06:07.531"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.648">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:07.648">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20171004 20:06:07.696">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:07.584" status="PASS" endtime="20171004 20:06:07.696"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:07.696">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:07.696">${ret_values} = (u'Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20171004 20:06:07.531" status="PASS" endtime="20171004 20:06:07.696"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.697">${stdout} = Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20171004 20:06:07.696" status="PASS" endtime="20171004 20:06:07.697"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.697">${stderr} = </msg>
<status starttime="20171004 20:06:07.697" status="PASS" endtime="20171004 20:06:07.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.705" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.704" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.703" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.698" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.522" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.522" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.113" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.112" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<status starttime="20171004 20:06:07.111" status="PASS" endtime="20171004 20:06:07.705"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.706">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20171004 20:06:07.706" status="PASS" endtime="20171004 20:06:07.706"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.707">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20171004 20:06:07.707" status="PASS" endtime="20171004 20:06:07.707"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.710" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.710" status="PASS" endtime="20171004 20:06:07.710"></status>
</kw>
<status starttime="20171004 20:06:07.709" status="PASS" endtime="20171004 20:06:07.710"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.712" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.711" status="PASS" endtime="20171004 20:06:07.712"></status>
</kw>
<status starttime="20171004 20:06:07.710" status="PASS" endtime="20171004 20:06:07.712"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.713" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.713" status="PASS" endtime="20171004 20:06:07.713"></status>
</kw>
<status starttime="20171004 20:06:07.712" status="PASS" endtime="20171004 20:06:07.713"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.714" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:07.714" status="PASS" endtime="20171004 20:06:07.714"></status>
</kw>
<status starttime="20171004 20:06:07.713" status="PASS" endtime="20171004 20:06:07.715"></status>
</kw>
<status starttime="20171004 20:06:07.709" status="PASS" endtime="20171004 20:06:07.715"></status>
</kw>
<status starttime="20171004 20:06:07.708" status="PASS" endtime="20171004 20:06:07.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:07.716">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20171004 20:06:07.715" status="PASS" endtime="20171004 20:06:07.716"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:07.847">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:07.848">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20171004 20:06:09.225">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:07.775" status="PASS" endtime="20171004 20:06:09.226"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:09.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:09.226">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status starttime="20171004 20:06:07.716" status="PASS" endtime="20171004 20:06:09.226"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.227">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20171004 20:06:09.227" status="PASS" endtime="20171004 20:06:09.227"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.228">${stderr} = </msg>
<status starttime="20171004 20:06:09.228" status="PASS" endtime="20171004 20:06:09.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.236" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:09.235" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:09.234" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:09.228" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:07.707" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:07.707" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:07.707" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:07.705" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:07.705" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:06.710" status="PASS" endtime="20171004 20:06:09.236"></status>
</kw>
<status starttime="20171004 20:06:06.709" status="PASS" endtime="20171004 20:06:09.237"></status>
</kw>
<status starttime="20171004 20:06:06.666" status="PASS" endtime="20171004 20:06:09.237"></status>
</kw>
<status starttime="20171004 20:06:06.663" status="PASS" endtime="20171004 20:06:09.237"></status>
</kw>
<status starttime="20171004 20:06:06.663" status="PASS" endtime="20171004 20:06:09.237"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:09.238" status="PASS" endtime="20171004 20:06:09.239"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:09.239">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:09.239">${ret_values} = None</msg>
<status starttime="20171004 20:06:09.238" status="PASS" endtime="20171004 20:06:09.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:09.239" status="PASS" endtime="20171004 20:06:09.240"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.278">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20171004 20:06:09.277" status="PASS" endtime="20171004 20:06:09.278"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.279">@{cmd_list} = [ ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_sensor_list...</msg>
<status starttime="20171004 20:06:09.279" status="PASS" endtime="20171004 20:06:09.279"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.280">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_FIRMWARE_list.txt</msg>
<status starttime="20171004 20:06:09.280" status="PASS" endtime="20171004 20:06:09.280"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.283">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:09.282" status="PASS" endtime="20171004 20:06:09.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:09.284" status="PASS" endtime="20171004 20:06:09.287"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.287">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:09.287" status="PASS" endtime="20171004 20:06:09.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.288">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:09.288" status="PASS" endtime="20171004 20:06:09.288"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.502">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:09.289" status="PASS" endtime="20171004 20:06:09.502"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:09.502">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:09.502">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:09.288" status="PASS" endtime="20171004 20:06:09.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.503">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:09.503" status="PASS" endtime="20171004 20:06:09.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:09.503" status="PASS" endtime="20171004 20:06:09.504"></status>
</kw>
<status starttime="20171004 20:06:09.282" status="PASS" endtime="20171004 20:06:09.504"></status>
</kw>
<status starttime="20171004 20:06:09.281" status="PASS" endtime="20171004 20:06:09.504"></status>
</kw>
<status starttime="20171004 20:06:09.281" status="PASS" endtime="20171004 20:06:09.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.505">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status starttime="20171004 20:06:09.504" status="PASS" endtime="20171004 20:06:09.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:09.505" status="PASS" endtime="20171004 20:06:09.505"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.871">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:09.872">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:09.506" status="PASS" endtime="20171004 20:06:09.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:09.872" status="PASS" endtime="20171004 20:06:09.873"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:09.874">Delete All Sessions</msg>
<status starttime="20171004 20:06:09.873" status="PASS" endtime="20171004 20:06:09.874"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:09.874">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:09.280" status="PASS" endtime="20171004 20:06:09.874"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:09.875" status="PASS" endtime="20171004 20:06:09.876"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:09.876">${status} = True</msg>
<status starttime="20171004 20:06:09.875" status="PASS" endtime="20171004 20:06:09.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:09.877" status="PASS" endtime="20171004 20:06:09.877"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.879">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/96a2bd2f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-101-g462b68d", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/96a2bd2f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/96a2bd2f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/fccb9e84", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/96a2bd2f"
      ]
    }, 
    "/xyz/openbmc_project/software/fccb9e84": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-105-g726c004", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/fccb9e84/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/fccb9e84/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/fccb9e84", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:09.879">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:09.879">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status starttime="20171004 20:06:09.878" status="PASS" endtime="20171004 20:06:09.880"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.882" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_FIRMWARE_list.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:09.881" status="PASS" endtime="20171004 20:06:09.882"></status>
</kw>
<status starttime="20171004 20:06:09.880" status="PASS" endtime="20171004 20:06:09.882"></status>
</kw>
<status starttime="20171004 20:06:09.279" status="PASS" endtime="20171004 20:06:09.882"></status>
</kw>
<kw name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.883">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_OCC_state.txt</msg>
<status starttime="20171004 20:06:09.883" status="PASS" endtime="20171004 20:06:09.884"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:09.889">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:09.888" status="PASS" endtime="20171004 20:06:09.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.891">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:09.890" status="PASS" endtime="20171004 20:06:09.891"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.892">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:09.891" status="PASS" endtime="20171004 20:06:09.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:09.893">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:09.893" status="PASS" endtime="20171004 20:06:09.893"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.074">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:09.894" status="PASS" endtime="20171004 20:06:10.074"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:10.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:10.075">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:09.894" status="PASS" endtime="20171004 20:06:10.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:10.075" status="PASS" endtime="20171004 20:06:10.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:10.076" status="PASS" endtime="20171004 20:06:10.077"></status>
</kw>
<status starttime="20171004 20:06:09.887" status="PASS" endtime="20171004 20:06:10.077"></status>
</kw>
<status starttime="20171004 20:06:09.886" status="PASS" endtime="20171004 20:06:10.078"></status>
</kw>
<status starttime="20171004 20:06:09.885" status="PASS" endtime="20171004 20:06:10.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.079">${base_uri} = /org/open_power/control/enumerate</msg>
<status starttime="20171004 20:06:10.078" status="PASS" endtime="20171004 20:06:10.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:10.079" status="PASS" endtime="20171004 20:06:10.080"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.260">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:10.261">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:10.080" status="PASS" endtime="20171004 20:06:10.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:10.261" status="PASS" endtime="20171004 20:06:10.261"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:10.262">Delete All Sessions</msg>
<status starttime="20171004 20:06:10.262" status="PASS" endtime="20171004 20:06:10.262"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:10.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:09.884" status="PASS" endtime="20171004 20:06:10.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:10.263" status="PASS" endtime="20171004 20:06:10.263"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:10.263">${status} = True</msg>
<status starttime="20171004 20:06:10.263" status="PASS" endtime="20171004 20:06:10.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:10.264" status="PASS" endtime="20171004 20:06:10.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.265">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:10.265">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:10.265">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status starttime="20171004 20:06:10.264" status="PASS" endtime="20171004 20:06:10.265"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.267" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_OCC_state.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_OCC_state.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:10.266" status="PASS" endtime="20171004 20:06:10.267"></status>
</kw>
<status starttime="20171004 20:06:10.265" status="PASS" endtime="20171004 20:06:10.267"></status>
</kw>
<status starttime="20171004 20:06:09.882" status="PASS" endtime="20171004 20:06:10.267"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.268">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_control_list.txt</msg>
<status starttime="20171004 20:06:10.267" status="PASS" endtime="20171004 20:06:10.268"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.272">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:10.270" status="PASS" endtime="20171004 20:06:10.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:10.273" status="PASS" endtime="20171004 20:06:10.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:10.273" status="PASS" endtime="20171004 20:06:10.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:10.274" status="PASS" endtime="20171004 20:06:10.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:10.275" status="PASS" endtime="20171004 20:06:10.486"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:10.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:10.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:10.275" status="PASS" endtime="20171004 20:06:10.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:10.486" status="PASS" endtime="20171004 20:06:10.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:10.487" status="PASS" endtime="20171004 20:06:10.487"></status>
</kw>
<status starttime="20171004 20:06:10.270" status="PASS" endtime="20171004 20:06:10.488"></status>
</kw>
<status starttime="20171004 20:06:10.269" status="PASS" endtime="20171004 20:06:10.488"></status>
</kw>
<status starttime="20171004 20:06:10.269" status="PASS" endtime="20171004 20:06:10.488"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.488">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20171004 20:06:10.488" status="PASS" endtime="20171004 20:06:10.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:10.489" status="PASS" endtime="20171004 20:06:10.489"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.844">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:10.845">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:10.489" status="PASS" endtime="20171004 20:06:10.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:10.845" status="PASS" endtime="20171004 20:06:10.846"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:10.846">Delete All Sessions</msg>
<status starttime="20171004 20:06:10.846" status="PASS" endtime="20171004 20:06:10.846"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:10.847">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:10.268" status="PASS" endtime="20171004 20:06:10.847"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:10.847" status="PASS" endtime="20171004 20:06:10.848"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:10.848">${status} = True</msg>
<status starttime="20171004 20:06:10.847" status="PASS" endtime="20171004 20:06:10.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:10.848" status="PASS" endtime="20171004 20:06:10.849"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.850">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:10.850">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:10.850">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20171004 20:06:10.849" status="PASS" endtime="20171004 20:06:10.850"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.851" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_control_list.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:10.851" status="PASS" endtime="20171004 20:06:10.852"></status>
</kw>
<status starttime="20171004 20:06:10.850" status="PASS" endtime="20171004 20:06:10.852"></status>
</kw>
<status starttime="20171004 20:06:10.267" status="PASS" endtime="20171004 20:06:10.852"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.853">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_sensor_list.txt</msg>
<status starttime="20171004 20:06:10.852" status="PASS" endtime="20171004 20:06:10.853"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:10.855">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:10.855" status="PASS" endtime="20171004 20:06:10.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.857">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:10.857" status="PASS" endtime="20171004 20:06:10.857"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.858">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:10.858" status="PASS" endtime="20171004 20:06:10.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:10.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:10.859" status="PASS" endtime="20171004 20:06:10.859"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.038">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:10.860" status="PASS" endtime="20171004 20:06:11.038"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:11.038">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:11.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:10.860" status="PASS" endtime="20171004 20:06:11.038"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.039">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:11.039" status="PASS" endtime="20171004 20:06:11.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:11.039" status="PASS" endtime="20171004 20:06:11.040"></status>
</kw>
<status starttime="20171004 20:06:10.854" status="PASS" endtime="20171004 20:06:11.040"></status>
</kw>
<status starttime="20171004 20:06:10.854" status="PASS" endtime="20171004 20:06:11.040"></status>
</kw>
<status starttime="20171004 20:06:10.853" status="PASS" endtime="20171004 20:06:11.040"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.041">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20171004 20:06:11.040" status="PASS" endtime="20171004 20:06:11.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:11.041" status="PASS" endtime="20171004 20:06:11.041"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.589">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:11.589">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:11.041" status="PASS" endtime="20171004 20:06:11.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:11.589" status="PASS" endtime="20171004 20:06:11.590"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:11.590">Delete All Sessions</msg>
<status starttime="20171004 20:06:11.590" status="PASS" endtime="20171004 20:06:11.590"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:11.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:10.853" status="PASS" endtime="20171004 20:06:11.590"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:11.593" status="PASS" endtime="20171004 20:06:11.593"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:11.593">${status} = True</msg>
<status starttime="20171004 20:06:11.591" status="PASS" endtime="20171004 20:06:11.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:11.593" status="PASS" endtime="20171004 20:06:11.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.595">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25930
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:11.595">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:11.595">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status starttime="20171004 20:06:11.594" status="PASS" endtime="20171004 20:06:11.595"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.597" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_sensor_list.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:11.596" status="PASS" endtime="20171004 20:06:11.597"></status>
</kw>
<status starttime="20171004 20:06:11.596" status="PASS" endtime="20171004 20:06:11.597"></status>
</kw>
<status starttime="20171004 20:06:10.852" status="PASS" endtime="20171004 20:06:11.597"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.598">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_led.txt</msg>
<status starttime="20171004 20:06:11.598" status="PASS" endtime="20171004 20:06:11.598"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.601">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:11.601" status="PASS" endtime="20171004 20:06:11.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.602">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:11.602" status="PASS" endtime="20171004 20:06:11.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.603">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:11.603" status="PASS" endtime="20171004 20:06:11.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.604">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:11.603" status="PASS" endtime="20171004 20:06:11.604"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.782">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:11.604" status="PASS" endtime="20171004 20:06:11.782"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:11.782">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:11.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:11.604" status="PASS" endtime="20171004 20:06:11.782"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.783">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:11.783" status="PASS" endtime="20171004 20:06:11.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:11.784">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:11.784" status="PASS" endtime="20171004 20:06:11.784"></status>
</kw>
<status starttime="20171004 20:06:11.600" status="PASS" endtime="20171004 20:06:11.784"></status>
</kw>
<status starttime="20171004 20:06:11.600" status="PASS" endtime="20171004 20:06:11.784"></status>
</kw>
<status starttime="20171004 20:06:11.599" status="PASS" endtime="20171004 20:06:11.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:11.785">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status starttime="20171004 20:06:11.785" status="PASS" endtime="20171004 20:06:11.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:11.785" status="PASS" endtime="20171004 20:06:11.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:13.406">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:11.786" status="PASS" endtime="20171004 20:06:13.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:13.407" status="PASS" endtime="20171004 20:06:13.407"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:13.407">Delete All Sessions</msg>
<status starttime="20171004 20:06:13.407" status="PASS" endtime="20171004 20:06:13.408"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:13.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:11.598" status="PASS" endtime="20171004 20:06:13.408"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:13.409" status="PASS" endtime="20171004 20:06:13.409"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:13.409">${status} = True</msg>
<status starttime="20171004 20:06:13.408" status="PASS" endtime="20171004 20:06:13.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:13.409" status="PASS" endtime="20171004 20:06:13.410"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.412">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:13.412">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:13.412">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status starttime="20171004 20:06:13.410" status="PASS" endtime="20171004 20:06:13.412"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.414" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_led.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:13.413" status="PASS" endtime="20171004 20:06:13.414"></status>
</kw>
<status starttime="20171004 20:06:13.413" status="PASS" endtime="20171004 20:06:13.414"></status>
</kw>
<status starttime="20171004 20:06:11.597" status="PASS" endtime="20171004 20:06:13.414"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.415">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_elog.txt</msg>
<status starttime="20171004 20:06:13.415" status="PASS" endtime="20171004 20:06:13.415"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.418">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:13.418" status="PASS" endtime="20171004 20:06:13.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:13.419" status="PASS" endtime="20171004 20:06:13.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.420">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:13.419" status="PASS" endtime="20171004 20:06:13.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.421">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:13.420" status="PASS" endtime="20171004 20:06:13.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.637">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:13.421" status="PASS" endtime="20171004 20:06:13.637"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:13.637">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:13.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:13.421" status="PASS" endtime="20171004 20:06:13.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.638">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:13.637" status="PASS" endtime="20171004 20:06:13.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:13.638" status="PASS" endtime="20171004 20:06:13.638"></status>
</kw>
<status starttime="20171004 20:06:13.417" status="PASS" endtime="20171004 20:06:13.639"></status>
</kw>
<status starttime="20171004 20:06:13.417" status="PASS" endtime="20171004 20:06:13.639"></status>
</kw>
<status starttime="20171004 20:06:13.416" status="PASS" endtime="20171004 20:06:13.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.639">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20171004 20:06:13.639" status="PASS" endtime="20171004 20:06:13.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:13.640" status="PASS" endtime="20171004 20:06:13.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:13.817">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:13.640" status="PASS" endtime="20171004 20:06:13.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:13.818" status="PASS" endtime="20171004 20:06:13.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:13.819">Delete All Sessions</msg>
<status starttime="20171004 20:06:13.818" status="PASS" endtime="20171004 20:06:13.819"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:13.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:13.415" status="PASS" endtime="20171004 20:06:13.819"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:13.820" status="PASS" endtime="20171004 20:06:13.820"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:13.820">${status} = True</msg>
<status starttime="20171004 20:06:13.819" status="PASS" endtime="20171004 20:06:13.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:13.820" status="PASS" endtime="20171004 20:06:13.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.821">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1313"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507146993385, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1313"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507146998122, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:13.822">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:13.822">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [
                "_PID=1313"
            ],
            "Id": 2,
            "Message": "xyz.openbmc_pr...</msg>
<status starttime="20171004 20:06:13.821" status="PASS" endtime="20171004 20:06:13.822"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.823" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_elog.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:13.823" status="PASS" endtime="20171004 20:06:13.823"></status>
</kw>
<status starttime="20171004 20:06:13.822" status="PASS" endtime="20171004 20:06:13.823"></status>
</kw>
<status starttime="20171004 20:06:13.415" status="PASS" endtime="20171004 20:06:13.823"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.824">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_inventory.txt</msg>
<status starttime="20171004 20:06:13.824" status="PASS" endtime="20171004 20:06:13.824"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:13.827">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:13.827" status="PASS" endtime="20171004 20:06:13.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:13.828" status="PASS" endtime="20171004 20:06:13.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.829">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:13.829" status="PASS" endtime="20171004 20:06:13.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:13.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:13.829" status="PASS" endtime="20171004 20:06:13.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:14.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:13.830" status="PASS" endtime="20171004 20:06:14.030"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:14.030">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:14.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:13.830" status="PASS" endtime="20171004 20:06:14.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:14.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:14.031" status="PASS" endtime="20171004 20:06:14.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:14.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:14.032" status="PASS" endtime="20171004 20:06:14.032"></status>
</kw>
<status starttime="20171004 20:06:13.826" status="PASS" endtime="20171004 20:06:14.032"></status>
</kw>
<status starttime="20171004 20:06:13.826" status="PASS" endtime="20171004 20:06:14.032"></status>
</kw>
<status starttime="20171004 20:06:13.825" status="PASS" endtime="20171004 20:06:14.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:14.033">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20171004 20:06:14.033" status="PASS" endtime="20171004 20:06:14.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:14.033" status="PASS" endtime="20171004 20:06:14.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.190">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:16.191">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:14.034" status="PASS" endtime="20171004 20:06:16.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:16.191" status="PASS" endtime="20171004 20:06:16.192"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:16.192">Delete All Sessions</msg>
<status starttime="20171004 20:06:16.192" status="PASS" endtime="20171004 20:06:16.193"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:13.824" status="PASS" endtime="20171004 20:06:16.193"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.195" status="PASS" endtime="20171004 20:06:16.195"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.195">${status} = True</msg>
<status starttime="20171004 20:06:16.193" status="PASS" endtime="20171004 20:06:16.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171004 20:06:16.196" status="PASS" endtime="20171004 20:06:16.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.199">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/fccb9e84", 
        "/xyz/openbmc_project/software/96a2bd2f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:16.200">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171004 20:06:16.200">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status starttime="20171004 20:06:16.196" status="PASS" endtime="20171004 20:06:16.200"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.202" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_inventory.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:16.202" status="PASS" endtime="20171004 20:06:16.202"></status>
</kw>
<status starttime="20171004 20:06:16.201" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:13.824" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.279" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.278" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.278" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.278" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.277" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.240" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.237" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<status starttime="20171004 20:06:09.237" status="PASS" endtime="20171004 20:06:16.203"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:16.205" status="PASS" endtime="20171004 20:06:16.205"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.205">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:16.205">${ret_values} = None</msg>
<status starttime="20171004 20:06:16.204" status="PASS" endtime="20171004 20:06:16.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:16.206" status="PASS" endtime="20171004 20:06:16.206"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.252">Returning from the enclosing user keyword.</msg>
<status starttime="20171004 20:06:16.252" status="PASS" endtime="20171004 20:06:16.253"></status>
</kw>
<status starttime="20171004 20:06:16.251" status="PASS" endtime="20171004 20:06:16.253"></status>
</kw>
<status starttime="20171004 20:06:16.206" status="PASS" endtime="20171004 20:06:16.253"></status>
</kw>
<status starttime="20171004 20:06:16.203" status="PASS" endtime="20171004 20:06:16.253"></status>
</kw>
<status starttime="20171004 20:06:16.203" status="PASS" endtime="20171004 20:06:16.253"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:16.255" status="PASS" endtime="20171004 20:06:16.255"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:16.255">${ret_values} = None</msg>
<status starttime="20171004 20:06:16.254" status="PASS" endtime="20171004 20:06:16.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:16.255" status="PASS" endtime="20171004 20:06:16.256"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.300">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:16.300" status="PASS" endtime="20171004 20:06:16.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:16.301" status="PASS" endtime="20171004 20:06:16.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:16.302" status="PASS" endtime="20171004 20:06:16.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:16.302" status="PASS" endtime="20171004 20:06:16.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.505">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:16.303" status="PASS" endtime="20171004 20:06:16.505"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.505">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:16.505">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.303" status="PASS" endtime="20171004 20:06:16.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.506">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.506" status="PASS" endtime="20171004 20:06:16.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.506" status="PASS" endtime="20171004 20:06:16.507"></status>
</kw>
<status starttime="20171004 20:06:16.299" status="PASS" endtime="20171004 20:06:16.507"></status>
</kw>
<status starttime="20171004 20:06:16.299" status="PASS" endtime="20171004 20:06:16.507"></status>
</kw>
<status starttime="20171004 20:06:16.298" status="PASS" endtime="20171004 20:06:16.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.508">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20171004 20:06:16.507" status="PASS" endtime="20171004 20:06:16.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:16.508" status="PASS" endtime="20171004 20:06:16.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.650">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:16.650">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.509" status="PASS" endtime="20171004 20:06:16.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:16.651" status="PASS" endtime="20171004 20:06:16.651"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:16.652">Delete All Sessions</msg>
<status starttime="20171004 20:06:16.651" status="PASS" endtime="20171004 20:06:16.652"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.298" status="PASS" endtime="20171004 20:06:16.652"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.653" status="PASS" endtime="20171004 20:06:16.654"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.654">${status} = True</msg>
<status starttime="20171004 20:06:16.652" status="PASS" endtime="20171004 20:06:16.654"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20171004 20:06:16.654" status="PASS" endtime="20171004 20:06:16.655"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.656">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1313"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507146993385, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1313"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507146998122, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:16.656">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:06:16.656">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'AdditionalData': [u'_PID=1313'], u'associations': [], u'Timestamp': 1507146993385, u'Message': u'xyz.openbmc_project.Power.Fault.Error.PowerSuppl...</msg>
<status starttime="20171004 20:06:16.655" status="PASS" endtime="20171004 20:06:16.656"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.657">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status starttime="20171004 20:06:16.656" status="PASS" endtime="20171004 20:06:16.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.657">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_esel</msg>
<status starttime="20171004 20:06:16.657" status="PASS" endtime="20171004 20:06:16.657"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.658" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_esel"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_esel&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:16.658" status="PASS" endtime="20171004 20:06:16.658"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171004 20:06:16.659" status="PASS" endtime="20171004 20:06:16.659"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.663">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:16.662" status="PASS" endtime="20171004 20:06:16.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:16.663" status="PASS" endtime="20171004 20:06:16.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.664">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:16.664" status="PASS" endtime="20171004 20:06:16.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:16.665" status="PASS" endtime="20171004 20:06:16.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:16.666" status="PASS" endtime="20171004 20:06:16.877"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:16.878">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.665" status="PASS" endtime="20171004 20:06:16.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.878" status="PASS" endtime="20171004 20:06:16.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.879" status="PASS" endtime="20171004 20:06:16.879"></status>
</kw>
<status starttime="20171004 20:06:16.662" status="PASS" endtime="20171004 20:06:16.879"></status>
</kw>
<status starttime="20171004 20:06:16.661" status="PASS" endtime="20171004 20:06:16.879"></status>
</kw>
<status starttime="20171004 20:06:16.661" status="PASS" endtime="20171004 20:06:16.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.880">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20171004 20:06:16.880" status="PASS" endtime="20171004 20:06:16.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:16.880" status="PASS" endtime="20171004 20:06:16.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.967">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:16.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.881" status="PASS" endtime="20171004 20:06:16.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:16.968" status="PASS" endtime="20171004 20:06:16.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:16.969">Delete All Sessions</msg>
<status starttime="20171004 20:06:16.968" status="PASS" endtime="20171004 20:06:16.969"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.660" status="PASS" endtime="20171004 20:06:16.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:16.969" status="PASS" endtime="20171004 20:06:16.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.970">To JSON using : content={
  "data": [
    "_PID=1313"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:16.970">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:06:16.970">${content} = {u'data': [u'_PID=1313'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:06:16.970" status="PASS" endtime="20171004 20:06:16.970"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.971">${esel_data} = [u'_PID=1313']</msg>
<status starttime="20171004 20:06:16.660" status="PASS" endtime="20171004 20:06:16.971"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:06:16.972">[ _PID=1313 ] does not contain match for pattern 'ESEL*'.</msg>
<status starttime="20171004 20:06:16.972" status="FAIL" endtime="20171004 20:06:16.972"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:16.972">${status} = False</msg>
<status starttime="20171004 20:06:16.971" status="PASS" endtime="20171004 20:06:16.972"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.973">Continuing for loop from the next iteration.</msg>
<status starttime="20171004 20:06:16.973" status="PASS" endtime="20171004 20:06:16.973"></status>
</kw>
<status starttime="20171004 20:06:16.659" status="PASS" endtime="20171004 20:06:16.973"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171004 20:06:16.974" status="PASS" endtime="20171004 20:06:16.974"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:16.978">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:16.977" status="PASS" endtime="20171004 20:06:16.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:16.978" status="PASS" endtime="20171004 20:06:16.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.979">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:16.979" status="PASS" endtime="20171004 20:06:16.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:16.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:16.979" status="PASS" endtime="20171004 20:06:16.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:16.981" status="PASS" endtime="20171004 20:06:17.158"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:17.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.980" status="PASS" endtime="20171004 20:06:17.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:17.158" status="PASS" endtime="20171004 20:06:17.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:17.159" status="PASS" endtime="20171004 20:06:17.159"></status>
</kw>
<status starttime="20171004 20:06:16.977" status="PASS" endtime="20171004 20:06:17.159"></status>
</kw>
<status starttime="20171004 20:06:16.976" status="PASS" endtime="20171004 20:06:17.159"></status>
</kw>
<status starttime="20171004 20:06:16.976" status="PASS" endtime="20171004 20:06:17.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:17.160">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20171004 20:06:17.160" status="PASS" endtime="20171004 20:06:17.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:17.160" status="PASS" endtime="20171004 20:06:17.161"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:17.241">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:17.241">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:17.161" status="PASS" endtime="20171004 20:06:17.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:17.241" status="PASS" endtime="20171004 20:06:17.242"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:17.242">Delete All Sessions</msg>
<status starttime="20171004 20:06:17.242" status="PASS" endtime="20171004 20:06:17.242"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.242">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:16.975" status="PASS" endtime="20171004 20:06:17.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:17.243" status="PASS" endtime="20171004 20:06:17.243"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:17.244">To JSON using : content={
  "data": [
    "_PID=1313"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:17.244">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:06:17.244">${content} = {u'data': [u'_PID=1313'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:06:17.243" status="PASS" endtime="20171004 20:06:17.244"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.244">${esel_data} = [u'_PID=1313']</msg>
<status starttime="20171004 20:06:16.974" status="PASS" endtime="20171004 20:06:17.244"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:06:17.245">[ _PID=1313 ] does not contain match for pattern 'ESEL*'.</msg>
<status starttime="20171004 20:06:17.245" status="FAIL" endtime="20171004 20:06:17.245"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.245">${status} = False</msg>
<status starttime="20171004 20:06:17.244" status="PASS" endtime="20171004 20:06:17.245"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.246">Continuing for loop from the next iteration.</msg>
<status starttime="20171004 20:06:17.246" status="PASS" endtime="20171004 20:06:17.246"></status>
</kw>
<status starttime="20171004 20:06:16.973" status="PASS" endtime="20171004 20:06:17.246"></status>
</kw>
<status starttime="20171004 20:06:16.658" status="PASS" endtime="20171004 20:06:17.246"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:17.251">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 20:06:17.255">${out} = </msg>
<status starttime="20171004 20:06:17.247" status="PASS" endtime="20171004 20:06:17.256"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20171004 20:06:17.260">'' does not contain 'eSEL.pl'</msg>
<status starttime="20171004 20:06:17.259" status="FAIL" endtime="20171004 20:06:17.260"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.261">${status} = False</msg>
<status starttime="20171004 20:06:17.258" status="PASS" endtime="20171004 20:06:17.261"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.262">Returning from the enclosing user keyword.</msg>
<status starttime="20171004 20:06:17.261" status="PASS" endtime="20171004 20:06:17.262"></status>
</kw>
<status starttime="20171004 20:06:16.297" status="PASS" endtime="20171004 20:06:17.262"></status>
</kw>
<status starttime="20171004 20:06:16.256" status="PASS" endtime="20171004 20:06:17.262"></status>
</kw>
<status starttime="20171004 20:06:16.253" status="PASS" endtime="20171004 20:06:17.262"></status>
</kw>
<status starttime="20171004 20:06:16.253" status="PASS" endtime="20171004 20:06:17.262"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:17.265" status="PASS" endtime="20171004 20:06:17.265"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:17.265">${ret_values} = None</msg>
<status starttime="20171004 20:06:17.264" status="PASS" endtime="20171004 20:06:17.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:17.265" status="PASS" endtime="20171004 20:06:17.266"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status starttime="20171004 20:06:17.308" status="PASS" endtime="20171004 20:06:17.310"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:17.310" html="yes">File '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/19704/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status starttime="20171004 20:06:17.310" status="PASS" endtime="20171004 20:06:17.310"></status>
</kw>
<status starttime="20171004 20:06:17.308" status="PASS" endtime="20171004 20:06:17.310"></status>
</kw>
<status starttime="20171004 20:06:17.266" status="PASS" endtime="20171004 20:06:17.310"></status>
</kw>
<status starttime="20171004 20:06:17.263" status="PASS" endtime="20171004 20:06:17.310"></status>
</kw>
<status starttime="20171004 20:06:17.263" status="PASS" endtime="20171004 20:06:17.311"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:17.312" status="PASS" endtime="20171004 20:06:17.312"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:17.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:17.313">${ret_values} = None</msg>
<status starttime="20171004 20:06:17.312" status="PASS" endtime="20171004 20:06:17.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:17.313" status="PASS" endtime="20171004 20:06:17.313"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:17.408">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:17.408">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20171004 20:06:17.476">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20171004 20:06:17.495">${core_files} = None</msg>
<msg level="INFO" timestamp="20171004 20:06:17.495">${stderr} = None</msg>
<msg level="INFO" timestamp="20171004 20:06:17.495">${rc} = None</msg>
<msg level="FAIL" timestamp="20171004 20:06:17.495">#(UTC) 2017/10/04 20:06:17.493861 -    0.086432 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20171004 20:06:17.351" status="FAIL" endtime="20171004 20:06:17.495"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:17.496">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20171004 20:06:17.496">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20171004 20:06:17.496" status="FAIL" endtime="20171004 20:06:17.496"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20171004 20:06:17.515" status="PASS" endtime="20171004 20:06:17.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20171004 20:06:17.527" status="PASS" endtime="20171004 20:06:18.196"></status>
</kw>
<status starttime="20171004 20:06:17.526" status="PASS" endtime="20171004 20:06:18.196"></status>
</kw>
<status starttime="20171004 20:06:17.526" status="PASS" endtime="20171004 20:06:18.197"></status>
</kw>
<status starttime="20171004 20:06:17.514" status="PASS" endtime="20171004 20:06:18.197"></status>
</kw>
<status starttime="20171004 20:06:17.497" status="PASS" endtime="20171004 20:06:18.197"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20171004 20:06:18.197" status="PASS" endtime="20171004 20:06:18.197"></status>
</kw>
<status starttime="20171004 20:06:17.350" status="FAIL" endtime="20171004 20:06:18.197"></status>
</kw>
<status starttime="20171004 20:06:17.313" status="PASS" endtime="20171004 20:06:18.198"></status>
</kw>
<status starttime="20171004 20:06:17.311" status="PASS" endtime="20171004 20:06:18.198"></status>
</kw>
<status starttime="20171004 20:06:17.311" status="PASS" endtime="20171004 20:06:18.198"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171004 20:06:18.199" status="PASS" endtime="20171004 20:06:18.200"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:18.200">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:18.200">${ret_values} = None</msg>
<status starttime="20171004 20:06:18.199" status="PASS" endtime="20171004 20:06:18.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171004 20:06:18.200" status="PASS" endtime="20171004 20:06:18.200"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.241">@{entries} = [ BMC FILES ]</msg>
<status starttime="20171004 20:06:18.241" status="PASS" endtime="20171004 20:06:18.241"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.242">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_journalctl_nopager', ...</msg>
<status starttime="20171004 20:06:18.242" status="PASS" endtime="20171004 20:06:18.242"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.243">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_meminfo.txt</msg>
<status starttime="20171004 20:06:18.243" status="PASS" endtime="20171004 20:06:18.243"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:18.247" status="PASS" endtime="20171004 20:06:18.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.248">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20171004 20:06:18.247" status="PASS" endtime="20171004 20:06:18.248"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:18.354">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:18.355">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20171004 20:06:18.404">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:18.295" status="PASS" endtime="20171004 20:06:18.404"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:18.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:18.404">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          276420 kB\nMemAvailable:     321080 kB\nBuffers:           12056 kB\nCached:            44104 kB\nSwapCached:            0 kB\nActive:           10204...</msg>
<status starttime="20171004 20:06:18.248" status="PASS" endtime="20171004 20:06:18.404"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.405">${stdout} = MemTotal:         432252 kB
MemFree:          276420 kB
MemAvailable:     321080 kB
Buffers:           12056 kB
Cached:            44104 kB
SwapCached:            0 kB
Active:           102048 kB
Inac...</msg>
<status starttime="20171004 20:06:18.405" status="PASS" endtime="20171004 20:06:18.405"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.406">${stderr} = </msg>
<status starttime="20171004 20:06:18.406" status="PASS" endtime="20171004 20:06:18.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:18.413" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_meminfo.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:18.412" status="PASS" endtime="20171004 20:06:18.413"></status>
</kw>
<status starttime="20171004 20:06:18.412" status="PASS" endtime="20171004 20:06:18.413"></status>
</kw>
<status starttime="20171004 20:06:18.406" status="PASS" endtime="20171004 20:06:18.414"></status>
</kw>
<status starttime="20171004 20:06:18.243" status="PASS" endtime="20171004 20:06:18.414"></status>
</kw>
<status starttime="20171004 20:06:18.243" status="PASS" endtime="20171004 20:06:18.414"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.415">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_procinfo.txt</msg>
<status starttime="20171004 20:06:18.414" status="PASS" endtime="20171004 20:06:18.415"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:18.416" status="PASS" endtime="20171004 20:06:18.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.417">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20171004 20:06:18.416" status="PASS" endtime="20171004 20:06:18.417"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:18.532">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:18.532">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20171004 20:06:18.590">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:18.473" status="PASS" endtime="20171004 20:06:18.590"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:18.590">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:18.590">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20171004 20:06:18.417" status="PASS" endtime="20171004 20:06:18.590"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.591">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20171004 20:06:18.590" status="PASS" endtime="20171004 20:06:18.591"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.591">${stderr} = </msg>
<status starttime="20171004 20:06:18.591" status="PASS" endtime="20171004 20:06:18.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:18.599" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_procinfo.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:18.598" status="PASS" endtime="20171004 20:06:18.599"></status>
</kw>
<status starttime="20171004 20:06:18.598" status="PASS" endtime="20171004 20:06:18.599"></status>
</kw>
<status starttime="20171004 20:06:18.592" status="PASS" endtime="20171004 20:06:18.600"></status>
</kw>
<status starttime="20171004 20:06:18.415" status="PASS" endtime="20171004 20:06:18.600"></status>
</kw>
<status starttime="20171004 20:06:18.414" status="PASS" endtime="20171004 20:06:18.600"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.601">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_proc_list.txt</msg>
<status starttime="20171004 20:06:18.600" status="PASS" endtime="20171004 20:06:18.601"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:18.602" status="PASS" endtime="20171004 20:06:18.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:18.603">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20171004 20:06:18.602" status="PASS" endtime="20171004 20:06:18.603"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:18.716">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:18.718">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20171004 20:06:19.078">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:18.660" status="PASS" endtime="20171004 20:06:19.078"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:19.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:19.079">${ret_values} = (u'Mem: 155832K used, 276420K free, 8888K shrd, 12056K buff, 44104K cached\nCPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.40 0.64 0.81 1/165 1802\n  PID  PPID U...</msg>
<status starttime="20171004 20:06:18.603" status="PASS" endtime="20171004 20:06:19.079"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:19.080">${stdout} = Mem: 155832K used, 276420K free, 8888K shrd, 12056K buff, 44104K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.40 0.64 0.81 1/165 1802
  PID  PPID USER   ...</msg>
<status starttime="20171004 20:06:19.079" status="PASS" endtime="20171004 20:06:19.080"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:19.080">${stderr} = </msg>
<status starttime="20171004 20:06:19.080" status="PASS" endtime="20171004 20:06:19.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:19.088" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_proc_list.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:19.087" status="PASS" endtime="20171004 20:06:19.088"></status>
</kw>
<status starttime="20171004 20:06:19.086" status="PASS" endtime="20171004 20:06:19.088"></status>
</kw>
<status starttime="20171004 20:06:19.081" status="PASS" endtime="20171004 20:06:19.088"></status>
</kw>
<status starttime="20171004 20:06:18.601" status="PASS" endtime="20171004 20:06:19.088"></status>
</kw>
<status starttime="20171004 20:06:18.600" status="PASS" endtime="20171004 20:06:19.088"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:19.089">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_journalctl_pretty.txt</msg>
<status starttime="20171004 20:06:19.088" status="PASS" endtime="20171004 20:06:19.089"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:19.090" status="PASS" endtime="20171004 20:06:19.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:19.091">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status starttime="20171004 20:06:19.091" status="PASS" endtime="20171004 20:06:19.091"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:19.208">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:19.208">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20171004 20:06:23.720">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:19.144" status="PASS" endtime="20171004 20:06:23.723"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:23.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:23.747">${ret_values} = (u'{\n\t"__CURSOR" : "s=1cb1ee886a1a443cb5e95b491812a607;i=1;b=0cc0ffbdb73947c397fd8d69cdca3334;m=cf1b1f;t=55abdf0486016;x=93220c1b978a1dc8",\n\t"__REALTIME_TIMESTAMP" : "1507146710147094",\n\t"__MONO...</msg>
<status starttime="20171004 20:06:19.091" status="PASS" endtime="20171004 20:06:23.747"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:23.754">${stdout} = {
	"__CURSOR" : "s=1cb1ee886a1a443cb5e95b491812a607;i=1;b=0cc0ffbdb73947c397fd8d69cdca3334;m=cf1b1f;t=55abdf0486016;x=93220c1b978a1dc8",
	"__REALTIME_TIMESTAMP" : "1507146710147094",
	"__MONOTONIC_TIM...</msg>
<status starttime="20171004 20:06:23.748" status="PASS" endtime="20171004 20:06:23.754"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:23.754">${stderr} = </msg>
<status starttime="20171004 20:06:23.754" status="PASS" endtime="20171004 20:06:23.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:23.771" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:23.767" status="PASS" endtime="20171004 20:06:23.771"></status>
</kw>
<status starttime="20171004 20:06:23.760" status="PASS" endtime="20171004 20:06:23.772"></status>
</kw>
<status starttime="20171004 20:06:23.755" status="PASS" endtime="20171004 20:06:23.772"></status>
</kw>
<status starttime="20171004 20:06:19.089" status="PASS" endtime="20171004 20:06:23.772"></status>
</kw>
<status starttime="20171004 20:06:19.088" status="PASS" endtime="20171004 20:06:23.772"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:23.773">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_journalctl_nopager.txt</msg>
<status starttime="20171004 20:06:23.772" status="PASS" endtime="20171004 20:06:23.773"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:23.774" status="PASS" endtime="20171004 20:06:23.774"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:23.775">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20171004 20:06:23.774" status="PASS" endtime="20171004 20:06:23.775"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:23.890">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:23.891">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20171004 20:06:25.413">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:23.827" status="PASS" endtime="20171004 20:06:25.414"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:25.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:25.416">${ret_values} = (u'-- Logs begin at Wed 2017-10-04 19:51:50 UTC, end at Wed 2017-10-04 20:06:33 UTC. --\nOct 04 19:51:50 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 04 19:51:50 witherspoon kernel: Linu...</msg>
<status starttime="20171004 20:06:23.775" status="PASS" endtime="20171004 20:06:25.416"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:25.418">${stdout} = -- Logs begin at Wed 2017-10-04 19:51:50 UTC, end at Wed 2017-10-04 20:06:33 UTC. --
Oct 04 19:51:50 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 04 19:51:50 witherspoon kernel: Linux ver...</msg>
<status starttime="20171004 20:06:25.417" status="PASS" endtime="20171004 20:06:25.418"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:25.418">${stderr} = </msg>
<status starttime="20171004 20:06:25.418" status="PASS" endtime="20171004 20:06:25.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:25.427" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:25.426" status="PASS" endtime="20171004 20:06:25.427"></status>
</kw>
<status starttime="20171004 20:06:25.424" status="PASS" endtime="20171004 20:06:25.427"></status>
</kw>
<status starttime="20171004 20:06:25.419" status="PASS" endtime="20171004 20:06:25.427"></status>
</kw>
<status starttime="20171004 20:06:23.773" status="PASS" endtime="20171004 20:06:25.427"></status>
</kw>
<status starttime="20171004 20:06:23.772" status="PASS" endtime="20171004 20:06:25.427"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:25.428">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_proc_fd_active_list.txt</msg>
<status starttime="20171004 20:06:25.428" status="PASS" endtime="20171004 20:06:25.428"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:25.429" status="PASS" endtime="20171004 20:06:25.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:25.430">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20171004 20:06:25.430" status="PASS" endtime="20171004 20:06:25.430"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:25.545">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:25.546">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20171004 20:06:26.056">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:25.482" status="PASS" endtime="20171004 20:06:26.057"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.057">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:26.058">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  4 19:54 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  4 19:54 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20171004 20:06:25.431" status="PASS" endtime="20171004 20:06:26.058"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.059">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  4 19:54 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  4 19:54 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20171004 20:06:26.058" status="PASS" endtime="20171004 20:06:26.059"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.059">${stderr} = ls: /proc/1805/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20171004 20:06:26.059" status="PASS" endtime="20171004 20:06:26.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.067" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:26.066" status="PASS" endtime="20171004 20:06:26.067"></status>
</kw>
<status starttime="20171004 20:06:26.065" status="PASS" endtime="20171004 20:06:26.067"></status>
</kw>
<status starttime="20171004 20:06:26.060" status="PASS" endtime="20171004 20:06:26.068"></status>
</kw>
<status starttime="20171004 20:06:25.428" status="PASS" endtime="20171004 20:06:26.068"></status>
</kw>
<status starttime="20171004 20:06:25.427" status="PASS" endtime="20171004 20:06:26.068"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.069">${logpath} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_dmesg.txt</msg>
<status starttime="20171004 20:06:26.068" status="PASS" endtime="20171004 20:06:26.069"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171004 20:06:26.070" status="PASS" endtime="20171004 20:06:26.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.071">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20171004 20:06:26.070" status="PASS" endtime="20171004 20:06:26.071"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.180">prompt=# 
alias=bmc_connection
height=24
encoding=UTF-8
newline=

term_type=vt100
timeout=25 seconds
width=80
host=9.3.86.161
port=22
index=1
path_separator=/</msg>
<msg level="INFO" timestamp="20171004 20:06:26.181">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20171004 20:06:26.258">Command exited with return code 0.</msg>
<status starttime="20171004 20:06:26.121" status="PASS" endtime="20171004 20:06:26.258"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:26.258">${ret_values} = (u'[    0.250000] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)\n[    0.250000] io scheduler noop registered\n[    0.250000] io scheduler deadline registered\n[    0.250000] io ...</msg>
<status starttime="20171004 20:06:26.071" status="PASS" endtime="20171004 20:06:26.258"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.259">${stdout} = [    0.250000] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    0.250000] io scheduler noop registered
[    0.250000] io scheduler deadline registered
[    0.250000] io schedu...</msg>
<status starttime="20171004 20:06:26.259" status="PASS" endtime="20171004 20:06:26.259"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.260">${stderr} = </msg>
<status starttime="20171004 20:06:26.260" status="PASS" endtime="20171004 20:06:26.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.267" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_dmesg.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/20171004200606382742_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:26.267" status="PASS" endtime="20171004 20:06:26.267"></status>
</kw>
<status starttime="20171004 20:06:26.266" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:26.260" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:26.069" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:26.068" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.242" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.241" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.241" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.241" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.240" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.201" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.198" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:18.198" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:06.662" status="PASS" endtime="20171004 20:06:26.268"></status>
</kw>
<status starttime="20171004 20:06:06.660" status="PASS" endtime="20171004 20:06:26.269"></status>
</kw>
<status starttime="20171004 20:06:06.659" status="PASS" endtime="20171004 20:06:26.269"></status>
</kw>
<status starttime="20171004 20:06:06.659" status="PASS" endtime="20171004 20:06:26.269"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20171004 20:06:26.279" status="PASS" endtime="20171004 20:06:26.280"></status>
</kw>
<status starttime="20171004 20:06:26.269" status="PASS" endtime="20171004 20:06:26.280"></status>
</kw>
<status starttime="20171004 20:06:06.658" status="PASS" endtime="20171004 20:06:26.280"></status>
</kw>
<status starttime="20171004 20:06:03.279" status="PASS" endtime="20171004 20:06:26.280"></status>
</kw>
<status starttime="20171004 20:06:03.278" status="PASS" endtime="20171004 20:06:26.280"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.291">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171004 20:06:26.281" status="PASS" endtime="20171004 20:06:26.292"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.294">${FFDC_DIR_PATH} = /tmp/fspcibld/19704/obmc-robot/logs/20171004200606382742_TestsTestBasicPoweron/20171004200606382742_PowerOnTest/</msg>
<status starttime="20171004 20:06:26.292" status="PASS" endtime="20171004 20:06:26.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20171004 20:06:26.295" status="PASS" endtime="20171004 20:06:26.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171004 20:06:26.296" status="PASS" endtime="20171004 20:06:26.296"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.297" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs"&gt;/tmp/fspcibld/19704/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20171004 20:06:26.297" status="PASS" endtime="20171004 20:06:26.297"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.298" html="yes">File '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20171004 20:06:26.298" status="PASS" endtime="20171004 20:06:26.298"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.298">${exist} = True</msg>
<status starttime="20171004 20:06:26.298" status="PASS" endtime="20171004 20:06:26.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20171004 20:06:26.299" status="PASS" endtime="20171004 20:06:26.299"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171004 20:06:26.299" status="PASS" endtime="20171004 20:06:26.300"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.301">${cur_time} = 2017-10-04 20:06:26:300538</msg>
<status starttime="20171004 20:06:26.300" status="PASS" endtime="20171004 20:06:26.301"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.301">${cur_time} = 20171004200626300538</msg>
<status starttime="20171004 20:06:26.301" status="PASS" endtime="20171004 20:06:26.301"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.302">${cur_time} = 20171004200626300538</msg>
<status starttime="20171004 20:06:26.300" status="PASS" endtime="20171004 20:06:26.302"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.303" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:26.302" status="PASS" endtime="20171004 20:06:26.303"></status>
</kw>
<status starttime="20171004 20:06:26.280" status="PASS" endtime="20171004 20:06:26.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.307">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:26.307" status="PASS" endtime="20171004 20:06:26.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:26.308" status="PASS" endtime="20171004 20:06:26.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.309">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:26.309" status="PASS" endtime="20171004 20:06:26.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:26.309" status="PASS" endtime="20171004 20:06:26.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.539">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:26.310" status="PASS" endtime="20171004 20:06:26.539"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.539">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:26.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.310" status="PASS" endtime="20171004 20:06:26.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.540">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:26.539" status="PASS" endtime="20171004 20:06:26.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:26.540" status="PASS" endtime="20171004 20:06:26.540"></status>
</kw>
<status starttime="20171004 20:06:26.306" status="PASS" endtime="20171004 20:06:26.541"></status>
</kw>
<status starttime="20171004 20:06:26.306" status="PASS" endtime="20171004 20:06:26.541"></status>
</kw>
<status starttime="20171004 20:06:26.305" status="PASS" endtime="20171004 20:06:26.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.541">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status starttime="20171004 20:06:26.541" status="PASS" endtime="20171004 20:06:26.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:26.542" status="PASS" endtime="20171004 20:06:26.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.599">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:26.599">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.542" status="PASS" endtime="20171004 20:06:26.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:26.600" status="PASS" endtime="20171004 20:06:26.600"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:26.600">Delete All Sessions</msg>
<status starttime="20171004 20:06:26.600" status="PASS" endtime="20171004 20:06:26.600"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.601">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.304" status="PASS" endtime="20171004 20:06:26.601"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status starttime="20171004 20:06:26.601" status="PASS" endtime="20171004 20:06:26.601"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.605">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:26.605" status="PASS" endtime="20171004 20:06:26.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.606">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:26.606" status="PASS" endtime="20171004 20:06:26.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.607">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:26.606" status="PASS" endtime="20171004 20:06:26.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.608">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:26.607" status="PASS" endtime="20171004 20:06:26.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.786">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:26.609" status="PASS" endtime="20171004 20:06:26.786"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.786">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:26.786">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.608" status="PASS" endtime="20171004 20:06:26.786"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.787">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:26.786" status="PASS" endtime="20171004 20:06:26.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:26.787" status="PASS" endtime="20171004 20:06:26.787"></status>
</kw>
<status starttime="20171004 20:06:26.604" status="PASS" endtime="20171004 20:06:26.788"></status>
</kw>
<status starttime="20171004 20:06:26.604" status="PASS" endtime="20171004 20:06:26.788"></status>
</kw>
<status starttime="20171004 20:06:26.603" status="PASS" endtime="20171004 20:06:26.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.788">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status starttime="20171004 20:06:26.788" status="PASS" endtime="20171004 20:06:26.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:26.789" status="PASS" endtime="20171004 20:06:26.789"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.843">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:26.843">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.789" status="PASS" endtime="20171004 20:06:26.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:26.844" status="PASS" endtime="20171004 20:06:26.844"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:26.844">Delete All Sessions</msg>
<status starttime="20171004 20:06:26.844" status="PASS" endtime="20171004 20:06:26.844"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.603" status="PASS" endtime="20171004 20:06:26.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:26.845" status="PASS" endtime="20171004 20:06:26.845"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.846">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171004 20:06:26.846">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171004 20:06:26.846">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20171004 20:06:26.846" status="PASS" endtime="20171004 20:06:26.846"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.846">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status starttime="20171004 20:06:26.602" status="PASS" endtime="20171004 20:06:26.846"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status starttime="20171004 20:06:26.847" status="PASS" endtime="20171004 20:06:26.847"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:26.847">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status starttime="20171004 20:06:26.602" status="PASS" endtime="20171004 20:06:26.847"></status>
</kw>
<kw name="${entry} IN [ @{elog_entries} ]" type="for">
<kw name="${entry} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171004 20:06:26.848" status="PASS" endtime="20171004 20:06:26.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.849">${data} = {u'data': []}</msg>
<status starttime="20171004 20:06:26.849" status="PASS" endtime="20171004 20:06:26.849"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:26.852">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:26.852" status="PASS" endtime="20171004 20:06:26.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:26.853" status="PASS" endtime="20171004 20:06:26.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.854">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:26.854" status="PASS" endtime="20171004 20:06:26.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:26.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:26.854" status="PASS" endtime="20171004 20:06:26.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.032">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:26.856" status="PASS" endtime="20171004 20:06:27.032"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:27.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.855" status="PASS" endtime="20171004 20:06:27.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.033" status="PASS" endtime="20171004 20:06:27.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.033" status="PASS" endtime="20171004 20:06:27.034"></status>
</kw>
<status starttime="20171004 20:06:26.851" status="PASS" endtime="20171004 20:06:27.034"></status>
</kw>
<status starttime="20171004 20:06:26.850" status="PASS" endtime="20171004 20:06:27.034"></status>
</kw>
<status starttime="20171004 20:06:26.850" status="PASS" endtime="20171004 20:06:27.034"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.035">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status starttime="20171004 20:06:27.034" status="PASS" endtime="20171004 20:06:27.035"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.036">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171004 20:06:27.036" status="PASS" endtime="20171004 20:06:27.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.037">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171004 20:06:27.037" status="PASS" endtime="20171004 20:06:27.037"></status>
</kw>
<status starttime="20171004 20:06:27.037" status="PASS" endtime="20171004 20:06:27.038"></status>
</kw>
<status starttime="20171004 20:06:27.035" status="PASS" endtime="20171004 20:06:27.038"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.137">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171004 20:06:27.137">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:27.038" status="PASS" endtime="20171004 20:06:27.137"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.138">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:06:27.138" status="PASS" endtime="20171004 20:06:27.138"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.139">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:06:27.139" status="PASS" endtime="20171004 20:06:27.139"></status>
</kw>
<status starttime="20171004 20:06:27.139" status="PASS" endtime="20171004 20:06:27.140"></status>
</kw>
<status starttime="20171004 20:06:27.137" status="PASS" endtime="20171004 20:06:27.140"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:27.140">Delete All Sessions</msg>
<status starttime="20171004 20:06:27.140" status="PASS" endtime="20171004 20:06:27.140"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:26.849" status="PASS" endtime="20171004 20:06:27.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.141" status="PASS" endtime="20171004 20:06:27.141"></status>
</kw>
<status starttime="20171004 20:06:26.848" status="PASS" endtime="20171004 20:06:27.141"></status>
</kw>
<status starttime="20171004 20:06:26.847" status="PASS" endtime="20171004 20:06:27.141"></status>
</kw>
<kw name="${entry} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171004 20:06:27.142" status="PASS" endtime="20171004 20:06:27.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.143">${data} = {u'data': []}</msg>
<status starttime="20171004 20:06:27.143" status="PASS" endtime="20171004 20:06:27.143"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.146">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:27.146" status="PASS" endtime="20171004 20:06:27.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:27.147" status="PASS" endtime="20171004 20:06:27.147"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.148">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:27.147" status="PASS" endtime="20171004 20:06:27.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.149">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:27.148" status="PASS" endtime="20171004 20:06:27.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:27.149" status="PASS" endtime="20171004 20:06:27.337"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:27.337">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:27.149" status="PASS" endtime="20171004 20:06:27.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.337" status="PASS" endtime="20171004 20:06:27.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.338" status="PASS" endtime="20171004 20:06:27.339"></status>
</kw>
<status starttime="20171004 20:06:27.145" status="PASS" endtime="20171004 20:06:27.339"></status>
</kw>
<status starttime="20171004 20:06:27.145" status="PASS" endtime="20171004 20:06:27.339"></status>
</kw>
<status starttime="20171004 20:06:27.144" status="PASS" endtime="20171004 20:06:27.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.340">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status starttime="20171004 20:06:27.339" status="PASS" endtime="20171004 20:06:27.340"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.341">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171004 20:06:27.340" status="PASS" endtime="20171004 20:06:27.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.342">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171004 20:06:27.342" status="PASS" endtime="20171004 20:06:27.342"></status>
</kw>
<status starttime="20171004 20:06:27.341" status="PASS" endtime="20171004 20:06:27.342"></status>
</kw>
<status starttime="20171004 20:06:27.340" status="PASS" endtime="20171004 20:06:27.342"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.507">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171004 20:06:27.507">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:27.343" status="PASS" endtime="20171004 20:06:27.507"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.508">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:06:27.508" status="PASS" endtime="20171004 20:06:27.508"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.509">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171004 20:06:27.509" status="PASS" endtime="20171004 20:06:27.509"></status>
</kw>
<status starttime="20171004 20:06:27.509" status="PASS" endtime="20171004 20:06:27.509"></status>
</kw>
<status starttime="20171004 20:06:27.507" status="PASS" endtime="20171004 20:06:27.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:27.510">Delete All Sessions</msg>
<status starttime="20171004 20:06:27.510" status="PASS" endtime="20171004 20:06:27.510"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:27.143" status="PASS" endtime="20171004 20:06:27.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.511" status="PASS" endtime="20171004 20:06:27.511"></status>
</kw>
<status starttime="20171004 20:06:27.142" status="PASS" endtime="20171004 20:06:27.511"></status>
</kw>
<status starttime="20171004 20:06:27.141" status="PASS" endtime="20171004 20:06:27.511"></status>
</kw>
<status starttime="20171004 20:06:26.847" status="PASS" endtime="20171004 20:06:27.511"></status>
</kw>
<status starttime="20171004 20:06:26.304" status="PASS" endtime="20171004 20:06:27.511"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.515">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171004 20:06:27.515" status="PASS" endtime="20171004 20:06:27.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171004 20:06:27.515" status="PASS" endtime="20171004 20:06:27.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.516">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171004 20:06:27.516" status="PASS" endtime="20171004 20:06:27.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171004 20:06:27.517" status="PASS" endtime="20171004 20:06:27.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171004 20:06:27.518" status="PASS" endtime="20171004 20:06:27.745"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20171004 20:06:27.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171004 20:06:27.517" status="PASS" endtime="20171004 20:06:27.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.746" status="PASS" endtime="20171004 20:06:27.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171004 20:06:27.747" status="PASS" endtime="20171004 20:06:27.747"></status>
</kw>
<status starttime="20171004 20:06:27.513" status="PASS" endtime="20171004 20:06:27.747"></status>
</kw>
<status starttime="20171004 20:06:27.513" status="PASS" endtime="20171004 20:06:27.747"></status>
</kw>
<status starttime="20171004 20:06:27.512" status="PASS" endtime="20171004 20:06:27.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.748">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status starttime="20171004 20:06:27.748" status="PASS" endtime="20171004 20:06:27.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171004 20:06:27.748" status="PASS" endtime="20171004 20:06:27.749"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.791">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171004 20:06:27.792">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171004 20:06:27.749" status="PASS" endtime="20171004 20:06:27.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171004 20:06:27.792" status="PASS" endtime="20171004 20:06:27.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171004 20:06:27.793">Delete All Sessions</msg>
<status starttime="20171004 20:06:27.793" status="PASS" endtime="20171004 20:06:27.793"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.793">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171004 20:06:27.512" status="PASS" endtime="20171004 20:06:27.793"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.794">Returning from the enclosing user keyword.</msg>
<status starttime="20171004 20:06:27.793" status="PASS" endtime="20171004 20:06:27.794"></status>
</kw>
<status starttime="20171004 20:06:27.512" status="PASS" endtime="20171004 20:06:27.794"></status>
</kw>
<status starttime="20171004 20:06:26.304" status="PASS" endtime="20171004 20:06:27.794"></status>
</kw>
<status starttime="20171004 20:06:26.303" status="PASS" endtime="20171004 20:06:27.794"></status>
</kw>
<status starttime="20171004 20:06:03.278" status="PASS" endtime="20171004 20:06:27.794"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.796">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 20:06:27.796" status="PASS" endtime="20171004 20:06:27.796"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.797">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 20:06:27.797" status="PASS" endtime="20171004 20:06:27.797"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.797">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171004 20:06:27.795" status="PASS" endtime="20171004 20:06:27.797"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.799">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171004 20:06:27.798" status="PASS" endtime="20171004 20:06:27.799"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 20:06:27.799" status="PASS" endtime="20171004 20:06:27.799"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.809">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 20:06:27.812">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 20:06:27.812">${output} = /tmp/fspcibld/19704/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171004 20:06:27.800" status="PASS" endtime="20171004 20:06:27.812"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171004 20:06:27.814" status="PASS" endtime="20171004 20:06:27.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171004 20:06:27.816" status="PASS" endtime="20171004 20:06:27.819"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.819">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171004 20:06:27.815" status="PASS" endtime="20171004 20:06:27.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.820">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 20:06:27.819" status="PASS" endtime="20171004 20:06:27.820"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.820">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171004 20:06:27.798" status="PASS" endtime="20171004 20:06:27.820"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.821">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status starttime="20171004 20:06:27.820" status="PASS" endtime="20171004 20:06:27.821"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.821">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171004 20:06:27.821" status="PASS" endtime="20171004 20:06:27.821"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 20:06:27.822" status="PASS" endtime="20171004 20:06:27.822"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.829">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171004 20:06:27.848">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 20:06:27.848">${os_con_pid} = 202</msg>
<status starttime="20171004 20:06:27.822" status="PASS" endtime="20171004 20:06:27.848"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171004 20:06:27.850" status="PASS" endtime="20171004 20:06:27.851"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.851">${os_con_pid} = 202</msg>
<status starttime="20171004 20:06:27.798" status="PASS" endtime="20171004 20:06:27.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.852">${cmd_buf} = kill -9 202</msg>
<status starttime="20171004 20:06:27.852" status="PASS" endtime="20171004 20:06:27.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171004 20:06:27.853" status="PASS" endtime="20171004 20:06:27.854"></status>
</kw>
<status starttime="20171004 20:06:27.853" status="PASS" endtime="20171004 20:06:27.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.858">Running command 'kill -9 202 2&gt;&amp;1'.</msg>
<status starttime="20171004 20:06:27.855" status="PASS" endtime="20171004 20:06:27.865"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.866">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 20:06:27.867">${output} = </msg>
<status starttime="20171004 20:06:27.854" status="PASS" endtime="20171004 20:06:27.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171004 20:06:27.870" status="PASS" endtime="20171004 20:06:27.871"></status>
</kw>
<status starttime="20171004 20:06:27.869" status="PASS" endtime="20171004 20:06:27.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.875" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/19704/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/19704/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171004 20:06:27.873" status="PASS" endtime="20171004 20:06:27.875"></status>
</kw>
<status starttime="20171004 20:06:27.872" status="PASS" endtime="20171004 20:06:27.875"></status>
</kw>
<status starttime="20171004 20:06:27.871" status="PASS" endtime="20171004 20:06:27.875"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.876">${output} = </msg>
<status starttime="20171004 20:06:27.876" status="PASS" endtime="20171004 20:06:27.876"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171004 20:06:27.877">${loc_quiet} = 1</msg>
<status starttime="20171004 20:06:27.876" status="PASS" endtime="20171004 20:06:27.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20171004 20:06:27.878" status="PASS" endtime="20171004 20:06:27.930"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.931">${rc} = 0</msg>
<msg level="INFO" timestamp="20171004 20:06:27.931">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20171004 20:06:27.877" status="PASS" endtime="20171004 20:06:27.931"></status>
</kw>
<msg level="INFO" timestamp="20171004 20:06:27.932">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20171004 20:06:27.795" status="PASS" endtime="20171004 20:06:27.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171004 20:06:27.935">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20171004 20:06:27.934" status="PASS" endtime="20171004 20:06:27.935"></status>
</kw>
<status starttime="20171004 20:06:03.277" status="PASS" endtime="20171004 20:06:27.935"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" starttime="20171004 19:55:55.827" status="FAIL" endtime="20171004 20:06:27.936">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20171004 19:55:55.788" status="FAIL" endtime="20171004 20:06:27.937"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20171004 19:55:46.678" status="FAIL" endtime="20171004 20:06:27.942"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20171004 19:56:13.034">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
