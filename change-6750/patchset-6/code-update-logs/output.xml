<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171005 01:00:12.494" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:13.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:13.674" starttime="20171005 01:00:13.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:13.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:13.675" starttime="20171005 01:00:13.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:13.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:13.676" starttime="20171005 01:00:13.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:13.676" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:13.676" starttime="20171005 01:00:13.676"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:13.926" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:13.926" starttime="20171005 01:00:13.677"></status>
</kw>
<msg timestamp="20171005 01:00:13.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:13.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:13.926" starttime="20171005 01:00:13.677"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:13.927" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:13.927" starttime="20171005 01:00:13.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:13.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:13.928" starttime="20171005 01:00:13.927"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:13.928" starttime="20171005 01:00:13.672"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:13.928" starttime="20171005 01:00:13.671"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:13.928" starttime="20171005 01:00:13.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:13.929" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171005 01:00:13.929" starttime="20171005 01:00:13.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:13.929" starttime="20171005 01:00:13.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:13.971" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171005 01:00:13.971" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:13.971" starttime="20171005 01:00:13.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:13.972" starttime="20171005 01:00:13.972"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:13.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:13.972" starttime="20171005 01:00:13.972"></status>
</kw>
<msg timestamp="20171005 01:00:13.973" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:13.973" starttime="20171005 01:00:13.670"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171005 01:00:13.973" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171005 01:00:13.973" starttime="20171005 01:00:13.973"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:13.974" starttime="20171005 01:00:13.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171005 01:00:13.975" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171005 01:00:13.975" starttime="20171005 01:00:13.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:00:13.976" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171005 01:00:13.976" starttime="20171005 01:00:13.975"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:00:13.979" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171005 01:00:13.979" starttime="20171005 01:00:13.979"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:13.990" starttime="20171005 01:00:13.990"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171005 01:00:13.991" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171005 01:00:13.992" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171005 01:00:13.993" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 01:00:14.139" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:00:14.140" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:00:14.939" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171005 01:00:14.940" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171005 01:00:15.037" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:00:15.049" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171005 01:00:15.049" level="INFO">${stderr} = </msg>
<msg timestamp="20171005 01:00:15.050" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171005 01:00:15.050" starttime="20171005 01:00:14.108"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:00:15.050" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171005 01:00:15.050" starttime="20171005 01:00:15.050"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 01:00:15.051" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171005 01:00:15.051" starttime="20171005 01:00:15.051"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.051" starttime="20171005 01:00:14.106"></status>
</kw>
<msg timestamp="20171005 01:00:15.051" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171005 01:00:15.448" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171005 01:00:15.466" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:15.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:15.506" starttime="20171005 01:00:15.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:15.507" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:15.507" starttime="20171005 01:00:15.506"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:15.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:15.508" starttime="20171005 01:00:15.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:15.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:15.510" starttime="20171005 01:00:15.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:15.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:15.706" starttime="20171005 01:00:15.510"></status>
</kw>
<msg timestamp="20171005 01:00:15.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:15.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:15.706" starttime="20171005 01:00:15.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:15.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:15.707" starttime="20171005 01:00:15.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:15.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:15.708" starttime="20171005 01:00:15.707"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.708" starttime="20171005 01:00:15.504"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.708" starttime="20171005 01:00:15.503"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.708" starttime="20171005 01:00:15.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:15.709" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171005 01:00:15.709" starttime="20171005 01:00:15.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:15.711" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:15.711" starttime="20171005 01:00:15.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:15.712" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:15.712" starttime="20171005 01:00:15.712"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.712" starttime="20171005 01:00:15.711"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.713" starttime="20171005 01:00:15.710"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.713" starttime="20171005 01:00:15.709"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:15.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171005 01:00:15.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:15.788" starttime="20171005 01:00:15.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:15.790" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:15.790" starttime="20171005 01:00:15.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:15.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:15.791" starttime="20171005 01:00:15.790"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.791" starttime="20171005 01:00:15.790"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.791" starttime="20171005 01:00:15.789"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.791" starttime="20171005 01:00:15.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:15.792" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:15.792" starttime="20171005 01:00:15.791"></status>
</kw>
<msg timestamp="20171005 01:00:15.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:15.792" starttime="20171005 01:00:15.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:15.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:15.793" starttime="20171005 01:00:15.792"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:15.793" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:15.793" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:15.794" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171005 01:00:15.794" starttime="20171005 01:00:15.793"></status>
</kw>
<msg timestamp="20171005 01:00:15.794" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:00:15.794" starttime="20171005 01:00:15.501"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:15.794" starttime="20171005 01:00:15.500"></status>
</kw>
<msg timestamp="20171005 01:00:15.819" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171005 01:00:15.819" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171005 01:00:15.819" starttime="20171005 01:00:15.490"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:15.822" starttime="20171005 01:00:15.822"></status>
</kw>
<msg timestamp="20171005 01:00:15.822" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:00:15.822" starttime="20171005 01:00:15.820"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171005 01:00:15.844" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171005 01:00:15.844" starttime="20171005 01:00:15.843"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:15.845" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171005 01:00:15.845" starttime="20171005 01:00:15.845"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:15.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:15.849" starttime="20171005 01:00:15.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:15.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:15.850" starttime="20171005 01:00:15.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:15.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:15.851" starttime="20171005 01:00:15.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:15.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:15.852" starttime="20171005 01:00:15.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:16.062" starttime="20171005 01:00:15.853"></status>
</kw>
<msg timestamp="20171005 01:00:16.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:16.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.062" starttime="20171005 01:00:15.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.063" starttime="20171005 01:00:16.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.064" starttime="20171005 01:00:16.063"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.064" starttime="20171005 01:00:15.847"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.064" starttime="20171005 01:00:15.847"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.064" starttime="20171005 01:00:15.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:16.065" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171005 01:00:16.065" starttime="20171005 01:00:16.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:16.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:16.066" starttime="20171005 01:00:16.065"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:16.066" starttime="20171005 01:00:16.066"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:16.068" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171005 01:00:16.068" starttime="20171005 01:00:16.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:16.069" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171005 01:00:16.069" starttime="20171005 01:00:16.069"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.069" starttime="20171005 01:00:16.068"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.069" starttime="20171005 01:00:16.066"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:16.396" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 01:00:16.396" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.396" starttime="20171005 01:00:16.070"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:16.397" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:16.397" starttime="20171005 01:00:16.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:16.398" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:16.398" starttime="20171005 01:00:16.398"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.398" starttime="20171005 01:00:16.397"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.398" starttime="20171005 01:00:16.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:16.399" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:16.399" starttime="20171005 01:00:16.399"></status>
</kw>
<msg timestamp="20171005 01:00:16.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.399" starttime="20171005 01:00:15.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.400" starttime="20171005 01:00:16.400"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:00:16.401" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:16.401" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:16.401" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171005 01:00:16.401" starttime="20171005 01:00:16.400"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.401" starttime="20171005 01:00:15.844"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.401" starttime="20171005 01:00:15.842"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.401" starttime="20171005 01:00:15.823"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171005 01:00:16.402" starttime="20171005 01:00:16.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:00:16.403" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171005 01:00:16.403" starttime="20171005 01:00:16.403"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:16.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:16.408" starttime="20171005 01:00:16.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:16.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:16.408" starttime="20171005 01:00:16.408"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:16.409" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:16.409" starttime="20171005 01:00:16.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:16.410" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:16.410" starttime="20171005 01:00:16.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:16.595" starttime="20171005 01:00:16.411"></status>
</kw>
<msg timestamp="20171005 01:00:16.596" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:16.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.596" starttime="20171005 01:00:16.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.596" starttime="20171005 01:00:16.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.597" starttime="20171005 01:00:16.597"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.597" starttime="20171005 01:00:16.406"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.597" starttime="20171005 01:00:16.406"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.598" starttime="20171005 01:00:16.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:16.598" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171005 01:00:16.598" starttime="20171005 01:00:16.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:16.600" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:16.600" starttime="20171005 01:00:16.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:16.602" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:16.602" starttime="20171005 01:00:16.601"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.602" starttime="20171005 01:00:16.601"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.602" starttime="20171005 01:00:16.599"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.602" starttime="20171005 01:00:16.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:16.665" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171005 01:00:16.665" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.665" starttime="20171005 01:00:16.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:16.667" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:16.667" starttime="20171005 01:00:16.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:16.668" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:16.668" starttime="20171005 01:00:16.668"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.668" starttime="20171005 01:00:16.667"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.668" starttime="20171005 01:00:16.666"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.668" starttime="20171005 01:00:16.665"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:16.669" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:16.669" starttime="20171005 01:00:16.669"></status>
</kw>
<msg timestamp="20171005 01:00:16.669" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.669" starttime="20171005 01:00:16.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.671" starttime="20171005 01:00:16.669"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:16.671" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:16.672" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:16.672" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171005 01:00:16.672" starttime="20171005 01:00:16.671"></status>
</kw>
<msg timestamp="20171005 01:00:16.672" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:00:16.672" starttime="20171005 01:00:16.404"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.672" starttime="20171005 01:00:16.404"></status>
</kw>
<msg timestamp="20171005 01:00:16.672" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:00:16.672" starttime="20171005 01:00:16.403"></status>
</kw>
<msg timestamp="20171005 01:00:16.672" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:00:16.673" starttime="20171005 01:00:16.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171005 01:00:16.673" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:16.673" starttime="20171005 01:00:16.673"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:16.673" starttime="20171005 01:00:15.489"></status>
</kw>
<msg timestamp="20171005 01:00:16.716" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:00:16.750" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:00:16.755" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171005 01:00:16.756" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:16.802" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:16.803" starttime="20171005 01:00:16.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:16.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:16.804" starttime="20171005 01:00:16.803"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:16.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:16.804" starttime="20171005 01:00:16.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:16.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:16.805" starttime="20171005 01:00:16.805"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:17.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:17.091" starttime="20171005 01:00:16.806"></status>
</kw>
<msg timestamp="20171005 01:00:17.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:17.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:17.091" starttime="20171005 01:00:16.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:17.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:17.092" starttime="20171005 01:00:17.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:17.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:17.093" starttime="20171005 01:00:17.093"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.093" starttime="20171005 01:00:16.799"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.093" starttime="20171005 01:00:16.799"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.093" starttime="20171005 01:00:16.798"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:17.094" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:00:17.094" starttime="20171005 01:00:17.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:17.096" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:17.096" starttime="20171005 01:00:17.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:17.097" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:17.098" starttime="20171005 01:00:17.097"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.098" starttime="20171005 01:00:17.097"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.098" starttime="20171005 01:00:17.095"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.098" starttime="20171005 01:00:17.094"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:17.304" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:00:17.304" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:17.304" starttime="20171005 01:00:17.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:17.306" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171005 01:00:17.306" starttime="20171005 01:00:17.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:17.307" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:17.308" starttime="20171005 01:00:17.307"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.308" starttime="20171005 01:00:17.306"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.308" starttime="20171005 01:00:17.305"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.308" starttime="20171005 01:00:17.304"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:17.309" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:17.310" starttime="20171005 01:00:17.309"></status>
</kw>
<msg timestamp="20171005 01:00:17.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:17.310" starttime="20171005 01:00:16.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:17.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:17.311" starttime="20171005 01:00:17.311"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:17.312" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:17.312" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:17.312" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171005 01:00:17.312" starttime="20171005 01:00:17.312"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.313" starttime="20171005 01:00:16.795"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.408" starttime="20171005 01:00:13.991"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171005 01:00:17.414" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:00:17.429" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171005 01:00:17.429" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171005 01:00:17.430" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171005 01:00:17.430" starttime="20171005 01:00:17.408"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.430" starttime="20171005 01:00:13.989"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.430" starttime="20171005 01:00:13.980"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.430" starttime="20171005 01:00:13.977"></status>
</kw>
<msg timestamp="20171005 01:00:17.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:17.431" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:00:17.431" starttime="20171005 01:00:13.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171005 01:00:17.432" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171005 01:00:17.432" starttime="20171005 01:00:17.432"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.432" starttime="20171005 01:00:17.431"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.432" starttime="20171005 01:00:13.974"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.432" starttime="20171005 01:00:13.974"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:17.432" starttime="20171005 01:00:13.669"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171005 01:00:17.434" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171005 01:00:17.434" starttime="20171005 01:00:17.434"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171005 01:00:17.454" level="INFO">${image_version} = v1.99.10-107-gc460ebe</msg>
<status status="PASS" endtime="20171005 01:00:17.454" starttime="20171005 01:00:17.434"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171005 01:00:17.455" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171005 01:00:30.628" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171005 01:00:30.629" starttime="20171005 01:00:17.454"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:30.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:30.634" starttime="20171005 01:00:30.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:30.635" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:30.635" starttime="20171005 01:00:30.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:30.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:30.636" starttime="20171005 01:00:30.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:30.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:30.637" starttime="20171005 01:00:30.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:30.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:30.820" starttime="20171005 01:00:30.638"></status>
</kw>
<msg timestamp="20171005 01:00:30.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:30.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:30.820" starttime="20171005 01:00:30.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:30.821" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:30.821" starttime="20171005 01:00:30.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:30.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:30.822" starttime="20171005 01:00:30.821"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:30.822" starttime="20171005 01:00:30.632"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:30.822" starttime="20171005 01:00:30.632"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:30.822" starttime="20171005 01:00:30.630"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:30.823" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171005 01:00:30.823" starttime="20171005 01:00:30.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:30.823" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171005 01:00:30.824" starttime="20171005 01:00:30.823"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:30.824" starttime="20171005 01:00:30.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:30.825" starttime="20171005 01:00:30.824"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:36.778" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171005 01:00:36.778" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:36.778" starttime="20171005 01:00:30.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:36.779" starttime="20171005 01:00:36.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:36.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:36.780" starttime="20171005 01:00:36.779"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:36.780" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:36.780" starttime="20171005 01:00:36.780"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:36.781" starttime="20171005 01:00:30.629"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:00:36.788" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171005 01:00:36.788" starttime="20171005 01:00:36.787"></status>
</kw>
<msg timestamp="20171005 01:00:36.788" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171005 01:00:36.788" starttime="20171005 01:00:36.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:36.790" starttime="20171005 01:00:36.789"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:36.790" starttime="20171005 01:00:36.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:36.790" starttime="20171005 01:00:36.790"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:00:36.792" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171005 01:00:36.792" starttime="20171005 01:00:36.791"></status>
</kw>
<msg timestamp="20171005 01:00:36.792" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171005 01:00:36.792" starttime="20171005 01:00:36.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:36.794" starttime="20171005 01:00:36.793"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:36.794" starttime="20171005 01:00:36.793"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:36.794" starttime="20171005 01:00:36.792"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:00:36.795" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:00:38.973" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171005 01:00:38.973" starttime="20171005 01:00:36.795"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:38.973" starttime="20171005 01:00:36.786"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:00:38.983" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20171005 01:00:39.033" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:00:39.034" level="INFO">${stdout} = /tmp/images/af631876/</msg>
<msg timestamp="20171005 01:00:39.034" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:00:39.034" starttime="20171005 01:00:38.983"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:00:39.034" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171005 01:00:39.034" starttime="20171005 01:00:39.034"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:39.035" starttime="20171005 01:00:38.982"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:00:39.041" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171005 01:00:39.041" starttime="20171005 01:00:39.040"></status>
</kw>
<msg timestamp="20171005 01:00:39.041" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171005 01:00:39.041" starttime="20171005 01:00:39.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:39.042" starttime="20171005 01:00:39.042"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:39.042" starttime="20171005 01:00:39.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:39.043" starttime="20171005 01:00:39.043"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:00:39.044" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171005 01:00:39.044" starttime="20171005 01:00:39.044"></status>
</kw>
<msg timestamp="20171005 01:00:39.044" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171005 01:00:39.044" starttime="20171005 01:00:39.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:39.047" starttime="20171005 01:00:39.046"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:39.047" starttime="20171005 01:00:39.046"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:39.047" starttime="20171005 01:00:39.045"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:00:39.048" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:00:40.693" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171005 01:00:40.694" starttime="20171005 01:00:39.048"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:40.694" starttime="20171005 01:00:39.039"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/af631876/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:00:40.704" level="INFO">Executing command 'cat /tmp/images/af631876/MANIFEST | grep "version="'.</msg>
<msg timestamp="20171005 01:00:40.771" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:00:40.772" level="INFO">${stdout} = version=v1.99.10-107-gc460ebe</msg>
<msg timestamp="20171005 01:00:40.772" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:00:40.772" starttime="20171005 01:00:40.703"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:00:40.772" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171005 01:00:40.772" starttime="20171005 01:00:40.772"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:40.773" starttime="20171005 01:00:40.702"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:00:40.779" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171005 01:00:40.779" starttime="20171005 01:00:40.778"></status>
</kw>
<msg timestamp="20171005 01:00:40.779" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171005 01:00:40.779" starttime="20171005 01:00:40.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:40.780" starttime="20171005 01:00:40.780"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:40.780" starttime="20171005 01:00:40.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:40.781" starttime="20171005 01:00:40.781"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:00:40.782" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171005 01:00:40.782" starttime="20171005 01:00:40.782"></status>
</kw>
<msg timestamp="20171005 01:00:40.782" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171005 01:00:40.782" starttime="20171005 01:00:40.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:40.784" starttime="20171005 01:00:40.784"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:40.784" starttime="20171005 01:00:40.783"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:40.784" starttime="20171005 01:00:40.783"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:00:40.785" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:00:42.461" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171005 01:00:42.461" starttime="20171005 01:00:40.784"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:42.461" starttime="20171005 01:00:40.777"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:00:42.468" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171005 01:00:42.468" starttime="20171005 01:00:42.468"></status>
</kw>
<msg timestamp="20171005 01:00:42.468" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171005 01:00:42.468" starttime="20171005 01:00:42.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:42.469" starttime="20171005 01:00:42.469"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:42.469" starttime="20171005 01:00:42.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:42.470" starttime="20171005 01:00:42.470"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:00:42.471" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171005 01:00:42.471" starttime="20171005 01:00:42.471"></status>
</kw>
<msg timestamp="20171005 01:00:42.471" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171005 01:00:42.471" starttime="20171005 01:00:42.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:42.473" starttime="20171005 01:00:42.473"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:42.473" starttime="20171005 01:00:42.473"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:42.474" starttime="20171005 01:00:42.472"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:00:42.474" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:00:44.183" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171005 01:00:44.183" starttime="20171005 01:00:42.474"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.184" starttime="20171005 01:00:42.466"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/af631876/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:00:44.193" level="INFO">Executing command 'cat /tmp/images/af631876/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20171005 01:00:44.270" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:00:44.270" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20171005 01:00:44.270" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:00:44.270" starttime="20171005 01:00:44.193"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.271" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171005 01:00:44.271" starttime="20171005 01:00:44.271"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.271" starttime="20171005 01:00:44.192"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:44.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:44.285" starttime="20171005 01:00:44.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:44.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:44.286" starttime="20171005 01:00:44.285"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:44.286" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:44.286" starttime="20171005 01:00:44.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:44.287" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:44.287" starttime="20171005 01:00:44.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.475" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:44.475" starttime="20171005 01:00:44.288"></status>
</kw>
<msg timestamp="20171005 01:00:44.475" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:44.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.476" starttime="20171005 01:00:44.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.476" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.476" starttime="20171005 01:00:44.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.477" starttime="20171005 01:00:44.477"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.477" starttime="20171005 01:00:44.284"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.478" starttime="20171005 01:00:44.283"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.478" starttime="20171005 01:00:44.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:44.479" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876/attr/Activation</msg>
<status status="PASS" endtime="20171005 01:00:44.479" starttime="20171005 01:00:44.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:44.482" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:44.482" starttime="20171005 01:00:44.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:44.483" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:44.484" starttime="20171005 01:00:44.483"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.484" starttime="20171005 01:00:44.482"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.484" starttime="20171005 01:00:44.480"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.484" starttime="20171005 01:00:44.479"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:44.612" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876/attr/Activation, headers=None json=None</msg>
<msg timestamp="20171005 01:00:44.613" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.613" starttime="20171005 01:00:44.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:44.615" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:44.615" starttime="20171005 01:00:44.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:44.616" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:44.616" starttime="20171005 01:00:44.615"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.616" starttime="20171005 01:00:44.615"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.616" starttime="20171005 01:00:44.614"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.616" starttime="20171005 01:00:44.613"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:44.617" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:44.618" starttime="20171005 01:00:44.616"></status>
</kw>
<msg timestamp="20171005 01:00:44.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.618" starttime="20171005 01:00:44.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.619" starttime="20171005 01:00:44.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:44.619" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:44.619" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:44.619" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20171005 01:00:44.620" starttime="20171005 01:00:44.619"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.620" starttime="20171005 01:00:44.280"></status>
</kw>
<msg timestamp="20171005 01:00:44.620" level="INFO">${ret} = True</msg>
<msg timestamp="20171005 01:00:44.620" level="INFO">${version_id} = af631876</msg>
<status status="PASS" endtime="20171005 01:00:44.620" starttime="20171005 01:00:36.781"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:44.620" starttime="20171005 01:00:44.620"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:44.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:44.625" starttime="20171005 01:00:44.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:44.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:44.625" starttime="20171005 01:00:44.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:44.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:44.626" starttime="20171005 01:00:44.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:44.627" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:44.627" starttime="20171005 01:00:44.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:44.836" starttime="20171005 01:00:44.628"></status>
</kw>
<msg timestamp="20171005 01:00:44.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:44.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.836" starttime="20171005 01:00:44.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.837" starttime="20171005 01:00:44.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.838" starttime="20171005 01:00:44.838"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.838" starttime="20171005 01:00:44.623"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.838" starttime="20171005 01:00:44.623"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.838" starttime="20171005 01:00:44.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:44.839" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:00:44.839" starttime="20171005 01:00:44.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:44.842" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:44.842" starttime="20171005 01:00:44.841"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:44.843" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:44.844" starttime="20171005 01:00:44.843"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.844" starttime="20171005 01:00:44.842"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.844" starttime="20171005 01:00:44.840"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.844" starttime="20171005 01:00:44.839"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:44.988" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:00:44.988" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.988" starttime="20171005 01:00:44.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:44.990" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/af631876", 
    "Purpose": "xyz.openbmc_project.Softwa...</msg>
<status status="PASS" endtime="20171005 01:00:44.990" starttime="20171005 01:00:44.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:44.991" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/af631876", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:44.992" starttime="20171005 01:00:44.991"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.992" starttime="20171005 01:00:44.991"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.992" starttime="20171005 01:00:44.989"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:44.992" starttime="20171005 01:00:44.989"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:44.992" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:44.992" starttime="20171005 01:00:44.992"></status>
</kw>
<msg timestamp="20171005 01:00:44.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.993" starttime="20171005 01:00:44.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.993" starttime="20171005 01:00:44.993"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:44.994" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/af631876", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:44.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:44.994" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:00:44.994" starttime="20171005 01:00:44.994"></status>
</kw>
<msg timestamp="20171005 01:00:44.995" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20171005 01:00:44.995" starttime="20171005 01:00:44.621"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
</arguments>
<assign>
<var>${activation}</var>
</assign>
<msg timestamp="20171005 01:00:44.995" level="INFO">${activation} = xyz.openbmc_project.Software.Activation.Activations.Ready</msg>
<status status="PASS" endtime="20171005 01:00:44.995" starttime="20171005 01:00:44.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${skip_if_active}' == 'true' and '${activation}' == '${ACTIVE}'</arg>
<arg>Switch To Active Image And Pass</arg>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:44.996" starttime="20171005 01:00:44.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20171005 01:00:44.998" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:44.998" starttime="20171005 01:00:44.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171005 01:00:44.998" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20171005 01:00:44.999" starttime="20171005 01:00:44.998"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:45.000" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:00:45.000" starttime="20171005 01:00:44.999"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:45.003" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:45.003" starttime="20171005 01:00:45.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:45.004" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:45.004" starttime="20171005 01:00:45.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:45.005" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:45.005" starttime="20171005 01:00:45.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:45.006" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:45.006" starttime="20171005 01:00:45.005"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:45.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:45.207" starttime="20171005 01:00:45.007"></status>
</kw>
<msg timestamp="20171005 01:00:45.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:45.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:45.207" starttime="20171005 01:00:45.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:45.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:45.208" starttime="20171005 01:00:45.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:45.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:45.209" starttime="20171005 01:00:45.208"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.209" starttime="20171005 01:00:45.002"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.209" starttime="20171005 01:00:45.001"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.209" starttime="20171005 01:00:45.001"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:45.210" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876/attr/RequestedActivation</msg>
<status status="PASS" endtime="20171005 01:00:45.210" starttime="20171005 01:00:45.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:45.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:45.210" starttime="20171005 01:00:45.210"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:45.211" starttime="20171005 01:00:45.211"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:45.213" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20171005 01:00:45.213" starttime="20171005 01:00:45.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:45.214" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171005 01:00:45.214" starttime="20171005 01:00:45.213"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.214" starttime="20171005 01:00:45.213"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.214" starttime="20171005 01:00:45.211"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:45.837" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 01:00:45.838" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:45.838" starttime="20171005 01:00:45.215"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:45.839" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:45.839" starttime="20171005 01:00:45.838"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:45.840" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:45.840" starttime="20171005 01:00:45.840"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.841" starttime="20171005 01:00:45.839"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.841" starttime="20171005 01:00:45.838"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:45.841" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:45.841" starttime="20171005 01:00:45.841"></status>
</kw>
<msg timestamp="20171005 01:00:45.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:45.842" starttime="20171005 01:00:45.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:45.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:45.843" starttime="20171005 01:00:45.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:00:45.843" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:45.843" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:45.843" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171005 01:00:45.843" starttime="20171005 01:00:45.843"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:45.844" starttime="20171005 01:00:44.999"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:45.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:45.850" starttime="20171005 01:00:45.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:45.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:45.851" starttime="20171005 01:00:45.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:45.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:45.852" starttime="20171005 01:00:45.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:45.853" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:45.853" starttime="20171005 01:00:45.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:46.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:46.556" starttime="20171005 01:00:45.854"></status>
</kw>
<msg timestamp="20171005 01:00:46.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:46.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.557" starttime="20171005 01:00:45.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:46.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.558" starttime="20171005 01:00:46.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:46.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.559" starttime="20171005 01:00:46.558"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.559" starttime="20171005 01:00:45.848"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.559" starttime="20171005 01:00:45.847"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.559" starttime="20171005 01:00:45.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:46.560" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:00:46.560" starttime="20171005 01:00:46.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:46.563" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:46.563" starttime="20171005 01:00:46.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:46.565" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:46.565" starttime="20171005 01:00:46.565"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.565" starttime="20171005 01:00:46.564"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.566" starttime="20171005 01:00:46.561"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.566" starttime="20171005 01:00:46.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:46.756" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:00:46.756" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.756" starttime="20171005 01:00:46.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:46.759" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:00:46.759" starttime="20171005 01:00:46.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:46.760" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:46.760" starttime="20171005 01:00:46.759"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.760" starttime="20171005 01:00:46.759"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.760" starttime="20171005 01:00:46.757"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.761" starttime="20171005 01:00:46.757"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:46.761" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:46.761" starttime="20171005 01:00:46.761"></status>
</kw>
<msg timestamp="20171005 01:00:46.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.761" starttime="20171005 01:00:45.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:46.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.762" starttime="20171005 01:00:46.762"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:46.763" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:46.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:46.763" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:00:46.763" starttime="20171005 01:00:46.762"></status>
</kw>
<msg timestamp="20171005 01:00:46.763" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171005 01:00:46.763" starttime="20171005 01:00:45.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20171005 01:00:46.764" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:46.764" starttime="20171005 01:00:46.764"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:46.765" starttime="20171005 01:00:46.765"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:00:46.773" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171005 01:00:46.773" starttime="20171005 01:00:46.773"></status>
</kw>
<msg timestamp="20171005 01:00:46.774" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171005 01:00:46.774" starttime="20171005 01:00:46.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:46.775" starttime="20171005 01:00:46.775"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.776" starttime="20171005 01:00:46.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:46.777" starttime="20171005 01:00:46.776"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:00:46.778" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171005 01:00:46.778" starttime="20171005 01:00:46.778"></status>
</kw>
<msg timestamp="20171005 01:00:46.779" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171005 01:00:46.779" starttime="20171005 01:00:46.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:00:46.782" starttime="20171005 01:00:46.781"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.782" starttime="20171005 01:00:46.781"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:46.782" starttime="20171005 01:00:46.779"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:00:46.783" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:00:48.802" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171005 01:00:48.802" starttime="20171005 01:00:46.782"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:48.802" starttime="20171005 01:00:46.771"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:48.816" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:48.817" starttime="20171005 01:00:48.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:48.818" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:48.818" starttime="20171005 01:00:48.817"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:48.818" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:48.818" starttime="20171005 01:00:48.818"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:48.819" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:48.819" starttime="20171005 01:00:48.819"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:00:49.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:00:49.425" starttime="20171005 01:00:48.820"></status>
</kw>
<msg timestamp="20171005 01:00:49.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:00:49.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:49.425" starttime="20171005 01:00:48.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:00:49.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:49.426" starttime="20171005 01:00:49.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:49.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:49.427" starttime="20171005 01:00:49.426"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.427" starttime="20171005 01:00:48.815"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.427" starttime="20171005 01:00:48.815"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.427" starttime="20171005 01:00:48.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:00:49.428" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:00:49.428" starttime="20171005 01:00:49.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:49.430" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:49.430" starttime="20171005 01:00:49.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:49.431" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:00:49.431" starttime="20171005 01:00:49.431"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.431" starttime="20171005 01:00:49.430"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.431" starttime="20171005 01:00:49.429"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.431" starttime="20171005 01:00:49.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:00:49.818" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:00:49.818" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:49.818" starttime="20171005 01:00:49.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:00:49.820" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:00:49.820" starttime="20171005 01:00:49.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:00:49.821" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:00:49.821" starttime="20171005 01:00:49.821"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.822" starttime="20171005 01:00:49.820"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.822" starttime="20171005 01:00:49.819"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.822" starttime="20171005 01:00:49.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:00:49.823" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:00:49.823" starttime="20171005 01:00:49.822"></status>
</kw>
<msg timestamp="20171005 01:00:49.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:00:49.824" starttime="20171005 01:00:48.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:00:49.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:00:49.825" starttime="20171005 01:00:49.824"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:00:49.825" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:00:49.825" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:00:49.826" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:00:49.826" starttime="20171005 01:00:49.825"></status>
</kw>
<status status="PASS" endtime="20171005 01:00:49.826" starttime="20171005 01:00:48.811"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:00:59.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:00:59.849" starttime="20171005 01:00:59.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:00:59.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:00:59.850" starttime="20171005 01:00:59.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:00:59.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:00:59.851" starttime="20171005 01:00:59.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:00:59.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:00:59.852" starttime="20171005 01:00:59.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:01:00.453" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:01:00.453" starttime="20171005 01:00:59.852"></status>
</kw>
<msg timestamp="20171005 01:01:00.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:01:00.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:00.453" starttime="20171005 01:00:59.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:01:00.454" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:00.454" starttime="20171005 01:01:00.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:00.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:00.455" starttime="20171005 01:01:00.454"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.455" starttime="20171005 01:00:59.847"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.455" starttime="20171005 01:00:59.847"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.455" starttime="20171005 01:00:59.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:01:00.456" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:01:00.456" starttime="20171005 01:01:00.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:00.458" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:00.458" starttime="20171005 01:01:00.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:00.459" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:00.459" starttime="20171005 01:01:00.459"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.460" starttime="20171005 01:01:00.459"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.460" starttime="20171005 01:01:00.457"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.461" starttime="20171005 01:01:00.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:01:00.591" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:01:00.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:00.592" starttime="20171005 01:01:00.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:00.594" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:01:00.594" starttime="20171005 01:01:00.593"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:00.595" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:01:00.595" starttime="20171005 01:01:00.595"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.595" starttime="20171005 01:01:00.594"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.595" starttime="20171005 01:01:00.592"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.595" starttime="20171005 01:01:00.592"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:01:00.596" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:01:00.596" starttime="20171005 01:01:00.596"></status>
</kw>
<msg timestamp="20171005 01:01:00.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:00.596" starttime="20171005 01:00:59.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:00.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:00.597" starttime="20171005 01:01:00.597"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:01:00.598" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:01:00.598" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:01:00.598" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:01:00.598" starttime="20171005 01:01:00.598"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:00.598" starttime="20171005 01:00:59.844"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:01:10.621" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:01:10.622" starttime="20171005 01:01:10.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:01:10.622" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:01:10.622" starttime="20171005 01:01:10.622"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:01:10.623" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:01:10.623" starttime="20171005 01:01:10.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:01:10.624" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:01:10.624" starttime="20171005 01:01:10.623"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:01:11.398" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:01:11.398" starttime="20171005 01:01:10.625"></status>
</kw>
<msg timestamp="20171005 01:01:11.398" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:01:11.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:11.398" starttime="20171005 01:01:10.624"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:01:11.399" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:11.399" starttime="20171005 01:01:11.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:11.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:11.400" starttime="20171005 01:01:11.399"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.400" starttime="20171005 01:01:10.620"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.400" starttime="20171005 01:01:10.620"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.400" starttime="20171005 01:01:10.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:01:11.401" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:01:11.401" starttime="20171005 01:01:11.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:11.403" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:11.403" starttime="20171005 01:01:11.402"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:11.404" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:11.404" starttime="20171005 01:01:11.403"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.404" starttime="20171005 01:01:11.403"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.404" starttime="20171005 01:01:11.401"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.404" starttime="20171005 01:01:11.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:01:11.534" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:01:11.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:11.535" starttime="20171005 01:01:11.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:11.537" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:01:11.537" starttime="20171005 01:01:11.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:11.538" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:01:11.538" starttime="20171005 01:01:11.538"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.538" starttime="20171005 01:01:11.537"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.538" starttime="20171005 01:01:11.536"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.538" starttime="20171005 01:01:11.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:01:11.539" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:01:11.539" starttime="20171005 01:01:11.539"></status>
</kw>
<msg timestamp="20171005 01:01:11.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:11.539" starttime="20171005 01:01:10.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:11.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:11.540" starttime="20171005 01:01:11.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:01:11.540" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:01:11.540" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:01:11.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:01:11.541" starttime="20171005 01:01:11.540"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:11.541" starttime="20171005 01:01:10.618"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:01:21.558" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:01:21.559" starttime="20171005 01:01:21.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:01:21.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:01:21.559" starttime="20171005 01:01:21.559"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:01:21.560" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:01:21.560" starttime="20171005 01:01:21.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:01:21.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:01:21.561" starttime="20171005 01:01:21.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:01:21.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:01:21.739" starttime="20171005 01:01:21.562"></status>
</kw>
<msg timestamp="20171005 01:01:21.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:01:21.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:21.739" starttime="20171005 01:01:21.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:01:21.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:21.740" starttime="20171005 01:01:21.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:21.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:21.741" starttime="20171005 01:01:21.740"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.741" starttime="20171005 01:01:21.557"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.741" starttime="20171005 01:01:21.556"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.741" starttime="20171005 01:01:21.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:01:21.742" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:01:21.742" starttime="20171005 01:01:21.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:21.744" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:21.744" starttime="20171005 01:01:21.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:21.745" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:21.745" starttime="20171005 01:01:21.745"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.745" starttime="20171005 01:01:21.744"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.745" starttime="20171005 01:01:21.742"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.745" starttime="20171005 01:01:21.742"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:01:21.877" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:01:21.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:21.877" starttime="20171005 01:01:21.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:21.879" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:01:21.879" starttime="20171005 01:01:21.879"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:21.880" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:01:21.880" starttime="20171005 01:01:21.880"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.880" starttime="20171005 01:01:21.879"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.881" starttime="20171005 01:01:21.878"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.881" starttime="20171005 01:01:21.877"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:01:21.882" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:01:21.882" starttime="20171005 01:01:21.881"></status>
</kw>
<msg timestamp="20171005 01:01:21.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:21.882" starttime="20171005 01:01:21.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:21.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:21.883" starttime="20171005 01:01:21.883"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:01:21.884" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:01:21.884" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:01:21.884" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:01:21.884" starttime="20171005 01:01:21.883"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:21.884" starttime="20171005 01:01:21.553"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:01:31.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:01:31.909" starttime="20171005 01:01:31.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:01:31.910" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:01:31.910" starttime="20171005 01:01:31.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:01:31.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:01:31.911" starttime="20171005 01:01:31.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:01:31.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:01:31.912" starttime="20171005 01:01:31.911"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:01:32.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:01:32.900" starttime="20171005 01:01:31.912"></status>
</kw>
<msg timestamp="20171005 01:01:32.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:01:32.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:32.901" starttime="20171005 01:01:31.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:01:32.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:32.901" starttime="20171005 01:01:32.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:32.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:32.902" starttime="20171005 01:01:32.902"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:32.902" starttime="20171005 01:01:31.907"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:32.902" starttime="20171005 01:01:31.907"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:32.903" starttime="20171005 01:01:31.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:01:32.903" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:01:32.903" starttime="20171005 01:01:32.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:32.905" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:32.905" starttime="20171005 01:01:32.905"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:32.906" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:32.906" starttime="20171005 01:01:32.906"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:32.907" starttime="20171005 01:01:32.906"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:32.907" starttime="20171005 01:01:32.904"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:32.907" starttime="20171005 01:01:32.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:01:33.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:01:33.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:33.038" starttime="20171005 01:01:32.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:33.040" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:01:33.040" starttime="20171005 01:01:33.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:33.041" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:01:33.041" starttime="20171005 01:01:33.041"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:33.041" starttime="20171005 01:01:33.040"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:33.041" starttime="20171005 01:01:33.039"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:33.042" starttime="20171005 01:01:33.038"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:01:33.042" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:01:33.042" starttime="20171005 01:01:33.042"></status>
</kw>
<msg timestamp="20171005 01:01:33.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:33.043" starttime="20171005 01:01:31.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:33.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:33.044" starttime="20171005 01:01:33.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:01:33.044" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:01:33.045" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:01:33.045" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:01:33.045" starttime="20171005 01:01:33.044"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:33.045" starttime="20171005 01:01:31.903"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:01:43.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:01:43.070" starttime="20171005 01:01:43.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:01:43.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:01:43.070" starttime="20171005 01:01:43.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:01:43.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:01:43.071" starttime="20171005 01:01:43.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:01:43.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:01:43.072" starttime="20171005 01:01:43.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:01:43.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:01:43.252" starttime="20171005 01:01:43.072"></status>
</kw>
<msg timestamp="20171005 01:01:43.252" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:01:43.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:43.252" starttime="20171005 01:01:43.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:01:43.253" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:43.253" starttime="20171005 01:01:43.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:43.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:43.253" starttime="20171005 01:01:43.253"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.254" starttime="20171005 01:01:43.068"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.254" starttime="20171005 01:01:43.067"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.254" starttime="20171005 01:01:43.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:01:43.254" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:01:43.254" starttime="20171005 01:01:43.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:43.259" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:43.259" starttime="20171005 01:01:43.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:43.260" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:43.261" starttime="20171005 01:01:43.260"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.261" starttime="20171005 01:01:43.260"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.261" starttime="20171005 01:01:43.255"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.261" starttime="20171005 01:01:43.255"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:01:43.411" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:01:43.411" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:43.411" starttime="20171005 01:01:43.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:43.413" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:01:43.413" starttime="20171005 01:01:43.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:43.414" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:01:43.414" starttime="20171005 01:01:43.414"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.414" starttime="20171005 01:01:43.413"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.415" starttime="20171005 01:01:43.412"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.415" starttime="20171005 01:01:43.412"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:01:43.415" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:01:43.415" starttime="20171005 01:01:43.415"></status>
</kw>
<msg timestamp="20171005 01:01:43.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:43.415" starttime="20171005 01:01:43.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:43.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:43.416" starttime="20171005 01:01:43.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:01:43.417" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:01:43.417" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:01:43.417" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:01:43.417" starttime="20171005 01:01:43.417"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:43.418" starttime="20171005 01:01:43.065"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:01:53.440" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:01:53.441" starttime="20171005 01:01:53.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:01:53.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:01:53.441" starttime="20171005 01:01:53.441"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:01:53.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:01:53.442" starttime="20171005 01:01:53.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:01:53.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:01:53.443" starttime="20171005 01:01:53.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:01:55.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:01:55.488" starttime="20171005 01:01:53.444"></status>
</kw>
<msg timestamp="20171005 01:01:55.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:01:55.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:55.488" starttime="20171005 01:01:53.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:01:55.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:55.489" starttime="20171005 01:01:55.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:55.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:55.490" starttime="20171005 01:01:55.490"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.490" starttime="20171005 01:01:53.439"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.490" starttime="20171005 01:01:53.439"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.490" starttime="20171005 01:01:53.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:01:55.491" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:01:55.491" starttime="20171005 01:01:55.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:55.494" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:55.494" starttime="20171005 01:01:55.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:55.495" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:01:55.495" starttime="20171005 01:01:55.495"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.495" starttime="20171005 01:01:55.494"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.495" starttime="20171005 01:01:55.492"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.495" starttime="20171005 01:01:55.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:01:55.723" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:01:55.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:55.723" starttime="20171005 01:01:55.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:01:55.725" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:01:55.725" starttime="20171005 01:01:55.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:01:55.726" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:01:55.727" starttime="20171005 01:01:55.726"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.727" starttime="20171005 01:01:55.726"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.727" starttime="20171005 01:01:55.724"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.727" starttime="20171005 01:01:55.724"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:01:55.728" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:01:55.729" starttime="20171005 01:01:55.728"></status>
</kw>
<msg timestamp="20171005 01:01:55.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:01:55.729" starttime="20171005 01:01:53.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:01:55.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:01:55.730" starttime="20171005 01:01:55.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:01:55.730" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:01:55.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:01:55.730" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:01:55.730" starttime="20171005 01:01:55.730"></status>
</kw>
<status status="PASS" endtime="20171005 01:01:55.731" starttime="20171005 01:01:53.437"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:02:05.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:02:05.756" starttime="20171005 01:02:05.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:02:05.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:02:05.756" starttime="20171005 01:02:05.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:02:05.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:02:05.757" starttime="20171005 01:02:05.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:02:05.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:02:05.758" starttime="20171005 01:02:05.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:02:05.948" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:02:05.948" starttime="20171005 01:02:05.759"></status>
</kw>
<msg timestamp="20171005 01:02:05.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:02:05.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:05.948" starttime="20171005 01:02:05.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:02:05.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:05.949" starttime="20171005 01:02:05.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:05.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:05.950" starttime="20171005 01:02:05.950"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:05.950" starttime="20171005 01:02:05.754"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:05.950" starttime="20171005 01:02:05.753"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:05.950" starttime="20171005 01:02:05.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:02:05.951" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:02:05.951" starttime="20171005 01:02:05.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:05.953" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:05.953" starttime="20171005 01:02:05.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:05.954" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:05.954" starttime="20171005 01:02:05.954"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:05.954" starttime="20171005 01:02:05.953"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:05.955" starttime="20171005 01:02:05.952"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:05.955" starttime="20171005 01:02:05.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:02:06.085" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:02:06.085" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:06.085" starttime="20171005 01:02:05.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:06.087" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:02:06.087" starttime="20171005 01:02:06.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:06.088" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:02:06.088" starttime="20171005 01:02:06.088"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:06.088" starttime="20171005 01:02:06.087"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:06.089" starttime="20171005 01:02:06.086"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:06.089" starttime="20171005 01:02:06.085"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:02:06.089" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:02:06.089" starttime="20171005 01:02:06.089"></status>
</kw>
<msg timestamp="20171005 01:02:06.095" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:06.095" starttime="20171005 01:02:05.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:06.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:06.096" starttime="20171005 01:02:06.095"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:02:06.097" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:02:06.097" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:02:06.097" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:02:06.097" starttime="20171005 01:02:06.096"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:06.097" starttime="20171005 01:02:05.750"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:02:16.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:02:16.123" starttime="20171005 01:02:16.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:02:16.123" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:02:16.124" starttime="20171005 01:02:16.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:02:16.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:02:16.125" starttime="20171005 01:02:16.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:02:16.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:02:16.126" starttime="20171005 01:02:16.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:02:16.315" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:02:16.315" starttime="20171005 01:02:16.126"></status>
</kw>
<msg timestamp="20171005 01:02:16.315" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:02:16.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:16.315" starttime="20171005 01:02:16.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:02:16.316" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:16.316" starttime="20171005 01:02:16.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:16.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:16.317" starttime="20171005 01:02:16.316"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.317" starttime="20171005 01:02:16.122"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.317" starttime="20171005 01:02:16.121"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.317" starttime="20171005 01:02:16.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:02:16.318" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:02:16.318" starttime="20171005 01:02:16.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:16.320" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:16.320" starttime="20171005 01:02:16.319"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:16.321" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:16.321" starttime="20171005 01:02:16.321"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.321" starttime="20171005 01:02:16.320"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.321" starttime="20171005 01:02:16.319"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.321" starttime="20171005 01:02:16.318"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:02:16.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:02:16.453" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:16.453" starttime="20171005 01:02:16.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:16.455" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:02:16.455" starttime="20171005 01:02:16.454"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:16.456" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:02:16.456" starttime="20171005 01:02:16.456"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.456" starttime="20171005 01:02:16.455"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.456" starttime="20171005 01:02:16.454"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.457" starttime="20171005 01:02:16.453"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:02:16.457" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:02:16.458" starttime="20171005 01:02:16.457"></status>
</kw>
<msg timestamp="20171005 01:02:16.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:16.458" starttime="20171005 01:02:16.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:16.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:16.459" starttime="20171005 01:02:16.458"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:02:16.460" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:02:16.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:02:16.460" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:02:16.460" starttime="20171005 01:02:16.459"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:16.460" starttime="20171005 01:02:16.118"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:02:26.483" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:02:26.484" starttime="20171005 01:02:26.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:02:26.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:02:26.485" starttime="20171005 01:02:26.484"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:02:26.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:02:26.485" starttime="20171005 01:02:26.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:02:26.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:02:26.486" starttime="20171005 01:02:26.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:02:26.681" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:02:26.681" starttime="20171005 01:02:26.487"></status>
</kw>
<msg timestamp="20171005 01:02:26.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:02:26.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:26.681" starttime="20171005 01:02:26.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:02:26.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:26.682" starttime="20171005 01:02:26.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:26.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:26.683" starttime="20171005 01:02:26.683"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.683" starttime="20171005 01:02:26.482"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.683" starttime="20171005 01:02:26.482"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.683" starttime="20171005 01:02:26.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:02:26.684" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:02:26.684" starttime="20171005 01:02:26.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:26.687" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:26.687" starttime="20171005 01:02:26.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:26.688" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:26.688" starttime="20171005 01:02:26.687"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.688" starttime="20171005 01:02:26.687"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.688" starttime="20171005 01:02:26.685"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.688" starttime="20171005 01:02:26.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:02:26.831" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:02:26.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:26.831" starttime="20171005 01:02:26.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:26.833" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:02:26.833" starttime="20171005 01:02:26.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:26.834" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:02:26.834" starttime="20171005 01:02:26.834"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.834" starttime="20171005 01:02:26.833"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.834" starttime="20171005 01:02:26.832"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.834" starttime="20171005 01:02:26.831"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:02:26.836" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:02:26.836" starttime="20171005 01:02:26.835"></status>
</kw>
<msg timestamp="20171005 01:02:26.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:26.836" starttime="20171005 01:02:26.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:26.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:26.837" starttime="20171005 01:02:26.837"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:02:26.838" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:02:26.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:02:26.838" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:02:26.838" starttime="20171005 01:02:26.838"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:26.839" starttime="20171005 01:02:26.479"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:02:36.863" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:02:36.863" starttime="20171005 01:02:36.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:02:36.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:02:36.865" starttime="20171005 01:02:36.864"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:02:36.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:02:36.866" starttime="20171005 01:02:36.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:02:36.867" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:02:36.867" starttime="20171005 01:02:36.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:02:37.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:02:37.050" starttime="20171005 01:02:36.868"></status>
</kw>
<msg timestamp="20171005 01:02:37.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:02:37.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:37.050" starttime="20171005 01:02:36.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:02:37.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:37.051" starttime="20171005 01:02:37.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:37.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:37.052" starttime="20171005 01:02:37.051"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.052" starttime="20171005 01:02:36.861"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.052" starttime="20171005 01:02:36.860"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.052" starttime="20171005 01:02:36.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:02:37.053" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:02:37.053" starttime="20171005 01:02:37.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:37.055" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:37.055" starttime="20171005 01:02:37.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:37.056" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:37.056" starttime="20171005 01:02:37.056"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.056" starttime="20171005 01:02:37.055"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.056" starttime="20171005 01:02:37.054"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.056" starttime="20171005 01:02:37.053"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:02:37.187" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:02:37.187" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:37.187" starttime="20171005 01:02:37.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:37.189" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:02:37.189" starttime="20171005 01:02:37.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:37.190" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:02:37.190" starttime="20171005 01:02:37.190"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.190" starttime="20171005 01:02:37.189"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.190" starttime="20171005 01:02:37.188"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.190" starttime="20171005 01:02:37.187"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:02:37.191" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:02:37.191" starttime="20171005 01:02:37.191"></status>
</kw>
<msg timestamp="20171005 01:02:37.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:37.191" starttime="20171005 01:02:36.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:37.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:37.192" starttime="20171005 01:02:37.191"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:02:37.193" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:02:37.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:02:37.193" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:02:37.193" starttime="20171005 01:02:37.192"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:37.193" starttime="20171005 01:02:36.858"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:02:47.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:02:47.219" starttime="20171005 01:02:47.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:02:47.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:02:47.220" starttime="20171005 01:02:47.220"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:02:47.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:02:47.221" starttime="20171005 01:02:47.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:02:47.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:02:47.222" starttime="20171005 01:02:47.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:02:47.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:02:47.403" starttime="20171005 01:02:47.223"></status>
</kw>
<msg timestamp="20171005 01:02:47.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:02:47.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:47.403" starttime="20171005 01:02:47.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:02:47.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:47.404" starttime="20171005 01:02:47.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:47.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:47.405" starttime="20171005 01:02:47.404"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.405" starttime="20171005 01:02:47.217"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.405" starttime="20171005 01:02:47.216"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.405" starttime="20171005 01:02:47.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:02:47.406" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:02:47.406" starttime="20171005 01:02:47.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:47.408" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:47.408" starttime="20171005 01:02:47.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:47.409" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:47.409" starttime="20171005 01:02:47.409"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.409" starttime="20171005 01:02:47.408"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.410" starttime="20171005 01:02:47.407"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.410" starttime="20171005 01:02:47.406"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:02:47.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:02:47.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:47.540" starttime="20171005 01:02:47.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:47.542" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:02:47.542" starttime="20171005 01:02:47.542"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:47.543" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:02:47.544" starttime="20171005 01:02:47.543"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.544" starttime="20171005 01:02:47.543"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.544" starttime="20171005 01:02:47.541"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.544" starttime="20171005 01:02:47.541"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:02:47.544" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:02:47.544" starttime="20171005 01:02:47.544"></status>
</kw>
<msg timestamp="20171005 01:02:47.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:47.545" starttime="20171005 01:02:47.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:47.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:47.545" starttime="20171005 01:02:47.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:02:47.546" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:02:47.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:02:47.546" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:02:47.546" starttime="20171005 01:02:47.546"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:47.546" starttime="20171005 01:02:47.212"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:02:57.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:02:57.570" starttime="20171005 01:02:57.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:02:57.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:02:57.571" starttime="20171005 01:02:57.571"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:02:57.572" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:02:57.572" starttime="20171005 01:02:57.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:02:57.573" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:02:57.573" starttime="20171005 01:02:57.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:02:57.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:02:57.755" starttime="20171005 01:02:57.575"></status>
</kw>
<msg timestamp="20171005 01:02:57.755" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:02:57.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:57.755" starttime="20171005 01:02:57.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:02:57.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:57.756" starttime="20171005 01:02:57.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:57.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:57.757" starttime="20171005 01:02:57.756"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.757" starttime="20171005 01:02:57.569"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.757" starttime="20171005 01:02:57.568"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.757" starttime="20171005 01:02:57.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:02:57.758" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:02:57.758" starttime="20171005 01:02:57.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:57.760" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:57.760" starttime="20171005 01:02:57.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:57.761" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:02:57.761" starttime="20171005 01:02:57.761"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.761" starttime="20171005 01:02:57.760"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.761" starttime="20171005 01:02:57.759"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.761" starttime="20171005 01:02:57.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:02:57.900" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:02:57.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:57.900" starttime="20171005 01:02:57.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:02:57.902" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:02:57.903" starttime="20171005 01:02:57.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:02:57.903" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:02:57.904" starttime="20171005 01:02:57.903"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.904" starttime="20171005 01:02:57.903"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.904" starttime="20171005 01:02:57.901"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.904" starttime="20171005 01:02:57.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:02:57.905" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:02:57.905" starttime="20171005 01:02:57.905"></status>
</kw>
<msg timestamp="20171005 01:02:57.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:02:57.905" starttime="20171005 01:02:57.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:02:57.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:02:57.906" starttime="20171005 01:02:57.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:02:57.907" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:02:57.907" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:02:57.907" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:02:57.907" starttime="20171005 01:02:57.906"></status>
</kw>
<status status="PASS" endtime="20171005 01:02:57.907" starttime="20171005 01:02:57.566"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:03:07.932" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:03:07.933" starttime="20171005 01:03:07.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:03:07.933" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:03:07.933" starttime="20171005 01:03:07.933"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:03:07.934" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:03:07.934" starttime="20171005 01:03:07.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:03:07.936" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:03:07.936" starttime="20171005 01:03:07.935"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:03:09.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:03:09.488" starttime="20171005 01:03:07.937"></status>
</kw>
<msg timestamp="20171005 01:03:09.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:03:09.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:09.488" starttime="20171005 01:03:07.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:03:09.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:09.489" starttime="20171005 01:03:09.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:09.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:09.490" starttime="20171005 01:03:09.489"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.490" starttime="20171005 01:03:07.931"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.490" starttime="20171005 01:03:07.931"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.490" starttime="20171005 01:03:07.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:03:09.491" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:03:09.491" starttime="20171005 01:03:09.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:09.494" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:09.494" starttime="20171005 01:03:09.492"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:09.495" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:09.495" starttime="20171005 01:03:09.495"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.495" starttime="20171005 01:03:09.494"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.495" starttime="20171005 01:03:09.492"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.495" starttime="20171005 01:03:09.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:03:09.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:03:09.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:09.635" starttime="20171005 01:03:09.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:09.637" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:03:09.637" starttime="20171005 01:03:09.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:09.638" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:03:09.638" starttime="20171005 01:03:09.638"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.638" starttime="20171005 01:03:09.637"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.638" starttime="20171005 01:03:09.636"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.638" starttime="20171005 01:03:09.635"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:03:09.639" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:03:09.639" starttime="20171005 01:03:09.639"></status>
</kw>
<msg timestamp="20171005 01:03:09.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:09.639" starttime="20171005 01:03:07.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:09.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:09.640" starttime="20171005 01:03:09.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:03:09.641" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:03:09.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:03:09.641" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:03:09.641" starttime="20171005 01:03:09.640"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:09.641" starttime="20171005 01:03:07.929"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:03:19.660" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:03:19.661" starttime="20171005 01:03:19.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:03:19.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:03:19.661" starttime="20171005 01:03:19.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:03:19.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:03:19.662" starttime="20171005 01:03:19.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:03:19.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:03:19.663" starttime="20171005 01:03:19.662"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:03:22.622" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:03:22.622" starttime="20171005 01:03:19.664"></status>
</kw>
<msg timestamp="20171005 01:03:22.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:03:22.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:22.623" starttime="20171005 01:03:19.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:03:22.623" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:22.623" starttime="20171005 01:03:22.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:22.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:22.624" starttime="20171005 01:03:22.624"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.624" starttime="20171005 01:03:19.659"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.624" starttime="20171005 01:03:19.659"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.625" starttime="20171005 01:03:19.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:03:22.625" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:03:22.625" starttime="20171005 01:03:22.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:22.627" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:22.627" starttime="20171005 01:03:22.627"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:22.628" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:22.629" starttime="20171005 01:03:22.628"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.629" starttime="20171005 01:03:22.628"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.629" starttime="20171005 01:03:22.626"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.629" starttime="20171005 01:03:22.626"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:03:22.785" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:03:22.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:22.785" starttime="20171005 01:03:22.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:22.787" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:03:22.787" starttime="20171005 01:03:22.787"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:22.788" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:03:22.788" starttime="20171005 01:03:22.788"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.788" starttime="20171005 01:03:22.787"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.789" starttime="20171005 01:03:22.786"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.789" starttime="20171005 01:03:22.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:03:22.789" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:03:22.789" starttime="20171005 01:03:22.789"></status>
</kw>
<msg timestamp="20171005 01:03:22.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:22.789" starttime="20171005 01:03:19.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:22.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:22.790" starttime="20171005 01:03:22.790"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:03:22.791" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:03:22.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:03:22.791" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:03:22.791" starttime="20171005 01:03:22.791"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:22.791" starttime="20171005 01:03:19.657"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:03:32.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:03:32.812" starttime="20171005 01:03:32.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:03:32.813" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:03:32.813" starttime="20171005 01:03:32.812"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:03:32.813" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:03:32.813" starttime="20171005 01:03:32.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:03:32.814" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:03:32.814" starttime="20171005 01:03:32.814"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:03:33.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:03:33.017" starttime="20171005 01:03:32.815"></status>
</kw>
<msg timestamp="20171005 01:03:33.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:03:33.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:33.017" starttime="20171005 01:03:32.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:03:33.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:33.018" starttime="20171005 01:03:33.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:33.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:33.018" starttime="20171005 01:03:33.018"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.018" starttime="20171005 01:03:32.807"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.019" starttime="20171005 01:03:32.807"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.019" starttime="20171005 01:03:32.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:03:33.019" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:03:33.019" starttime="20171005 01:03:33.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:33.022" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:33.022" starttime="20171005 01:03:33.021"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:33.023" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:33.023" starttime="20171005 01:03:33.022"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.023" starttime="20171005 01:03:33.022"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.023" starttime="20171005 01:03:33.020"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.023" starttime="20171005 01:03:33.020"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:03:33.153" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:03:33.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:33.153" starttime="20171005 01:03:33.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:33.155" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:03:33.155" starttime="20171005 01:03:33.155"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:33.156" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:03:33.156" starttime="20171005 01:03:33.156"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.156" starttime="20171005 01:03:33.155"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.156" starttime="20171005 01:03:33.154"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.157" starttime="20171005 01:03:33.154"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:03:33.157" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:03:33.157" starttime="20171005 01:03:33.157"></status>
</kw>
<msg timestamp="20171005 01:03:33.158" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:33.158" starttime="20171005 01:03:32.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:33.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:33.158" starttime="20171005 01:03:33.158"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:03:33.159" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:03:33.159" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:03:33.159" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:03:33.159" starttime="20171005 01:03:33.159"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:33.159" starttime="20171005 01:03:32.805"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:03:43.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:03:43.181" starttime="20171005 01:03:43.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:03:43.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:03:43.182" starttime="20171005 01:03:43.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:03:43.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:03:43.183" starttime="20171005 01:03:43.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:03:43.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:03:43.183" starttime="20171005 01:03:43.183"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:03:43.363" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:03:43.363" starttime="20171005 01:03:43.184"></status>
</kw>
<msg timestamp="20171005 01:03:43.363" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:03:43.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:43.363" starttime="20171005 01:03:43.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:03:43.364" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:43.364" starttime="20171005 01:03:43.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:43.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:43.365" starttime="20171005 01:03:43.364"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:43.365" starttime="20171005 01:03:43.180"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:43.365" starttime="20171005 01:03:43.179"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:43.365" starttime="20171005 01:03:43.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:03:43.366" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:03:43.366" starttime="20171005 01:03:43.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:43.368" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:43.368" starttime="20171005 01:03:43.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:43.369" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:43.369" starttime="20171005 01:03:43.369"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:43.369" starttime="20171005 01:03:43.368"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:43.369" starttime="20171005 01:03:43.366"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:43.369" starttime="20171005 01:03:43.366"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:03:45.034" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:03:45.034" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:45.034" starttime="20171005 01:03:43.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:45.036" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171005 01:03:45.036" starttime="20171005 01:03:45.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:45.037" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:03:45.037" starttime="20171005 01:03:45.037"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:45.038" starttime="20171005 01:03:45.037"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:45.038" starttime="20171005 01:03:45.035"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:45.038" starttime="20171005 01:03:45.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:03:45.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:03:45.039" starttime="20171005 01:03:45.038"></status>
</kw>
<msg timestamp="20171005 01:03:45.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:45.039" starttime="20171005 01:03:43.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:45.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:45.040" starttime="20171005 01:03:45.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:03:45.040" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/af631876", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:03:45.040" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:03:45.041" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:03:45.041" starttime="20171005 01:03:45.040"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:45.041" starttime="20171005 01:03:43.177"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:03:55.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:03:55.058" starttime="20171005 01:03:55.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:03:55.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:03:55.058" starttime="20171005 01:03:55.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:03:55.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:03:55.059" starttime="20171005 01:03:55.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:03:55.060" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:03:55.060" starttime="20171005 01:03:55.059"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:03:55.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:03:55.240" starttime="20171005 01:03:55.061"></status>
</kw>
<msg timestamp="20171005 01:03:55.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:03:55.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:55.240" starttime="20171005 01:03:55.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:03:55.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:55.241" starttime="20171005 01:03:55.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:55.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:03:55.242" starttime="20171005 01:03:55.241"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:55.242" starttime="20171005 01:03:55.056"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:55.242" starttime="20171005 01:03:55.056"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:55.242" starttime="20171005 01:03:55.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:03:55.242" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:03:55.242" starttime="20171005 01:03:55.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:55.245" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:55.245" starttime="20171005 01:03:55.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:55.246" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:03:55.246" starttime="20171005 01:03:55.246"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:55.246" starttime="20171005 01:03:55.245"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:55.246" starttime="20171005 01:03:55.243"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:55.247" starttime="20171005 01:03:55.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:03:59.944" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:03:59.944" level="INFO">${ret} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:59.944" starttime="20171005 01:03:55.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:03:59.946" level="INFO">${msg} = Response code:500, Content:{
  "data": {
    "description": "Internal Server Error", 
    "exception": "DBusException(\"Unknown interface 'xyz.openbmc_project.Common.FilePath'.\",)", 
    "traceback":...</msg>
<status status="PASS" endtime="20171005 01:03:59.946" starttime="20171005 01:03:59.946"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:03:59.947" level="INFO">Response code:500, Content:{
  "data": {
    "description": "Internal Server Error", 
    "exception": "DBusException(\"Unknown interface 'xyz.openbmc_project.Common.FilePath'.\",)", 
    "traceback": [
      "Traceback (most recent call last):", 
      "  File \"/usr/lib/python2.7/site-packages/bottle.py\", line 862, in _handle", 
      "    return route.call(**args)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 798, in __call__", 
      "    return self.callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 855, in wrap", 
      "    return callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 1038, in __call__", 
      "    return self.callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 1012, in wrap", 
      "    return self.to_jsonp(callback(*a, **kw))", 
      "  File \"/usr/lib/python2.7/site-packages/bottle.py\", line 1734, in wrapper", 
      "    rv = callback(*a, **ka)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 977, in wrap", 
      "    data = callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 199, in __call__", 
      "    return getattr(self, 'do_' + request.method.lower())(**kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 537, in do_get", 
      "    mapper_data=request.route_data['map'])", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 126, in enumerate_object", 
      "    path, owner, interfaces, match))", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 110, in __get_properties_on_bus", 
      "    properties_iface, i))", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 96, in __get_properties_on_iface", 
      "    properties_iface.GetAll, iface)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 82, in __try_properties_interface", 
      "    return f(*a)", 
      "  File \"/usr/lib/python2.7/site-packages/dbus/proxies.py\", line 145, in __call__", 
      "    **keywords)", 
      "  File \"/usr/lib/python2.7/site-packages/dbus/connection.py\", line 651, in call_blocking", 
      "    message, timeout)", 
      "DBusException: org.freedesktop.DBus.Error.UnknownInterface: Unknown interface 'xyz.openbmc_project.Common.FilePath'."
    ]
  }, 
  "message": "500 Internal Server Error", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20171005 01:03:59.948" starttime="20171005 01:03:59.947"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:59.948" starttime="20171005 01:03:59.947"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:59.948" starttime="20171005 01:03:59.945"></status>
</kw>
<status status="PASS" endtime="20171005 01:03:59.949" starttime="20171005 01:03:59.945"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:03:59.950" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:03:59.950" starttime="20171005 01:03:59.950"></status>
</kw>
<msg timestamp="20171005 01:03:59.950" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20171005 01:03:59.950" starttime="20171005 01:03:55.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:03:59.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:03:59.951" level="FAIL">500 != 200</msg>
<status status="FAIL" endtime="20171005 01:03:59.951" starttime="20171005 01:03:59.951"></status>
</kw>
<status status="FAIL" endtime="20171005 01:03:59.952" starttime="20171005 01:03:55.054"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/af631876</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:04:09.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:04:09.976" starttime="20171005 01:04:09.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:04:09.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:04:09.977" starttime="20171005 01:04:09.976"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:04:09.977" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:04:09.977" starttime="20171005 01:04:09.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:04:09.978" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:04:09.978" starttime="20171005 01:04:09.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:04:10.191" starttime="20171005 01:04:09.979"></status>
</kw>
<msg timestamp="20171005 01:04:10.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:04:10.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.191" starttime="20171005 01:04:09.978"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.192" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.192" starttime="20171005 01:04:10.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.193" starttime="20171005 01:04:10.193"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.193" starttime="20171005 01:04:09.975"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.193" starttime="20171005 01:04:09.974"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.193" starttime="20171005 01:04:09.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:04:10.194" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:04:10.194" starttime="20171005 01:04:10.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:10.196" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:10.196" starttime="20171005 01:04:10.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:10.197" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:10.197" starttime="20171005 01:04:10.197"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.197" starttime="20171005 01:04:10.196"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.198" starttime="20171005 01:04:10.195"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.198" starttime="20171005 01:04:10.194"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:04:10.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:04:10.301" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.301" starttime="20171005 01:04:10.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:10.304" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/af631876", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171005 01:04:10.304" starttime="20171005 01:04:10.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:10.305" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/af631876", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:10.305" starttime="20171005 01:04:10.304"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.305" starttime="20171005 01:04:10.304"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.305" starttime="20171005 01:04:10.302"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.305" starttime="20171005 01:04:10.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:04:10.305" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:04:10.306" starttime="20171005 01:04:10.305"></status>
</kw>
<msg timestamp="20171005 01:04:10.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.306" starttime="20171005 01:04:09.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.307" starttime="20171005 01:04:10.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:04:10.307" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/af631876", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:04:10.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:04:10.307" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:04:10.307" starttime="20171005 01:04:10.307"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.308" starttime="20171005 01:04:09.972"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.308" starttime="20171005 01:00:46.765"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:04:10.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:04:10.312" starttime="20171005 01:04:10.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:04:10.313" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:04:10.313" starttime="20171005 01:04:10.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:04:10.314" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:04:10.314" starttime="20171005 01:04:10.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:04:10.315" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:04:10.315" starttime="20171005 01:04:10.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:04:10.493" starttime="20171005 01:04:10.315"></status>
</kw>
<msg timestamp="20171005 01:04:10.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:04:10.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.493" starttime="20171005 01:04:10.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.494" starttime="20171005 01:04:10.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.495" starttime="20171005 01:04:10.494"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.495" starttime="20171005 01:04:10.311"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.495" starttime="20171005 01:04:10.310"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.495" starttime="20171005 01:04:10.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:04:10.495" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876</msg>
<status status="PASS" endtime="20171005 01:04:10.496" starttime="20171005 01:04:10.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:10.498" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:10.498" starttime="20171005 01:04:10.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:10.499" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/af631876, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:10.499" starttime="20171005 01:04:10.499"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.499" starttime="20171005 01:04:10.498"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.499" starttime="20171005 01:04:10.496"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.499" starttime="20171005 01:04:10.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:04:10.603" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876, headers=None json=None</msg>
<msg timestamp="20171005 01:04:10.604" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.604" starttime="20171005 01:04:10.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:10.606" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/af631876", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171005 01:04:10.606" starttime="20171005 01:04:10.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:10.607" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/af631876", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:10.607" starttime="20171005 01:04:10.607"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.607" starttime="20171005 01:04:10.606"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.607" starttime="20171005 01:04:10.605"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.607" starttime="20171005 01:04:10.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:04:10.608" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:04:10.608" starttime="20171005 01:04:10.608"></status>
</kw>
<msg timestamp="20171005 01:04:10.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.608" starttime="20171005 01:04:10.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.609" starttime="20171005 01:04:10.609"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:04:10.610" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/af631876", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-107-gc460ebe", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:04:10.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:04:10.610" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171005 01:04:10.610" starttime="20171005 01:04:10.610"></status>
</kw>
<msg timestamp="20171005 01:04:10.611" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171005 01:04:10.611" starttime="20171005 01:04:10.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.611" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:10.611" starttime="20171005 01:04:10.611"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:10.611" starttime="20171005 01:00:17.433"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:04:10.613" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=0</msg>
<status status="PASS" endtime="20171005 01:04:10.613" starttime="20171005 01:04:10.613"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:04:10.620" starttime="20171005 01:04:10.620"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171005 01:04:10.621" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20171005 01:04:10.622" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171005 01:04:10.623" level="INFO">${quiet} = 0</msg>
<msg timestamp="20171005 01:04:11.080" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171005 01:04:11.088" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171005 01:04:11.105" starttime="20171005 01:04:11.104"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:04:11.106" starttime="20171005 01:04:11.106"></status>
</kw>
<msg timestamp="20171005 01:04:11.106" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:04:11.106" starttime="20171005 01:04:11.105"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171005 01:04:11.123" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171005 01:04:11.123" starttime="20171005 01:04:11.122"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:04:11.124" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171005 01:04:11.124" starttime="20171005 01:04:11.124"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:04:11.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:04:11.129" starttime="20171005 01:04:11.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:04:11.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:04:11.130" starttime="20171005 01:04:11.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:04:11.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:04:11.130" starttime="20171005 01:04:11.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:04:11.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:04:11.131" starttime="20171005 01:04:11.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.353" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:04:11.353" starttime="20171005 01:04:11.132"></status>
</kw>
<msg timestamp="20171005 01:04:11.354" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:04:11.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.354" starttime="20171005 01:04:11.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.355" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.355" starttime="20171005 01:04:11.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.356" starttime="20171005 01:04:11.355"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.356" starttime="20171005 01:04:11.126"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.356" starttime="20171005 01:04:11.126"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.357" starttime="20171005 01:04:11.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:04:11.358" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171005 01:04:11.358" starttime="20171005 01:04:11.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:04:11.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:04:11.359" starttime="20171005 01:04:11.358"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:04:11.360" starttime="20171005 01:04:11.359"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:11.362" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171005 01:04:11.362" starttime="20171005 01:04:11.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:11.363" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171005 01:04:11.364" starttime="20171005 01:04:11.363"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.364" starttime="20171005 01:04:11.362"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.364" starttime="20171005 01:04:11.360"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:04:11.493" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 01:04:11.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.493" starttime="20171005 01:04:11.366"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:11.495" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:11.495" starttime="20171005 01:04:11.494"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:11.496" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:11.496" starttime="20171005 01:04:11.496"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.496" starttime="20171005 01:04:11.495"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.496" starttime="20171005 01:04:11.493"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:04:11.497" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:04:11.497" starttime="20171005 01:04:11.497"></status>
</kw>
<msg timestamp="20171005 01:04:11.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.497" starttime="20171005 01:04:11.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.498" starttime="20171005 01:04:11.498"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:04:11.499" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:04:11.499" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:04:11.499" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171005 01:04:11.499" starttime="20171005 01:04:11.498"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.499" starttime="20171005 01:04:11.123"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.499" starttime="20171005 01:04:11.122"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.499" starttime="20171005 01:04:11.106"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171005 01:04:11.501" starttime="20171005 01:04:11.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:04:11.502" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171005 01:04:11.502" starttime="20171005 01:04:11.501"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:04:11.506" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:04:11.506" starttime="20171005 01:04:11.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:04:11.507" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:04:11.507" starttime="20171005 01:04:11.507"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:04:11.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:04:11.508" starttime="20171005 01:04:11.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:04:11.508" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:04:11.508" starttime="20171005 01:04:11.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.693" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:04:11.693" starttime="20171005 01:04:11.509"></status>
</kw>
<msg timestamp="20171005 01:04:11.693" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:04:11.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.693" starttime="20171005 01:04:11.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.694" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.694" starttime="20171005 01:04:11.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.695" starttime="20171005 01:04:11.694"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.695" starttime="20171005 01:04:11.505"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.695" starttime="20171005 01:04:11.505"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.695" starttime="20171005 01:04:11.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:04:11.696" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171005 01:04:11.696" starttime="20171005 01:04:11.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:11.698" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:11.699" starttime="20171005 01:04:11.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:11.700" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:11.700" starttime="20171005 01:04:11.699"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.700" starttime="20171005 01:04:11.699"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.700" starttime="20171005 01:04:11.697"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.700" starttime="20171005 01:04:11.696"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:04:11.763" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171005 01:04:11.763" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.763" starttime="20171005 01:04:11.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:11.765" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:11.765" starttime="20171005 01:04:11.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:11.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:11.767" starttime="20171005 01:04:11.766"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.767" starttime="20171005 01:04:11.766"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.767" starttime="20171005 01:04:11.764"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.767" starttime="20171005 01:04:11.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:04:11.768" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:04:11.768" starttime="20171005 01:04:11.768"></status>
</kw>
<msg timestamp="20171005 01:04:11.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.768" starttime="20171005 01:04:11.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.769" starttime="20171005 01:04:11.769"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:04:11.770" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:04:11.770" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:04:11.770" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171005 01:04:11.770" starttime="20171005 01:04:11.769"></status>
</kw>
<msg timestamp="20171005 01:04:11.770" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:04:11.770" starttime="20171005 01:04:11.503"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.770" starttime="20171005 01:04:11.502"></status>
</kw>
<msg timestamp="20171005 01:04:11.771" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:04:11.771" starttime="20171005 01:04:11.502"></status>
</kw>
<msg timestamp="20171005 01:04:11.771" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171005 01:04:11.771" starttime="20171005 01:04:11.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171005 01:04:11.771" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:11.771" starttime="20171005 01:04:11.771"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:11.772" starttime="20171005 01:04:11.103"></status>
</kw>
<msg timestamp="20171005 01:04:11.777" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:04:11.782" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:04:11.782" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171005 01:04:11.783" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:04:11.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:04:11.832" starttime="20171005 01:04:11.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:04:11.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:04:11.832" starttime="20171005 01:04:11.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:04:11.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:04:11.833" starttime="20171005 01:04:11.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:04:11.834" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:04:11.834" starttime="20171005 01:04:11.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:04:12.014" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:04:12.014" starttime="20171005 01:04:11.835"></status>
</kw>
<msg timestamp="20171005 01:04:12.014" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:04:12.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:12.014" starttime="20171005 01:04:11.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:04:12.015" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:12.015" starttime="20171005 01:04:12.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:12.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:12.016" starttime="20171005 01:04:12.015"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.016" starttime="20171005 01:04:11.829"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.016" starttime="20171005 01:04:11.829"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.016" starttime="20171005 01:04:11.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:04:12.017" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:04:12.017" starttime="20171005 01:04:12.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:12.019" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:12.019" starttime="20171005 01:04:12.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:12.020" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171005 01:04:12.020" starttime="20171005 01:04:12.020"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.021" starttime="20171005 01:04:12.019"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.021" starttime="20171005 01:04:12.018"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.021" starttime="20171005 01:04:12.017"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:04:12.333" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:04:12.333" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:12.333" starttime="20171005 01:04:12.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:04:12.335" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171005 01:04:12.335" starttime="20171005 01:04:12.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:04:12.336" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:04:12.336" starttime="20171005 01:04:12.336"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.337" starttime="20171005 01:04:12.335"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.337" starttime="20171005 01:04:12.334"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.337" starttime="20171005 01:04:12.333"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:04:12.338" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:04:12.338" starttime="20171005 01:04:12.337"></status>
</kw>
<msg timestamp="20171005 01:04:12.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:04:12.338" starttime="20171005 01:04:11.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:04:12.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:04:12.339" starttime="20171005 01:04:12.338"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:04:12.340" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:04:12.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:04:12.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171005 01:04:12.340" starttime="20171005 01:04:12.339"></status>
</kw>
<status status="PASS" endtime="20171005 01:04:12.340" starttime="20171005 01:04:11.822"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20171005 01:04:12.392" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:12.413" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:04:12.414" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20171005 01:04:12.421" starttime="20171005 01:04:12.393"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:16.464" level="FAIL">
#(UTC) 2017/10/05 01:04:16.460935 -    4.024951 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171005 01:04:16.465" starttime="20171005 01:04:12.449"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:20.487" level="FAIL">
#(UTC) 2017/10/05 01:04:20.484207 -    4.023272 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171005 01:04:20.488" starttime="20171005 01:04:16.468"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:24.729" level="FAIL">
#(UTC) 2017/10/05 01:04:24.715630 -    4.231423 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171005 01:04:24.736" starttime="20171005 01:04:20.490"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:28.754" level="FAIL">
#(UTC) 2017/10/05 01:04:28.751680 -    4.036050 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171005 01:04:28.755" starttime="20171005 01:04:24.741"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:32.787" level="FAIL">
#(UTC) 2017/10/05 01:04:32.777233 -    4.025553 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171005 01:04:32.792" starttime="20171005 01:04:28.757"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:37.821" level="FAIL">
#(UTC) 2017/10/05 01:04:37.817900 -    5.040667 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20171005 01:04:37.822" starttime="20171005 01:04:32.803"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:04:42.841" starttime="20171005 01:04:37.824"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:47.886" level="FAIL">
#(UTC) 2017/10/05 01:04:47.883789 -    5.020925 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:04:47.887" starttime="20171005 01:04:42.875"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:52.933" level="FAIL">
#(UTC) 2017/10/05 01:04:52.917483 -    5.033694 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:04:52.938" starttime="20171005 01:04:47.890"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:04:57.969" level="FAIL">
#(UTC) 2017/10/05 01:04:57.966043 -    5.048560 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:04:57.970" starttime="20171005 01:04:52.951"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:05:02.987" level="FAIL">
#(UTC) 2017/10/05 01:05:02.984486 -    5.018443 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:05:02.988" starttime="20171005 01:04:57.972"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:05:08.034" level="FAIL">
#(UTC) 2017/10/05 01:05:08.018954 -    5.034468 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:05:08.039" starttime="20171005 01:05:02.991"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:05:13.098" level="FAIL">
#(UTC) 2017/10/05 01:05:13.082567 -    5.063613 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:05:13.104" starttime="20171005 01:05:08.053"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:05:18.161" level="FAIL">
#(UTC) 2017/10/05 01:05:18.146836 -    5.064269 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171005 01:05:18.167" starttime="20171005 01:05:13.117"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:05:23.230" level="FAIL">
#(UTC) 2017/10/05 01:05:23.215680 -    5.068844 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             20
</msg>
<status status="FAIL" endtime="20171005 01:05:23.236" starttime="20171005 01:05:18.180"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:05:27.298" starttime="20171005 01:05:23.251"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/uptime | cut -f 1 -d ' '</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171005 01:05:27.373" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:05:27.373" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20171005 01:05:27.375" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:05:27.376" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:05:36.354" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171005 01:05:36.355" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20171005 01:05:36.433" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:05:36.443" starttime="20171005 01:05:27.360"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:05:36.526" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:05:36.526" starttime="20171005 01:05:36.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:05:36.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:05:36.527" starttime="20171005 01:05:36.527"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:05:36.528" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:05:36.528" starttime="20171005 01:05:36.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:05:36.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:05:36.531" starttime="20171005 01:05:36.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:05:46.546" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171005 01:05:46.546" starttime="20171005 01:05:36.532"></status>
</kw>
<msg timestamp="20171005 01:05:46.546" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171005 01:05:46.546" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171005 01:05:46.546" starttime="20171005 01:05:36.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:05:46.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:05:46.547" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171005 01:05:46.547" starttime="20171005 01:05:46.547"></status>
</kw>
<status status="FAIL" endtime="20171005 01:05:46.548" starttime="20171005 01:05:36.525"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:06:06.550" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:06:06.550" starttime="20171005 01:06:06.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:06:06.551" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:06:06.551" starttime="20171005 01:06:06.551"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:06:06.552" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:06:06.552" starttime="20171005 01:06:06.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:06:06.552" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:06:06.552" starttime="20171005 01:06:06.552"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:06:16.557" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171005 01:06:16.557" starttime="20171005 01:06:06.553"></status>
</kw>
<msg timestamp="20171005 01:06:16.557" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171005 01:06:16.557" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171005 01:06:16.557" starttime="20171005 01:06:06.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:06:16.558" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:06:16.558" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171005 01:06:16.559" starttime="20171005 01:06:16.558"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:16.559" starttime="20171005 01:06:06.548"></status>
</kw>
<msg timestamp="20171005 01:06:16.559" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171005 01:06:16.559" starttime="20171005 01:05:36.524"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:16.559" starttime="20171005 01:05:36.524"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:16.559" starttime="20171005 01:05:36.523"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:16.559" starttime="20171005 01:05:36.522"></status>
</kw>
<msg timestamp="20171005 01:06:16.560" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171005 01:06:16.560" starttime="20171005 01:05:36.521"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:06:18.566" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:06:18.567" starttime="20171005 01:06:18.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:06:18.567" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:06:18.567" starttime="20171005 01:06:18.567"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:06:18.568" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:06:18.568" starttime="20171005 01:06:18.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:06:18.569" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:06:18.569" starttime="20171005 01:06:18.568"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:06:28.581" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171005 01:06:28.581" starttime="20171005 01:06:18.570"></status>
</kw>
<msg timestamp="20171005 01:06:28.581" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171005 01:06:28.582" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171005 01:06:28.582" starttime="20171005 01:06:18.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:06:28.582" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:06:28.583" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171005 01:06:28.583" starttime="20171005 01:06:28.582"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:28.583" starttime="20171005 01:06:18.565"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:06:48.585" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:06:48.585" starttime="20171005 01:06:48.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:06:48.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:06:48.586" starttime="20171005 01:06:48.586"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:06:48.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:06:48.587" starttime="20171005 01:06:48.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:06:48.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:06:48.587" starttime="20171005 01:06:48.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:06:48.795" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:06:48.795" starttime="20171005 01:06:48.588"></status>
</kw>
<msg timestamp="20171005 01:06:48.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:06:48.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:06:48.796" starttime="20171005 01:06:48.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:06:48.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:06:48.796" starttime="20171005 01:06:48.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:06:48.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:06:48.797" starttime="20171005 01:06:48.797"></status>
</kw>
<status status="PASS" endtime="20171005 01:06:48.797" starttime="20171005 01:06:48.583"></status>
</kw>
<status status="PASS" endtime="20171005 01:06:48.798" starttime="20171005 01:06:18.565"></status>
</kw>
<status status="PASS" endtime="20171005 01:06:48.798" starttime="20171005 01:06:18.564"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:06:48.798" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:06:48.798" starttime="20171005 01:06:48.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:06:48.799" starttime="20171005 01:06:48.799"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:06:51.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:06:51.754" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:06:51.754" starttime="20171005 01:06:48.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:06:51.755" starttime="20171005 01:06:51.755"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:06:51.755" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:06:51.756" starttime="20171005 01:06:51.755"></status>
</kw>
<msg timestamp="20171005 01:06:51.756" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:06:51.756" starttime="20171005 01:06:18.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:06:51.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:06:51.757" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171005 01:06:51.757" starttime="20171005 01:06:51.756"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:51.757" starttime="20171005 01:06:18.562"></status>
</kw>
<msg timestamp="20171005 01:06:51.757" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171005 01:06:51.757" starttime="20171005 01:06:18.560"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:06:53.763" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:06:53.764" starttime="20171005 01:06:53.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:06:53.765" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:06:53.765" starttime="20171005 01:06:53.765"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:06:53.766" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:06:53.766" starttime="20171005 01:06:53.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:06:53.767" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:06:53.767" starttime="20171005 01:06:53.766"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:06:53.947" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:06:53.948" starttime="20171005 01:06:53.767"></status>
</kw>
<msg timestamp="20171005 01:06:53.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:06:53.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:06:53.948" starttime="20171005 01:06:53.767"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:06:53.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:06:53.949" starttime="20171005 01:06:53.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:06:53.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:06:53.950" starttime="20171005 01:06:53.949"></status>
</kw>
<status status="PASS" endtime="20171005 01:06:53.950" starttime="20171005 01:06:53.762"></status>
</kw>
<status status="PASS" endtime="20171005 01:06:53.950" starttime="20171005 01:06:53.762"></status>
</kw>
<status status="PASS" endtime="20171005 01:06:53.950" starttime="20171005 01:06:53.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:06:53.951" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:06:53.951" starttime="20171005 01:06:53.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:06:53.951" starttime="20171005 01:06:53.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:06:58.100" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:06:58.100" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:06:58.100" starttime="20171005 01:06:53.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:06:58.101" starttime="20171005 01:06:58.100"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:06:58.101" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:06:58.101" starttime="20171005 01:06:58.101"></status>
</kw>
<msg timestamp="20171005 01:06:58.102" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:06:58.102" starttime="20171005 01:06:53.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:06:58.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:06:58.103" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171005 01:06:58.103" starttime="20171005 01:06:58.102"></status>
</kw>
<status status="FAIL" endtime="20171005 01:06:58.103" starttime="20171005 01:06:53.760"></status>
</kw>
<msg timestamp="20171005 01:06:58.103" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171005 01:06:58.103" starttime="20171005 01:06:53.758"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:00.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:00.109" starttime="20171005 01:07:00.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:00.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:00.110" starttime="20171005 01:07:00.109"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:00.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:00.111" starttime="20171005 01:07:00.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:00.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:00.112" starttime="20171005 01:07:00.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:00.295" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:00.295" starttime="20171005 01:07:00.112"></status>
</kw>
<msg timestamp="20171005 01:07:00.295" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:00.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:00.295" starttime="20171005 01:07:00.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:00.296" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:00.296" starttime="20171005 01:07:00.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:00.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:00.297" starttime="20171005 01:07:00.296"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:00.297" starttime="20171005 01:07:00.108"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:00.297" starttime="20171005 01:07:00.107"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:00.297" starttime="20171005 01:07:00.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:00.298" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:00.298" starttime="20171005 01:07:00.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:00.298" starttime="20171005 01:07:00.298"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:01.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:01.626" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:01.626" starttime="20171005 01:07:00.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:01.627" starttime="20171005 01:07:01.627"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:01.628" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:01.628" starttime="20171005 01:07:01.628"></status>
</kw>
<msg timestamp="20171005 01:07:01.628" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:01.628" starttime="20171005 01:07:00.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:01.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:07:01.629" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171005 01:07:01.629" starttime="20171005 01:07:01.628"></status>
</kw>
<status status="FAIL" endtime="20171005 01:07:01.629" starttime="20171005 01:07:00.106"></status>
</kw>
<msg timestamp="20171005 01:07:01.630" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171005 01:07:01.630" starttime="20171005 01:07:00.104"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:03.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:03.637" starttime="20171005 01:07:03.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:03.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:03.637" starttime="20171005 01:07:03.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:03.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:03.638" starttime="20171005 01:07:03.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:03.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:03.639" starttime="20171005 01:07:03.639"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:03.975" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:03.975" starttime="20171005 01:07:03.640"></status>
</kw>
<msg timestamp="20171005 01:07:03.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:03.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:03.976" starttime="20171005 01:07:03.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:03.976" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:03.977" starttime="20171005 01:07:03.976"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:03.977" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:03.977" starttime="20171005 01:07:03.977"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:03.977" starttime="20171005 01:07:03.635"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:03.977" starttime="20171005 01:07:03.635"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:03.978" starttime="20171005 01:07:03.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:03.978" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:03.978" starttime="20171005 01:07:03.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:03.979" starttime="20171005 01:07:03.979"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:04.530" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:04.531" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:04.531" starttime="20171005 01:07:03.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:04.531" starttime="20171005 01:07:04.531"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:04.532" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:04.532" starttime="20171005 01:07:04.532"></status>
</kw>
<msg timestamp="20171005 01:07:04.532" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:04.532" starttime="20171005 01:07:03.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:04.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:07:04.533" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171005 01:07:04.533" starttime="20171005 01:07:04.533"></status>
</kw>
<status status="FAIL" endtime="20171005 01:07:04.533" starttime="20171005 01:07:03.632"></status>
</kw>
<msg timestamp="20171005 01:07:04.534" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171005 01:07:04.534" starttime="20171005 01:07:03.630"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:06.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:06.540" starttime="20171005 01:07:06.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:06.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:06.541" starttime="20171005 01:07:06.540"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:06.541" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:06.541" starttime="20171005 01:07:06.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:06.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:06.542" starttime="20171005 01:07:06.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:07.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:07.017" starttime="20171005 01:07:06.543"></status>
</kw>
<msg timestamp="20171005 01:07:07.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:07.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:07.017" starttime="20171005 01:07:06.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:07.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:07.018" starttime="20171005 01:07:07.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:07.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:07.019" starttime="20171005 01:07:07.018"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:07.019" starttime="20171005 01:07:06.539"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:07.019" starttime="20171005 01:07:06.538"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:07.019" starttime="20171005 01:07:06.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:07.020" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:07.020" starttime="20171005 01:07:07.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:07.020" starttime="20171005 01:07:07.020"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:10.673" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:10.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:10.674" starttime="20171005 01:07:07.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:10.675" starttime="20171005 01:07:10.674"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:10.675" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:10.675" starttime="20171005 01:07:10.675"></status>
</kw>
<msg timestamp="20171005 01:07:10.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:10.675" starttime="20171005 01:07:06.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:10.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:10.676" starttime="20171005 01:07:10.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:07:10.677" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:10.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:07:10.677" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171005 01:07:10.677" starttime="20171005 01:07:10.676"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:10.677" starttime="20171005 01:07:06.536"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:10.678" starttime="20171005 01:07:06.534"></status>
</kw>
<msg timestamp="20171005 01:07:10.696" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:10.721" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:10.722" starttime="20171005 01:07:10.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:10.723" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:10.723" starttime="20171005 01:07:10.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:10.724" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:10.724" starttime="20171005 01:07:10.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:10.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:10.725" starttime="20171005 01:07:10.724"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:11.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:11.902" starttime="20171005 01:07:10.726"></status>
</kw>
<msg timestamp="20171005 01:07:11.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:11.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:11.902" starttime="20171005 01:07:10.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:11.903" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:11.903" starttime="20171005 01:07:11.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:11.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:11.904" starttime="20171005 01:07:11.903"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:11.904" starttime="20171005 01:07:10.721"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:11.904" starttime="20171005 01:07:10.720"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:11.904" starttime="20171005 01:07:10.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:11.905" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:11.905" starttime="20171005 01:07:11.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:11.905" starttime="20171005 01:07:11.905"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:13.744" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:13.744" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:13.744" starttime="20171005 01:07:11.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:13.745" starttime="20171005 01:07:13.745"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:13.746" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:13.746" starttime="20171005 01:07:13.746"></status>
</kw>
<msg timestamp="20171005 01:07:13.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:13.746" starttime="20171005 01:07:10.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:13.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:13.747" starttime="20171005 01:07:13.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:07:13.747" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:13.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:07:13.748" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171005 01:07:13.748" starttime="20171005 01:07:13.747"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:13.748" starttime="20171005 01:07:10.718"></status>
</kw>
<msg timestamp="20171005 01:07:13.748" level="FAIL">NameError: name 'host' is not defined</msg>
<status status="FAIL" endtime="20171005 01:07:13.748" starttime="20171005 01:07:10.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:23.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:23.755" starttime="20171005 01:07:23.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:23.755" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:23.755" starttime="20171005 01:07:23.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:23.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:23.756" starttime="20171005 01:07:23.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:23.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:23.757" starttime="20171005 01:07:23.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:24.457" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:24.458" starttime="20171005 01:07:23.757"></status>
</kw>
<msg timestamp="20171005 01:07:24.458" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:24.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:24.458" starttime="20171005 01:07:23.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:24.459" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:24.459" starttime="20171005 01:07:24.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:24.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:24.459" starttime="20171005 01:07:24.459"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:24.460" starttime="20171005 01:07:23.753"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:24.460" starttime="20171005 01:07:23.753"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:24.460" starttime="20171005 01:07:23.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:24.460" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:24.460" starttime="20171005 01:07:24.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:24.461" starttime="20171005 01:07:24.461"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:26.010" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:26.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:26.010" starttime="20171005 01:07:24.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:26.011" starttime="20171005 01:07:26.011"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:26.012" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:26.012" starttime="20171005 01:07:26.012"></status>
</kw>
<msg timestamp="20171005 01:07:26.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:26.012" starttime="20171005 01:07:23.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:26.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:26.013" starttime="20171005 01:07:26.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:07:26.014" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:26.014" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:07:26.014" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171005 01:07:26.014" starttime="20171005 01:07:26.013"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.014" starttime="20171005 01:07:23.750"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.014" starttime="20171005 01:07:23.749"></status>
</kw>
<msg timestamp="20171005 01:07:26.032" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20171005 01:07:26.033" starttime="20171005 01:04:12.376"></status>
</kw>
<msg timestamp="20171005 01:07:26.051" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:07:26.056" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:07:26.062" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171005 01:07:26.069" starttime="20171005 01:07:26.069"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.073" starttime="20171005 01:04:10.621"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171005 01:07:26.078" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171005 01:07:26.089" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171005 01:07:26.089" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171005 01:07:26.090" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171005 01:07:26.090" starttime="20171005 01:07:26.073"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.090" starttime="20171005 01:04:10.618"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.090" starttime="20171005 01:04:10.613"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.090" starttime="20171005 01:04:10.612"></status>
</kw>
<kw name="Verify Running BMC Image" library="code_update_utils">
<doc>Verify that the version on the BMC is the same as the</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${tar_version}</var>
</assign>
<msg timestamp="20171005 01:07:26.114" level="INFO">${tar_version} = v1.99.10-107-gc460ebe</msg>
<status status="PASS" endtime="20171005 01:07:26.114" starttime="20171005 01:07:26.091"></status>
</kw>
<kw name="Get BMC Version" library="utils">
<doc>Returns BMC version from /etc/os-release.</doc>
<assign>
<var>${bmc_version}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:07:26.116" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171005 01:07:26.117" starttime="20171005 01:07:26.116"></status>
</kw>
<msg timestamp="20171005 01:07:26.117" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171005 01:07:26.117" starttime="20171005 01:07:26.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:26.118" starttime="20171005 01:07:26.118"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.118" starttime="20171005 01:07:26.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:26.119" starttime="20171005 01:07:26.118"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:07:26.120" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171005 01:07:26.120" starttime="20171005 01:07:26.120"></status>
</kw>
<msg timestamp="20171005 01:07:26.120" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171005 01:07:26.120" starttime="20171005 01:07:26.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:26.122" starttime="20171005 01:07:26.122"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.123" starttime="20171005 01:07:26.121"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:26.123" starttime="20171005 01:07:26.120"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:07:26.123" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:07:29.314" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171005 01:07:29.315" starttime="20171005 01:07:26.123"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:29.315" starttime="20171005 01:07:26.115"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171005 01:07:29.315" level="INFO">${cmd} = grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</msg>
<status status="PASS" endtime="20171005 01:07:29.315" starttime="20171005 01:07:29.315"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:29.317" level="INFO">Executing command 'grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '=''.</msg>
<msg timestamp="20171005 01:07:29.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:07:29.514" level="INFO">${stdout} = "v1.99.10-107-gc460ebe"</msg>
<msg timestamp="20171005 01:07:29.514" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:29.515" starttime="20171005 01:07:29.316"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:07:29.515" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171005 01:07:29.515" starttime="20171005 01:07:29.515"></status>
</kw>
<msg timestamp="20171005 01:07:29.515" level="INFO">${output} = "v1.99.10-107-gc460ebe"</msg>
<status status="PASS" endtime="20171005 01:07:29.515" starttime="20171005 01:07:29.316"></status>
</kw>
<msg timestamp="20171005 01:07:29.516" level="INFO">${bmc_version} = "v1.99.10-107-gc460ebe"</msg>
<status status="PASS" endtime="20171005 01:07:29.516" starttime="20171005 01:07:26.114"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${bmc_version}</arg>
<arg>"</arg>
</arguments>
<assign>
<var>${bmc_version}</var>
</assign>
<msg timestamp="20171005 01:07:29.516" level="INFO">${bmc_version} = v1.99.10-107-gc460ebe</msg>
<status status="PASS" endtime="20171005 01:07:29.516" starttime="20171005 01:07:29.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${tar_version}</arg>
<arg>${bmc_version}</arg>
</arguments>
<msg timestamp="20171005 01:07:29.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:29.517" starttime="20171005 01:07:29.517"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:29.517" starttime="20171005 01:07:26.091"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:29.520" starttime="20171005 01:07:29.520"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171005 01:07:29.522" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171005 01:07:29.522" starttime="20171005 01:07:29.521"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171005 01:07:29.522" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20171005 01:07:29.522" starttime="20171005 01:07:29.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:29.523" starttime="20171005 01:07:29.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:29.524" starttime="20171005 01:07:29.523"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171005 01:07:29.524" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171005 01:07:29.524" starttime="20171005 01:07:29.524"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171005 01:07:29.526" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171005 01:07:29.526" starttime="20171005 01:07:29.525"></status>
</kw>
<msg timestamp="20171005 01:07:29.526" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171005 01:07:29.526" starttime="20171005 01:07:29.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171005 01:07:29.528" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:29.528" starttime="20171005 01:07:29.527"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:29.528" starttime="20171005 01:07:29.527"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:29.528" starttime="20171005 01:07:29.528"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:07:29.534" level="INFO">${cur_time} = 2017-10-05 01:07:29:533351</msg>
<status status="PASS" endtime="20171005 01:07:29.534" starttime="20171005 01:07:29.529"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:07:29.534" level="INFO">${cur_time} = 20171005010729533351</msg>
<status status="PASS" endtime="20171005 01:07:29.535" starttime="20171005 01:07:29.534"></status>
</kw>
<msg timestamp="20171005 01:07:29.535" level="INFO">${cur_time} = 20171005010729533351</msg>
<status status="PASS" endtime="20171005 01:07:29.535" starttime="20171005 01:07:29.529"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171005 01:07:29.536" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:29.536" starttime="20171005 01:07:29.535"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:29.536" starttime="20171005 01:07:29.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:29.537" starttime="20171005 01:07:29.536"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:29.537" starttime="20171005 01:07:29.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<kw name="Check Error And Collect FFDC" library="code_update_utils">
<doc>Collect FFDC if error log exists.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Error Logs Should Not Exist</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Error Logs Should Not Exist" library="openbmc_ffdc_utils">
<doc>Verify that error logs do not exist.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:29.542" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:29.542" starttime="20171005 01:07:29.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:29.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:29.543" starttime="20171005 01:07:29.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:29.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:29.544" starttime="20171005 01:07:29.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:29.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:29.545" starttime="20171005 01:07:29.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:30.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:30.670" starttime="20171005 01:07:29.545"></status>
</kw>
<msg timestamp="20171005 01:07:30.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:30.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:30.670" starttime="20171005 01:07:29.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:30.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:30.671" starttime="20171005 01:07:30.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:30.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:30.672" starttime="20171005 01:07:30.671"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:30.672" starttime="20171005 01:07:29.541"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:30.672" starttime="20171005 01:07:29.541"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:30.672" starttime="20171005 01:07:29.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:30.673" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171005 01:07:30.673" starttime="20171005 01:07:30.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:30.673" starttime="20171005 01:07:30.673"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:38.319" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 01:07:38.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:38.319" starttime="20171005 01:07:30.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:38.320" starttime="20171005 01:07:38.320"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:38.321" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:38.321" starttime="20171005 01:07:38.321"></status>
</kw>
<msg timestamp="20171005 01:07:38.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:38.321" starttime="20171005 01:07:29.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171005 01:07:38.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171005 01:07:38.322" level="FAIL">200 != 404</msg>
<status status="FAIL" endtime="20171005 01:07:38.323" starttime="20171005 01:07:38.322"></status>
</kw>
<status status="FAIL" endtime="20171005 01:07:38.323" starttime="20171005 01:07:29.539"></status>
</kw>
<msg timestamp="20171005 01:07:38.323" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171005 01:07:38.323" starttime="20171005 01:07:29.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'False'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171005 01:07:38.339" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171005 01:07:38.340" starttime="20171005 01:07:38.339"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:07:38.346" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:07:41.350" level="INFO">${RC} = 0</msg>
<msg timestamp="20171005 01:07:41.350" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.851 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.712 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20171005 01:07:41.351" starttime="20171005 01:07:38.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.372" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.851 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.712 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.665 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.637 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.637/0.716/0.851/0.084 ms</msg>
<status status="PASS" endtime="20171005 01:07:41.372" starttime="20171005 01:07:41.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:41.374" starttime="20171005 01:07:41.373"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.375" starttime="20171005 01:07:38.338"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:07:41.423" level="INFO">${cur_time} = 2017-10-05 01:07:41:421889</msg>
<status status="PASS" endtime="20171005 01:07:41.423" starttime="20171005 01:07:41.421"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:07:41.423" level="INFO">${cur_time} = 20171005010741421889</msg>
<status status="PASS" endtime="20171005 01:07:41.423" starttime="20171005 01:07:41.423"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.424" starttime="20171005 01:07:41.419"></status>
</kw>
<msg timestamp="20171005 01:07:41.431" level="INFO">${FFDC_TIME} = 20171005010741421889</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 01:07:41.433" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171005 01:07:41.434" starttime="20171005 01:07:41.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 01:07:41.434" level="INFO">${suite_name} = 20171005010741421889_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171005 01:07:41.434" starttime="20171005 01:07:41.434"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 01:07:41.435" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171005 01:07:41.435" starttime="20171005 01:07:41.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 01:07:41.436" level="INFO">${test_name} = 20171005010741421889_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171005 01:07:41.436" starttime="20171005 01:07:41.435"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.436" starttime="20171005 01:07:41.432"></status>
</kw>
<msg timestamp="20171005 01:07:41.436" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171005 01:07:41.437" level="INFO">${FFDC_PREFIX} = 20171005010741421889_</msg>
<msg timestamp="20171005 01:07:41.466" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171005 01:07:41.467" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.467" starttime="20171005 01:07:41.466"></status>
</kw>
<msg timestamp="20171005 01:07:41.474" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.490" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.490" starttime="20171005 01:07:41.490"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.491" starttime="20171005 01:07:41.489"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.492" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.492" starttime="20171005 01:07:41.491"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.492" starttime="20171005 01:07:41.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.494" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.494" starttime="20171005 01:07:41.493"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.494" starttime="20171005 01:07:41.492"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.495" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.495" starttime="20171005 01:07:41.495"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.495" starttime="20171005 01:07:41.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.496" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.497" starttime="20171005 01:07:41.496"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.497" starttime="20171005 01:07:41.495"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.498" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.498" starttime="20171005 01:07:41.498"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.498" starttime="20171005 01:07:41.497"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.499" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.499" starttime="20171005 01:07:41.499"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.500" starttime="20171005 01:07:41.498"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.501" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.501" starttime="20171005 01:07:41.501"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.501" starttime="20171005 01:07:41.500"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.503" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.503" starttime="20171005 01:07:41.502"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.503" starttime="20171005 01:07:41.502"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.505" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.505" starttime="20171005 01:07:41.504"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.505" starttime="20171005 01:07:41.503"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.506" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.506" starttime="20171005 01:07:41.506"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.506" starttime="20171005 01:07:41.505"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.507" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.508" starttime="20171005 01:07:41.507"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.508" starttime="20171005 01:07:41.507"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.509" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.509" starttime="20171005 01:07:41.509"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.509" starttime="20171005 01:07:41.508"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 01:07:41.533" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:41.534" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:41.534" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171005 01:07:41.601" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:07:41.613" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171005 01:07:41.613" level="INFO">${stderr} = </msg>
<msg timestamp="20171005 01:07:41.613" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171005 01:07:41.613" starttime="20171005 01:07:41.510"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.614" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171005 01:07:41.614" starttime="20171005 01:07:41.613"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.614" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171005 01:07:41.614" starttime="20171005 01:07:41.614"></status>
</kw>
<msg timestamp="20171005 01:07:41.615" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171005 01:07:41.615" starttime="20171005 01:07:41.509"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.616" starttime="20171005 01:07:41.615"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.616" starttime="20171005 01:07:41.615"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.616" starttime="20171005 01:07:41.503"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.617" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.618" starttime="20171005 01:07:41.617"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.618" starttime="20171005 01:07:41.616"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:07:41.618" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171005 01:07:41.618" starttime="20171005 01:07:41.618"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.620" starttime="20171005 01:07:41.619"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.620" starttime="20171005 01:07:41.619"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.622" starttime="20171005 01:07:41.621"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.622" starttime="20171005 01:07:41.621"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.622" starttime="20171005 01:07:41.618"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.623" starttime="20171005 01:07:41.623"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.623" starttime="20171005 01:07:41.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.625" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.625" starttime="20171005 01:07:41.624"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.625" starttime="20171005 01:07:41.624"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.625" starttime="20171005 01:07:41.622"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.626" starttime="20171005 01:07:41.626"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.627" starttime="20171005 01:07:41.625"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.628" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.628" starttime="20171005 01:07:41.627"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.629" starttime="20171005 01:07:41.627"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.629" starttime="20171005 01:07:41.625"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.629" starttime="20171005 01:07:41.618"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.631" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.631" starttime="20171005 01:07:41.631"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.631" starttime="20171005 01:07:41.629"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.631" starttime="20171005 01:07:41.488"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:07:41.639" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171005 01:07:41.639" starttime="20171005 01:07:41.639"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171005 01:07:41.641" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171005 01:07:41.641" starttime="20171005 01:07:41.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:41.642" starttime="20171005 01:07:41.642"></status>
</kw>
<msg timestamp="20171005 01:07:41.642" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171005 01:07:41.642" starttime="20171005 01:07:41.641"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:41.644" starttime="20171005 01:07:41.644"></status>
</kw>
<msg timestamp="20171005 01:07:41.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:41.644" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:07:41.645" starttime="20171005 01:07:41.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:41.645" starttime="20171005 01:07:41.645"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:07:41.667" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171005 01:07:41.668" starttime="20171005 01:07:41.667"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:07:41.669" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171005 01:07:41.669" starttime="20171005 01:07:41.669"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.676" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171005 01:07:41.676" starttime="20171005 01:07:41.669"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.680" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.682" starttime="20171005 01:07:41.679"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.682" starttime="20171005 01:07:41.679"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.683" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.683" starttime="20171005 01:07:41.683"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.684" starttime="20171005 01:07:41.682"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.685" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.685" starttime="20171005 01:07:41.685"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.685" starttime="20171005 01:07:41.684"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:41.686" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:41.686" starttime="20171005 01:07:41.686"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.686" starttime="20171005 01:07:41.685"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.687" starttime="20171005 01:07:41.678"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:41.687" starttime="20171005 01:07:41.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:41.687" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:41.687" starttime="20171005 01:07:41.687"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:41.755" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:41.755" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:41.756" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171005 01:07:43.364" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:43.364" starttime="20171005 01:07:41.715"></status>
</kw>
<msg timestamp="20171005 01:07:43.364" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:43.364" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20171005 01:07:43.365" starttime="20171005 01:07:41.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:43.365" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171005 01:07:43.365" starttime="20171005 01:07:43.365"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:43.366" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:43.366" starttime="20171005 01:07:43.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.374" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.374" starttime="20171005 01:07:43.374"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.374" starttime="20171005 01:07:43.373"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.374" starttime="20171005 01:07:43.366"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.374" starttime="20171005 01:07:41.677"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.375" starttime="20171005 01:07:41.677"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.375" starttime="20171005 01:07:41.677"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.375" starttime="20171005 01:07:41.668"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.375" starttime="20171005 01:07:41.668"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:07:43.376" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171005 01:07:43.376" starttime="20171005 01:07:43.376"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.377" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171005 01:07:43.377" starttime="20171005 01:07:43.376"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.380" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.380" starttime="20171005 01:07:43.380"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.380" starttime="20171005 01:07:43.379"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.381" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.382" starttime="20171005 01:07:43.381"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.382" starttime="20171005 01:07:43.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.383" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.383" starttime="20171005 01:07:43.382"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.383" starttime="20171005 01:07:43.382"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.384" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.384" starttime="20171005 01:07:43.384"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.384" starttime="20171005 01:07:43.383"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.384" starttime="20171005 01:07:43.378"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.385" starttime="20171005 01:07:43.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:43.385" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:43.385" starttime="20171005 01:07:43.385"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:43.454" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:43.454" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:43.455" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171005 01:07:43.682" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:43.683" starttime="20171005 01:07:43.416"></status>
</kw>
<msg timestamp="20171005 01:07:43.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:43.683" level="INFO">${ret_values} = (u'20171004220210', u'', 0)</msg>
<status status="PASS" endtime="20171005 01:07:43.683" starttime="20171005 01:07:43.386"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:43.684" level="INFO">${stdout} = 20171004220210</msg>
<status status="PASS" endtime="20171005 01:07:43.684" starttime="20171005 01:07:43.683"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:43.684" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:43.684" starttime="20171005 01:07:43.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.692" starttime="20171005 01:07:43.692"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.692" starttime="20171005 01:07:43.691"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.693" starttime="20171005 01:07:43.685"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.693" starttime="20171005 01:07:43.377"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.693" starttime="20171005 01:07:43.377"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.696" starttime="20171005 01:07:43.695"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.696" starttime="20171005 01:07:43.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.697" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.697" starttime="20171005 01:07:43.697"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.697" starttime="20171005 01:07:43.696"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.699" starttime="20171005 01:07:43.698"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.699" starttime="20171005 01:07:43.698"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.700" starttime="20171005 01:07:43.700"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.700" starttime="20171005 01:07:43.699"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.700" starttime="20171005 01:07:43.694"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.700" starttime="20171005 01:07:43.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:43.701" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:43.701" starttime="20171005 01:07:43.701"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:43.767" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:43.768" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:43.769" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171005 01:07:43.906" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:43.906" starttime="20171005 01:07:43.728"></status>
</kw>
<msg timestamp="20171005 01:07:43.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:43.907" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-107"\nVERSION_ID="v1.99.10-107-gc460ebe"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171005 01:07:43.907" starttime="20171005 01:07:43.702"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:43.907" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-107"
VERSION_ID="v1.99.10-107-gc460ebe"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171005 01:07:43.907" starttime="20171005 01:07:43.907"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:43.908" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:43.908" starttime="20171005 01:07:43.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.916" starttime="20171005 01:07:43.916"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.916" starttime="20171005 01:07:43.915"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.916" starttime="20171005 01:07:43.908"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.916" starttime="20171005 01:07:43.693"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.916" starttime="20171005 01:07:43.693"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.917" starttime="20171005 01:07:43.377"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.917" starttime="20171005 01:07:43.375"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.917" starttime="20171005 01:07:43.375"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:07:43.918" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171005 01:07:43.918" starttime="20171005 01:07:43.918"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.919" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171005 01:07:43.919" starttime="20171005 01:07:43.918"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.922" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.922" starttime="20171005 01:07:43.922"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.922" starttime="20171005 01:07:43.921"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.923" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.923" starttime="20171005 01:07:43.923"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.924" starttime="20171005 01:07:43.922"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.925" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.925" starttime="20171005 01:07:43.924"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.925" starttime="20171005 01:07:43.924"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:43.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:43.926" starttime="20171005 01:07:43.926"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.926" starttime="20171005 01:07:43.925"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.927" starttime="20171005 01:07:43.920"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:43.927" starttime="20171005 01:07:43.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:43.927" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:43.927" starttime="20171005 01:07:43.927"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:43.995" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:43.995" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:43.996" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171005 01:07:44.094" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:44.094" starttime="20171005 01:07:43.956"></status>
</kw>
<msg timestamp="20171005 01:07:44.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:44.094" level="INFO">${ret_values} = (u' 01:07:59 up 2 min,  load average: 3.87, 2.47, 1.00', u'', 0)</msg>
<status status="PASS" endtime="20171005 01:07:44.094" starttime="20171005 01:07:43.928"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:44.095" level="INFO">${stdout} =  01:07:59 up 2 min,  load average: 3.87, 2.47, 1.00</msg>
<status status="PASS" endtime="20171005 01:07:44.095" starttime="20171005 01:07:44.095"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:44.096" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:44.096" starttime="20171005 01:07:44.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.104" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.104" starttime="20171005 01:07:44.103"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.104" starttime="20171005 01:07:44.103"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.104" starttime="20171005 01:07:44.096"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.104" starttime="20171005 01:07:43.919"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.104" starttime="20171005 01:07:43.919"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.108" starttime="20171005 01:07:44.107"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.108" starttime="20171005 01:07:44.106"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.109" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.109" starttime="20171005 01:07:44.109"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.109" starttime="20171005 01:07:44.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.110" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.110" starttime="20171005 01:07:44.110"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.110" starttime="20171005 01:07:44.109"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.112" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.112" starttime="20171005 01:07:44.111"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.112" starttime="20171005 01:07:44.111"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.112" starttime="20171005 01:07:44.106"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.112" starttime="20171005 01:07:44.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:44.113" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:44.113" starttime="20171005 01:07:44.112"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:44.178" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:44.179" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:44.179" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171005 01:07:44.296" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:44.297" starttime="20171005 01:07:44.140"></status>
</kw>
<msg timestamp="20171005 01:07:44.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:44.297" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171005 01:07:44.297" starttime="20171005 01:07:44.113"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:44.298" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171005 01:07:44.298" starttime="20171005 01:07:44.297"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:44.298" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:44.298" starttime="20171005 01:07:44.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.307" starttime="20171005 01:07:44.306"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.307" starttime="20171005 01:07:44.305"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.307" starttime="20171005 01:07:44.299"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.307" starttime="20171005 01:07:44.104"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.307" starttime="20171005 01:07:44.104"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.310" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.310" starttime="20171005 01:07:44.310"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.310" starttime="20171005 01:07:44.309"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.312" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.312" starttime="20171005 01:07:44.311"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.312" starttime="20171005 01:07:44.311"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.313" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.313" starttime="20171005 01:07:44.313"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.313" starttime="20171005 01:07:44.312"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.314" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.314" starttime="20171005 01:07:44.314"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.315" starttime="20171005 01:07:44.313"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.315" starttime="20171005 01:07:44.309"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.315" starttime="20171005 01:07:44.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:44.316" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:44.316" starttime="20171005 01:07:44.315"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:44.381" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:44.381" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:44.381" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171005 01:07:44.529" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:44.529" starttime="20171005 01:07:44.343"></status>
</kw>
<msg timestamp="20171005 01:07:44.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:44.530" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171005 01:07:44.530" starttime="20171005 01:07:44.316"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:44.531" level="INFO">${stdout} = Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171005 01:07:44.531" starttime="20171005 01:07:44.530"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:44.531" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:44.531" starttime="20171005 01:07:44.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:44.539"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:44.538"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:44.532"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:44.307"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:44.307"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:43.919"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:43.917"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:43.917"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:41.668"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.540" starttime="20171005 01:07:41.666"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.541" starttime="20171005 01:07:41.645"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.541" starttime="20171005 01:07:41.643"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.541" starttime="20171005 01:07:41.642"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:44.543" starttime="20171005 01:07:44.542"></status>
</kw>
<msg timestamp="20171005 01:07:44.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:44.543" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:07:44.543" starttime="20171005 01:07:44.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:44.544" starttime="20171005 01:07:44.543"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:07:44.566" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171005 01:07:44.567" starttime="20171005 01:07:44.565"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:07:44.568" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171005 01:07:44.568" starttime="20171005 01:07:44.568"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:44.569" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171005 01:07:44.569" starttime="20171005 01:07:44.568"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:44.572" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:44.573" starttime="20171005 01:07:44.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:44.573" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:44.573" starttime="20171005 01:07:44.573"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:44.574" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:44.574" starttime="20171005 01:07:44.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:44.575" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:44.575" starttime="20171005 01:07:44.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.903" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:44.904" starttime="20171005 01:07:44.576"></status>
</kw>
<msg timestamp="20171005 01:07:44.904" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:44.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:44.904" starttime="20171005 01:07:44.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.905" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:44.905" starttime="20171005 01:07:44.904"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:44.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:44.905" starttime="20171005 01:07:44.905"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.906" starttime="20171005 01:07:44.571"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.906" starttime="20171005 01:07:44.571"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:44.906" starttime="20171005 01:07:44.570"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:44.906" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:44.906" starttime="20171005 01:07:44.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:44.907" starttime="20171005 01:07:44.907"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:45.634" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:45.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.634" starttime="20171005 01:07:44.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:45.635" starttime="20171005 01:07:45.635"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:45.636" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:45.636" starttime="20171005 01:07:45.635"></status>
</kw>
<msg timestamp="20171005 01:07:45.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.636" starttime="20171005 01:07:44.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.637" starttime="20171005 01:07:45.637"></status>
</kw>
<msg timestamp="20171005 01:07:45.637" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:45.637" starttime="20171005 01:07:45.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:45.638" starttime="20171005 01:07:45.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:45.639" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24520
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:45.639" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:45.640" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20171005 01:07:45.640" starttime="20171005 01:07:45.638"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.641" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:45.641" starttime="20171005 01:07:45.641"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.642" starttime="20171005 01:07:45.640"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.642" starttime="20171005 01:07:44.568"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:45.642" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_OCC_state.txt</msg>
<status status="PASS" endtime="20171005 01:07:45.642" starttime="20171005 01:07:45.642"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:45.645" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:45.646" starttime="20171005 01:07:45.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:45.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:45.646" starttime="20171005 01:07:45.646"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:45.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:45.647" starttime="20171005 01:07:45.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:45.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:45.648" starttime="20171005 01:07:45.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:45.828" starttime="20171005 01:07:45.649"></status>
</kw>
<msg timestamp="20171005 01:07:45.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:45.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.828" starttime="20171005 01:07:45.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.829" starttime="20171005 01:07:45.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.830" starttime="20171005 01:07:45.829"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.830" starttime="20171005 01:07:45.644"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.830" starttime="20171005 01:07:45.644"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.830" starttime="20171005 01:07:45.643"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:45.831" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:45.831" starttime="20171005 01:07:45.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:45.832" starttime="20171005 01:07:45.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:45.986" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:45.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.986" starttime="20171005 01:07:45.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:45.987" starttime="20171005 01:07:45.987"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:45.988" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:45.988" starttime="20171005 01:07:45.988"></status>
</kw>
<msg timestamp="20171005 01:07:45.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.988" starttime="20171005 01:07:45.643"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:45.989" starttime="20171005 01:07:45.989"></status>
</kw>
<msg timestamp="20171005 01:07:45.989" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:45.989" starttime="20171005 01:07:45.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:45.990" starttime="20171005 01:07:45.990"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:45.991" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:45.991" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:45.991" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20171005 01:07:45.991" starttime="20171005 01:07:45.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:45.993" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_OCC_state.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:45.993" starttime="20171005 01:07:45.992"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.993" starttime="20171005 01:07:45.991"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:45.993" starttime="20171005 01:07:45.642"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:45.994" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171005 01:07:45.994" starttime="20171005 01:07:45.993"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:45.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:45.997" starttime="20171005 01:07:45.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:45.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:45.997" starttime="20171005 01:07:45.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:45.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:45.998" starttime="20171005 01:07:45.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:45.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:45.999" starttime="20171005 01:07:45.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.178" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:46.178" starttime="20171005 01:07:46.000"></status>
</kw>
<msg timestamp="20171005 01:07:46.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:46.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.178" starttime="20171005 01:07:45.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.179" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.179" starttime="20171005 01:07:46.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.180" starttime="20171005 01:07:46.179"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.180" starttime="20171005 01:07:45.996"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.180" starttime="20171005 01:07:45.995"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.180" starttime="20171005 01:07:45.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:46.181" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:46.181" starttime="20171005 01:07:46.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:46.182" starttime="20171005 01:07:46.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:46.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:46.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.452" starttime="20171005 01:07:46.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:46.452" starttime="20171005 01:07:46.452"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:46.453" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:46.453" starttime="20171005 01:07:46.453"></status>
</kw>
<msg timestamp="20171005 01:07:46.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.453" starttime="20171005 01:07:45.994"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.454" starttime="20171005 01:07:46.454"></status>
</kw>
<msg timestamp="20171005 01:07:46.455" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:46.455" starttime="20171005 01:07:46.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:46.455" starttime="20171005 01:07:46.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:46.456" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:46.456" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:46.456" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171005 01:07:46.456" starttime="20171005 01:07:46.455"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.458" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:46.458" starttime="20171005 01:07:46.457"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.458" starttime="20171005 01:07:46.456"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.458" starttime="20171005 01:07:45.993"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:46.459" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_led.txt</msg>
<status status="PASS" endtime="20171005 01:07:46.459" starttime="20171005 01:07:46.458"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:46.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:46.462" starttime="20171005 01:07:46.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:46.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:46.463" starttime="20171005 01:07:46.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:46.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:46.463" starttime="20171005 01:07:46.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:46.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:46.464" starttime="20171005 01:07:46.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:46.707" starttime="20171005 01:07:46.465"></status>
</kw>
<msg timestamp="20171005 01:07:46.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:46.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.707" starttime="20171005 01:07:46.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.708" starttime="20171005 01:07:46.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:46.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:46.708" starttime="20171005 01:07:46.708"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.709" starttime="20171005 01:07:46.461"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.709" starttime="20171005 01:07:46.460"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:46.709" starttime="20171005 01:07:46.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:46.709" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:46.709" starttime="20171005 01:07:46.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:46.710" starttime="20171005 01:07:46.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:48.360" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:48.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.360" starttime="20171005 01:07:46.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:48.361" starttime="20171005 01:07:48.360"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:48.361" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:48.361" starttime="20171005 01:07:48.361"></status>
</kw>
<msg timestamp="20171005 01:07:48.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.362" starttime="20171005 01:07:46.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.363" starttime="20171005 01:07:48.362"></status>
</kw>
<msg timestamp="20171005 01:07:48.363" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:48.363" starttime="20171005 01:07:48.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:48.364" starttime="20171005 01:07:48.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:48.366" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:48.366" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:48.366" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171005 01:07:48.366" starttime="20171005 01:07:48.364"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.368" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_led.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:48.368" starttime="20171005 01:07:48.367"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.368" starttime="20171005 01:07:48.367"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.368" starttime="20171005 01:07:46.458"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:48.369" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171005 01:07:48.369" starttime="20171005 01:07:48.369"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:48.372" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:48.372" starttime="20171005 01:07:48.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:48.373" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:48.373" starttime="20171005 01:07:48.373"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:48.374" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:48.374" starttime="20171005 01:07:48.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:48.374" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:48.374" starttime="20171005 01:07:48.374"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.564" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:48.564" starttime="20171005 01:07:48.375"></status>
</kw>
<msg timestamp="20171005 01:07:48.564" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:48.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.564" starttime="20171005 01:07:48.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.565" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.565" starttime="20171005 01:07:48.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.566" starttime="20171005 01:07:48.565"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.566" starttime="20171005 01:07:48.371"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.566" starttime="20171005 01:07:48.371"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.566" starttime="20171005 01:07:48.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:48.567" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:48.567" starttime="20171005 01:07:48.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:48.567" starttime="20171005 01:07:48.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:48.960" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:48.960" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.960" starttime="20171005 01:07:48.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:48.961" starttime="20171005 01:07:48.961"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:48.962" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:48.962" starttime="20171005 01:07:48.961"></status>
</kw>
<msg timestamp="20171005 01:07:48.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.962" starttime="20171005 01:07:48.369"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:48.963" starttime="20171005 01:07:48.963"></status>
</kw>
<msg timestamp="20171005 01:07:48.963" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:48.963" starttime="20171005 01:07:48.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:48.964" starttime="20171005 01:07:48.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:48.965" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/d9364d88", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/af631876", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/software/af631876": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-107-gc460ebe", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/af631876/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/af631876/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/d9364d88": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-106-g8a355b0", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/d9364d88/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/d9364d88/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/af631876"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:48.965" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:48.965" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20171005 01:07:48.965" starttime="20171005 01:07:48.964"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:48.967" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:48.967" starttime="20171005 01:07:48.967"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.967" starttime="20171005 01:07:48.966"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:48.967" starttime="20171005 01:07:48.368"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:48.968" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_elog.txt</msg>
<status status="PASS" endtime="20171005 01:07:48.968" starttime="20171005 01:07:48.968"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:48.971" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:48.971" starttime="20171005 01:07:48.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:48.972" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:48.972" starttime="20171005 01:07:48.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:48.973" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:48.973" starttime="20171005 01:07:48.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:48.974" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:48.974" starttime="20171005 01:07:48.973"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:49.191" starttime="20171005 01:07:48.975"></status>
</kw>
<msg timestamp="20171005 01:07:49.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:49.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.192" starttime="20171005 01:07:48.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.192" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.192" starttime="20171005 01:07:49.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.193" starttime="20171005 01:07:49.193"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.194" starttime="20171005 01:07:48.970"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.194" starttime="20171005 01:07:48.970"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.194" starttime="20171005 01:07:48.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:49.194" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:49.194" starttime="20171005 01:07:49.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:49.195" starttime="20171005 01:07:49.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:49.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:49.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.327" starttime="20171005 01:07:49.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:49.327" starttime="20171005 01:07:49.327"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:49.328" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:49.328" starttime="20171005 01:07:49.328"></status>
</kw>
<msg timestamp="20171005 01:07:49.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.328" starttime="20171005 01:07:48.968"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.329" starttime="20171005 01:07:49.329"></status>
</kw>
<msg timestamp="20171005 01:07:49.330" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:49.330" starttime="20171005 01:07:49.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:49.330" starttime="20171005 01:07:49.330"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:49.331" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1323"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507165646846, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:49.331" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:49.331" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "_PID=1323"
            ],
            "Id": 1,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" endtime="20171005 01:07:49.331" starttime="20171005 01:07:49.331"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_elog.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:49.333" starttime="20171005 01:07:49.332"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.333" starttime="20171005 01:07:49.331"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.333" starttime="20171005 01:07:48.967"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:49.334" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171005 01:07:49.334" starttime="20171005 01:07:49.333"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:49.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:49.337" starttime="20171005 01:07:49.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:49.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:49.338" starttime="20171005 01:07:49.338"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:49.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:49.339" starttime="20171005 01:07:49.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:49.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:49.340" starttime="20171005 01:07:49.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:07:49.528" starttime="20171005 01:07:49.341"></status>
</kw>
<msg timestamp="20171005 01:07:49.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:49.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.528" starttime="20171005 01:07:49.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.529" starttime="20171005 01:07:49.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:49.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:49.529" starttime="20171005 01:07:49.529"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.529" starttime="20171005 01:07:49.336"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.530" starttime="20171005 01:07:49.335"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:49.530" starttime="20171005 01:07:49.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:07:49.530" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171005 01:07:49.530" starttime="20171005 01:07:49.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:49.531" starttime="20171005 01:07:49.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:07:51.782" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:07:51.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:51.783" starttime="20171005 01:07:49.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.784" starttime="20171005 01:07:51.783"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:07:51.784" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:07:51.784" starttime="20171005 01:07:51.784"></status>
</kw>
<msg timestamp="20171005 01:07:51.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:07:51.784" starttime="20171005 01:07:49.334"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:07:51.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:07:51.786" starttime="20171005 01:07:51.785"></status>
</kw>
<msg timestamp="20171005 01:07:51.786" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:07:51.786" starttime="20171005 01:07:51.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.786" starttime="20171005 01:07:51.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:07:51.790" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/d9364d88", 
        "/xyz/openbmc_project/software/af631876"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:07:51.790" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:07:51.791" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171005 01:07:51.791" starttime="20171005 01:07:51.787"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:51.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:51.792" starttime="20171005 01:07:51.792"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.792" starttime="20171005 01:07:51.791"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.792" starttime="20171005 01:07:49.333"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.568"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.567"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.567"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.567"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.563"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.544"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.541"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.793" starttime="20171005 01:07:44.541"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.795" starttime="20171005 01:07:51.795"></status>
</kw>
<msg timestamp="20171005 01:07:51.795" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:51.795" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:07:51.795" starttime="20171005 01:07:51.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.796" starttime="20171005 01:07:51.796"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.818" starttime="20171005 01:07:51.816"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171005 01:07:51.819" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171005 01:07:51.820" starttime="20171005 01:07:51.819"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.820" starttime="20171005 01:07:51.816"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.820" starttime="20171005 01:07:51.796"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.820" starttime="20171005 01:07:51.793"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:51.820" starttime="20171005 01:07:51.793"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.822" starttime="20171005 01:07:51.822"></status>
</kw>
<msg timestamp="20171005 01:07:51.822" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:51.823" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:07:51.823" starttime="20171005 01:07:51.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.823" starttime="20171005 01:07:51.823"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 01:07:51.879" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:51.879" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:51.880" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171005 01:07:51.941" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171005 01:07:51.956" level="INFO">${core_files} = None</msg>
<msg timestamp="20171005 01:07:51.956" level="INFO">${stderr} = None</msg>
<msg timestamp="20171005 01:07:51.956" level="INFO">${rc} = None</msg>
<msg timestamp="20171005 01:07:51.956" level="FAIL">#(UTC) 2017/10/05 01:07:51.954734 -    0.076356 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171005 01:07:51.956" starttime="20171005 01:07:51.849"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171005 01:07:51.957" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171005 01:07:51.957" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171005 01:07:51.957" starttime="20171005 01:07:51.957"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:51.982" starttime="20171005 01:07:51.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:52.851" starttime="20171005 01:07:51.983"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:52.851" starttime="20171005 01:07:51.983"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:52.851" starttime="20171005 01:07:51.971"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:52.851" starttime="20171005 01:07:51.958"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171005 01:07:52.852" starttime="20171005 01:07:52.851"></status>
</kw>
<status status="FAIL" endtime="20171005 01:07:52.852" starttime="20171005 01:07:51.848"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:52.852" starttime="20171005 01:07:51.823"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:52.852" starttime="20171005 01:07:51.820"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:52.852" starttime="20171005 01:07:51.820"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:52.855" starttime="20171005 01:07:52.855"></status>
</kw>
<msg timestamp="20171005 01:07:52.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:52.856" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:07:52.856" starttime="20171005 01:07:52.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:52.857" starttime="20171005 01:07:52.856"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:07:52.878" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171005 01:07:52.878" starttime="20171005 01:07:52.877"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:07:52.879" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171005 01:07:52.879" starttime="20171005 01:07:52.879"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:52.880" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171005 01:07:52.881" starttime="20171005 01:07:52.879"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:52.883" starttime="20171005 01:07:52.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:52.884" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:52.884" starttime="20171005 01:07:52.883"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:52.948" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:52.949" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:52.949" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171005 01:07:53.047" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:53.048" starttime="20171005 01:07:52.911"></status>
</kw>
<msg timestamp="20171005 01:07:53.048" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:53.048" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171005 01:07:53.048" starttime="20171005 01:07:52.884"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:53.049" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171005 01:07:53.049" starttime="20171005 01:07:53.048"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:53.050" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:53.050" starttime="20171005 01:07:53.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:53.064" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:53.064" starttime="20171005 01:07:53.062"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.064" starttime="20171005 01:07:53.060"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.064" starttime="20171005 01:07:53.050"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.064" starttime="20171005 01:07:52.881"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.064" starttime="20171005 01:07:52.879"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:53.065" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171005 01:07:53.065" starttime="20171005 01:07:53.064"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:53.066" starttime="20171005 01:07:53.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:53.067" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:53.067" starttime="20171005 01:07:53.067"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:53.129" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:53.129" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:53.131" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171005 01:07:53.662" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:53.662" starttime="20171005 01:07:53.093"></status>
</kw>
<msg timestamp="20171005 01:07:53.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:53.663" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  5 01:08 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  5 01:08 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171005 01:07:53.663" starttime="20171005 01:07:53.067"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:53.665" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  5 01:08 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  5 01:08 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171005 01:07:53.665" starttime="20171005 01:07:53.664"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:53.665" level="INFO">${stderr} = ls: /proc/1469/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171005 01:07:53.665" starttime="20171005 01:07:53.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:53.674" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:53.674" starttime="20171005 01:07:53.673"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.674" starttime="20171005 01:07:53.672"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.674" starttime="20171005 01:07:53.666"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.674" starttime="20171005 01:07:53.065"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:53.674" starttime="20171005 01:07:53.064"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:53.675" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171005 01:07:53.675" starttime="20171005 01:07:53.675"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:53.677" starttime="20171005 01:07:53.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:53.677" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:53.677" starttime="20171005 01:07:53.677"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:53.739" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:53.739" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:53.740" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171005 01:07:54.961" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:54.961" starttime="20171005 01:07:53.705"></status>
</kw>
<msg timestamp="20171005 01:07:54.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:54.963" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-10-05 01:05:15 UTC, end at Thu 2017-10-05 01:08:08 UTC. --\nOct 05 01:05:15 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 05 01:05:15 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171005 01:07:54.964" starttime="20171005 01:07:53.678"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:54.966" level="INFO">${stdout} = -- Logs begin at Thu 2017-10-05 01:05:15 UTC, end at Thu 2017-10-05 01:08:08 UTC. --
Oct 05 01:05:15 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 05 01:05:15 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171005 01:07:54.966" starttime="20171005 01:07:54.965"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:54.967" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:54.967" starttime="20171005 01:07:54.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:54.980" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:54.980" starttime="20171005 01:07:54.979"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:54.980" starttime="20171005 01:07:54.978"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:54.980" starttime="20171005 01:07:54.968"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:54.981" starttime="20171005 01:07:53.675"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:54.981" starttime="20171005 01:07:53.674"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:54.981" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171005 01:07:54.981" starttime="20171005 01:07:54.981"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:54.983" starttime="20171005 01:07:54.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:54.984" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:54.984" starttime="20171005 01:07:54.983"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:55.055" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:55.055" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:55.056" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171005 01:07:58.901" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:58.904" starttime="20171005 01:07:55.011"></status>
</kw>
<msg timestamp="20171005 01:07:58.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:58.921" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=a85d94a5f48d4613857a9a0b0dfcd8b5;i=1;b=9a9dbf1b773c42f5910517cf67865b3e;m=d03692;t=55ac25124df9d;x=cb3a09745c54e6fa",\n\t"__REALTIME_TIMESTAMP" : "1507165515079581",\n\t"__MONO...</msg>
<status status="PASS" endtime="20171005 01:07:58.921" starttime="20171005 01:07:54.984"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:58.926" level="INFO">${stdout} = {
	"__CURSOR" : "s=a85d94a5f48d4613857a9a0b0dfcd8b5;i=1;b=9a9dbf1b773c42f5910517cf67865b3e;m=d03692;t=55ac25124df9d;x=cb3a09745c54e6fa",
	"__REALTIME_TIMESTAMP" : "1507165515079581",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20171005 01:07:58.926" starttime="20171005 01:07:58.922"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:58.926" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:58.926" starttime="20171005 01:07:58.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:58.941" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:58.941" starttime="20171005 01:07:58.938"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:58.941" starttime="20171005 01:07:58.933"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:58.941" starttime="20171005 01:07:58.927"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:58.941" starttime="20171005 01:07:54.982"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:58.941" starttime="20171005 01:07:54.981"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:58.942" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171005 01:07:58.942" starttime="20171005 01:07:58.942"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:58.944" starttime="20171005 01:07:58.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:58.945" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:58.945" starttime="20171005 01:07:58.944"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:59.011" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:59.011" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:59.012" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171005 01:07:59.071" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:59.071" starttime="20171005 01:07:58.972"></status>
</kw>
<msg timestamp="20171005 01:07:59.071" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:59.071" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          282144 kB\nMemAvailable:     325012 kB\nBuffers:           11768 kB\nCached:            43044 kB\nSwapCached:            0 kB\nActive:            9692...</msg>
<status status="PASS" endtime="20171005 01:07:59.071" starttime="20171005 01:07:58.945"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:59.073" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          282144 kB
MemAvailable:     325012 kB
Buffers:           11768 kB
Cached:            43044 kB
SwapCached:            0 kB
Active:            96920 kB
Inac...</msg>
<status status="PASS" endtime="20171005 01:07:59.073" starttime="20171005 01:07:59.072"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:59.073" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:59.074" starttime="20171005 01:07:59.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:59.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:59.086" starttime="20171005 01:07:59.085"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.086" starttime="20171005 01:07:59.084"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.086" starttime="20171005 01:07:59.074"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.086" starttime="20171005 01:07:58.943"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.086" starttime="20171005 01:07:58.942"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:59.087" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171005 01:07:59.087" starttime="20171005 01:07:59.086"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:59.088" starttime="20171005 01:07:59.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:59.089" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:59.089" starttime="20171005 01:07:59.089"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:59.155" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:59.155" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:59.156" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171005 01:07:59.555" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:59.555" starttime="20171005 01:07:59.117"></status>
</kw>
<msg timestamp="20171005 01:07:59.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:59.555" level="INFO">${ret_values} = (u'Mem: 150108K used, 282144K free, 8896K shrd, 11768K buff, 43048K cached\nCPU:  28% usr  14% sys   0% nic  57% idle   0% io   0% irq   0% sirq\nLoad average: 3.47 2.45 1.02 1/163 1473\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171005 01:07:59.555" starttime="20171005 01:07:59.089"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:59.556" level="INFO">${stdout} = Mem: 150108K used, 282144K free, 8896K shrd, 11768K buff, 43048K cached
CPU:  28% usr  14% sys   0% nic  57% idle   0% io   0% irq   0% sirq
Load average: 3.47 2.45 1.02 1/163 1473
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171005 01:07:59.556" starttime="20171005 01:07:59.556"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:59.557" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:59.557" starttime="20171005 01:07:59.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:59.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:59.565" starttime="20171005 01:07:59.565"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.565" starttime="20171005 01:07:59.564"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.565" starttime="20171005 01:07:59.557"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.566" starttime="20171005 01:07:59.087"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.566" starttime="20171005 01:07:59.086"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:07:59.567" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171005 01:07:59.567" starttime="20171005 01:07:59.566"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:59.568" starttime="20171005 01:07:59.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:07:59.569" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171005 01:07:59.569" starttime="20171005 01:07:59.568"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:07:59.632" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:59.635" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171005 01:07:59.635" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171005 01:07:59.702" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171005 01:07:59.702" starttime="20171005 01:07:59.596"></status>
</kw>
<msg timestamp="20171005 01:07:59.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:59.703" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20171005 01:07:59.703" starttime="20171005 01:07:59.569"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:07:59.704" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20171005 01:07:59.704" starttime="20171005 01:07:59.703"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:07:59.704" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171005 01:07:59.704" starttime="20171005 01:07:59.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171005 01:07:59.715" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:07:59.715" starttime="20171005 01:07:59.714"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.715" starttime="20171005 01:07:59.711"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.715" starttime="20171005 01:07:59.705"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.715" starttime="20171005 01:07:59.567"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.715" starttime="20171005 01:07:59.566"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.879"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.878"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.878"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.878"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.877"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.857"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.853"></status>
</kw>
<status status="PASS" endtime="20171005 01:07:59.716" starttime="20171005 01:07:52.852"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:59.718" starttime="20171005 01:07:59.718"></status>
</kw>
<msg timestamp="20171005 01:07:59.719" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:07:59.719" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:07:59.719" starttime="20171005 01:07:59.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:07:59.719" starttime="20171005 01:07:59.719"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:07:59.744" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:07:59.744" starttime="20171005 01:07:59.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:07:59.745" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:07:59.745" starttime="20171005 01:07:59.745"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:07:59.746" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:07:59.746" starttime="20171005 01:07:59.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:07:59.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:07:59.746" starttime="20171005 01:07:59.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:08:00.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:08:00.240" starttime="20171005 01:07:59.747"></status>
</kw>
<msg timestamp="20171005 01:08:00.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:08:00.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:00.240" starttime="20171005 01:07:59.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:08:00.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:00.241" starttime="20171005 01:08:00.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:00.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:00.242" starttime="20171005 01:08:00.241"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:00.242" starttime="20171005 01:07:59.743"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:00.242" starttime="20171005 01:07:59.742"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:00.242" starttime="20171005 01:07:59.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:08:00.243" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171005 01:08:00.243" starttime="20171005 01:08:00.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:00.244" starttime="20171005 01:08:00.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:08:01.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:08:01.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.541" starttime="20171005 01:08:00.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.541" starttime="20171005 01:08:01.541"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:08:01.542" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:08:01.542" starttime="20171005 01:08:01.542"></status>
</kw>
<msg timestamp="20171005 01:08:01.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.542" starttime="20171005 01:07:59.741"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.543" starttime="20171005 01:08:01.543"></status>
</kw>
<msg timestamp="20171005 01:08:01.543" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171005 01:08:01.543" starttime="20171005 01:08:01.542"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.544" starttime="20171005 01:08:01.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:08:01.545" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1323"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507165646846, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:08:01.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:08:01.545" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [u'_PID=1323'], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level....</msg>
<status status="PASS" endtime="20171005 01:08:01.545" starttime="20171005 01:08:01.544"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20171005 01:08:01.546" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171005 01:08:01.546" starttime="20171005 01:08:01.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:08:01.546" level="INFO">${logpath} = /home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_esel</msg>
<status status="PASS" endtime="20171005 01:08:01.546" starttime="20171005 01:08:01.546"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.547" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_esel"&gt;/home/fspcibld/logs/20171005010741421889_BmcCodeUpdate/20171005010741421889_RESTBMCCodeUpdate/20171005010741421889_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171005 01:08:01.547" starttime="20171005 01:08:01.547"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.548" starttime="20171005 01:08:01.548"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:08:01.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:08:01.552" starttime="20171005 01:08:01.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:08:01.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:08:01.553" starttime="20171005 01:08:01.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:08:01.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:08:01.554" starttime="20171005 01:08:01.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:08:01.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:08:01.554" starttime="20171005 01:08:01.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:08:01.798" starttime="20171005 01:08:01.555"></status>
</kw>
<msg timestamp="20171005 01:08:01.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:08:01.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.798" starttime="20171005 01:08:01.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.799" starttime="20171005 01:08:01.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.800" starttime="20171005 01:08:01.799"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.800" starttime="20171005 01:08:01.551"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.800" starttime="20171005 01:08:01.550"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.801" starttime="20171005 01:08:01.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:08:01.801" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20171005 01:08:01.802" starttime="20171005 01:08:01.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.803" starttime="20171005 01:08:01.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:08:01.895" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171005 01:08:01.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.895" starttime="20171005 01:08:01.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.896" starttime="20171005 01:08:01.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:08:01.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:08:01.897" starttime="20171005 01:08:01.896"></status>
</kw>
<msg timestamp="20171005 01:08:01.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.897" starttime="20171005 01:08:01.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:01.898" starttime="20171005 01:08:01.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:08:01.898" level="INFO">To JSON using : content={
  "data": [
    "_PID=1323"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:08:01.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:08:01.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=1323']}</msg>
<status status="PASS" endtime="20171005 01:08:01.898" starttime="20171005 01:08:01.898"></status>
</kw>
<msg timestamp="20171005 01:08:01.899" level="INFO">${esel_data} = [u'_PID=1323']</msg>
<status status="PASS" endtime="20171005 01:08:01.899" starttime="20171005 01:08:01.548"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171005 01:08:01.900" level="FAIL">[ _PID=1323 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171005 01:08:01.900" starttime="20171005 01:08:01.899"></status>
</kw>
<msg timestamp="20171005 01:08:01.900" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171005 01:08:01.900" starttime="20171005 01:08:01.899"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171005 01:08:01.901" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171005 01:08:01.901" starttime="20171005 01:08:01.901"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.901" starttime="20171005 01:08:01.547"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.901" starttime="20171005 01:08:01.547"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20171005 01:08:01.907" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:08:01.909" level="INFO">${out} = </msg>
<status status="PASS" endtime="20171005 01:08:01.910" starttime="20171005 01:08:01.902"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20171005 01:08:01.914" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20171005 01:08:01.914" starttime="20171005 01:08:01.913"></status>
</kw>
<msg timestamp="20171005 01:08:01.914" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171005 01:08:01.914" starttime="20171005 01:08:01.912"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171005 01:08:01.915" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171005 01:08:01.915" starttime="20171005 01:08:01.915"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.916" starttime="20171005 01:07:59.740"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.916" starttime="20171005 01:07:59.720"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.916" starttime="20171005 01:07:59.717"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.916" starttime="20171005 01:07:59.716"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.919" starttime="20171005 01:08:01.919"></status>
</kw>
<msg timestamp="20171005 01:08:01.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:08:01.919" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171005 01:08:01.919" starttime="20171005 01:08:01.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:01.920" starttime="20171005 01:08:01.920"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171005 01:08:01.943" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171005 01:08:01.943" starttime="20171005 01:08:01.942"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.943" starttime="20171005 01:08:01.941"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.943" starttime="20171005 01:08:01.920"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.944" starttime="20171005 01:08:01.917"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.944" starttime="20171005 01:08:01.916"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.944" starttime="20171005 01:07:41.642"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.944" starttime="20171005 01:07:41.640"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.944" starttime="20171005 01:07:41.640"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.944" starttime="20171005 01:07:41.639"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171005 01:08:01.960" starttime="20171005 01:08:01.954"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.960" starttime="20171005 01:08:01.946"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.960" starttime="20171005 01:07:41.638"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.961" starttime="20171005 01:07:38.324"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:01.961" starttime="20171005 01:07:38.324"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:08:01.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:08:01.966" starttime="20171005 01:08:01.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:08:01.966" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:08:01.966" starttime="20171005 01:08:01.966"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:08:01.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:08:01.967" starttime="20171005 01:08:01.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:08:01.968" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:08:01.968" starttime="20171005 01:08:01.967"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.239" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:08:02.239" starttime="20171005 01:08:01.969"></status>
</kw>
<msg timestamp="20171005 01:08:02.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:08:02.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.239" starttime="20171005 01:08:01.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.240" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.240" starttime="20171005 01:08:02.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.241" starttime="20171005 01:08:02.240"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.241" starttime="20171005 01:08:01.964"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.241" starttime="20171005 01:08:01.963"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.241" starttime="20171005 01:08:01.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:08:02.242" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171005 01:08:02.242" starttime="20171005 01:08:02.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.242" starttime="20171005 01:08:02.242"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:08:02.296" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 01:08:02.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.296" starttime="20171005 01:08:02.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.297" starttime="20171005 01:08:02.297"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:08:02.297" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:08:02.297" starttime="20171005 01:08:02.297"></status>
</kw>
<msg timestamp="20171005 01:08:02.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.298" starttime="20171005 01:08:01.962"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.298" starttime="20171005 01:08:02.298"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:08:02.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:08:02.303" starttime="20171005 01:08:02.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:08:02.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:08:02.304" starttime="20171005 01:08:02.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:08:02.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:08:02.305" starttime="20171005 01:08:02.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:08:02.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:08:02.305" starttime="20171005 01:08:02.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:08:02.498" starttime="20171005 01:08:02.307"></status>
</kw>
<msg timestamp="20171005 01:08:02.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:08:02.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.499" starttime="20171005 01:08:02.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.499" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.499" starttime="20171005 01:08:02.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.500" starttime="20171005 01:08:02.500"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.500" starttime="20171005 01:08:02.302"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.500" starttime="20171005 01:08:02.302"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.501" starttime="20171005 01:08:02.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:08:02.501" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171005 01:08:02.501" starttime="20171005 01:08:02.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.502" starttime="20171005 01:08:02.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:08:02.555" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 01:08:02.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.555" starttime="20171005 01:08:02.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.556" starttime="20171005 01:08:02.556"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:08:02.556" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:08:02.556" starttime="20171005 01:08:02.556"></status>
</kw>
<msg timestamp="20171005 01:08:02.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.557" starttime="20171005 01:08:02.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.557" starttime="20171005 01:08:02.557"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:08:02.558" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:08:02.558" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:08:02.558" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" endtime="20171005 01:08:02.558" starttime="20171005 01:08:02.558"></status>
</kw>
<msg timestamp="20171005 01:08:02.559" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171005 01:08:02.559" starttime="20171005 01:08:02.299"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.559" starttime="20171005 01:08:02.559"></status>
</kw>
<msg timestamp="20171005 01:08:02.559" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171005 01:08:02.559" starttime="20171005 01:08:02.299"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171005 01:08:02.561" starttime="20171005 01:08:02.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:08:02.562" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171005 01:08:02.562" starttime="20171005 01:08:02.562"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:08:02.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171005 01:08:02.565" starttime="20171005 01:08:02.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:08:02.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171005 01:08:02.566" starttime="20171005 01:08:02.566"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:08:02.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171005 01:08:02.567" starttime="20171005 01:08:02.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:08:02.568" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171005 01:08:02.568" starttime="20171005 01:08:02.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.782" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171005 01:08:02.782" starttime="20171005 01:08:02.569"></status>
</kw>
<msg timestamp="20171005 01:08:02.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:08:02.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.782" starttime="20171005 01:08:02.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.783" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.783" starttime="20171005 01:08:02.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.784" starttime="20171005 01:08:02.783"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.784" starttime="20171005 01:08:02.564"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.784" starttime="20171005 01:08:02.564"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.784" starttime="20171005 01:08:02.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:08:02.785" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" endtime="20171005 01:08:02.785" starttime="20171005 01:08:02.784"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:08:02.786" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171005 01:08:02.786" starttime="20171005 01:08:02.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:08:02.787" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171005 01:08:02.787" starttime="20171005 01:08:02.787"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.788" starttime="20171005 01:08:02.787"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.788" starttime="20171005 01:08:02.785"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:08:02.888" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171005 01:08:02.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.888" starttime="20171005 01:08:02.789"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:08:02.890" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:08:02.890" starttime="20171005 01:08:02.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:08:02.891" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171005 01:08:02.891" starttime="20171005 01:08:02.891"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.891" starttime="20171005 01:08:02.890"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.892" starttime="20171005 01:08:02.889"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:08:02.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171005 01:08:02.898" starttime="20171005 01:08:02.893"></status>
</kw>
<msg timestamp="20171005 01:08:02.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.898" starttime="20171005 01:08:02.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:08:02.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:08:02.898"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:08:02.560"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:08:02.560"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:08:02.559"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:08:01.961"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:07:29.537"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.899" starttime="20171005 01:07:29.537"></status>
</kw>
<status status="PASS" endtime="20171005 01:08:02.900" starttime="20171005 01:07:29.517"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="PASS" endtime="20171005 01:08:02.900" critical="yes" starttime="20171005 01:00:13.667"></status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="PASS" endtime="20171005 01:08:02.901" starttime="20171005 01:00:12.496"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Bmc Code Update" pass="1">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
