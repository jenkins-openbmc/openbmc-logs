<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171005 01:09:18.978" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/2731/obmc-robot/tests" name="Tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw library="connection_client" name="Clear System Entry From Knownhosts">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171005 01:09:20.571" level="INFO">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status status="PASS" starttime="20171005 01:09:20.571" endtime="20171005 01:09:20.571"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:20.575" level="INFO">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:09:20.578" level="INFO">${rc} = 2</msg>
<msg timestamp="20171005 01:09:20.578" level="INFO">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status status="PASS" starttime="20171005 01:09:20.572" endtime="20171005 01:09:20.578"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.570" endtime="20171005 01:09:20.579"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.570" endtime="20171005 01:09:20.579"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:09:20.583" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171005 01:09:20.583" endtime="20171005 01:09:20.584"></status>
</kw>
<msg timestamp="20171005 01:09:20.584" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171005 01:09:20.582" endtime="20171005 01:09:20.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:20.585" endtime="20171005 01:09:20.585"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.584" endtime="20171005 01:09:20.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171005 01:09:20.587" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171005 01:09:20.587" endtime="20171005 01:09:20.587"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171005 01:09:20.588" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171005 01:09:20.587" endtime="20171005 01:09:20.588"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171005 01:09:20.588" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171005 01:09:20.588" endtime="20171005 01:09:20.588"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171005 01:09:20.589" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171005 01:09:20.589" endtime="20171005 01:09:20.589"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.586" endtime="20171005 01:09:20.589"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.586" endtime="20171005 01:09:20.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:09:20.591" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171005 01:09:20.590" endtime="20171005 01:09:20.591"></status>
</kw>
<msg timestamp="20171005 01:09:20.591" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171005 01:09:20.590" endtime="20171005 01:09:20.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:20.592" endtime="20171005 01:09:20.593"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:20.593" endtime="20171005 01:09:20.594"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.592" endtime="20171005 01:09:20.594"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.591" endtime="20171005 01:09:20.594"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:09:20.595" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:09:22.325" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171005 01:09:20.594" endtime="20171005 01:09:22.325"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.580" endtime="20171005 01:09:22.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:09:22.327" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20171005 01:09:22.394" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:09:22.394" level="INFO">${output} = VERSION_ID="v1.99.10-107-gc460ebe"</msg>
<msg timestamp="20171005 01:09:22.394" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:09:22.327" endtime="20171005 01:09:22.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.395" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 01:09:22.394" endtime="20171005 01:09:22.395"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.395" level="INFO">VERSION_ID="v1.99.10-107-gc460ebe"</msg>
<status status="PASS" starttime="20171005 01:09:22.395" endtime="20171005 01:09:22.395"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.326" endtime="20171005 01:09:22.395"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.326" endtime="20171005 01:09:22.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg timestamp="20171005 01:09:22.397" level="INFO">${software} = []</msg>
<status status="PASS" starttime="20171005 01:09:22.397" endtime="20171005 01:09:22.397"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20171005 01:09:22.398" level="INFO">${host_list} = []</msg>
<status status="PASS" starttime="20171005 01:09:22.398" endtime="20171005 01:09:22.398"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:22.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:22.401" endtime="20171005 01:09:22.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:22.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:22.402" endtime="20171005 01:09:22.403"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:22.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:22.403" endtime="20171005 01:09:22.403"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:22.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:22.404" endtime="20171005 01:09:22.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:22.405" endtime="20171005 01:09:22.590"></status>
</kw>
<msg timestamp="20171005 01:09:22.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:22.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.404" endtime="20171005 01:09:22.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.590" endtime="20171005 01:09:22.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.591" endtime="20171005 01:09:22.592"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.400" endtime="20171005 01:09:22.592"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.400" endtime="20171005 01:09:22.592"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.399" endtime="20171005 01:09:22.592"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:22.593" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" starttime="20171005 01:09:22.592" endtime="20171005 01:09:22.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:22.595" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:22.595" endtime="20171005 01:09:22.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:22.597" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:22.597" endtime="20171005 01:09:22.597"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.596" endtime="20171005 01:09:22.597"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.594" endtime="20171005 01:09:22.597"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.593" endtime="20171005 01:09:22.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:22.684" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20171005 01:09:22.684" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.598" endtime="20171005 01:09:22.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:22.686" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/af631876", 
    "/xyz/openbmc_project/software/d9364d88", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_pr...</msg>
<status status="PASS" starttime="20171005 01:09:22.686" endtime="20171005 01:09:22.686"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:22.687" level="INFO">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/af631876", 
    "/xyz/openbmc_project/software/d9364d88", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:22.687" endtime="20171005 01:09:22.687"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.686" endtime="20171005 01:09:22.687"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.685" endtime="20171005 01:09:22.688"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.685" endtime="20171005 01:09:22.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:22.688" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:22.688" endtime="20171005 01:09:22.688"></status>
</kw>
<msg timestamp="20171005 01:09:22.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.398" endtime="20171005 01:09:22.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.689" endtime="20171005 01:09:22.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:22.690" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/af631876", 
    "/xyz/openbmc_project/software/d9364d88", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:22.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:22.690" level="INFO">${content} = {u'data': [u'/xyz/openbmc_project/software/af631876', u'/xyz/openbmc_project/software/d9364d88', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_proj...</msg>
<status status="PASS" starttime="20171005 01:09:22.689" endtime="20171005 01:09:22.690"></status>
</kw>
<msg timestamp="20171005 01:09:22.690" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/af631876', u'/xyz/openbmc_project/software/d9364d88', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/softwa...</msg>
<status status="PASS" starttime="20171005 01:09:22.398" endtime="20171005 01:09:22.690"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/af631876">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:22.694" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:22.693" endtime="20171005 01:09:22.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:22.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:22.694" endtime="20171005 01:09:22.695"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:22.695" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:22.695" endtime="20171005 01:09:22.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:22.696" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:22.696" endtime="20171005 01:09:22.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:22.697" endtime="20171005 01:09:22.905"></status>
</kw>
<msg timestamp="20171005 01:09:22.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:22.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.696" endtime="20171005 01:09:22.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.906" endtime="20171005 01:09:22.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:22.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.907" endtime="20171005 01:09:22.907"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.693" endtime="20171005 01:09:22.907"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.692" endtime="20171005 01:09:22.907"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.692" endtime="20171005 01:09:22.907"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:22.908" level="INFO">${base_uri} = /xyz/openbmc_project/software/af631876/attr/Purpose</msg>
<status status="PASS" starttime="20171005 01:09:22.908" endtime="20171005 01:09:22.908"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:22.908" endtime="20171005 01:09:22.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:23.069" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/af631876/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 01:09:23.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.909" endtime="20171005 01:09:23.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.069" endtime="20171005 01:09:23.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:23.070" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:23.070" endtime="20171005 01:09:23.070"></status>
</kw>
<msg timestamp="20171005 01:09:23.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:22.691" endtime="20171005 01:09:23.070"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.071" endtime="20171005 01:09:23.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:23.072" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:23.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:23.072" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:23.071" endtime="20171005 01:09:23.072"></status>
</kw>
<msg timestamp="20171005 01:09:23.072" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" starttime="20171005 01:09:22.691" endtime="20171005 01:09:23.072"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 01:09:23.073" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 01:09:23.073" endtime="20171005 01:09:23.073"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.690" endtime="20171005 01:09:23.073"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/d9364d88">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:23.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:23.076" endtime="20171005 01:09:23.077"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:23.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:23.077" endtime="20171005 01:09:23.077"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:23.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:23.078" endtime="20171005 01:09:23.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:23.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:23.078" endtime="20171005 01:09:23.079"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:23.079" endtime="20171005 01:09:23.266"></status>
</kw>
<msg timestamp="20171005 01:09:23.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:23.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.079" endtime="20171005 01:09:23.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.266" endtime="20171005 01:09:23.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.267" endtime="20171005 01:09:23.268"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.075" endtime="20171005 01:09:23.268"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.075" endtime="20171005 01:09:23.268"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.074" endtime="20171005 01:09:23.268"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:23.268" level="INFO">${base_uri} = /xyz/openbmc_project/software/d9364d88/attr/Purpose</msg>
<status status="PASS" starttime="20171005 01:09:23.268" endtime="20171005 01:09:23.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.269" endtime="20171005 01:09:23.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:23.388" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/d9364d88/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 01:09:23.388" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.269" endtime="20171005 01:09:23.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.389" endtime="20171005 01:09:23.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:23.389" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:23.389" endtime="20171005 01:09:23.390"></status>
</kw>
<msg timestamp="20171005 01:09:23.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.074" endtime="20171005 01:09:23.390"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.390" endtime="20171005 01:09:23.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:23.391" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:23.391" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:23.391" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:23.391" endtime="20171005 01:09:23.391"></status>
</kw>
<msg timestamp="20171005 01:09:23.392" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" starttime="20171005 01:09:23.073" endtime="20171005 01:09:23.392"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 01:09:23.392" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 01:09:23.392" endtime="20171005 01:09:23.392"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.073" endtime="20171005 01:09:23.392"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:23.396" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:23.395" endtime="20171005 01:09:23.396"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:23.396" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:23.396" endtime="20171005 01:09:23.397"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:23.397" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:23.397" endtime="20171005 01:09:23.397"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:23.398" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:23.397" endtime="20171005 01:09:23.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:23.399" endtime="20171005 01:09:23.585"></status>
</kw>
<msg timestamp="20171005 01:09:23.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:23.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.398" endtime="20171005 01:09:23.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.586" endtime="20171005 01:09:23.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.586" endtime="20171005 01:09:23.587"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.395" endtime="20171005 01:09:23.587"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.394" endtime="20171005 01:09:23.587"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.394" endtime="20171005 01:09:23.587"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:23.588" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" starttime="20171005 01:09:23.587" endtime="20171005 01:09:23.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.588" endtime="20171005 01:09:23.589"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:23.648" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 01:09:23.648" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.589" endtime="20171005 01:09:23.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.648" endtime="20171005 01:09:23.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:23.649" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:23.649" endtime="20171005 01:09:23.649"></status>
</kw>
<msg timestamp="20171005 01:09:23.649" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.393" endtime="20171005 01:09:23.649"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.650" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 01:09:23.650" endtime="20171005 01:09:23.650"></status>
</kw>
<msg timestamp="20171005 01:09:23.650" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" starttime="20171005 01:09:23.393" endtime="20171005 01:09:23.650"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 01:09:23.651" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 01:09:23.651" endtime="20171005 01:09:23.651"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.392" endtime="20171005 01:09:23.651"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:23.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:23.654" endtime="20171005 01:09:23.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:23.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:23.655" endtime="20171005 01:09:23.655"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:23.656" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:23.656" endtime="20171005 01:09:23.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:23.657" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:23.656" endtime="20171005 01:09:23.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.846" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:23.657" endtime="20171005 01:09:23.846"></status>
</kw>
<msg timestamp="20171005 01:09:23.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:23.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.657" endtime="20171005 01:09:23.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.847" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.846" endtime="20171005 01:09:23.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:23.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.847" endtime="20171005 01:09:23.848"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.653" endtime="20171005 01:09:23.848"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.653" endtime="20171005 01:09:23.848"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.652" endtime="20171005 01:09:23.848"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:23.849" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status status="PASS" starttime="20171005 01:09:23.848" endtime="20171005 01:09:23.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.849" endtime="20171005 01:09:23.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:23.982" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 01:09:23.982" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.850" endtime="20171005 01:09:23.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.982" endtime="20171005 01:09:23.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:23.983" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:23.983" endtime="20171005 01:09:23.983"></status>
</kw>
<msg timestamp="20171005 01:09:23.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.652" endtime="20171005 01:09:23.983"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.984" endtime="20171005 01:09:23.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:23.985" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:23.985" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:23.985" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:23.984" endtime="20171005 01:09:23.985"></status>
</kw>
<msg timestamp="20171005 01:09:23.985" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20171005 01:09:23.651" endtime="20171005 01:09:23.985"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.985" endtime="20171005 01:09:23.986"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:23.986" endtime="20171005 01:09:23.986"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.651" endtime="20171005 01:09:23.986"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:23.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:23.989" endtime="20171005 01:09:23.990"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:23.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:23.990" endtime="20171005 01:09:23.991"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:23.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:23.991" endtime="20171005 01:09:23.991"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:23.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:23.992" endtime="20171005 01:09:23.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:23.993" endtime="20171005 01:09:24.214"></status>
</kw>
<msg timestamp="20171005 01:09:24.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:24.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.992" endtime="20171005 01:09:24.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.215" endtime="20171005 01:09:24.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.216" endtime="20171005 01:09:24.216"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.989" endtime="20171005 01:09:24.216"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.988" endtime="20171005 01:09:24.216"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.988" endtime="20171005 01:09:24.216"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:24.217" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" starttime="20171005 01:09:24.217" endtime="20171005 01:09:24.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.217" endtime="20171005 01:09:24.218"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:24.332" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 01:09:24.332" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.218" endtime="20171005 01:09:24.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.333" endtime="20171005 01:09:24.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:24.333" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:24.333" endtime="20171005 01:09:24.334"></status>
</kw>
<msg timestamp="20171005 01:09:24.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:23.987" endtime="20171005 01:09:24.334"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.334" endtime="20171005 01:09:24.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:24.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:24.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:24.335" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:24.335" endtime="20171005 01:09:24.335"></status>
</kw>
<msg timestamp="20171005 01:09:24.335" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20171005 01:09:23.987" endtime="20171005 01:09:24.336"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.336" endtime="20171005 01:09:24.336"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.336" endtime="20171005 01:09:24.337"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:23.986" endtime="20171005 01:09:24.337"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:24.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:24.340" endtime="20171005 01:09:24.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:24.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:24.341" endtime="20171005 01:09:24.341"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:24.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:24.341" endtime="20171005 01:09:24.342"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:24.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:24.342" endtime="20171005 01:09:24.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:24.343" endtime="20171005 01:09:24.544"></status>
</kw>
<msg timestamp="20171005 01:09:24.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:24.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.343" endtime="20171005 01:09:24.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.544" endtime="20171005 01:09:24.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.545" endtime="20171005 01:09:24.546"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.339" endtime="20171005 01:09:24.546"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.339" endtime="20171005 01:09:24.546"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.338" endtime="20171005 01:09:24.546"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:24.546" level="INFO">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status status="PASS" starttime="20171005 01:09:24.546" endtime="20171005 01:09:24.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.547" endtime="20171005 01:09:24.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:24.609" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 01:09:24.609" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.547" endtime="20171005 01:09:24.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.609" endtime="20171005 01:09:24.609"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:24.610" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:24.610" endtime="20171005 01:09:24.610"></status>
</kw>
<msg timestamp="20171005 01:09:24.610" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.337" endtime="20171005 01:09:24.610"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.611" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 01:09:24.611" endtime="20171005 01:09:24.611"></status>
</kw>
<msg timestamp="20171005 01:09:24.611" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" starttime="20171005 01:09:24.337" endtime="20171005 01:09:24.611"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 01:09:24.612" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 01:09:24.612" endtime="20171005 01:09:24.612"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.337" endtime="20171005 01:09:24.612"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.690" endtime="20171005 01:09:24.612"></status>
</kw>
<msg timestamp="20171005 01:09:24.612" level="INFO">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" starttime="20171005 01:09:22.397" endtime="20171005 01:09:24.612"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:24.615" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:24.615" endtime="20171005 01:09:24.615"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:24.616" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:24.616" endtime="20171005 01:09:24.616"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:24.617" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:24.617" endtime="20171005 01:09:24.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:24.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:24.617" endtime="20171005 01:09:24.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.803" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:24.618" endtime="20171005 01:09:24.803"></status>
</kw>
<msg timestamp="20171005 01:09:24.803" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:24.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.618" endtime="20171005 01:09:24.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.804" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.804" endtime="20171005 01:09:24.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:24.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.805" endtime="20171005 01:09:24.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.614" endtime="20171005 01:09:24.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.614" endtime="20171005 01:09:24.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.613" endtime="20171005 01:09:24.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:24.806" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status status="PASS" starttime="20171005 01:09:24.806" endtime="20171005 01:09:24.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.806" endtime="20171005 01:09:24.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:24.960" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg timestamp="20171005 01:09:24.961" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.807" endtime="20171005 01:09:24.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.961" endtime="20171005 01:09:24.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:24.962" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:24.962" endtime="20171005 01:09:24.962"></status>
</kw>
<msg timestamp="20171005 01:09:24.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.613" endtime="20171005 01:09:24.962"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:09:24.963" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:24.963" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:24.963" level="INFO">${json} = {u'data': {u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u...</msg>
<status status="PASS" starttime="20171005 01:09:24.963" endtime="20171005 01:09:24.963"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:24.963" endtime="20171005 01:09:24.964"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.613" endtime="20171005 01:09:24.964"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:24.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:24.966" endtime="20171005 01:09:24.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:24.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:24.967" endtime="20171005 01:09:24.967"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:24.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:24.968" endtime="20171005 01:09:24.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:24.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:24.968" endtime="20171005 01:09:24.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:25.188" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:24.970" endtime="20171005 01:09:25.188"></status>
</kw>
<msg timestamp="20171005 01:09:25.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:25.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.969" endtime="20171005 01:09:25.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:25.189" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:25.189" endtime="20171005 01:09:25.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:25.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:25.189" endtime="20171005 01:09:25.190"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.966" endtime="20171005 01:09:25.190"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.965" endtime="20171005 01:09:25.190"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.965" endtime="20171005 01:09:25.190"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:25.191" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" starttime="20171005 01:09:25.190" endtime="20171005 01:09:25.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:25.191" endtime="20171005 01:09:25.192"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:25.347" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20171005 01:09:25.347" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:25.192" endtime="20171005 01:09:25.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:25.348" endtime="20171005 01:09:25.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:25.349" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:25.348" endtime="20171005 01:09:25.349"></status>
</kw>
<msg timestamp="20171005 01:09:25.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:24.964" endtime="20171005 01:09:25.349"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:09:25.350" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:25.350" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:25.350" level="INFO">${json} = {u'data': {u'Priority': 0, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u...</msg>
<status status="PASS" starttime="20171005 01:09:25.349" endtime="20171005 01:09:25.350"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:25.350" endtime="20171005 01:09:25.350"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.964" endtime="20171005 01:09:25.351"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:24.612" endtime="20171005 01:09:25.351"></status>
</kw>
<msg timestamp="20171005 01:09:25.351" level="INFO">${software} = [{u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Purpose'...</msg>
<status status="PASS" starttime="20171005 01:09:22.396" endtime="20171005 01:09:25.351"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg timestamp="20171005 01:09:25.351" level="INFO">[{u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2'}, {u'Priority': 0, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a'}]</msg>
<status status="PASS" starttime="20171005 01:09:25.351" endtime="20171005 01:09:25.352"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.396" endtime="20171005 01:09:25.352"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:22.396" endtime="20171005 01:09:25.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 01:09:25.378" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:09:25.378" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:09:26.139" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171005 01:09:26.139" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171005 01:09:26.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:09:26.226" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171005 01:09:26.226" level="INFO">${stderr} = </msg>
<msg timestamp="20171005 01:09:26.226" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20171005 01:09:25.353" endtime="20171005 01:09:26.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:09:26.227" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 01:09:26.227" endtime="20171005 01:09:26.227"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 01:09:26.227" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20171005 01:09:26.227" endtime="20171005 01:09:26.227"></status>
</kw>
<msg timestamp="20171005 01:09:26.228" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20171005 01:09:25.353" endtime="20171005 01:09:26.228"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 01:09:26.228" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20171005 01:09:26.228" endtime="20171005 01:09:26.228"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:25.352" endtime="20171005 01:09:26.228"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:25.352" endtime="20171005 01:09:26.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 01:09:26.231" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171005 01:09:26.231" endtime="20171005 01:09:26.231"></status>
</kw>
<msg timestamp="20171005 01:09:26.231" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171005 01:09:26.230" endtime="20171005 01:09:26.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:26.232" endtime="20171005 01:09:26.232"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.232" endtime="20171005 01:09:26.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171005 01:09:26.235" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171005 01:09:26.234" endtime="20171005 01:09:26.235"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171005 01:09:26.235" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171005 01:09:26.235" endtime="20171005 01:09:26.235"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171005 01:09:26.236" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171005 01:09:26.236" endtime="20171005 01:09:26.236"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171005 01:09:26.238" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171005 01:09:26.238" endtime="20171005 01:09:26.238"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.234" endtime="20171005 01:09:26.238"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.233" endtime="20171005 01:09:26.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 01:09:26.240" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171005 01:09:26.239" endtime="20171005 01:09:26.240"></status>
</kw>
<msg timestamp="20171005 01:09:26.240" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171005 01:09:26.239" endtime="20171005 01:09:26.240"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:26.242" endtime="20171005 01:09:26.242"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:26.242" endtime="20171005 01:09:26.242"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.241" endtime="20171005 01:09:26.243"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.240" endtime="20171005 01:09:26.243"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 01:09:26.243" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 01:09:27.909" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171005 01:09:26.243" endtime="20171005 01:09:27.909"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.230" endtime="20171005 01:09:27.909"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:09:27.910" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20171005 01:09:27.986" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:09:27.987" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20171005 01:09:27.987" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:09:27.910" endtime="20171005 01:09:27.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:09:27.987" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 01:09:27.987" endtime="20171005 01:09:27.987"></status>
</kw>
<msg timestamp="20171005 01:09:27.988" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20171005 01:09:27.909" endtime="20171005 01:09:27.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:27.988" endtime="20171005 01:09:27.988"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.229" endtime="20171005 01:09:27.988"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:26.229" endtime="20171005 01:09:27.988"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:20.569" endtime="20171005 01:09:27.988"></status>
</kw>
<suite source="/tmp/fspcibld/2731/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/2731/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:28.030" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:28.029" endtime="20171005 01:09:28.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:28.031" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:28.030" endtime="20171005 01:09:28.031"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:28.031" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:28.031" endtime="20171005 01:09:28.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:28.032" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:28.032" endtime="20171005 01:09:28.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:28.239" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:28.033" endtime="20171005 01:09:28.239"></status>
</kw>
<msg timestamp="20171005 01:09:28.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:28.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:28.032" endtime="20171005 01:09:28.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:28.240" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:28.240" endtime="20171005 01:09:28.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:28.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:28.241" endtime="20171005 01:09:28.241"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.029" endtime="20171005 01:09:28.241"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.028" endtime="20171005 01:09:28.241"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.028" endtime="20171005 01:09:28.242"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.242" endtime="20171005 01:09:28.243"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171005 01:09:28.254" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171005 01:09:28.243" endtime="20171005 01:09:28.254"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171005 01:09:28.263" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20171005 01:09:28.254" endtime="20171005 01:09:28.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:09:28.265" level="INFO">${cur_time} = 2017-10-05 01:09:28:265185</msg>
<status status="PASS" starttime="20171005 01:09:28.265" endtime="20171005 01:09:28.265"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:09:28.266" level="INFO">${cur_time} = 20171005010928265185</msg>
<status status="PASS" starttime="20171005 01:09:28.266" endtime="20171005 01:09:28.266"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.265" endtime="20171005 01:09:28.266"></status>
</kw>
<msg timestamp="20171005 01:09:28.271" level="INFO">${FFDC_TIME} = 20171005010928265185</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 01:09:28.272" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20171005 01:09:28.272" endtime="20171005 01:09:28.272"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 01:09:28.273" level="INFO">${suite_name} = 20171005010928265185_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20171005 01:09:28.272" endtime="20171005 01:09:28.273"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 01:09:28.273" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20171005 01:09:28.273" endtime="20171005 01:09:28.273"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 01:09:28.274" level="INFO">${test_name} = 20171005010928265185_TestSSLConnection</msg>
<status status="PASS" starttime="20171005 01:09:28.274" endtime="20171005 01:09:28.274"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.271" endtime="20171005 01:09:28.274"></status>
</kw>
<msg timestamp="20171005 01:09:28.275" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2731/obmc-robot/logs/20171005010928265185_TestsSecurityTestSsl/20171005010928265185_TestSSLConnection/</msg>
<msg timestamp="20171005 01:09:28.279" level="INFO">${FFDC_PREFIX} = 20171005010928265185_</msg>
<status status="PASS" starttime="20171005 01:09:28.264" endtime="20171005 01:09:28.280"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.264" endtime="20171005 01:09:28.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.280" endtime="20171005 01:09:28.281"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:09:28.282" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs"&gt;/tmp/fspcibld/2731/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:09:28.281" endtime="20171005 01:09:28.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171005 01:09:28.283" level="FAIL">File '/tmp/fspcibld/2731/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20171005 01:09:28.282" endtime="20171005 01:09:28.283"></status>
</kw>
<msg timestamp="20171005 01:09:28.283" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20171005 01:09:28.282" endtime="20171005 01:09:28.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:09:28.284" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:09:28.284" endtime="20171005 01:09:28.284"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.283" endtime="20171005 01:09:28.284"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.285" endtime="20171005 01:09:28.285"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:09:28.286" level="INFO">${cur_time} = 2017-10-05 01:09:28:285634</msg>
<status status="PASS" starttime="20171005 01:09:28.285" endtime="20171005 01:09:28.286"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:09:28.286" level="INFO">${cur_time} = 20171005010928285634</msg>
<status status="PASS" starttime="20171005 01:09:28.286" endtime="20171005 01:09:28.286"></status>
</kw>
<msg timestamp="20171005 01:09:28.287" level="INFO">${cur_time} = 20171005010928285634</msg>
<status status="PASS" starttime="20171005 01:09:28.285" endtime="20171005 01:09:28.287"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:09:28.288" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:09:28.287" endtime="20171005 01:09:28.288"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.243" endtime="20171005 01:09:28.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.288" endtime="20171005 01:09:28.288"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.242" endtime="20171005 01:09:28.288"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20171005 01:09:28.027" critical="yes" endtime="20171005 01:09:28.289"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:28.289" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:28.289" endtime="20171005 01:09:28.290"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20171005 01:09:27.991" endtime="20171005 01:09:28.290"></status>
</suite>
<status status="PASS" starttime="20171005 01:09:27.989" endtime="20171005 01:09:28.291"></status>
</suite>
<suite source="/tmp/fspcibld/2731/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171005 01:09:28.334" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:09:28.334" endtime="20171005 01:09:28.334"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171005 01:09:28.335" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:09:28.335" endtime="20171005 01:09:28.335"></status>
</kw>
<msg timestamp="20171005 01:09:28.335" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:09:28.333" endtime="20171005 01:09:28.335"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171005 01:09:28.337" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:09:28.337" endtime="20171005 01:09:28.337"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171005 01:09:28.338" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:09:28.337" endtime="20171005 01:09:28.338"></status>
</kw>
<msg timestamp="20171005 01:09:28.338" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:09:28.336" endtime="20171005 01:09:28.338"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.339" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 01:09:28.339" endtime="20171005 01:09:28.339"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.339" endtime="20171005 01:09:28.340"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:28.346" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:09:28.348" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:09:28.348" level="INFO">${output} = /tmp/fspcibld/2731/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 01:09:28.340" endtime="20171005 01:09:28.348"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.351" endtime="20171005 01:09:28.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.353" endtime="20171005 01:09:28.353"></status>
</kw>
<msg timestamp="20171005 01:09:28.353" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 01:09:28.352" endtime="20171005 01:09:28.353"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.354" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:28.353" endtime="20171005 01:09:28.354"></status>
</kw>
<msg timestamp="20171005 01:09:28.354" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:28.338" endtime="20171005 01:09:28.354"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171005 01:09:28.355" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:28.354" endtime="20171005 01:09:28.355"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.355" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171005 01:09:28.355" endtime="20171005 01:09:28.355"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.356" endtime="20171005 01:09:28.387"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171005 01:09:28.393" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:09:28.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:09:28.409" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171005 01:09:28.388" endtime="20171005 01:09:28.409"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.415" endtime="20171005 01:09:28.417"></status>
</kw>
<msg timestamp="20171005 01:09:28.417" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171005 01:09:28.338" endtime="20171005 01:09:28.417"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.418" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20171005 01:09:28.417" endtime="20171005 01:09:28.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.418" endtime="20171005 01:09:28.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:28.420" level="INFO">${rc} = None</msg>
<msg timestamp="20171005 01:09:28.420" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20171005 01:09:28.419" endtime="20171005 01:09:28.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.420" endtime="20171005 01:09:28.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171005 01:09:28.423" level="FAIL">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status status="FAIL" starttime="20171005 01:09:28.422" endtime="20171005 01:09:28.423"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.422" endtime="20171005 01:09:28.423"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.421" endtime="20171005 01:09:28.423"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:28.423" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 01:09:28.423" endtime="20171005 01:09:28.423"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171005 01:09:28.424" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171005 01:09:28.424" endtime="20171005 01:09:28.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.425" endtime="20171005 01:09:28.480"></status>
</kw>
<msg timestamp="20171005 01:09:28.481" level="INFO">${rc} = 1</msg>
<msg timestamp="20171005 01:09:28.481" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" starttime="20171005 01:09:28.424" endtime="20171005 01:09:28.481"></status>
</kw>
<msg timestamp="20171005 01:09:28.482" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" starttime="20171005 01:09:28.335" endtime="20171005 01:09:28.482"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:09:28.483" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:09:28.483" endtime="20171005 01:09:28.483"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.485" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 01:09:28.484" endtime="20171005 01:09:28.485"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.485" endtime="20171005 01:09:28.485"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:28.490" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:09:28.493" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:09:28.493" level="INFO">${output} = /tmp/fspcibld/2731/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 01:09:28.486" endtime="20171005 01:09:28.494"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.496" endtime="20171005 01:09:28.497"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.499" endtime="20171005 01:09:28.499"></status>
</kw>
<msg timestamp="20171005 01:09:28.499" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 01:09:28.498" endtime="20171005 01:09:28.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.501" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:28.500" endtime="20171005 01:09:28.501"></status>
</kw>
<msg timestamp="20171005 01:09:28.501" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:28.484" endtime="20171005 01:09:28.501"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:28.502" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20171005 01:09:28.501" endtime="20171005 01:09:28.502"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.502" endtime="20171005 01:09:28.503"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:28.505" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20171005 01:09:28.510" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:09:28.511" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 01:09:28.503" endtime="20171005 01:09:28.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:28.513" endtime="20171005 01:09:28.516"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171005 01:09:29.517" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20171005 01:09:28.517" endtime="20171005 01:09:29.518"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:29.520" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 01:09:29.520" endtime="20171005 01:09:29.520"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:29.520" endtime="20171005 01:09:29.521"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:09:29.525" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:09:29.527" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:09:29.527" level="INFO">${output} = /tmp/fspcibld/2731/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 01:09:29.521" endtime="20171005 01:09:29.528"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:29.530" endtime="20171005 01:09:29.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:29.533" endtime="20171005 01:09:29.533"></status>
</kw>
<msg timestamp="20171005 01:09:29.533" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 01:09:29.532" endtime="20171005 01:09:29.533"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:29.534" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:29.533" endtime="20171005 01:09:29.534"></status>
</kw>
<msg timestamp="20171005 01:09:29.534" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:29.519" endtime="20171005 01:09:29.534"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171005 01:09:29.535" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:09:29.535" endtime="20171005 01:09:29.535"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:09:29.536" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171005 01:09:29.535" endtime="20171005 01:09:29.536"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:29.536" endtime="20171005 01:09:29.536"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171005 01:09:29.544" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:09:29.557" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:09:29.558" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 01:09:29.537" endtime="20171005 01:09:29.558"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:29.571" endtime="20171005 01:09:29.580"></status>
</kw>
<msg timestamp="20171005 01:09:29.581" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 01:09:29.518" endtime="20171005 01:09:29.581"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20171005 01:09:29.583" level="INFO">Length is 3</msg>
<status status="PASS" starttime="20171005 01:09:29.583" endtime="20171005 01:09:29.584"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:28.333" endtime="20171005 01:09:29.585"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20171005 01:09:29.587" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171005 01:09:29.593" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20171005 01:09:29.593" endtime="20171005 01:09:29.593"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:29.595" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171005 01:09:29.595" endtime="20171005 01:09:29.595"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:29.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:29.599" endtime="20171005 01:09:29.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:29.601" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:29.600" endtime="20171005 01:09:29.601"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:29.601" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:29.601" endtime="20171005 01:09:29.601"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:29.602" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:29.602" endtime="20171005 01:09:29.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:29.803" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:29.603" endtime="20171005 01:09:29.803"></status>
</kw>
<msg timestamp="20171005 01:09:29.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:29.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:29.603" endtime="20171005 01:09:29.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:29.804" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:29.804" endtime="20171005 01:09:29.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:29.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:29.805" endtime="20171005 01:09:29.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.598" endtime="20171005 01:09:29.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.598" endtime="20171005 01:09:29.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.596" endtime="20171005 01:09:29.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:29.806" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171005 01:09:29.806" endtime="20171005 01:09:29.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:29.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:29.806" endtime="20171005 01:09:29.807"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:29.807" endtime="20171005 01:09:29.807"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:29.809" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20171005 01:09:29.808" endtime="20171005 01:09:29.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:29.810" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171005 01:09:29.810" endtime="20171005 01:09:29.810"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.809" endtime="20171005 01:09:29.810"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.807" endtime="20171005 01:09:29.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:30.340" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 01:09:30.340" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:29.810" endtime="20171005 01:09:30.340"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:30.341" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:30.341" endtime="20171005 01:09:30.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:30.342" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:30.342" endtime="20171005 01:09:30.342"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.341" endtime="20171005 01:09:30.342"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.340" endtime="20171005 01:09:30.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:30.343" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:30.343" endtime="20171005 01:09:30.343"></status>
</kw>
<msg timestamp="20171005 01:09:30.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:29.596" endtime="20171005 01:09:30.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:30.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:30.343" endtime="20171005 01:09:30.344"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:09:30.344" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:30.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:30.345" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:30.344" endtime="20171005 01:09:30.345"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.594" endtime="20171005 01:09:30.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:30.345" endtime="20171005 01:09:30.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:30.351" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:30.351" endtime="20171005 01:09:30.352"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:30.352" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:30.352" endtime="20171005 01:09:30.352"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:30.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:30.352" endtime="20171005 01:09:30.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:30.353" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:30.353" endtime="20171005 01:09:30.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:30.924" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:30.354" endtime="20171005 01:09:30.924"></status>
</kw>
<msg timestamp="20171005 01:09:30.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:30.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:30.354" endtime="20171005 01:09:30.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:30.925" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:30.925" endtime="20171005 01:09:30.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:30.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:30.926" endtime="20171005 01:09:30.926"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.350" endtime="20171005 01:09:30.926"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.350" endtime="20171005 01:09:30.926"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.349" endtime="20171005 01:09:30.926"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:30.927" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:09:30.927" endtime="20171005 01:09:30.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:30.929" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:30.928" endtime="20171005 01:09:30.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:30.930" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:30.930" endtime="20171005 01:09:30.930"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.929" endtime="20171005 01:09:30.930"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.928" endtime="20171005 01:09:30.930"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.927" endtime="20171005 01:09:30.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:31.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:09:31.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:30.931" endtime="20171005 01:09:31.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:31.050" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:31.050" endtime="20171005 01:09:31.050"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:31.051" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:31.051" endtime="20171005 01:09:31.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.051" endtime="20171005 01:09:31.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.049" endtime="20171005 01:09:31.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.049" endtime="20171005 01:09:31.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:31.052" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:31.052" endtime="20171005 01:09:31.052"></status>
</kw>
<msg timestamp="20171005 01:09:31.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:30.348" endtime="20171005 01:09:31.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:31.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.053" endtime="20171005 01:09:31.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:31.054" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:31.054" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:31.054" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:31.053" endtime="20171005 01:09:31.054"></status>
</kw>
<msg timestamp="20171005 01:09:31.054" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:09:30.348" endtime="20171005 01:09:31.054"></status>
</kw>
<msg timestamp="20171005 01:09:31.055" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:09:30.347" endtime="20171005 01:09:31.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:31.055" endtime="20171005 01:09:31.055"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.347" endtime="20171005 01:09:31.055"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:31.059" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:31.059" endtime="20171005 01:09:31.059"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:31.060" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:31.060" endtime="20171005 01:09:31.060"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:31.061" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:31.060" endtime="20171005 01:09:31.061"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:31.061" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:31.061" endtime="20171005 01:09:31.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:31.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:31.062" endtime="20171005 01:09:31.428"></status>
</kw>
<msg timestamp="20171005 01:09:31.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:31.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.062" endtime="20171005 01:09:31.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:31.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.429" endtime="20171005 01:09:31.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:31.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.429" endtime="20171005 01:09:31.430"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.058" endtime="20171005 01:09:31.430"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.058" endtime="20171005 01:09:31.430"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.057" endtime="20171005 01:09:31.430"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:31.431" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171005 01:09:31.430" endtime="20171005 01:09:31.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:31.433" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:31.432" endtime="20171005 01:09:31.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:31.434" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:31.434" endtime="20171005 01:09:31.434"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.433" endtime="20171005 01:09:31.434"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.431" endtime="20171005 01:09:31.434"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.431" endtime="20171005 01:09:31.434"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:31.674" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171005 01:09:31.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.435" endtime="20171005 01:09:31.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:31.675" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:31.675" endtime="20171005 01:09:31.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:31.676" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:31.676" endtime="20171005 01:09:31.676"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.676" endtime="20171005 01:09:31.677"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.674" endtime="20171005 01:09:31.677"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.674" endtime="20171005 01:09:31.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:31.677" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:31.677" endtime="20171005 01:09:31.677"></status>
</kw>
<msg timestamp="20171005 01:09:31.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.057" endtime="20171005 01:09:31.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:31.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.678" endtime="20171005 01:09:31.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:31.679" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:31.679" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:31.679" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:31.678" endtime="20171005 01:09:31.679"></status>
</kw>
<msg timestamp="20171005 01:09:31.679" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20171005 01:09:31.056" endtime="20171005 01:09:31.679"></status>
</kw>
<msg timestamp="20171005 01:09:31.679" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20171005 01:09:31.055" endtime="20171005 01:09:31.680"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:31.680" endtime="20171005 01:09:31.680"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.347" endtime="20171005 01:09:31.680"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.346" endtime="20171005 01:09:31.680"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:30.346" endtime="20171005 01:09:31.680"></status>
</kw>
<msg timestamp="20171005 01:09:31.680" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:09:30.346" endtime="20171005 01:09:31.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:31.681" endtime="20171005 01:09:31.681"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:29.590" endtime="20171005 01:09:31.681"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171005 01:09:31.682" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20171005 01:09:31.682" endtime="20171005 01:09:31.682"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:31.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171005 01:09:31.683" endtime="20171005 01:09:31.684"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:31.686" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:31.686" endtime="20171005 01:09:31.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:31.687" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:31.687" endtime="20171005 01:09:31.687"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:31.688" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:31.687" endtime="20171005 01:09:31.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:31.688" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:31.688" endtime="20171005 01:09:31.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:32.052" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:31.689" endtime="20171005 01:09:32.052"></status>
</kw>
<msg timestamp="20171005 01:09:32.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:32.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.689" endtime="20171005 01:09:32.052"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:32.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:32.052" endtime="20171005 01:09:32.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:32.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:32.053" endtime="20171005 01:09:32.053"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.685" endtime="20171005 01:09:32.054"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.685" endtime="20171005 01:09:32.054"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.684" endtime="20171005 01:09:32.054"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:32.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171005 01:09:32.054" endtime="20171005 01:09:32.054"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:32.055" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:32.055" endtime="20171005 01:09:32.055"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:32.055" endtime="20171005 01:09:32.056"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:32.057" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20171005 01:09:32.056" endtime="20171005 01:09:32.057"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:32.058" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171005 01:09:32.058" endtime="20171005 01:09:32.058"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.057" endtime="20171005 01:09:32.058"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.056" endtime="20171005 01:09:32.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:32.619" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 01:09:32.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:32.059" endtime="20171005 01:09:32.619"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:32.620" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:32.619" endtime="20171005 01:09:32.620"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:32.621" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:32.621" endtime="20171005 01:09:32.621"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.620" endtime="20171005 01:09:32.621"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.619" endtime="20171005 01:09:32.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:32.622" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:32.622" endtime="20171005 01:09:32.622"></status>
</kw>
<msg timestamp="20171005 01:09:32.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:31.684" endtime="20171005 01:09:32.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:32.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:32.622" endtime="20171005 01:09:32.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 01:09:32.623" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:32.623" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:32.623" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:32.623" endtime="20171005 01:09:32.623"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:31.682" endtime="20171005 01:09:32.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:09:32.624" endtime="20171005 01:09:32.624"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:32.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:32.630" endtime="20171005 01:09:32.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:32.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:32.631" endtime="20171005 01:09:32.632"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:32.633" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:32.632" endtime="20171005 01:09:32.633"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:32.634" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:32.633" endtime="20171005 01:09:32.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:34.823" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:32.634" endtime="20171005 01:09:34.823"></status>
</kw>
<msg timestamp="20171005 01:09:34.823" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:34.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:32.634" endtime="20171005 01:09:34.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:34.824" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:34.824" endtime="20171005 01:09:34.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:34.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:34.824" endtime="20171005 01:09:34.825"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.629" endtime="20171005 01:09:34.825"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.629" endtime="20171005 01:09:34.825"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:32.627" endtime="20171005 01:09:34.825"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:34.826" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:09:34.825" endtime="20171005 01:09:34.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:34.828" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:34.827" endtime="20171005 01:09:34.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:34.829" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:34.829" endtime="20171005 01:09:34.829"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:34.828" endtime="20171005 01:09:34.829"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:34.827" endtime="20171005 01:09:34.829"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:34.826" endtime="20171005 01:09:34.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:09:44.842" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg timestamp="20171005 01:09:48.951" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:09:48.951" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:34.830" endtime="20171005 01:09:48.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:48.953" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:48.953" endtime="20171005 01:09:48.953"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:48.955" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:09:48.954" endtime="20171005 01:09:48.955"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:48.954" endtime="20171005 01:09:48.955"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:48.952" endtime="20171005 01:09:48.955"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:48.951" endtime="20171005 01:09:48.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:09:48.955" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:09:48.955" endtime="20171005 01:09:48.955"></status>
</kw>
<msg timestamp="20171005 01:09:48.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:32.626" endtime="20171005 01:09:48.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:48.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:48.956" endtime="20171005 01:09:48.956"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:09:48.957" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:09:48.957" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:09:48.957" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:09:48.957" endtime="20171005 01:09:48.957"></status>
</kw>
<msg timestamp="20171005 01:09:48.958" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:09:32.626" endtime="20171005 01:09:48.958"></status>
</kw>
<msg timestamp="20171005 01:09:48.958" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:09:32.625" endtime="20171005 01:09:48.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:09:48.958" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:09:48.958" endtime="20171005 01:09:48.959"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:32.625" endtime="20171005 01:09:48.959"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:32.625" endtime="20171005 01:09:48.959"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:09:58.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:09:58.965" endtime="20171005 01:09:58.966"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:09:58.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:09:58.966" endtime="20171005 01:09:58.967"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:09:58.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:09:58.967" endtime="20171005 01:09:58.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:09:58.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:09:58.968" endtime="20171005 01:09:58.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:09:59.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:09:58.970" endtime="20171005 01:09:59.406"></status>
</kw>
<msg timestamp="20171005 01:09:59.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:09:59.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:58.969" endtime="20171005 01:09:59.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:09:59.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:59.407" endtime="20171005 01:09:59.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:09:59.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:09:59.408" endtime="20171005 01:09:59.408"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:58.964" endtime="20171005 01:09:59.408"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:58.964" endtime="20171005 01:09:59.408"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:58.963" endtime="20171005 01:09:59.408"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:09:59.409" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:09:59.409" endtime="20171005 01:09:59.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:09:59.411" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:59.411" endtime="20171005 01:09:59.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:09:59.412" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:09:59.412" endtime="20171005 01:09:59.412"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:59.412" endtime="20171005 01:09:59.413"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:59.410" endtime="20171005 01:09:59.413"></status>
</kw>
<status status="PASS" starttime="20171005 01:09:59.409" endtime="20171005 01:09:59.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:10:00.060" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:10:00.060" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:59.413" endtime="20171005 01:10:00.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:00.062" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:00.061" endtime="20171005 01:10:00.062"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:00.063" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:00.063" endtime="20171005 01:10:00.063"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:00.062" endtime="20171005 01:10:00.063"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:00.061" endtime="20171005 01:10:00.063"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:00.060" endtime="20171005 01:10:00.063"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:10:00.064" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:10:00.063" endtime="20171005 01:10:00.064"></status>
</kw>
<msg timestamp="20171005 01:10:00.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:09:58.962" endtime="20171005 01:10:00.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:00.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:00.064" endtime="20171005 01:10:00.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:10:00.065" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:10:00.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:10:00.065" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:10:00.065" endtime="20171005 01:10:00.065"></status>
</kw>
<msg timestamp="20171005 01:10:00.066" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:09:58.961" endtime="20171005 01:10:00.066"></status>
</kw>
<msg timestamp="20171005 01:10:00.066" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:09:58.960" endtime="20171005 01:10:00.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:10:00.067" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:10:00.066" endtime="20171005 01:10:00.067"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:58.960" endtime="20171005 01:10:00.067"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:58.959" endtime="20171005 01:10:00.067"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:10:10.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:10:10.072" endtime="20171005 01:10:10.073"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:10:10.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:10:10.073" endtime="20171005 01:10:10.074"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:10:10.074" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:10:10.074" endtime="20171005 01:10:10.074"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:10:10.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:10:10.074" endtime="20171005 01:10:10.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:10:10.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:10:10.076" endtime="20171005 01:10:10.262"></status>
</kw>
<msg timestamp="20171005 01:10:10.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:10:10.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:10.075" endtime="20171005 01:10:10.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:10:10.263" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:10.262" endtime="20171005 01:10:10.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:10.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:10.263" endtime="20171005 01:10:10.264"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.072" endtime="20171005 01:10:10.264"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.071" endtime="20171005 01:10:10.264"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.070" endtime="20171005 01:10:10.264"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:10:10.264" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:10:10.264" endtime="20171005 01:10:10.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:10.267" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:10.266" endtime="20171005 01:10:10.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:10.267" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:10.267" endtime="20171005 01:10:10.268"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.267" endtime="20171005 01:10:10.268"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.265" endtime="20171005 01:10:10.268"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.265" endtime="20171005 01:10:10.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:10:10.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:10:10.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:10.268" endtime="20171005 01:10:10.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:10.344" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:10.340" endtime="20171005 01:10:10.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:10.345" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:10.345" endtime="20171005 01:10:10.345"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.344" endtime="20171005 01:10:10.345"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.340" endtime="20171005 01:10:10.345"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:10.339" endtime="20171005 01:10:10.345"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:10:10.346" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:10:10.346" endtime="20171005 01:10:10.346"></status>
</kw>
<msg timestamp="20171005 01:10:10.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:10.069" endtime="20171005 01:10:10.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:10.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:10.346" endtime="20171005 01:10:10.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:10:10.348" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:10:10.348" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:10:10.348" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:10:10.347" endtime="20171005 01:10:10.348"></status>
</kw>
<msg timestamp="20171005 01:10:10.348" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:10:10.069" endtime="20171005 01:10:10.349"></status>
</kw>
<msg timestamp="20171005 01:10:10.349" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:10:10.068" endtime="20171005 01:10:10.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:10:10.350" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:10:10.349" endtime="20171005 01:10:10.350"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:10.068" endtime="20171005 01:10:10.350"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:10.067" endtime="20171005 01:10:10.350"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:10:20.355" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:10:20.355" endtime="20171005 01:10:20.356"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:10:20.356" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:10:20.356" endtime="20171005 01:10:20.356"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:10:20.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:10:20.357" endtime="20171005 01:10:20.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:10:20.358" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:10:20.357" endtime="20171005 01:10:20.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:10:20.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:10:20.358" endtime="20171005 01:10:20.559"></status>
</kw>
<msg timestamp="20171005 01:10:20.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:10:20.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:20.358" endtime="20171005 01:10:20.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:10:20.560" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:20.560" endtime="20171005 01:10:20.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:20.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:20.560" endtime="20171005 01:10:20.561"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.354" endtime="20171005 01:10:20.561"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.354" endtime="20171005 01:10:20.561"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.353" endtime="20171005 01:10:20.561"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:10:20.562" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:10:20.561" endtime="20171005 01:10:20.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:20.564" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:20.563" endtime="20171005 01:10:20.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:20.566" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:20.565" endtime="20171005 01:10:20.566"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.564" endtime="20171005 01:10:20.566"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.563" endtime="20171005 01:10:20.566"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.562" endtime="20171005 01:10:20.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:10:20.634" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:10:20.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:20.566" endtime="20171005 01:10:20.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:20.636" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:20.635" endtime="20171005 01:10:20.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:20.637" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:20.637" endtime="20171005 01:10:20.637"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.636" endtime="20171005 01:10:20.637"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.635" endtime="20171005 01:10:20.637"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:20.635" endtime="20171005 01:10:20.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:10:20.638" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:10:20.638" endtime="20171005 01:10:20.638"></status>
</kw>
<msg timestamp="20171005 01:10:20.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:20.353" endtime="20171005 01:10:20.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:20.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:20.638" endtime="20171005 01:10:20.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:10:20.639" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:10:20.639" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:10:20.639" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:10:20.639" endtime="20171005 01:10:20.639"></status>
</kw>
<msg timestamp="20171005 01:10:20.640" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:10:20.352" endtime="20171005 01:10:20.640"></status>
</kw>
<msg timestamp="20171005 01:10:20.640" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:10:20.352" endtime="20171005 01:10:20.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:10:20.641" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:10:20.640" endtime="20171005 01:10:20.641"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:20.351" endtime="20171005 01:10:20.641"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:20.351" endtime="20171005 01:10:20.641"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:10:30.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:10:30.646" endtime="20171005 01:10:30.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:10:30.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:10:30.647" endtime="20171005 01:10:30.648"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:10:30.648" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:10:30.648" endtime="20171005 01:10:30.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:10:30.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:10:30.649" endtime="20171005 01:10:30.649"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:10:30.843" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:10:30.650" endtime="20171005 01:10:30.843"></status>
</kw>
<msg timestamp="20171005 01:10:30.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:10:30.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:30.649" endtime="20171005 01:10:30.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:10:30.844" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:30.843" endtime="20171005 01:10:30.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:30.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:30.844" endtime="20171005 01:10:30.845"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.645" endtime="20171005 01:10:30.845"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.645" endtime="20171005 01:10:30.845"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.644" endtime="20171005 01:10:30.845"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:10:30.846" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:10:30.845" endtime="20171005 01:10:30.846"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:30.848" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:30.847" endtime="20171005 01:10:30.848"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:30.849" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:30.848" endtime="20171005 01:10:30.849"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.848" endtime="20171005 01:10:30.849"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.846" endtime="20171005 01:10:30.849"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.846" endtime="20171005 01:10:30.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:10:30.998" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:10:30.999" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:30.849" endtime="20171005 01:10:30.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:31.000" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:31.000" endtime="20171005 01:10:31.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:31.002" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:31.001" endtime="20171005 01:10:31.002"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:31.001" endtime="20171005 01:10:31.002"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.999" endtime="20171005 01:10:31.002"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:30.999" endtime="20171005 01:10:31.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:10:31.003" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:10:31.003" endtime="20171005 01:10:31.003"></status>
</kw>
<msg timestamp="20171005 01:10:31.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:30.644" endtime="20171005 01:10:31.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:31.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:31.003" endtime="20171005 01:10:31.004"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:10:31.004" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:10:31.004" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:10:31.004" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:10:31.004" endtime="20171005 01:10:31.004"></status>
</kw>
<msg timestamp="20171005 01:10:31.005" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:10:30.643" endtime="20171005 01:10:31.005"></status>
</kw>
<msg timestamp="20171005 01:10:31.005" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:10:30.643" endtime="20171005 01:10:31.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:10:31.006" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:10:31.005" endtime="20171005 01:10:31.006"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:30.642" endtime="20171005 01:10:31.006"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:30.642" endtime="20171005 01:10:31.006"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:10:41.011" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:10:41.011" endtime="20171005 01:10:41.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:10:41.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:10:41.012" endtime="20171005 01:10:41.012"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:10:41.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:10:41.012" endtime="20171005 01:10:41.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:10:41.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:10:41.013" endtime="20171005 01:10:41.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:10:41.205" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:10:41.014" endtime="20171005 01:10:41.205"></status>
</kw>
<msg timestamp="20171005 01:10:41.205" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:10:41.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:41.014" endtime="20171005 01:10:41.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:10:41.206" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:41.206" endtime="20171005 01:10:41.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:41.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:41.206" endtime="20171005 01:10:41.207"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.010" endtime="20171005 01:10:41.207"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.010" endtime="20171005 01:10:41.207"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.009" endtime="20171005 01:10:41.207"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:10:41.208" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:10:41.207" endtime="20171005 01:10:41.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:41.210" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:41.209" endtime="20171005 01:10:41.210"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:41.211" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:41.211" endtime="20171005 01:10:41.211"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.210" endtime="20171005 01:10:41.211"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.209" endtime="20171005 01:10:41.211"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.208" endtime="20171005 01:10:41.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:10:41.287" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:10:41.287" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:41.211" endtime="20171005 01:10:41.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:41.289" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:41.288" endtime="20171005 01:10:41.289"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:41.289" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:41.289" endtime="20171005 01:10:41.290"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.289" endtime="20171005 01:10:41.290"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.288" endtime="20171005 01:10:41.290"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:41.287" endtime="20171005 01:10:41.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:10:41.290" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:10:41.290" endtime="20171005 01:10:41.290"></status>
</kw>
<msg timestamp="20171005 01:10:41.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:41.008" endtime="20171005 01:10:41.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:41.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:41.291" endtime="20171005 01:10:41.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:10:41.292" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:10:41.292" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:10:41.292" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:10:41.292" endtime="20171005 01:10:41.292"></status>
</kw>
<msg timestamp="20171005 01:10:41.293" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:10:41.008" endtime="20171005 01:10:41.293"></status>
</kw>
<msg timestamp="20171005 01:10:41.293" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:10:41.007" endtime="20171005 01:10:41.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:10:41.294" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:10:41.294" endtime="20171005 01:10:41.294"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:41.007" endtime="20171005 01:10:41.295"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:41.006" endtime="20171005 01:10:41.295"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:10:51.300" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:10:51.300" endtime="20171005 01:10:51.300"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:10:51.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:10:51.300" endtime="20171005 01:10:51.301"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:10:51.301" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:10:51.301" endtime="20171005 01:10:51.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:10:51.302" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:10:51.302" endtime="20171005 01:10:51.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:10:51.478" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:10:51.303" endtime="20171005 01:10:51.478"></status>
</kw>
<msg timestamp="20171005 01:10:51.478" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:10:51.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:51.303" endtime="20171005 01:10:51.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:10:51.479" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:51.479" endtime="20171005 01:10:51.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:51.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:51.479" endtime="20171005 01:10:51.480"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.299" endtime="20171005 01:10:51.480"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.298" endtime="20171005 01:10:51.480"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.298" endtime="20171005 01:10:51.480"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:10:51.481" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:10:51.480" endtime="20171005 01:10:51.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:51.483" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:51.482" endtime="20171005 01:10:51.483"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:51.484" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:10:51.484" endtime="20171005 01:10:51.484"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.483" endtime="20171005 01:10:51.484"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.482" endtime="20171005 01:10:51.484"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.481" endtime="20171005 01:10:51.484"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:10:51.573" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:10:51.573" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:51.485" endtime="20171005 01:10:51.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:10:51.575" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:51.574" endtime="20171005 01:10:51.575"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:10:51.576" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:10:51.576" endtime="20171005 01:10:51.576"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.575" endtime="20171005 01:10:51.576"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.574" endtime="20171005 01:10:51.577"></status>
</kw>
<status status="PASS" starttime="20171005 01:10:51.573" endtime="20171005 01:10:51.577"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:10:51.577" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:10:51.577" endtime="20171005 01:10:51.577"></status>
</kw>
<msg timestamp="20171005 01:10:51.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:10:51.297" endtime="20171005 01:10:51.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:10:51.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:10:51.578" endtime="20171005 01:10:51.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:10:51.579" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:10:51.579" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:10:51.579" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:10:51.578" endtime="20171005 01:10:51.579"></status>
</kw>
<msg timestamp="20171005 01:10:51.579" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:10:51.296" endtime="20171005 01:10:51.579"></status>
</kw>
<msg timestamp="20171005 01:10:51.580" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:10:51.296" endtime="20171005 01:10:51.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:10:51.580" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:10:51.580" endtime="20171005 01:10:51.580"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:51.296" endtime="20171005 01:10:51.580"></status>
</kw>
<status status="FAIL" starttime="20171005 01:10:51.295" endtime="20171005 01:10:51.581"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:11:01.586" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:11:01.585" endtime="20171005 01:11:01.586"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:11:01.587" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:11:01.586" endtime="20171005 01:11:01.587"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:11:01.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:11:01.587" endtime="20171005 01:11:01.587"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:11:01.588" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:11:01.588" endtime="20171005 01:11:01.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:11:01.840" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:11:01.589" endtime="20171005 01:11:01.840"></status>
</kw>
<msg timestamp="20171005 01:11:01.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:11:01.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:01.588" endtime="20171005 01:11:01.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:11:01.841" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:01.841" endtime="20171005 01:11:01.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:01.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:01.842" endtime="20171005 01:11:01.842"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.585" endtime="20171005 01:11:01.842"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.584" endtime="20171005 01:11:01.842"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.584" endtime="20171005 01:11:01.843"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:11:01.843" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:11:01.843" endtime="20171005 01:11:01.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:01.845" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:01.845" endtime="20171005 01:11:01.845"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:01.846" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:01.846" endtime="20171005 01:11:01.846"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.845" endtime="20171005 01:11:01.846"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.844" endtime="20171005 01:11:01.846"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.843" endtime="20171005 01:11:01.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:11:01.933" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:11:01.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:01.847" endtime="20171005 01:11:01.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:01.935" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:01.935" endtime="20171005 01:11:01.935"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:01.936" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:01.936" endtime="20171005 01:11:01.936"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.935" endtime="20171005 01:11:01.936"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.934" endtime="20171005 01:11:01.937"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:01.934" endtime="20171005 01:11:01.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:11:01.937" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:11:01.937" endtime="20171005 01:11:01.937"></status>
</kw>
<msg timestamp="20171005 01:11:01.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:01.583" endtime="20171005 01:11:01.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:01.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:01.938" endtime="20171005 01:11:01.938"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:11:01.939" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:11:01.939" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:11:01.939" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:11:01.938" endtime="20171005 01:11:01.939"></status>
</kw>
<msg timestamp="20171005 01:11:01.939" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:11:01.582" endtime="20171005 01:11:01.939"></status>
</kw>
<msg timestamp="20171005 01:11:01.939" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:11:01.582" endtime="20171005 01:11:01.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:11:01.940" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:11:01.940" endtime="20171005 01:11:01.940"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:01.582" endtime="20171005 01:11:01.940"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:01.581" endtime="20171005 01:11:01.940"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:11:11.946" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:11:11.946" endtime="20171005 01:11:11.947"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:11:11.947" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:11:11.947" endtime="20171005 01:11:11.947"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:11:11.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:11:11.947" endtime="20171005 01:11:11.948"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:11:11.948" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:11:11.948" endtime="20171005 01:11:11.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:11:12.145" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:11:11.949" endtime="20171005 01:11:12.145"></status>
</kw>
<msg timestamp="20171005 01:11:12.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:11:12.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:11.949" endtime="20171005 01:11:12.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:11:12.146" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:12.146" endtime="20171005 01:11:12.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:12.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:12.146" endtime="20171005 01:11:12.147"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:11.945" endtime="20171005 01:11:12.147"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:11.944" endtime="20171005 01:11:12.147"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:11.944" endtime="20171005 01:11:12.147"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:11:12.148" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:11:12.147" endtime="20171005 01:11:12.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:12.150" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:12.149" endtime="20171005 01:11:12.150"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:12.151" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:12.151" endtime="20171005 01:11:12.151"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:12.150" endtime="20171005 01:11:12.151"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:12.149" endtime="20171005 01:11:12.151"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:12.148" endtime="20171005 01:11:12.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:11:12.230" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:11:12.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:12.152" endtime="20171005 01:11:12.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:12.232" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:12.232" endtime="20171005 01:11:12.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:12.234" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:12.233" endtime="20171005 01:11:12.234"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:12.233" endtime="20171005 01:11:12.234"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:12.231" endtime="20171005 01:11:12.234"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:12.231" endtime="20171005 01:11:12.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:11:12.234" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:11:12.234" endtime="20171005 01:11:12.235"></status>
</kw>
<msg timestamp="20171005 01:11:12.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:11.943" endtime="20171005 01:11:12.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:12.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:12.235" endtime="20171005 01:11:12.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:11:12.236" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:11:12.236" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:11:12.236" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:11:12.236" endtime="20171005 01:11:12.236"></status>
</kw>
<msg timestamp="20171005 01:11:12.236" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:11:11.942" endtime="20171005 01:11:12.236"></status>
</kw>
<msg timestamp="20171005 01:11:12.237" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:11:11.942" endtime="20171005 01:11:12.237"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:11:12.237" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:11:12.237" endtime="20171005 01:11:12.237"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:11.942" endtime="20171005 01:11:12.238"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:11.941" endtime="20171005 01:11:12.238"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:11:22.243" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:11:22.243" endtime="20171005 01:11:22.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:11:22.244" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:11:22.244" endtime="20171005 01:11:22.244"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:11:22.245" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:11:22.244" endtime="20171005 01:11:22.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:11:22.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:11:22.245" endtime="20171005 01:11:22.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:11:22.430" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:11:22.246" endtime="20171005 01:11:22.430"></status>
</kw>
<msg timestamp="20171005 01:11:22.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:11:22.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:22.246" endtime="20171005 01:11:22.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:11:22.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:22.431" endtime="20171005 01:11:22.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:22.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:22.432" endtime="20171005 01:11:22.432"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.242" endtime="20171005 01:11:22.432"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.242" endtime="20171005 01:11:22.432"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.241" endtime="20171005 01:11:22.432"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:11:22.433" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:11:22.433" endtime="20171005 01:11:22.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:22.435" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:22.434" endtime="20171005 01:11:22.435"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:22.436" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:22.436" endtime="20171005 01:11:22.436"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.435" endtime="20171005 01:11:22.436"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.434" endtime="20171005 01:11:22.436"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.433" endtime="20171005 01:11:22.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:11:22.525" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:11:22.526" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:22.437" endtime="20171005 01:11:22.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:22.527" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:22.527" endtime="20171005 01:11:22.527"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:22.528" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:22.528" endtime="20171005 01:11:22.528"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.528" endtime="20171005 01:11:22.529"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.526" endtime="20171005 01:11:22.529"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:22.526" endtime="20171005 01:11:22.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:11:22.529" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:11:22.529" endtime="20171005 01:11:22.529"></status>
</kw>
<msg timestamp="20171005 01:11:22.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:22.241" endtime="20171005 01:11:22.529"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:22.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:22.530" endtime="20171005 01:11:22.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:11:22.531" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:11:22.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:11:22.531" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:11:22.530" endtime="20171005 01:11:22.531"></status>
</kw>
<msg timestamp="20171005 01:11:22.531" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:11:22.240" endtime="20171005 01:11:22.531"></status>
</kw>
<msg timestamp="20171005 01:11:22.531" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:11:22.240" endtime="20171005 01:11:22.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:11:22.532" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:11:22.532" endtime="20171005 01:11:22.532"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:22.239" endtime="20171005 01:11:22.532"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:22.238" endtime="20171005 01:11:22.533"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:11:32.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:11:32.538" endtime="20171005 01:11:32.538"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:11:32.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:11:32.539" endtime="20171005 01:11:32.539"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:11:32.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:11:32.539" endtime="20171005 01:11:32.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:11:32.540" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:11:32.540" endtime="20171005 01:11:32.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:11:32.738" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:11:32.541" endtime="20171005 01:11:32.738"></status>
</kw>
<msg timestamp="20171005 01:11:32.738" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:11:32.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:32.541" endtime="20171005 01:11:32.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:11:32.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:32.740" endtime="20171005 01:11:32.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:32.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:32.741" endtime="20171005 01:11:32.741"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.537" endtime="20171005 01:11:32.741"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.536" endtime="20171005 01:11:32.741"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.536" endtime="20171005 01:11:32.741"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:11:32.742" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:11:32.742" endtime="20171005 01:11:32.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:32.744" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:32.744" endtime="20171005 01:11:32.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:32.745" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:32.745" endtime="20171005 01:11:32.745"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.744" endtime="20171005 01:11:32.745"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.743" endtime="20171005 01:11:32.746"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.742" endtime="20171005 01:11:32.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:11:32.808" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:11:32.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:32.746" endtime="20171005 01:11:32.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:32.810" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:32.810" endtime="20171005 01:11:32.810"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:32.816" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:32.816" endtime="20171005 01:11:32.816"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.810" endtime="20171005 01:11:32.816"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.809" endtime="20171005 01:11:32.816"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:32.809" endtime="20171005 01:11:32.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:11:32.817" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:11:32.817" endtime="20171005 01:11:32.817"></status>
</kw>
<msg timestamp="20171005 01:11:32.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:32.535" endtime="20171005 01:11:32.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:32.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:32.817" endtime="20171005 01:11:32.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:11:32.818" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:11:32.818" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:11:32.819" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:11:32.818" endtime="20171005 01:11:32.819"></status>
</kw>
<msg timestamp="20171005 01:11:32.819" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:11:32.534" endtime="20171005 01:11:32.819"></status>
</kw>
<msg timestamp="20171005 01:11:32.819" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:11:32.534" endtime="20171005 01:11:32.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:11:32.820" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:11:32.820" endtime="20171005 01:11:32.820"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:32.534" endtime="20171005 01:11:32.820"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:32.533" endtime="20171005 01:11:32.820"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:11:42.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:11:42.825" endtime="20171005 01:11:42.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:11:42.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:11:42.826" endtime="20171005 01:11:42.826"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:11:42.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:11:42.827" endtime="20171005 01:11:42.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:11:42.828" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:11:42.827" endtime="20171005 01:11:42.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:11:43.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:11:42.829" endtime="20171005 01:11:43.026"></status>
</kw>
<msg timestamp="20171005 01:11:43.026" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:11:43.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:42.828" endtime="20171005 01:11:43.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:11:43.027" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:43.026" endtime="20171005 01:11:43.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:43.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:43.027" endtime="20171005 01:11:43.028"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:42.825" endtime="20171005 01:11:43.028"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:42.824" endtime="20171005 01:11:43.028"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:42.823" endtime="20171005 01:11:43.028"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:11:43.029" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:11:43.028" endtime="20171005 01:11:43.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:43.031" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:43.030" endtime="20171005 01:11:43.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:43.032" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:43.032" endtime="20171005 01:11:43.032"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:43.031" endtime="20171005 01:11:43.032"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:43.029" endtime="20171005 01:11:43.032"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:43.029" endtime="20171005 01:11:43.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:11:43.095" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:11:43.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:43.033" endtime="20171005 01:11:43.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:43.097" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:43.097" endtime="20171005 01:11:43.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:43.098" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:43.098" endtime="20171005 01:11:43.098"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:43.098" endtime="20171005 01:11:43.099"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:43.096" endtime="20171005 01:11:43.099"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:43.096" endtime="20171005 01:11:43.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:11:43.099" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:11:43.099" endtime="20171005 01:11:43.099"></status>
</kw>
<msg timestamp="20171005 01:11:43.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:42.823" endtime="20171005 01:11:43.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:43.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:43.100" endtime="20171005 01:11:43.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:11:43.101" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:11:43.101" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:11:43.101" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:11:43.100" endtime="20171005 01:11:43.101"></status>
</kw>
<msg timestamp="20171005 01:11:43.101" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:11:42.822" endtime="20171005 01:11:43.101"></status>
</kw>
<msg timestamp="20171005 01:11:43.101" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:11:42.822" endtime="20171005 01:11:43.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:11:43.102" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:11:43.102" endtime="20171005 01:11:43.102"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:42.821" endtime="20171005 01:11:43.102"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:42.821" endtime="20171005 01:11:43.103"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:11:53.108" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:11:53.108" endtime="20171005 01:11:53.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:11:53.109" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:11:53.109" endtime="20171005 01:11:53.109"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:11:53.110" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:11:53.109" endtime="20171005 01:11:53.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:11:53.110" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:11:53.110" endtime="20171005 01:11:53.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:11:53.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:11:53.111" endtime="20171005 01:11:53.292"></status>
</kw>
<msg timestamp="20171005 01:11:53.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:11:53.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:53.111" endtime="20171005 01:11:53.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:11:53.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:53.293" endtime="20171005 01:11:53.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:53.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:53.293" endtime="20171005 01:11:53.294"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.107" endtime="20171005 01:11:53.294"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.106" endtime="20171005 01:11:53.294"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.106" endtime="20171005 01:11:53.294"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:11:53.295" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:11:53.294" endtime="20171005 01:11:53.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:53.297" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:53.296" endtime="20171005 01:11:53.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:53.298" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:11:53.298" endtime="20171005 01:11:53.298"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.297" endtime="20171005 01:11:53.298"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.295" endtime="20171005 01:11:53.298"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.295" endtime="20171005 01:11:53.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:11:53.363" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:11:53.363" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:53.298" endtime="20171005 01:11:53.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:11:53.365" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:53.365" endtime="20171005 01:11:53.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:11:53.367" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:11:53.366" endtime="20171005 01:11:53.367"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.365" endtime="20171005 01:11:53.367"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.364" endtime="20171005 01:11:53.367"></status>
</kw>
<status status="PASS" starttime="20171005 01:11:53.364" endtime="20171005 01:11:53.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:11:53.367" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:11:53.367" endtime="20171005 01:11:53.367"></status>
</kw>
<msg timestamp="20171005 01:11:53.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:11:53.105" endtime="20171005 01:11:53.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:11:53.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:11:53.368" endtime="20171005 01:11:53.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:11:53.369" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:11:53.369" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:11:53.369" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:11:53.369" endtime="20171005 01:11:53.369"></status>
</kw>
<msg timestamp="20171005 01:11:53.370" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:11:53.104" endtime="20171005 01:11:53.370"></status>
</kw>
<msg timestamp="20171005 01:11:53.370" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:11:53.104" endtime="20171005 01:11:53.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:11:53.371" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:11:53.370" endtime="20171005 01:11:53.371"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:53.104" endtime="20171005 01:11:53.371"></status>
</kw>
<status status="FAIL" starttime="20171005 01:11:53.103" endtime="20171005 01:11:53.371"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:12:03.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:12:03.376" endtime="20171005 01:12:03.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:12:03.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:12:03.377" endtime="20171005 01:12:03.377"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:12:03.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:12:03.378" endtime="20171005 01:12:03.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:12:03.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:12:03.378" endtime="20171005 01:12:03.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:12:03.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:12:03.379" endtime="20171005 01:12:03.598"></status>
</kw>
<msg timestamp="20171005 01:12:03.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:12:03.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:03.379" endtime="20171005 01:12:03.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:12:03.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:03.599" endtime="20171005 01:12:03.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:03.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:03.599" endtime="20171005 01:12:03.600"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.375" endtime="20171005 01:12:03.600"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.375" endtime="20171005 01:12:03.600"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.374" endtime="20171005 01:12:03.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:12:03.601" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:12:03.600" endtime="20171005 01:12:03.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:03.603" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:03.602" endtime="20171005 01:12:03.603"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:03.604" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:03.604" endtime="20171005 01:12:03.604"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.603" endtime="20171005 01:12:03.604"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.602" endtime="20171005 01:12:03.604"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.601" endtime="20171005 01:12:03.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:12:03.666" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:12:03.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:03.605" endtime="20171005 01:12:03.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:03.668" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:03.668" endtime="20171005 01:12:03.668"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:03.669" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:03.669" endtime="20171005 01:12:03.670"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.669" endtime="20171005 01:12:03.670"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.667" endtime="20171005 01:12:03.670"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:03.667" endtime="20171005 01:12:03.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:12:03.670" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:12:03.670" endtime="20171005 01:12:03.670"></status>
</kw>
<msg timestamp="20171005 01:12:03.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:03.373" endtime="20171005 01:12:03.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:03.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:03.671" endtime="20171005 01:12:03.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:12:03.672" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:12:03.672" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:12:03.672" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:12:03.672" endtime="20171005 01:12:03.672"></status>
</kw>
<msg timestamp="20171005 01:12:03.672" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:12:03.373" endtime="20171005 01:12:03.672"></status>
</kw>
<msg timestamp="20171005 01:12:03.673" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:12:03.372" endtime="20171005 01:12:03.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:12:03.673" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:12:03.673" endtime="20171005 01:12:03.673"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:03.372" endtime="20171005 01:12:03.674"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:03.371" endtime="20171005 01:12:03.674"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:12:13.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:12:13.679" endtime="20171005 01:12:13.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:12:13.680" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:12:13.680" endtime="20171005 01:12:13.680"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:12:13.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:12:13.680" endtime="20171005 01:12:13.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:12:13.681" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:12:13.681" endtime="20171005 01:12:13.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:12:13.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:12:13.682" endtime="20171005 01:12:13.909"></status>
</kw>
<msg timestamp="20171005 01:12:13.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:12:13.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:13.682" endtime="20171005 01:12:13.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:12:13.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:13.909" endtime="20171005 01:12:13.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:13.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:13.910" endtime="20171005 01:12:13.910"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.678" endtime="20171005 01:12:13.911"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.677" endtime="20171005 01:12:13.911"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.677" endtime="20171005 01:12:13.911"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:12:13.911" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:12:13.911" endtime="20171005 01:12:13.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:13.914" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:13.913" endtime="20171005 01:12:13.914"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:13.916" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:13.915" endtime="20171005 01:12:13.916"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.915" endtime="20171005 01:12:13.916"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.912" endtime="20171005 01:12:13.916"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.912" endtime="20171005 01:12:13.916"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:12:13.979" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:12:13.979" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:13.916" endtime="20171005 01:12:13.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:13.981" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:13.980" endtime="20171005 01:12:13.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:13.982" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:13.982" endtime="20171005 01:12:13.982"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.981" endtime="20171005 01:12:13.982"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.980" endtime="20171005 01:12:13.982"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:13.979" endtime="20171005 01:12:13.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:12:13.983" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:12:13.983" endtime="20171005 01:12:13.983"></status>
</kw>
<msg timestamp="20171005 01:12:13.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:13.676" endtime="20171005 01:12:13.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:13.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:13.984" endtime="20171005 01:12:13.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:12:13.985" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:12:13.985" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:12:13.985" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:12:13.984" endtime="20171005 01:12:13.985"></status>
</kw>
<msg timestamp="20171005 01:12:13.985" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:12:13.675" endtime="20171005 01:12:13.985"></status>
</kw>
<msg timestamp="20171005 01:12:13.985" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:12:13.675" endtime="20171005 01:12:13.985"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:12:13.986" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:12:13.986" endtime="20171005 01:12:13.986"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:13.675" endtime="20171005 01:12:13.986"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:13.674" endtime="20171005 01:12:13.986"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:12:23.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:12:23.991" endtime="20171005 01:12:23.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:12:23.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:12:23.992" endtime="20171005 01:12:23.992"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:12:23.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:12:23.992" endtime="20171005 01:12:23.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:12:23.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:12:23.993" endtime="20171005 01:12:23.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:12:24.256" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:12:23.994" endtime="20171005 01:12:24.256"></status>
</kw>
<msg timestamp="20171005 01:12:24.256" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:12:24.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:23.994" endtime="20171005 01:12:24.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:12:24.257" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:24.257" endtime="20171005 01:12:24.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:24.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:24.257" endtime="20171005 01:12:24.258"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:23.990" endtime="20171005 01:12:24.258"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:23.990" endtime="20171005 01:12:24.258"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:23.989" endtime="20171005 01:12:24.259"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:12:24.259" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:12:24.259" endtime="20171005 01:12:24.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:24.263" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:24.262" endtime="20171005 01:12:24.263"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:24.264" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:24.264" endtime="20171005 01:12:24.264"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:24.263" endtime="20171005 01:12:24.264"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:24.261" endtime="20171005 01:12:24.264"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:24.260" endtime="20171005 01:12:24.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:12:24.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:12:24.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:24.265" endtime="20171005 01:12:24.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:24.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:24.367" endtime="20171005 01:12:24.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:24.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:24.368" endtime="20171005 01:12:24.369"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:24.368" endtime="20171005 01:12:24.369"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:24.367" endtime="20171005 01:12:24.369"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:24.366" endtime="20171005 01:12:24.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:12:24.369" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:12:24.369" endtime="20171005 01:12:24.370"></status>
</kw>
<msg timestamp="20171005 01:12:24.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:23.989" endtime="20171005 01:12:24.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:24.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:24.370" endtime="20171005 01:12:24.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:12:24.371" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:12:24.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:12:24.371" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:12:24.371" endtime="20171005 01:12:24.371"></status>
</kw>
<msg timestamp="20171005 01:12:24.371" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:12:23.988" endtime="20171005 01:12:24.372"></status>
</kw>
<msg timestamp="20171005 01:12:24.372" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:12:23.988" endtime="20171005 01:12:24.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:12:24.373" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:12:24.372" endtime="20171005 01:12:24.373"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:23.987" endtime="20171005 01:12:24.373"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:23.987" endtime="20171005 01:12:24.373"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:12:34.379" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:12:34.378" endtime="20171005 01:12:34.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:12:34.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:12:34.379" endtime="20171005 01:12:34.380"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:12:34.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:12:34.380" endtime="20171005 01:12:34.380"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:12:34.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:12:34.381" endtime="20171005 01:12:34.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:12:34.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:12:34.382" endtime="20171005 01:12:34.637"></status>
</kw>
<msg timestamp="20171005 01:12:34.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:12:34.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:34.381" endtime="20171005 01:12:34.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:12:34.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:34.637" endtime="20171005 01:12:34.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:34.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:34.638" endtime="20171005 01:12:34.638"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.377" endtime="20171005 01:12:34.639"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.377" endtime="20171005 01:12:34.639"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.376" endtime="20171005 01:12:34.639"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:12:34.639" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:12:34.639" endtime="20171005 01:12:34.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:34.641" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:34.641" endtime="20171005 01:12:34.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:34.643" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:34.642" endtime="20171005 01:12:34.643"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.642" endtime="20171005 01:12:34.643"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.640" endtime="20171005 01:12:34.643"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.640" endtime="20171005 01:12:34.643"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:12:34.721" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:12:34.721" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:34.644" endtime="20171005 01:12:34.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:34.723" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:34.722" endtime="20171005 01:12:34.723"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:34.724" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:34.723" endtime="20171005 01:12:34.724"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.723" endtime="20171005 01:12:34.724"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.722" endtime="20171005 01:12:34.724"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:34.721" endtime="20171005 01:12:34.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:12:34.725" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:12:34.725" endtime="20171005 01:12:34.725"></status>
</kw>
<msg timestamp="20171005 01:12:34.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:34.376" endtime="20171005 01:12:34.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:34.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:34.725" endtime="20171005 01:12:34.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:12:34.726" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:12:34.726" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:12:34.727" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:12:34.726" endtime="20171005 01:12:34.727"></status>
</kw>
<msg timestamp="20171005 01:12:34.727" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:12:34.375" endtime="20171005 01:12:34.727"></status>
</kw>
<msg timestamp="20171005 01:12:34.727" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:12:34.375" endtime="20171005 01:12:34.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:12:34.728" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:12:34.727" endtime="20171005 01:12:34.728"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:34.374" endtime="20171005 01:12:34.728"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:34.374" endtime="20171005 01:12:34.728"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:12:44.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:12:44.735" endtime="20171005 01:12:44.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:12:44.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:12:44.736" endtime="20171005 01:12:44.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:12:44.737" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:12:44.737" endtime="20171005 01:12:44.737"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:12:44.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:12:44.738" endtime="20171005 01:12:44.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:12:44.924" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:12:44.739" endtime="20171005 01:12:44.924"></status>
</kw>
<msg timestamp="20171005 01:12:44.924" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:12:44.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:44.739" endtime="20171005 01:12:44.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:12:44.925" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:44.925" endtime="20171005 01:12:44.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:44.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:44.925" endtime="20171005 01:12:44.926"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:44.735" endtime="20171005 01:12:44.926"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:44.734" endtime="20171005 01:12:44.926"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:44.733" endtime="20171005 01:12:44.926"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:12:44.927" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:12:44.926" endtime="20171005 01:12:44.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:44.929" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:44.928" endtime="20171005 01:12:44.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:44.930" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:44.930" endtime="20171005 01:12:44.930"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:44.929" endtime="20171005 01:12:44.930"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:44.928" endtime="20171005 01:12:44.930"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:44.927" endtime="20171005 01:12:44.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:12:45.030" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:12:45.030" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:44.931" endtime="20171005 01:12:45.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:45.032" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:45.032" endtime="20171005 01:12:45.032"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:45.033" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:45.033" endtime="20171005 01:12:45.033"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:45.032" endtime="20171005 01:12:45.033"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:45.031" endtime="20171005 01:12:45.034"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:45.031" endtime="20171005 01:12:45.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:12:45.034" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:12:45.034" endtime="20171005 01:12:45.034"></status>
</kw>
<msg timestamp="20171005 01:12:45.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:44.732" endtime="20171005 01:12:45.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:45.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:45.035" endtime="20171005 01:12:45.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:12:45.036" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:12:45.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:12:45.036" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:12:45.035" endtime="20171005 01:12:45.036"></status>
</kw>
<msg timestamp="20171005 01:12:45.036" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:12:44.731" endtime="20171005 01:12:45.036"></status>
</kw>
<msg timestamp="20171005 01:12:45.036" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:12:44.731" endtime="20171005 01:12:45.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:12:45.037" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:12:45.037" endtime="20171005 01:12:45.037"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:44.731" endtime="20171005 01:12:45.037"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:44.729" endtime="20171005 01:12:45.037"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:12:55.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:12:55.043" endtime="20171005 01:12:55.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:12:55.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:12:55.044" endtime="20171005 01:12:55.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:12:55.045" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:12:55.045" endtime="20171005 01:12:55.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:12:55.046" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:12:55.045" endtime="20171005 01:12:55.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:12:55.232" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:12:55.046" endtime="20171005 01:12:55.232"></status>
</kw>
<msg timestamp="20171005 01:12:55.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:12:55.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:55.046" endtime="20171005 01:12:55.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:12:55.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:55.232" endtime="20171005 01:12:55.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:55.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:55.233" endtime="20171005 01:12:55.233"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.042" endtime="20171005 01:12:55.234"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.041" endtime="20171005 01:12:55.234"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.041" endtime="20171005 01:12:55.234"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:12:55.234" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:12:55.234" endtime="20171005 01:12:55.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:55.237" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:55.236" endtime="20171005 01:12:55.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:55.237" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:12:55.237" endtime="20171005 01:12:55.238"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.237" endtime="20171005 01:12:55.238"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.235" endtime="20171005 01:12:55.238"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.235" endtime="20171005 01:12:55.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:12:55.326" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:12:55.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:55.238" endtime="20171005 01:12:55.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:12:55.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:55.328" endtime="20171005 01:12:55.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:12:55.333" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:12:55.332" endtime="20171005 01:12:55.333"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.329" endtime="20171005 01:12:55.333"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.328" endtime="20171005 01:12:55.333"></status>
</kw>
<status status="PASS" starttime="20171005 01:12:55.327" endtime="20171005 01:12:55.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:12:55.334" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:12:55.333" endtime="20171005 01:12:55.334"></status>
</kw>
<msg timestamp="20171005 01:12:55.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:12:55.040" endtime="20171005 01:12:55.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:12:55.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:12:55.334" endtime="20171005 01:12:55.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:12:55.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:12:55.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:12:55.335" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:12:55.335" endtime="20171005 01:12:55.335"></status>
</kw>
<msg timestamp="20171005 01:12:55.336" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:12:55.039" endtime="20171005 01:12:55.336"></status>
</kw>
<msg timestamp="20171005 01:12:55.336" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:12:55.039" endtime="20171005 01:12:55.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:12:55.337" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:12:55.336" endtime="20171005 01:12:55.337"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:55.039" endtime="20171005 01:12:55.337"></status>
</kw>
<status status="FAIL" starttime="20171005 01:12:55.038" endtime="20171005 01:12:55.337"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:13:05.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:13:05.341" endtime="20171005 01:13:05.342"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:13:05.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:13:05.342" endtime="20171005 01:13:05.343"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:13:05.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:13:05.343" endtime="20171005 01:13:05.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:13:05.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:13:05.344" endtime="20171005 01:13:05.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:13:05.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:13:05.345" endtime="20171005 01:13:05.545"></status>
</kw>
<msg timestamp="20171005 01:13:05.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:13:05.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:05.344" endtime="20171005 01:13:05.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:13:05.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:05.545" endtime="20171005 01:13:05.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:05.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:05.546" endtime="20171005 01:13:05.546"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.341" endtime="20171005 01:13:05.547"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.340" endtime="20171005 01:13:05.547"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.340" endtime="20171005 01:13:05.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:13:05.547" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:13:05.547" endtime="20171005 01:13:05.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:05.549" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:05.549" endtime="20171005 01:13:05.549"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:05.550" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:05.550" endtime="20171005 01:13:05.550"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.550" endtime="20171005 01:13:05.551"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.548" endtime="20171005 01:13:05.551"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.548" endtime="20171005 01:13:05.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:13:05.614" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:13:05.614" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:05.551" endtime="20171005 01:13:05.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:05.615" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:05.615" endtime="20171005 01:13:05.616"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:05.617" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:05.616" endtime="20171005 01:13:05.617"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.616" endtime="20171005 01:13:05.617"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.614" endtime="20171005 01:13:05.617"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:05.614" endtime="20171005 01:13:05.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:13:05.618" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:13:05.618" endtime="20171005 01:13:05.618"></status>
</kw>
<msg timestamp="20171005 01:13:05.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:05.339" endtime="20171005 01:13:05.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:05.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:05.618" endtime="20171005 01:13:05.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:13:05.619" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:13:05.619" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:13:05.619" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:13:05.619" endtime="20171005 01:13:05.619"></status>
</kw>
<msg timestamp="20171005 01:13:05.620" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:13:05.339" endtime="20171005 01:13:05.620"></status>
</kw>
<msg timestamp="20171005 01:13:05.620" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:13:05.338" endtime="20171005 01:13:05.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:13:05.621" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:13:05.620" endtime="20171005 01:13:05.621"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:05.338" endtime="20171005 01:13:05.621"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:05.337" endtime="20171005 01:13:05.621"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:13:15.626" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:13:15.626" endtime="20171005 01:13:15.627"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:13:15.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:13:15.627" endtime="20171005 01:13:15.627"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:13:15.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:13:15.628" endtime="20171005 01:13:15.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:13:15.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:13:15.628" endtime="20171005 01:13:15.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:13:15.822" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:13:15.629" endtime="20171005 01:13:15.822"></status>
</kw>
<msg timestamp="20171005 01:13:15.822" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:13:15.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:15.629" endtime="20171005 01:13:15.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:13:15.823" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:15.823" endtime="20171005 01:13:15.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:15.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:15.824" endtime="20171005 01:13:15.824"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.625" endtime="20171005 01:13:15.824"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.625" endtime="20171005 01:13:15.824"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.624" endtime="20171005 01:13:15.825"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:13:15.825" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:13:15.825" endtime="20171005 01:13:15.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:15.827" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:15.827" endtime="20171005 01:13:15.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:15.828" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:15.828" endtime="20171005 01:13:15.828"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.827" endtime="20171005 01:13:15.828"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.826" endtime="20171005 01:13:15.828"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.825" endtime="20171005 01:13:15.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:13:15.895" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:13:15.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:15.829" endtime="20171005 01:13:15.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:15.897" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:15.897" endtime="20171005 01:13:15.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:15.898" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:15.898" endtime="20171005 01:13:15.898"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.897" endtime="20171005 01:13:15.899"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.896" endtime="20171005 01:13:15.899"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:15.896" endtime="20171005 01:13:15.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:13:15.899" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:13:15.899" endtime="20171005 01:13:15.899"></status>
</kw>
<msg timestamp="20171005 01:13:15.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:15.623" endtime="20171005 01:13:15.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:15.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:15.900" endtime="20171005 01:13:15.900"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:13:15.901" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:13:15.901" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:13:15.901" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:13:15.900" endtime="20171005 01:13:15.901"></status>
</kw>
<msg timestamp="20171005 01:13:15.901" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:13:15.623" endtime="20171005 01:13:15.901"></status>
</kw>
<msg timestamp="20171005 01:13:15.901" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:13:15.622" endtime="20171005 01:13:15.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:13:15.902" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:13:15.902" endtime="20171005 01:13:15.902"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:15.622" endtime="20171005 01:13:15.902"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:15.621" endtime="20171005 01:13:15.903"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:13:25.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:13:25.907" endtime="20171005 01:13:25.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:13:25.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:13:25.909" endtime="20171005 01:13:25.909"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:13:25.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:13:25.910" endtime="20171005 01:13:25.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:13:25.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:13:25.911" endtime="20171005 01:13:25.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:13:26.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:13:25.912" endtime="20171005 01:13:26.114"></status>
</kw>
<msg timestamp="20171005 01:13:26.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:13:26.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:25.912" endtime="20171005 01:13:26.114"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:13:26.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:26.114" endtime="20171005 01:13:26.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:26.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:26.115" endtime="20171005 01:13:26.115"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:25.907" endtime="20171005 01:13:26.116"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:25.906" endtime="20171005 01:13:26.116"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:25.906" endtime="20171005 01:13:26.116"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:13:26.116" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:13:26.116" endtime="20171005 01:13:26.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:26.118" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:26.118" endtime="20171005 01:13:26.118"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:26.119" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:26.119" endtime="20171005 01:13:26.119"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:26.119" endtime="20171005 01:13:26.120"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:26.117" endtime="20171005 01:13:26.120"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:26.117" endtime="20171005 01:13:26.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:13:26.193" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:13:26.194" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:26.120" endtime="20171005 01:13:26.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:26.195" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:26.195" endtime="20171005 01:13:26.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:26.196" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:26.196" endtime="20171005 01:13:26.196"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:26.196" endtime="20171005 01:13:26.197"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:26.194" endtime="20171005 01:13:26.197"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:26.194" endtime="20171005 01:13:26.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:13:26.197" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:13:26.197" endtime="20171005 01:13:26.197"></status>
</kw>
<msg timestamp="20171005 01:13:26.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:25.905" endtime="20171005 01:13:26.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:26.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:26.198" endtime="20171005 01:13:26.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:13:26.199" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:13:26.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:13:26.199" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:13:26.198" endtime="20171005 01:13:26.199"></status>
</kw>
<msg timestamp="20171005 01:13:26.199" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:13:25.904" endtime="20171005 01:13:26.199"></status>
</kw>
<msg timestamp="20171005 01:13:26.199" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:13:25.904" endtime="20171005 01:13:26.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:13:26.200" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:13:26.200" endtime="20171005 01:13:26.200"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:25.904" endtime="20171005 01:13:26.200"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:25.903" endtime="20171005 01:13:26.201"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:13:36.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:13:36.206" endtime="20171005 01:13:36.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:13:36.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:13:36.207" endtime="20171005 01:13:36.207"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:13:36.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:13:36.208" endtime="20171005 01:13:36.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:13:36.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:13:36.208" endtime="20171005 01:13:36.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:13:36.405" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:13:36.210" endtime="20171005 01:13:36.405"></status>
</kw>
<msg timestamp="20171005 01:13:36.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:13:36.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:36.209" endtime="20171005 01:13:36.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:13:36.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:36.405" endtime="20171005 01:13:36.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:36.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:36.406" endtime="20171005 01:13:36.407"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.205" endtime="20171005 01:13:36.407"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.204" endtime="20171005 01:13:36.407"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.204" endtime="20171005 01:13:36.407"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:13:36.407" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:13:36.407" endtime="20171005 01:13:36.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:36.410" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:36.409" endtime="20171005 01:13:36.410"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:36.410" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:36.410" endtime="20171005 01:13:36.411"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.410" endtime="20171005 01:13:36.411"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.408" endtime="20171005 01:13:36.411"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.408" endtime="20171005 01:13:36.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:13:36.473" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:13:36.474" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:36.411" endtime="20171005 01:13:36.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:36.476" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:36.475" endtime="20171005 01:13:36.476"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:36.477" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:36.476" endtime="20171005 01:13:36.477"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.476" endtime="20171005 01:13:36.477"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.474" endtime="20171005 01:13:36.477"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:36.474" endtime="20171005 01:13:36.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:13:36.478" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:13:36.477" endtime="20171005 01:13:36.478"></status>
</kw>
<msg timestamp="20171005 01:13:36.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:36.203" endtime="20171005 01:13:36.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:36.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:36.478" endtime="20171005 01:13:36.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:13:36.479" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:13:36.479" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:13:36.479" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:13:36.479" endtime="20171005 01:13:36.479"></status>
</kw>
<msg timestamp="20171005 01:13:36.480" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:13:36.202" endtime="20171005 01:13:36.480"></status>
</kw>
<msg timestamp="20171005 01:13:36.480" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:13:36.202" endtime="20171005 01:13:36.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:13:36.481" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:13:36.480" endtime="20171005 01:13:36.481"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:36.201" endtime="20171005 01:13:36.481"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:36.201" endtime="20171005 01:13:36.481"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:13:46.486" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:13:46.485" endtime="20171005 01:13:46.486"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:13:46.487" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:13:46.486" endtime="20171005 01:13:46.487"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:13:46.487" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:13:46.487" endtime="20171005 01:13:46.487"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:13:46.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:13:46.488" endtime="20171005 01:13:46.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:13:46.709" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:13:46.489" endtime="20171005 01:13:46.709"></status>
</kw>
<msg timestamp="20171005 01:13:46.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:13:46.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:46.488" endtime="20171005 01:13:46.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:13:46.710" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:46.709" endtime="20171005 01:13:46.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:46.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:46.710" endtime="20171005 01:13:46.711"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.485" endtime="20171005 01:13:46.711"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.485" endtime="20171005 01:13:46.711"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.484" endtime="20171005 01:13:46.711"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:13:46.711" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:13:46.711" endtime="20171005 01:13:46.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:46.714" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:46.713" endtime="20171005 01:13:46.714"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:46.715" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:46.714" endtime="20171005 01:13:46.715"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.714" endtime="20171005 01:13:46.715"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.712" endtime="20171005 01:13:46.715"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.712" endtime="20171005 01:13:46.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:13:46.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:13:46.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:46.715" endtime="20171005 01:13:46.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:46.786" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:46.786" endtime="20171005 01:13:46.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:46.787" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:46.787" endtime="20171005 01:13:46.787"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.786" endtime="20171005 01:13:46.787"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.785" endtime="20171005 01:13:46.787"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:46.785" endtime="20171005 01:13:46.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:13:46.788" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:13:46.788" endtime="20171005 01:13:46.788"></status>
</kw>
<msg timestamp="20171005 01:13:46.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:46.483" endtime="20171005 01:13:46.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:46.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:46.789" endtime="20171005 01:13:46.789"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:13:46.789" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:13:46.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:13:46.790" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:13:46.789" endtime="20171005 01:13:46.790"></status>
</kw>
<msg timestamp="20171005 01:13:46.790" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:13:46.483" endtime="20171005 01:13:46.790"></status>
</kw>
<msg timestamp="20171005 01:13:46.790" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:13:46.482" endtime="20171005 01:13:46.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:13:46.791" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:13:46.791" endtime="20171005 01:13:46.791"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:46.482" endtime="20171005 01:13:46.791"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:46.481" endtime="20171005 01:13:46.791"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:13:56.797" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:13:56.797" endtime="20171005 01:13:56.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:13:56.798" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:13:56.798" endtime="20171005 01:13:56.798"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:13:56.799" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:13:56.799" endtime="20171005 01:13:56.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:13:56.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:13:56.799" endtime="20171005 01:13:56.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:13:57.020" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:13:56.800" endtime="20171005 01:13:57.020"></status>
</kw>
<msg timestamp="20171005 01:13:57.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:13:57.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:56.800" endtime="20171005 01:13:57.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:13:57.021" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:57.021" endtime="20171005 01:13:57.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:57.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:57.021" endtime="20171005 01:13:57.022"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:56.796" endtime="20171005 01:13:57.022"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:56.795" endtime="20171005 01:13:57.022"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:56.795" endtime="20171005 01:13:57.022"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:13:57.023" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:13:57.022" endtime="20171005 01:13:57.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:57.025" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:57.024" endtime="20171005 01:13:57.025"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:57.026" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:13:57.026" endtime="20171005 01:13:57.026"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:57.025" endtime="20171005 01:13:57.026"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:57.024" endtime="20171005 01:13:57.026"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:57.023" endtime="20171005 01:13:57.026"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:13:57.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:13:57.116" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:57.027" endtime="20171005 01:13:57.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:13:57.117" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:57.117" endtime="20171005 01:13:57.117"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:13:57.119" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:13:57.118" endtime="20171005 01:13:57.119"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:57.118" endtime="20171005 01:13:57.119"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:57.116" endtime="20171005 01:13:57.119"></status>
</kw>
<status status="PASS" starttime="20171005 01:13:57.116" endtime="20171005 01:13:57.119"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:13:57.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:13:57.120" endtime="20171005 01:13:57.120"></status>
</kw>
<msg timestamp="20171005 01:13:57.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:13:56.794" endtime="20171005 01:13:57.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:13:57.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:13:57.120" endtime="20171005 01:13:57.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:13:57.121" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:13:57.121" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:13:57.121" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:13:57.121" endtime="20171005 01:13:57.121"></status>
</kw>
<msg timestamp="20171005 01:13:57.122" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:13:56.793" endtime="20171005 01:13:57.122"></status>
</kw>
<msg timestamp="20171005 01:13:57.122" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:13:56.793" endtime="20171005 01:13:57.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:13:57.123" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:13:57.122" endtime="20171005 01:13:57.123"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:56.793" endtime="20171005 01:13:57.123"></status>
</kw>
<status status="FAIL" starttime="20171005 01:13:56.792" endtime="20171005 01:13:57.123"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:14:07.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:14:07.128" endtime="20171005 01:14:07.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:14:07.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:14:07.129" endtime="20171005 01:14:07.129"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:14:07.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:14:07.129" endtime="20171005 01:14:07.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:14:07.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:14:07.130" endtime="20171005 01:14:07.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:14:07.323" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:14:07.131" endtime="20171005 01:14:07.324"></status>
</kw>
<msg timestamp="20171005 01:14:07.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:14:07.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:07.131" endtime="20171005 01:14:07.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:14:07.325" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:07.324" endtime="20171005 01:14:07.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:07.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:07.325" endtime="20171005 01:14:07.325"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.127" endtime="20171005 01:14:07.326"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.127" endtime="20171005 01:14:07.326"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.126" endtime="20171005 01:14:07.326"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:14:07.326" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:14:07.326" endtime="20171005 01:14:07.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:07.328" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:07.328" endtime="20171005 01:14:07.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:07.329" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:07.329" endtime="20171005 01:14:07.330"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.329" endtime="20171005 01:14:07.330"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.327" endtime="20171005 01:14:07.330"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.327" endtime="20171005 01:14:07.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:14:07.392" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:14:07.392" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:07.330" endtime="20171005 01:14:07.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:07.394" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:07.394" endtime="20171005 01:14:07.394"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:07.395" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:07.395" endtime="20171005 01:14:07.395"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.394" endtime="20171005 01:14:07.396"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.393" endtime="20171005 01:14:07.396"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:07.393" endtime="20171005 01:14:07.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:14:07.396" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:14:07.396" endtime="20171005 01:14:07.396"></status>
</kw>
<msg timestamp="20171005 01:14:07.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:07.125" endtime="20171005 01:14:07.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:07.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:07.397" endtime="20171005 01:14:07.397"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:14:07.398" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:14:07.398" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:14:07.398" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:14:07.397" endtime="20171005 01:14:07.398"></status>
</kw>
<msg timestamp="20171005 01:14:07.398" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:14:07.125" endtime="20171005 01:14:07.398"></status>
</kw>
<msg timestamp="20171005 01:14:07.398" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:14:07.124" endtime="20171005 01:14:07.398"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:14:07.399" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:14:07.399" endtime="20171005 01:14:07.399"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:07.124" endtime="20171005 01:14:07.400"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:07.123" endtime="20171005 01:14:07.400"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:14:17.405" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:14:17.405" endtime="20171005 01:14:17.406"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:14:17.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:14:17.406" endtime="20171005 01:14:17.406"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:14:17.407" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:14:17.407" endtime="20171005 01:14:17.407"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:14:17.408" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:14:17.407" endtime="20171005 01:14:17.408"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:14:17.607" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:14:17.409" endtime="20171005 01:14:17.607"></status>
</kw>
<msg timestamp="20171005 01:14:17.607" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:14:17.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:17.408" endtime="20171005 01:14:17.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:14:17.607" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:17.607" endtime="20171005 01:14:17.608"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:17.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:17.608" endtime="20171005 01:14:17.608"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.404" endtime="20171005 01:14:17.608"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.404" endtime="20171005 01:14:17.609"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.403" endtime="20171005 01:14:17.609"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:14:17.609" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:14:17.609" endtime="20171005 01:14:17.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:17.612" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:17.611" endtime="20171005 01:14:17.612"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:17.613" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:17.613" endtime="20171005 01:14:17.614"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.612" endtime="20171005 01:14:17.614"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.610" endtime="20171005 01:14:17.614"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.610" endtime="20171005 01:14:17.614"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:14:17.679" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:14:17.679" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:17.614" endtime="20171005 01:14:17.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:17.681" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:17.681" endtime="20171005 01:14:17.681"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:17.686" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:17.682" endtime="20171005 01:14:17.686"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.681" endtime="20171005 01:14:17.686"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.680" endtime="20171005 01:14:17.686"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:17.680" endtime="20171005 01:14:17.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:14:17.686" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:14:17.686" endtime="20171005 01:14:17.687"></status>
</kw>
<msg timestamp="20171005 01:14:17.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:17.402" endtime="20171005 01:14:17.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:17.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:17.687" endtime="20171005 01:14:17.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:14:17.688" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:14:17.688" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:14:17.688" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:14:17.688" endtime="20171005 01:14:17.688"></status>
</kw>
<msg timestamp="20171005 01:14:17.689" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:14:17.402" endtime="20171005 01:14:17.689"></status>
</kw>
<msg timestamp="20171005 01:14:17.689" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:14:17.401" endtime="20171005 01:14:17.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:14:17.690" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:14:17.689" endtime="20171005 01:14:17.690"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:17.401" endtime="20171005 01:14:17.690"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:17.400" endtime="20171005 01:14:17.690"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:14:27.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:14:27.698" endtime="20171005 01:14:27.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:14:27.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:14:27.699" endtime="20171005 01:14:27.700"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:14:27.700" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:14:27.700" endtime="20171005 01:14:27.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:14:27.701" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:14:27.701" endtime="20171005 01:14:27.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:14:27.884" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:14:27.702" endtime="20171005 01:14:27.884"></status>
</kw>
<msg timestamp="20171005 01:14:27.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:14:27.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:27.701" endtime="20171005 01:14:27.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:14:27.885" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:27.885" endtime="20171005 01:14:27.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:27.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:27.886" endtime="20171005 01:14:27.886"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.697" endtime="20171005 01:14:27.886"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.696" endtime="20171005 01:14:27.886"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.695" endtime="20171005 01:14:27.886"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:14:27.887" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:14:27.887" endtime="20171005 01:14:27.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:27.889" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:27.888" endtime="20171005 01:14:27.889"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:27.890" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:27.890" endtime="20171005 01:14:27.890"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.889" endtime="20171005 01:14:27.890"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.888" endtime="20171005 01:14:27.890"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.887" endtime="20171005 01:14:27.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:14:27.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:14:27.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:27.891" endtime="20171005 01:14:27.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:27.968" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:27.967" endtime="20171005 01:14:27.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:27.969" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:27.968" endtime="20171005 01:14:27.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.968" endtime="20171005 01:14:27.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.967" endtime="20171005 01:14:27.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:27.966" endtime="20171005 01:14:27.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:14:27.969" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:14:27.969" endtime="20171005 01:14:27.970"></status>
</kw>
<msg timestamp="20171005 01:14:27.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:27.694" endtime="20171005 01:14:27.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:27.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:27.970" endtime="20171005 01:14:27.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:14:27.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:14:27.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:14:27.971" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:14:27.971" endtime="20171005 01:14:27.971"></status>
</kw>
<msg timestamp="20171005 01:14:27.972" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:14:27.694" endtime="20171005 01:14:27.972"></status>
</kw>
<msg timestamp="20171005 01:14:27.972" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:14:27.693" endtime="20171005 01:14:27.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:14:27.973" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:14:27.972" endtime="20171005 01:14:27.973"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:27.693" endtime="20171005 01:14:27.973"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:27.691" endtime="20171005 01:14:27.973"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:14:37.978" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:14:37.978" endtime="20171005 01:14:37.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:14:37.979" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:14:37.979" endtime="20171005 01:14:37.979"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:14:37.980" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:14:37.980" endtime="20171005 01:14:37.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:14:37.981" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:14:37.980" endtime="20171005 01:14:37.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:14:38.294" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:14:37.982" endtime="20171005 01:14:38.294"></status>
</kw>
<msg timestamp="20171005 01:14:38.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:14:38.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:37.981" endtime="20171005 01:14:38.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:14:38.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:38.295" endtime="20171005 01:14:38.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:38.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:38.296" endtime="20171005 01:14:38.296"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:37.977" endtime="20171005 01:14:38.296"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:37.977" endtime="20171005 01:14:38.296"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:37.976" endtime="20171005 01:14:38.296"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:14:38.297" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:14:38.297" endtime="20171005 01:14:38.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:38.299" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:38.298" endtime="20171005 01:14:38.299"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:38.300" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:38.300" endtime="20171005 01:14:38.300"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:38.299" endtime="20171005 01:14:38.300"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:38.298" endtime="20171005 01:14:38.301"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:38.297" endtime="20171005 01:14:38.301"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:14:38.370" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:14:38.370" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:38.301" endtime="20171005 01:14:38.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:38.372" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:38.372" endtime="20171005 01:14:38.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:38.373" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:38.373" endtime="20171005 01:14:38.373"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:38.372" endtime="20171005 01:14:38.374"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:38.371" endtime="20171005 01:14:38.374"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:38.371" endtime="20171005 01:14:38.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:14:38.374" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:14:38.374" endtime="20171005 01:14:38.374"></status>
</kw>
<msg timestamp="20171005 01:14:38.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:37.975" endtime="20171005 01:14:38.375"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:38.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:38.375" endtime="20171005 01:14:38.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:14:38.376" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:14:38.376" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:14:38.376" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:14:38.376" endtime="20171005 01:14:38.376"></status>
</kw>
<msg timestamp="20171005 01:14:38.376" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:14:37.975" endtime="20171005 01:14:38.376"></status>
</kw>
<msg timestamp="20171005 01:14:38.377" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:14:37.975" endtime="20171005 01:14:38.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:14:38.377" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:14:38.377" endtime="20171005 01:14:38.377"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:37.974" endtime="20171005 01:14:38.378"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:37.973" endtime="20171005 01:14:38.378"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:14:48.382" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:14:48.382" endtime="20171005 01:14:48.383"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:14:48.383" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:14:48.383" endtime="20171005 01:14:48.383"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:14:48.384" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:14:48.384" endtime="20171005 01:14:48.384"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:14:48.385" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:14:48.385" endtime="20171005 01:14:48.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:14:48.587" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:14:48.386" endtime="20171005 01:14:48.587"></status>
</kw>
<msg timestamp="20171005 01:14:48.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:14:48.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:48.385" endtime="20171005 01:14:48.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:14:48.588" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:48.588" endtime="20171005 01:14:48.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:48.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:48.588" endtime="20171005 01:14:48.589"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.382" endtime="20171005 01:14:48.589"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.381" endtime="20171005 01:14:48.589"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.381" endtime="20171005 01:14:48.589"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:14:48.590" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:14:48.589" endtime="20171005 01:14:48.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:48.592" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:48.591" endtime="20171005 01:14:48.592"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:48.593" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:48.592" endtime="20171005 01:14:48.593"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.592" endtime="20171005 01:14:48.593"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.590" endtime="20171005 01:14:48.593"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.590" endtime="20171005 01:14:48.593"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:14:48.670" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:14:48.670" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:48.593" endtime="20171005 01:14:48.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:48.672" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:48.671" endtime="20171005 01:14:48.672"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:48.673" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:48.672" endtime="20171005 01:14:48.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.672" endtime="20171005 01:14:48.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.671" endtime="20171005 01:14:48.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:48.670" endtime="20171005 01:14:48.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:14:48.674" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:14:48.673" endtime="20171005 01:14:48.674"></status>
</kw>
<msg timestamp="20171005 01:14:48.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:48.380" endtime="20171005 01:14:48.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:48.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:48.674" endtime="20171005 01:14:48.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:14:48.675" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:14:48.675" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:14:48.675" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:14:48.675" endtime="20171005 01:14:48.675"></status>
</kw>
<msg timestamp="20171005 01:14:48.676" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:14:48.379" endtime="20171005 01:14:48.676"></status>
</kw>
<msg timestamp="20171005 01:14:48.676" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:14:48.379" endtime="20171005 01:14:48.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:14:48.677" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:14:48.676" endtime="20171005 01:14:48.677"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:48.379" endtime="20171005 01:14:48.677"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:48.378" endtime="20171005 01:14:48.677"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:14:58.682" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:14:58.682" endtime="20171005 01:14:58.683"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:14:58.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:14:58.683" endtime="20171005 01:14:58.684"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:14:58.684" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:14:58.684" endtime="20171005 01:14:58.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:14:58.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:14:58.685" endtime="20171005 01:14:58.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:14:58.886" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:14:58.686" endtime="20171005 01:14:58.886"></status>
</kw>
<msg timestamp="20171005 01:14:58.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:14:58.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:58.685" endtime="20171005 01:14:58.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:14:58.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:58.886" endtime="20171005 01:14:58.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:58.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:58.887" endtime="20171005 01:14:58.887"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.681" endtime="20171005 01:14:58.888"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.681" endtime="20171005 01:14:58.888"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.680" endtime="20171005 01:14:58.888"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:14:58.888" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:14:58.888" endtime="20171005 01:14:58.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:58.891" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:58.890" endtime="20171005 01:14:58.891"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:58.891" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:14:58.891" endtime="20171005 01:14:58.892"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.891" endtime="20171005 01:14:58.892"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.889" endtime="20171005 01:14:58.892"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.889" endtime="20171005 01:14:58.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:14:58.971" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:14:58.971" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:58.892" endtime="20171005 01:14:58.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:14:58.973" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:58.972" endtime="20171005 01:14:58.973"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:14:58.974" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:14:58.973" endtime="20171005 01:14:58.974"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.973" endtime="20171005 01:14:58.974"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.972" endtime="20171005 01:14:58.974"></status>
</kw>
<status status="PASS" starttime="20171005 01:14:58.971" endtime="20171005 01:14:58.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:14:58.975" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:14:58.975" endtime="20171005 01:14:58.975"></status>
</kw>
<msg timestamp="20171005 01:14:58.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:14:58.679" endtime="20171005 01:14:58.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:14:58.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:14:58.976" endtime="20171005 01:14:58.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:14:58.977" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:14:58.977" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:14:58.977" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:14:58.976" endtime="20171005 01:14:58.977"></status>
</kw>
<msg timestamp="20171005 01:14:58.977" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:14:58.679" endtime="20171005 01:14:58.977"></status>
</kw>
<msg timestamp="20171005 01:14:58.977" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:14:58.678" endtime="20171005 01:14:58.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:14:58.978" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:14:58.978" endtime="20171005 01:14:58.978"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:58.678" endtime="20171005 01:14:58.978"></status>
</kw>
<status status="FAIL" starttime="20171005 01:14:58.677" endtime="20171005 01:14:58.978"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:15:08.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:15:08.983" endtime="20171005 01:15:08.984"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:15:08.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:15:08.984" endtime="20171005 01:15:08.985"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:15:08.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:15:08.985" endtime="20171005 01:15:08.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:15:08.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:15:08.986" endtime="20171005 01:15:08.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:15:09.189" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:15:08.987" endtime="20171005 01:15:09.189"></status>
</kw>
<msg timestamp="20171005 01:15:09.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:15:09.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:08.986" endtime="20171005 01:15:09.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:15:09.190" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:09.190" endtime="20171005 01:15:09.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:09.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:09.191" endtime="20171005 01:15:09.191"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:08.983" endtime="20171005 01:15:09.191"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:08.982" endtime="20171005 01:15:09.191"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:08.981" endtime="20171005 01:15:09.191"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:15:09.192" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:15:09.192" endtime="20171005 01:15:09.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:09.194" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:09.193" endtime="20171005 01:15:09.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:09.195" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:09.195" endtime="20171005 01:15:09.195"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:09.194" endtime="20171005 01:15:09.195"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:09.193" endtime="20171005 01:15:09.195"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:09.192" endtime="20171005 01:15:09.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:15:09.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:15:09.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:09.196" endtime="20171005 01:15:09.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:09.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:09.260" endtime="20171005 01:15:09.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:09.261" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:09.261" endtime="20171005 01:15:09.261"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:09.260" endtime="20171005 01:15:09.261"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:09.259" endtime="20171005 01:15:09.261"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:09.259" endtime="20171005 01:15:09.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:15:09.262" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:15:09.262" endtime="20171005 01:15:09.262"></status>
</kw>
<msg timestamp="20171005 01:15:09.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:08.981" endtime="20171005 01:15:09.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:09.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:09.263" endtime="20171005 01:15:09.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:15:09.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:15:09.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:15:09.264" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:15:09.264" endtime="20171005 01:15:09.264"></status>
</kw>
<msg timestamp="20171005 01:15:09.265" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:15:08.980" endtime="20171005 01:15:09.265"></status>
</kw>
<msg timestamp="20171005 01:15:09.265" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:15:08.980" endtime="20171005 01:15:09.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:15:09.266" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:15:09.266" endtime="20171005 01:15:09.266"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:08.979" endtime="20171005 01:15:09.266"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:08.979" endtime="20171005 01:15:09.267"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:15:19.273" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:15:19.272" endtime="20171005 01:15:19.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:15:19.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:15:19.273" endtime="20171005 01:15:19.274"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:15:19.275" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:15:19.274" endtime="20171005 01:15:19.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:15:19.276" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:15:19.275" endtime="20171005 01:15:19.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:15:19.455" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:15:19.277" endtime="20171005 01:15:19.455"></status>
</kw>
<msg timestamp="20171005 01:15:19.455" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:15:19.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:19.276" endtime="20171005 01:15:19.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:15:19.456" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:19.456" endtime="20171005 01:15:19.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:19.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:19.456" endtime="20171005 01:15:19.457"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.271" endtime="20171005 01:15:19.457"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.270" endtime="20171005 01:15:19.457"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.270" endtime="20171005 01:15:19.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:15:19.458" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:15:19.457" endtime="20171005 01:15:19.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:19.460" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:19.459" endtime="20171005 01:15:19.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:19.461" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:19.461" endtime="20171005 01:15:19.461"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.460" endtime="20171005 01:15:19.461"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.458" endtime="20171005 01:15:19.461"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.458" endtime="20171005 01:15:19.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:15:19.552" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:15:19.552" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:19.461" endtime="20171005 01:15:19.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:19.554" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:19.554" endtime="20171005 01:15:19.554"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:19.555" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:19.555" endtime="20171005 01:15:19.556"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.554" endtime="20171005 01:15:19.556"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.553" endtime="20171005 01:15:19.556"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:19.553" endtime="20171005 01:15:19.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:15:19.556" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:15:19.556" endtime="20171005 01:15:19.556"></status>
</kw>
<msg timestamp="20171005 01:15:19.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:19.269" endtime="20171005 01:15:19.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:19.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:19.557" endtime="20171005 01:15:19.557"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:15:19.558" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:15:19.558" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:15:19.558" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:15:19.558" endtime="20171005 01:15:19.558"></status>
</kw>
<msg timestamp="20171005 01:15:19.558" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:15:19.268" endtime="20171005 01:15:19.558"></status>
</kw>
<msg timestamp="20171005 01:15:19.559" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:15:19.268" endtime="20171005 01:15:19.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:15:19.559" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:15:19.559" endtime="20171005 01:15:19.559"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:19.268" endtime="20171005 01:15:19.560"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:19.267" endtime="20171005 01:15:19.560"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:15:29.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:15:29.564" endtime="20171005 01:15:29.565"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:15:29.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:15:29.566" endtime="20171005 01:15:29.566"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:15:29.566" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:15:29.566" endtime="20171005 01:15:29.567"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:15:29.567" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:15:29.567" endtime="20171005 01:15:29.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:15:29.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:15:29.568" endtime="20171005 01:15:29.756"></status>
</kw>
<msg timestamp="20171005 01:15:29.756" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:15:29.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:29.567" endtime="20171005 01:15:29.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:15:29.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:29.756" endtime="20171005 01:15:29.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:29.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:29.757" endtime="20171005 01:15:29.758"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.564" endtime="20171005 01:15:29.758"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.563" endtime="20171005 01:15:29.758"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.563" endtime="20171005 01:15:29.758"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:15:29.758" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:15:29.758" endtime="20171005 01:15:29.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:29.761" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:29.760" endtime="20171005 01:15:29.761"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:29.762" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:29.761" endtime="20171005 01:15:29.762"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.761" endtime="20171005 01:15:29.762"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.759" endtime="20171005 01:15:29.762"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.759" endtime="20171005 01:15:29.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:15:29.824" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:15:29.824" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:29.762" endtime="20171005 01:15:29.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:29.826" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:29.826" endtime="20171005 01:15:29.826"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:29.827" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:29.827" endtime="20171005 01:15:29.827"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.826" endtime="20171005 01:15:29.827"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.825" endtime="20171005 01:15:29.828"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:29.825" endtime="20171005 01:15:29.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:15:29.828" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:15:29.828" endtime="20171005 01:15:29.828"></status>
</kw>
<msg timestamp="20171005 01:15:29.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:29.562" endtime="20171005 01:15:29.828"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:29.829" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:29.829" endtime="20171005 01:15:29.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:15:29.830" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:15:29.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:15:29.830" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:15:29.829" endtime="20171005 01:15:29.830"></status>
</kw>
<msg timestamp="20171005 01:15:29.830" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:15:29.562" endtime="20171005 01:15:29.830"></status>
</kw>
<msg timestamp="20171005 01:15:29.830" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:15:29.561" endtime="20171005 01:15:29.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:15:29.831" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:15:29.831" endtime="20171005 01:15:29.831"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:29.561" endtime="20171005 01:15:29.831"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:29.560" endtime="20171005 01:15:29.831"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:15:39.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:15:39.837" endtime="20171005 01:15:39.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:15:39.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:15:39.838" endtime="20171005 01:15:39.838"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:15:39.839" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:15:39.838" endtime="20171005 01:15:39.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:15:39.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:15:39.839" endtime="20171005 01:15:39.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:15:40.042" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:15:39.840" endtime="20171005 01:15:40.042"></status>
</kw>
<msg timestamp="20171005 01:15:40.042" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:15:40.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:39.840" endtime="20171005 01:15:40.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:15:40.043" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:40.043" endtime="20171005 01:15:40.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:40.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:40.043" endtime="20171005 01:15:40.044"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:39.836" endtime="20171005 01:15:40.044"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:39.835" endtime="20171005 01:15:40.044"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:39.834" endtime="20171005 01:15:40.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:15:40.045" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:15:40.044" endtime="20171005 01:15:40.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:40.047" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:40.046" endtime="20171005 01:15:40.047"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:40.048" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:40.048" endtime="20171005 01:15:40.048"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:40.047" endtime="20171005 01:15:40.048"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:40.046" endtime="20171005 01:15:40.048"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:40.045" endtime="20171005 01:15:40.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:15:40.111" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:15:40.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:40.049" endtime="20171005 01:15:40.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:40.113" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:40.113" endtime="20171005 01:15:40.113"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:40.117" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:40.114" endtime="20171005 01:15:40.118"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:40.113" endtime="20171005 01:15:40.118"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:40.112" endtime="20171005 01:15:40.118"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:40.112" endtime="20171005 01:15:40.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:15:40.118" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:15:40.118" endtime="20171005 01:15:40.118"></status>
</kw>
<msg timestamp="20171005 01:15:40.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:39.834" endtime="20171005 01:15:40.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:40.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:40.119" endtime="20171005 01:15:40.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:15:40.120" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:15:40.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:15:40.120" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:15:40.120" endtime="20171005 01:15:40.120"></status>
</kw>
<msg timestamp="20171005 01:15:40.121" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:15:39.833" endtime="20171005 01:15:40.121"></status>
</kw>
<msg timestamp="20171005 01:15:40.121" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:15:39.833" endtime="20171005 01:15:40.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:15:40.122" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:15:40.121" endtime="20171005 01:15:40.122"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:39.832" endtime="20171005 01:15:40.122"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:39.832" endtime="20171005 01:15:40.122"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:15:50.127" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:15:50.127" endtime="20171005 01:15:50.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:15:50.128" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:15:50.128" endtime="20171005 01:15:50.128"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:15:50.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:15:50.129" endtime="20171005 01:15:50.129"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:15:50.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:15:50.129" endtime="20171005 01:15:50.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:15:50.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:15:50.131" endtime="20171005 01:15:50.310"></status>
</kw>
<msg timestamp="20171005 01:15:50.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:15:50.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:50.130" endtime="20171005 01:15:50.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:15:50.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:50.311" endtime="20171005 01:15:50.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:50.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:50.312" endtime="20171005 01:15:50.312"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.126" endtime="20171005 01:15:50.312"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.126" endtime="20171005 01:15:50.312"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.125" endtime="20171005 01:15:50.312"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:15:50.313" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:15:50.313" endtime="20171005 01:15:50.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:50.315" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:50.315" endtime="20171005 01:15:50.315"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:50.316" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:15:50.316" endtime="20171005 01:15:50.316"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.315" endtime="20171005 01:15:50.316"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.314" endtime="20171005 01:15:50.317"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.313" endtime="20171005 01:15:50.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:15:50.380" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:15:50.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:50.317" endtime="20171005 01:15:50.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:15:50.382" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:50.381" endtime="20171005 01:15:50.382"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:15:50.383" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:15:50.383" endtime="20171005 01:15:50.383"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.382" endtime="20171005 01:15:50.383"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.381" endtime="20171005 01:15:50.383"></status>
</kw>
<status status="PASS" starttime="20171005 01:15:50.380" endtime="20171005 01:15:50.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:15:50.384" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:15:50.383" endtime="20171005 01:15:50.384"></status>
</kw>
<msg timestamp="20171005 01:15:50.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:15:50.125" endtime="20171005 01:15:50.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:15:50.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:15:50.384" endtime="20171005 01:15:50.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:15:50.385" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:15:50.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:15:50.385" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:15:50.385" endtime="20171005 01:15:50.385"></status>
</kw>
<msg timestamp="20171005 01:15:50.386" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:15:50.124" endtime="20171005 01:15:50.386"></status>
</kw>
<msg timestamp="20171005 01:15:50.386" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:15:50.124" endtime="20171005 01:15:50.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:15:50.387" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:15:50.386" endtime="20171005 01:15:50.387"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:50.123" endtime="20171005 01:15:50.387"></status>
</kw>
<status status="FAIL" starttime="20171005 01:15:50.122" endtime="20171005 01:15:50.387"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:16:00.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:16:00.393" endtime="20171005 01:16:00.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:16:00.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:16:00.394" endtime="20171005 01:16:00.394"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:16:00.395" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:16:00.394" endtime="20171005 01:16:00.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:16:00.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:16:00.395" endtime="20171005 01:16:00.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:16:00.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:16:00.396" endtime="20171005 01:16:00.591"></status>
</kw>
<msg timestamp="20171005 01:16:00.592" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:16:00.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:00.396" endtime="20171005 01:16:00.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:16:00.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:00.592" endtime="20171005 01:16:00.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:00.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:00.593" endtime="20171005 01:16:00.593"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.392" endtime="20171005 01:16:00.593"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.391" endtime="20171005 01:16:00.593"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.391" endtime="20171005 01:16:00.593"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:16:00.594" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:16:00.594" endtime="20171005 01:16:00.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:00.596" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:00.596" endtime="20171005 01:16:00.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:00.597" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:00.597" endtime="20171005 01:16:00.597"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.596" endtime="20171005 01:16:00.597"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.595" endtime="20171005 01:16:00.597"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.594" endtime="20171005 01:16:00.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:16:00.667" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:16:00.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:00.598" endtime="20171005 01:16:00.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:00.669" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:00.669" endtime="20171005 01:16:00.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:00.670" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:00.670" endtime="20171005 01:16:00.671"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.669" endtime="20171005 01:16:00.671"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.668" endtime="20171005 01:16:00.671"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:00.668" endtime="20171005 01:16:00.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:16:00.671" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:16:00.671" endtime="20171005 01:16:00.671"></status>
</kw>
<msg timestamp="20171005 01:16:00.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:00.390" endtime="20171005 01:16:00.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:00.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:00.672" endtime="20171005 01:16:00.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:16:00.673" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:16:00.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:16:00.673" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:16:00.672" endtime="20171005 01:16:00.673"></status>
</kw>
<msg timestamp="20171005 01:16:00.673" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:16:00.389" endtime="20171005 01:16:00.673"></status>
</kw>
<msg timestamp="20171005 01:16:00.674" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:16:00.389" endtime="20171005 01:16:00.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:16:00.674" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:16:00.674" endtime="20171005 01:16:00.674"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:00.388" endtime="20171005 01:16:00.674"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:00.388" endtime="20171005 01:16:00.675"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:16:10.680" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:16:10.679" endtime="20171005 01:16:10.680"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:16:10.681" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:16:10.680" endtime="20171005 01:16:10.681"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:16:10.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:16:10.681" endtime="20171005 01:16:10.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:16:10.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:16:10.682" endtime="20171005 01:16:10.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:16:10.870" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:16:10.683" endtime="20171005 01:16:10.870"></status>
</kw>
<msg timestamp="20171005 01:16:10.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:16:10.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:10.682" endtime="20171005 01:16:10.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:16:10.870" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:10.870" endtime="20171005 01:16:10.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:10.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:10.871" endtime="20171005 01:16:10.871"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.679" endtime="20171005 01:16:10.872"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.678" endtime="20171005 01:16:10.872"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.678" endtime="20171005 01:16:10.872"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:16:10.872" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:16:10.872" endtime="20171005 01:16:10.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:10.874" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:10.874" endtime="20171005 01:16:10.874"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:10.875" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:10.875" endtime="20171005 01:16:10.875"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.875" endtime="20171005 01:16:10.876"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.873" endtime="20171005 01:16:10.876"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.873" endtime="20171005 01:16:10.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:16:10.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:16:10.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:10.876" endtime="20171005 01:16:10.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:10.968" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:10.967" endtime="20171005 01:16:10.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:10.968" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:10.968" endtime="20171005 01:16:10.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.968" endtime="20171005 01:16:10.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.967" endtime="20171005 01:16:10.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:10.966" endtime="20171005 01:16:10.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:16:10.969" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:16:10.969" endtime="20171005 01:16:10.969"></status>
</kw>
<msg timestamp="20171005 01:16:10.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:10.677" endtime="20171005 01:16:10.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:10.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:10.970" endtime="20171005 01:16:10.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:16:10.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:16:10.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:16:10.971" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:16:10.971" endtime="20171005 01:16:10.971"></status>
</kw>
<msg timestamp="20171005 01:16:10.971" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:16:10.676" endtime="20171005 01:16:10.971"></status>
</kw>
<msg timestamp="20171005 01:16:10.972" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:16:10.676" endtime="20171005 01:16:10.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:16:10.972" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:16:10.972" endtime="20171005 01:16:10.972"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:10.676" endtime="20171005 01:16:10.973"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:10.675" endtime="20171005 01:16:10.973"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:16:20.979" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:16:20.978" endtime="20171005 01:16:20.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:16:20.980" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:16:20.979" endtime="20171005 01:16:20.980"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:16:20.980" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:16:20.980" endtime="20171005 01:16:20.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:16:20.981" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:16:20.980" endtime="20171005 01:16:20.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:16:21.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:16:20.982" endtime="20171005 01:16:21.165"></status>
</kw>
<msg timestamp="20171005 01:16:21.165" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:16:21.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:20.981" endtime="20171005 01:16:21.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:16:21.166" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:21.165" endtime="20171005 01:16:21.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:21.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:21.166" endtime="20171005 01:16:21.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:20.977" endtime="20171005 01:16:21.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:20.977" endtime="20171005 01:16:21.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:20.976" endtime="20171005 01:16:21.167"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:16:21.167" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:16:21.167" endtime="20171005 01:16:21.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:21.170" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:21.169" endtime="20171005 01:16:21.170"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:21.171" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:21.171" endtime="20171005 01:16:21.171"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:21.170" endtime="20171005 01:16:21.171"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:21.168" endtime="20171005 01:16:21.172"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:21.168" endtime="20171005 01:16:21.172"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:16:21.267" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:16:21.268" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:21.172" endtime="20171005 01:16:21.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:21.269" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:21.269" endtime="20171005 01:16:21.269"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:21.271" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:21.270" endtime="20171005 01:16:21.271"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:21.270" endtime="20171005 01:16:21.271"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:21.268" endtime="20171005 01:16:21.271"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:21.268" endtime="20171005 01:16:21.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:16:21.271" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:16:21.271" endtime="20171005 01:16:21.272"></status>
</kw>
<msg timestamp="20171005 01:16:21.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:20.975" endtime="20171005 01:16:21.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:21.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:21.272" endtime="20171005 01:16:21.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:16:21.274" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:16:21.274" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:16:21.274" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:16:21.273" endtime="20171005 01:16:21.274"></status>
</kw>
<msg timestamp="20171005 01:16:21.274" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:16:20.975" endtime="20171005 01:16:21.274"></status>
</kw>
<msg timestamp="20171005 01:16:21.275" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:16:20.974" endtime="20171005 01:16:21.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:16:21.276" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:16:21.275" endtime="20171005 01:16:21.276"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:20.974" endtime="20171005 01:16:21.276"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:20.973" endtime="20171005 01:16:21.277"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:16:31.282" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:16:31.282" endtime="20171005 01:16:31.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:16:31.283" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:16:31.283" endtime="20171005 01:16:31.283"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:16:31.284" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:16:31.283" endtime="20171005 01:16:31.284"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:16:31.284" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:16:31.284" endtime="20171005 01:16:31.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:16:31.475" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:16:31.285" endtime="20171005 01:16:31.475"></status>
</kw>
<msg timestamp="20171005 01:16:31.475" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:16:31.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:31.285" endtime="20171005 01:16:31.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:16:31.476" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:31.475" endtime="20171005 01:16:31.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:31.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:31.476" endtime="20171005 01:16:31.477"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.281" endtime="20171005 01:16:31.477"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.281" endtime="20171005 01:16:31.477"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.280" endtime="20171005 01:16:31.477"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:16:31.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:16:31.477" endtime="20171005 01:16:31.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:31.480" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:31.479" endtime="20171005 01:16:31.480"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:31.481" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:31.480" endtime="20171005 01:16:31.481"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.480" endtime="20171005 01:16:31.481"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.478" endtime="20171005 01:16:31.481"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.478" endtime="20171005 01:16:31.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:16:31.574" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:16:31.574" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:31.481" endtime="20171005 01:16:31.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:31.576" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:31.576" endtime="20171005 01:16:31.576"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:31.577" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:31.577" endtime="20171005 01:16:31.577"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.576" endtime="20171005 01:16:31.577"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.575" endtime="20171005 01:16:31.577"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:31.574" endtime="20171005 01:16:31.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:16:31.578" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:16:31.578" endtime="20171005 01:16:31.578"></status>
</kw>
<msg timestamp="20171005 01:16:31.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:31.279" endtime="20171005 01:16:31.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:31.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:31.579" endtime="20171005 01:16:31.579"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:16:31.580" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:16:31.580" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:16:31.580" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:16:31.579" endtime="20171005 01:16:31.580"></status>
</kw>
<msg timestamp="20171005 01:16:31.580" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:16:31.279" endtime="20171005 01:16:31.580"></status>
</kw>
<msg timestamp="20171005 01:16:31.580" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:16:31.278" endtime="20171005 01:16:31.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:16:31.581" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:16:31.581" endtime="20171005 01:16:31.581"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:31.278" endtime="20171005 01:16:31.581"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:31.277" endtime="20171005 01:16:31.581"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:16:41.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:16:41.589" endtime="20171005 01:16:41.590"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:16:41.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:16:41.591" endtime="20171005 01:16:41.591"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:16:41.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:16:41.592" endtime="20171005 01:16:41.592"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:16:41.593" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:16:41.593" endtime="20171005 01:16:41.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:16:41.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:16:41.594" endtime="20171005 01:16:41.802"></status>
</kw>
<msg timestamp="20171005 01:16:41.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:16:41.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:41.594" endtime="20171005 01:16:41.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:16:41.804" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:41.803" endtime="20171005 01:16:41.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:41.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:41.804" endtime="20171005 01:16:41.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.588" endtime="20171005 01:16:41.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.587" endtime="20171005 01:16:41.805"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.586" endtime="20171005 01:16:41.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:16:41.806" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:16:41.806" endtime="20171005 01:16:41.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:41.809" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:41.808" endtime="20171005 01:16:41.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:41.810" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:41.810" endtime="20171005 01:16:41.810"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.809" endtime="20171005 01:16:41.810"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.807" endtime="20171005 01:16:41.810"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.807" endtime="20171005 01:16:41.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:16:41.873" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:16:41.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:41.811" endtime="20171005 01:16:41.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:41.875" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:41.875" endtime="20171005 01:16:41.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:41.876" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:41.876" endtime="20171005 01:16:41.877"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.875" endtime="20171005 01:16:41.877"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.874" endtime="20171005 01:16:41.877"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:41.874" endtime="20171005 01:16:41.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:16:41.877" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:16:41.877" endtime="20171005 01:16:41.877"></status>
</kw>
<msg timestamp="20171005 01:16:41.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:41.585" endtime="20171005 01:16:41.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:41.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:41.878" endtime="20171005 01:16:41.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:16:41.879" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:16:41.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:16:41.879" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:16:41.879" endtime="20171005 01:16:41.879"></status>
</kw>
<msg timestamp="20171005 01:16:41.879" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:16:41.584" endtime="20171005 01:16:41.879"></status>
</kw>
<msg timestamp="20171005 01:16:41.880" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:16:41.583" endtime="20171005 01:16:41.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:16:41.880" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:16:41.880" endtime="20171005 01:16:41.880"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:41.583" endtime="20171005 01:16:41.881"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:41.582" endtime="20171005 01:16:41.881"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:16:51.886" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:16:51.886" endtime="20171005 01:16:51.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:16:51.888" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:16:51.887" endtime="20171005 01:16:51.888"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:16:51.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:16:51.888" endtime="20171005 01:16:51.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:16:51.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:16:51.888" endtime="20171005 01:16:51.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:16:52.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:16:51.890" endtime="20171005 01:16:52.103"></status>
</kw>
<msg timestamp="20171005 01:16:52.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:16:52.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:51.889" endtime="20171005 01:16:52.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:16:52.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:52.104" endtime="20171005 01:16:52.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:52.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:52.104" endtime="20171005 01:16:52.105"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:51.885" endtime="20171005 01:16:52.105"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:51.885" endtime="20171005 01:16:52.105"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:51.884" endtime="20171005 01:16:52.105"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:16:52.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:16:52.105" endtime="20171005 01:16:52.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:52.108" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:52.107" endtime="20171005 01:16:52.108"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:52.109" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:16:52.109" endtime="20171005 01:16:52.109"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:52.108" endtime="20171005 01:16:52.109"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:52.107" endtime="20171005 01:16:52.109"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:52.106" endtime="20171005 01:16:52.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:16:52.176" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:16:52.176" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:52.110" endtime="20171005 01:16:52.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:16:52.178" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:52.178" endtime="20171005 01:16:52.178"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:16:52.179" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:16:52.179" endtime="20171005 01:16:52.179"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:52.178" endtime="20171005 01:16:52.179"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:52.177" endtime="20171005 01:16:52.180"></status>
</kw>
<status status="PASS" starttime="20171005 01:16:52.177" endtime="20171005 01:16:52.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:16:52.180" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:16:52.180" endtime="20171005 01:16:52.180"></status>
</kw>
<msg timestamp="20171005 01:16:52.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:16:51.883" endtime="20171005 01:16:52.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:16:52.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:16:52.181" endtime="20171005 01:16:52.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:16:52.182" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:16:52.182" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:16:52.182" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:16:52.181" endtime="20171005 01:16:52.182"></status>
</kw>
<msg timestamp="20171005 01:16:52.182" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:16:51.883" endtime="20171005 01:16:52.182"></status>
</kw>
<msg timestamp="20171005 01:16:52.182" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:16:51.882" endtime="20171005 01:16:52.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:16:52.183" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:16:52.183" endtime="20171005 01:16:52.183"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:51.882" endtime="20171005 01:16:52.183"></status>
</kw>
<status status="FAIL" starttime="20171005 01:16:51.881" endtime="20171005 01:16:52.184"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:17:02.190" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:17:02.190" endtime="20171005 01:17:02.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:17:02.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:17:02.191" endtime="20171005 01:17:02.191"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:17:02.192" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:17:02.191" endtime="20171005 01:17:02.192"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:17:02.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:17:02.192" endtime="20171005 01:17:02.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:17:02.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:17:02.193" endtime="20171005 01:17:02.378"></status>
</kw>
<msg timestamp="20171005 01:17:02.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:17:02.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:02.193" endtime="20171005 01:17:02.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:17:02.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:02.378" endtime="20171005 01:17:02.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:02.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:02.379" endtime="20171005 01:17:02.379"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.189" endtime="20171005 01:17:02.379"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.188" endtime="20171005 01:17:02.380"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.187" endtime="20171005 01:17:02.380"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:17:02.380" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:17:02.380" endtime="20171005 01:17:02.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:02.383" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:02.382" endtime="20171005 01:17:02.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:02.383" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:02.383" endtime="20171005 01:17:02.384"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.383" endtime="20171005 01:17:02.384"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.381" endtime="20171005 01:17:02.384"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.381" endtime="20171005 01:17:02.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:17:02.446" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:17:02.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:02.384" endtime="20171005 01:17:02.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:02.448" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:02.448" endtime="20171005 01:17:02.448"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:02.453" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:02.449" endtime="20171005 01:17:02.453"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.448" endtime="20171005 01:17:02.453"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.447" endtime="20171005 01:17:02.453"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:02.447" endtime="20171005 01:17:02.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:17:02.453" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:17:02.453" endtime="20171005 01:17:02.454"></status>
</kw>
<msg timestamp="20171005 01:17:02.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:02.187" endtime="20171005 01:17:02.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:02.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:02.454" endtime="20171005 01:17:02.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:17:02.455" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:17:02.455" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:17:02.455" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:17:02.455" endtime="20171005 01:17:02.455"></status>
</kw>
<msg timestamp="20171005 01:17:02.456" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:17:02.186" endtime="20171005 01:17:02.456"></status>
</kw>
<msg timestamp="20171005 01:17:02.456" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:17:02.185" endtime="20171005 01:17:02.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:17:02.457" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:17:02.457" endtime="20171005 01:17:02.457"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:02.185" endtime="20171005 01:17:02.458"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:02.184" endtime="20171005 01:17:02.458"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:17:12.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:17:12.462" endtime="20171005 01:17:12.463"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:17:12.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:17:12.463" endtime="20171005 01:17:12.464"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:17:12.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:17:12.464" endtime="20171005 01:17:12.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:17:12.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:17:12.465" endtime="20171005 01:17:12.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:17:12.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:17:12.466" endtime="20171005 01:17:12.653"></status>
</kw>
<msg timestamp="20171005 01:17:12.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:17:12.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:12.465" endtime="20171005 01:17:12.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:17:12.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:12.653" endtime="20171005 01:17:12.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:12.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:12.654" endtime="20171005 01:17:12.654"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.462" endtime="20171005 01:17:12.654"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.461" endtime="20171005 01:17:12.654"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.461" endtime="20171005 01:17:12.655"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:17:12.655" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:17:12.655" endtime="20171005 01:17:12.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:12.657" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:12.657" endtime="20171005 01:17:12.657"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:12.658" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:12.658" endtime="20171005 01:17:12.658"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.658" endtime="20171005 01:17:12.659"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.656" endtime="20171005 01:17:12.659"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.656" endtime="20171005 01:17:12.659"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:17:12.721" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:17:12.721" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:12.659" endtime="20171005 01:17:12.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:12.723" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:12.723" endtime="20171005 01:17:12.723"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:12.724" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:12.724" endtime="20171005 01:17:12.724"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.724" endtime="20171005 01:17:12.725"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.722" endtime="20171005 01:17:12.725"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:12.722" endtime="20171005 01:17:12.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:17:12.725" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:17:12.725" endtime="20171005 01:17:12.725"></status>
</kw>
<msg timestamp="20171005 01:17:12.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:12.460" endtime="20171005 01:17:12.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:12.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:12.726" endtime="20171005 01:17:12.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:17:12.727" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:17:12.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:17:12.727" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:17:12.726" endtime="20171005 01:17:12.727"></status>
</kw>
<msg timestamp="20171005 01:17:12.727" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:17:12.459" endtime="20171005 01:17:12.727"></status>
</kw>
<msg timestamp="20171005 01:17:12.727" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:17:12.459" endtime="20171005 01:17:12.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:17:12.728" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:17:12.728" endtime="20171005 01:17:12.728"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:12.459" endtime="20171005 01:17:12.728"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:12.458" endtime="20171005 01:17:12.729"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:17:22.734" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:17:22.734" endtime="20171005 01:17:22.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:17:22.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:17:22.735" endtime="20171005 01:17:22.735"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:17:22.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:17:22.735" endtime="20171005 01:17:22.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:17:22.736" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:17:22.736" endtime="20171005 01:17:22.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:17:22.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:17:22.737" endtime="20171005 01:17:22.957"></status>
</kw>
<msg timestamp="20171005 01:17:22.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:17:22.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:22.737" endtime="20171005 01:17:22.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:17:22.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:22.958" endtime="20171005 01:17:22.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:22.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:22.959" endtime="20171005 01:17:22.959"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:22.733" endtime="20171005 01:17:22.959"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:22.732" endtime="20171005 01:17:22.959"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:22.731" endtime="20171005 01:17:22.960"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:17:22.961" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:17:22.960" endtime="20171005 01:17:22.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:22.964" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:22.963" endtime="20171005 01:17:22.964"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:22.965" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:22.965" endtime="20171005 01:17:22.965"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:22.964" endtime="20171005 01:17:22.965"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:22.962" endtime="20171005 01:17:22.966"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:22.961" endtime="20171005 01:17:22.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:17:23.044" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:17:23.044" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:22.966" endtime="20171005 01:17:23.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:23.046" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:23.045" endtime="20171005 01:17:23.046"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:23.047" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:23.047" endtime="20171005 01:17:23.047"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:23.046" endtime="20171005 01:17:23.047"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:23.045" endtime="20171005 01:17:23.047"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:23.044" endtime="20171005 01:17:23.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:17:23.048" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:17:23.048" endtime="20171005 01:17:23.048"></status>
</kw>
<msg timestamp="20171005 01:17:23.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:22.731" endtime="20171005 01:17:23.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:23.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:23.048" endtime="20171005 01:17:23.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:17:23.049" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:17:23.049" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:17:23.050" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:17:23.049" endtime="20171005 01:17:23.050"></status>
</kw>
<msg timestamp="20171005 01:17:23.050" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:17:22.730" endtime="20171005 01:17:23.050"></status>
</kw>
<msg timestamp="20171005 01:17:23.050" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:17:22.730" endtime="20171005 01:17:23.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:17:23.051" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:17:23.051" endtime="20171005 01:17:23.051"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:22.729" endtime="20171005 01:17:23.051"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:22.729" endtime="20171005 01:17:23.051"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:17:33.056" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:17:33.056" endtime="20171005 01:17:33.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:17:33.057" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:17:33.057" endtime="20171005 01:17:33.057"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:17:33.058" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:17:33.058" endtime="20171005 01:17:33.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:17:33.059" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:17:33.058" endtime="20171005 01:17:33.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:17:33.256" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:17:33.059" endtime="20171005 01:17:33.256"></status>
</kw>
<msg timestamp="20171005 01:17:33.256" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:17:33.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:33.059" endtime="20171005 01:17:33.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:17:33.257" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:33.256" endtime="20171005 01:17:33.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:33.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:33.257" endtime="20171005 01:17:33.258"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.055" endtime="20171005 01:17:33.258"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.055" endtime="20171005 01:17:33.258"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.054" endtime="20171005 01:17:33.258"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:17:33.258" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:17:33.258" endtime="20171005 01:17:33.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:33.261" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:33.260" endtime="20171005 01:17:33.261"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:33.262" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:33.261" endtime="20171005 01:17:33.262"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.261" endtime="20171005 01:17:33.262"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.259" endtime="20171005 01:17:33.262"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.259" endtime="20171005 01:17:33.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:17:33.324" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:17:33.324" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:33.262" endtime="20171005 01:17:33.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:33.326" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:33.326" endtime="20171005 01:17:33.326"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:33.327" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:33.327" endtime="20171005 01:17:33.327"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.326" endtime="20171005 01:17:33.327"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.325" endtime="20171005 01:17:33.327"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:33.325" endtime="20171005 01:17:33.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:17:33.328" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:17:33.328" endtime="20171005 01:17:33.328"></status>
</kw>
<msg timestamp="20171005 01:17:33.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:33.054" endtime="20171005 01:17:33.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:33.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:33.329" endtime="20171005 01:17:33.329"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:17:33.329" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:17:33.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:17:33.330" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:17:33.329" endtime="20171005 01:17:33.330"></status>
</kw>
<msg timestamp="20171005 01:17:33.330" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:17:33.053" endtime="20171005 01:17:33.330"></status>
</kw>
<msg timestamp="20171005 01:17:33.330" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:17:33.053" endtime="20171005 01:17:33.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:17:33.331" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:17:33.331" endtime="20171005 01:17:33.331"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:33.052" endtime="20171005 01:17:33.331"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:33.052" endtime="20171005 01:17:33.331"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:17:43.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:17:43.336" endtime="20171005 01:17:43.337"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:17:43.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:17:43.337" endtime="20171005 01:17:43.338"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:17:43.338" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:17:43.338" endtime="20171005 01:17:43.338"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:17:43.339" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:17:43.339" endtime="20171005 01:17:43.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:17:43.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:17:43.340" endtime="20171005 01:17:43.537"></status>
</kw>
<msg timestamp="20171005 01:17:43.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:17:43.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:43.339" endtime="20171005 01:17:43.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:17:43.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:43.538" endtime="20171005 01:17:43.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:43.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:43.538" endtime="20171005 01:17:43.539"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.335" endtime="20171005 01:17:43.539"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.335" endtime="20171005 01:17:43.539"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.334" endtime="20171005 01:17:43.539"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:17:43.540" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:17:43.539" endtime="20171005 01:17:43.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:43.542" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:43.541" endtime="20171005 01:17:43.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:43.543" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:43.543" endtime="20171005 01:17:43.543"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.542" endtime="20171005 01:17:43.543"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.541" endtime="20171005 01:17:43.543"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.540" endtime="20171005 01:17:43.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:17:43.608" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:17:43.608" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:43.544" endtime="20171005 01:17:43.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:43.610" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:43.609" endtime="20171005 01:17:43.610"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:43.611" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:43.610" endtime="20171005 01:17:43.611"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.610" endtime="20171005 01:17:43.611"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.609" endtime="20171005 01:17:43.611"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:43.608" endtime="20171005 01:17:43.611"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:17:43.612" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:17:43.612" endtime="20171005 01:17:43.612"></status>
</kw>
<msg timestamp="20171005 01:17:43.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:43.334" endtime="20171005 01:17:43.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:43.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:43.613" endtime="20171005 01:17:43.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:17:43.613" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:17:43.614" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:17:43.614" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:17:43.613" endtime="20171005 01:17:43.614"></status>
</kw>
<msg timestamp="20171005 01:17:43.614" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:17:43.333" endtime="20171005 01:17:43.614"></status>
</kw>
<msg timestamp="20171005 01:17:43.614" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:17:43.333" endtime="20171005 01:17:43.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:17:43.615" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:17:43.615" endtime="20171005 01:17:43.615"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:43.332" endtime="20171005 01:17:43.615"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:43.332" endtime="20171005 01:17:43.615"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:17:53.621" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:17:53.621" endtime="20171005 01:17:53.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:17:53.622" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:17:53.622" endtime="20171005 01:17:53.622"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:17:53.623" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:17:53.622" endtime="20171005 01:17:53.623"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:17:53.623" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:17:53.623" endtime="20171005 01:17:53.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:17:53.813" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:17:53.624" endtime="20171005 01:17:53.813"></status>
</kw>
<msg timestamp="20171005 01:17:53.813" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:17:53.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:53.624" endtime="20171005 01:17:53.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:17:53.814" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:53.814" endtime="20171005 01:17:53.814"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:53.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:53.815" endtime="20171005 01:17:53.815"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.620" endtime="20171005 01:17:53.815"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.619" endtime="20171005 01:17:53.815"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.619" endtime="20171005 01:17:53.815"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:17:53.816" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:17:53.816" endtime="20171005 01:17:53.816"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:53.818" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:53.817" endtime="20171005 01:17:53.818"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:53.819" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:17:53.819" endtime="20171005 01:17:53.819"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.818" endtime="20171005 01:17:53.819"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.817" endtime="20171005 01:17:53.819"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.816" endtime="20171005 01:17:53.820"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:17:53.882" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:17:53.882" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:53.820" endtime="20171005 01:17:53.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:17:53.884" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:53.883" endtime="20171005 01:17:53.884"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:17:53.884" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:17:53.884" endtime="20171005 01:17:53.885"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.884" endtime="20171005 01:17:53.885"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.883" endtime="20171005 01:17:53.885"></status>
</kw>
<status status="PASS" starttime="20171005 01:17:53.882" endtime="20171005 01:17:53.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:17:53.885" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:17:53.885" endtime="20171005 01:17:53.885"></status>
</kw>
<msg timestamp="20171005 01:17:53.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:17:53.618" endtime="20171005 01:17:53.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:17:53.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:17:53.886" endtime="20171005 01:17:53.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:17:53.887" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:17:53.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:17:53.887" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:17:53.887" endtime="20171005 01:17:53.887"></status>
</kw>
<msg timestamp="20171005 01:17:53.887" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:17:53.617" endtime="20171005 01:17:53.887"></status>
</kw>
<msg timestamp="20171005 01:17:53.888" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:17:53.617" endtime="20171005 01:17:53.888"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:17:53.888" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:17:53.888" endtime="20171005 01:17:53.888"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:53.616" endtime="20171005 01:17:53.889"></status>
</kw>
<status status="FAIL" starttime="20171005 01:17:53.616" endtime="20171005 01:17:53.889"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:18:03.894" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:18:03.894" endtime="20171005 01:18:03.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:18:03.895" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:18:03.895" endtime="20171005 01:18:03.895"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:18:03.896" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:18:03.895" endtime="20171005 01:18:03.896"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:18:03.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:18:03.896" endtime="20171005 01:18:03.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:18:04.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:18:03.897" endtime="20171005 01:18:04.093"></status>
</kw>
<msg timestamp="20171005 01:18:04.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:18:04.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:03.897" endtime="20171005 01:18:04.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:18:04.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:04.094" endtime="20171005 01:18:04.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:04.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:04.094" endtime="20171005 01:18:04.095"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:03.893" endtime="20171005 01:18:04.095"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:03.892" endtime="20171005 01:18:04.095"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:03.892" endtime="20171005 01:18:04.095"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:18:04.096" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:18:04.095" endtime="20171005 01:18:04.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:04.098" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:04.097" endtime="20171005 01:18:04.098"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:04.099" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:04.099" endtime="20171005 01:18:04.099"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:04.098" endtime="20171005 01:18:04.099"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:04.096" endtime="20171005 01:18:04.099"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:04.096" endtime="20171005 01:18:04.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:18:04.162" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:18:04.162" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:04.100" endtime="20171005 01:18:04.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:04.164" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:04.163" endtime="20171005 01:18:04.164"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:04.165" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:04.165" endtime="20171005 01:18:04.166"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:04.164" endtime="20171005 01:18:04.166"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:04.163" endtime="20171005 01:18:04.166"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:04.162" endtime="20171005 01:18:04.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:18:04.166" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:18:04.166" endtime="20171005 01:18:04.166"></status>
</kw>
<msg timestamp="20171005 01:18:04.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:03.891" endtime="20171005 01:18:04.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:04.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:04.167" endtime="20171005 01:18:04.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:18:04.168" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:18:04.168" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:18:04.168" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:18:04.168" endtime="20171005 01:18:04.168"></status>
</kw>
<msg timestamp="20171005 01:18:04.168" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:18:03.891" endtime="20171005 01:18:04.168"></status>
</kw>
<msg timestamp="20171005 01:18:04.169" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:18:03.890" endtime="20171005 01:18:04.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:18:04.169" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:18:04.169" endtime="20171005 01:18:04.169"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:03.890" endtime="20171005 01:18:04.170"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:03.889" endtime="20171005 01:18:04.170"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:18:14.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:18:14.174" endtime="20171005 01:18:14.175"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:18:14.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:18:14.175" endtime="20171005 01:18:14.176"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:18:14.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:18:14.176" endtime="20171005 01:18:14.176"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:18:14.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:18:14.177" endtime="20171005 01:18:14.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:18:14.363" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:18:14.178" endtime="20171005 01:18:14.363"></status>
</kw>
<msg timestamp="20171005 01:18:14.363" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:18:14.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:14.178" endtime="20171005 01:18:14.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:18:14.364" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:14.363" endtime="20171005 01:18:14.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:14.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:14.364" endtime="20171005 01:18:14.365"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.174" endtime="20171005 01:18:14.365"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.173" endtime="20171005 01:18:14.365"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.173" endtime="20171005 01:18:14.365"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:18:14.366" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:18:14.365" endtime="20171005 01:18:14.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:14.368" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:14.367" endtime="20171005 01:18:14.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:14.369" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:14.369" endtime="20171005 01:18:14.369"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.368" endtime="20171005 01:18:14.369"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.366" endtime="20171005 01:18:14.369"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.366" endtime="20171005 01:18:14.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:18:14.432" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:18:14.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:14.370" endtime="20171005 01:18:14.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:14.434" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:14.434" endtime="20171005 01:18:14.434"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:14.435" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:14.435" endtime="20171005 01:18:14.435"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.434" endtime="20171005 01:18:14.435"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.433" endtime="20171005 01:18:14.436"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:14.433" endtime="20171005 01:18:14.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:18:14.436" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:18:14.436" endtime="20171005 01:18:14.436"></status>
</kw>
<msg timestamp="20171005 01:18:14.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:14.172" endtime="20171005 01:18:14.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:14.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:14.437" endtime="20171005 01:18:14.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:18:14.438" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:18:14.438" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:18:14.438" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:18:14.437" endtime="20171005 01:18:14.438"></status>
</kw>
<msg timestamp="20171005 01:18:14.438" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:18:14.172" endtime="20171005 01:18:14.438"></status>
</kw>
<msg timestamp="20171005 01:18:14.438" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:18:14.171" endtime="20171005 01:18:14.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:18:14.439" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:18:14.439" endtime="20171005 01:18:14.439"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:14.171" endtime="20171005 01:18:14.439"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:14.170" endtime="20171005 01:18:14.440"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:18:24.445" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:18:24.445" endtime="20171005 01:18:24.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:18:24.446" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:18:24.446" endtime="20171005 01:18:24.446"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:18:24.447" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:18:24.446" endtime="20171005 01:18:24.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:18:24.447" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:18:24.447" endtime="20171005 01:18:24.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:18:24.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:18:24.448" endtime="20171005 01:18:24.633"></status>
</kw>
<msg timestamp="20171005 01:18:24.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:18:24.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:24.448" endtime="20171005 01:18:24.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:18:24.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:24.634" endtime="20171005 01:18:24.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:24.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:24.635" endtime="20171005 01:18:24.635"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.444" endtime="20171005 01:18:24.635"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.443" endtime="20171005 01:18:24.635"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.443" endtime="20171005 01:18:24.635"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:18:24.636" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:18:24.636" endtime="20171005 01:18:24.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:24.638" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:24.638" endtime="20171005 01:18:24.638"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:24.639" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:24.639" endtime="20171005 01:18:24.639"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.638" endtime="20171005 01:18:24.640"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.637" endtime="20171005 01:18:24.640"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.636" endtime="20171005 01:18:24.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:18:24.702" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:18:24.702" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:24.640" endtime="20171005 01:18:24.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:24.704" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:24.704" endtime="20171005 01:18:24.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:24.708" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:24.705" endtime="20171005 01:18:24.709"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.704" endtime="20171005 01:18:24.709"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.703" endtime="20171005 01:18:24.709"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:24.703" endtime="20171005 01:18:24.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:18:24.709" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:18:24.709" endtime="20171005 01:18:24.709"></status>
</kw>
<msg timestamp="20171005 01:18:24.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:24.442" endtime="20171005 01:18:24.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:24.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:24.710" endtime="20171005 01:18:24.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:18:24.711" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:18:24.711" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:18:24.711" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:18:24.711" endtime="20171005 01:18:24.711"></status>
</kw>
<msg timestamp="20171005 01:18:24.711" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:18:24.441" endtime="20171005 01:18:24.712"></status>
</kw>
<msg timestamp="20171005 01:18:24.712" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:18:24.441" endtime="20171005 01:18:24.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:18:24.713" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:18:24.712" endtime="20171005 01:18:24.713"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:24.441" endtime="20171005 01:18:24.713"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:24.440" endtime="20171005 01:18:24.713"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:18:34.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:18:34.719" endtime="20171005 01:18:34.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:18:34.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:18:34.720" endtime="20171005 01:18:34.720"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:18:34.721" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:18:34.720" endtime="20171005 01:18:34.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:18:34.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:18:34.721" endtime="20171005 01:18:34.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:18:35.023" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:18:34.722" endtime="20171005 01:18:35.023"></status>
</kw>
<msg timestamp="20171005 01:18:35.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:18:35.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:34.722" endtime="20171005 01:18:35.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:18:35.024" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:35.023" endtime="20171005 01:18:35.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:35.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:35.024" endtime="20171005 01:18:35.024"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:34.718" endtime="20171005 01:18:35.024"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:34.718" endtime="20171005 01:18:35.025"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:34.717" endtime="20171005 01:18:35.025"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:18:35.025" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:18:35.025" endtime="20171005 01:18:35.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:35.027" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:35.027" endtime="20171005 01:18:35.027"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:35.028" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:35.028" endtime="20171005 01:18:35.028"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:35.028" endtime="20171005 01:18:35.029"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:35.026" endtime="20171005 01:18:35.029"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:35.026" endtime="20171005 01:18:35.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:18:35.093" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:18:35.093" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:35.029" endtime="20171005 01:18:35.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:35.095" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:35.094" endtime="20171005 01:18:35.095"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:35.096" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:35.096" endtime="20171005 01:18:35.096"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:35.095" endtime="20171005 01:18:35.096"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:35.094" endtime="20171005 01:18:35.096"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:35.094" endtime="20171005 01:18:35.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:18:35.097" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:18:35.097" endtime="20171005 01:18:35.097"></status>
</kw>
<msg timestamp="20171005 01:18:35.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:34.716" endtime="20171005 01:18:35.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:35.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:35.098" endtime="20171005 01:18:35.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:18:35.099" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:18:35.099" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:18:35.099" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:18:35.098" endtime="20171005 01:18:35.099"></status>
</kw>
<msg timestamp="20171005 01:18:35.099" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:18:34.715" endtime="20171005 01:18:35.099"></status>
</kw>
<msg timestamp="20171005 01:18:35.099" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:18:34.715" endtime="20171005 01:18:35.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:18:35.100" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:18:35.100" endtime="20171005 01:18:35.100"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:34.714" endtime="20171005 01:18:35.100"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:34.714" endtime="20171005 01:18:35.101"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:18:45.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:18:45.106" endtime="20171005 01:18:45.106"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:18:45.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:18:45.107" endtime="20171005 01:18:45.107"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:18:45.107" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:18:45.107" endtime="20171005 01:18:45.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:18:45.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:18:45.108" endtime="20171005 01:18:45.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:18:45.318" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:18:45.109" endtime="20171005 01:18:45.318"></status>
</kw>
<msg timestamp="20171005 01:18:45.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:18:45.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:45.109" endtime="20171005 01:18:45.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:18:45.319" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:45.319" endtime="20171005 01:18:45.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:45.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:45.319" endtime="20171005 01:18:45.320"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.105" endtime="20171005 01:18:45.320"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.104" endtime="20171005 01:18:45.320"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.103" endtime="20171005 01:18:45.320"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:18:45.321" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:18:45.320" endtime="20171005 01:18:45.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:45.323" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:45.322" endtime="20171005 01:18:45.323"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:45.324" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:45.324" endtime="20171005 01:18:45.324"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.323" endtime="20171005 01:18:45.324"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.322" endtime="20171005 01:18:45.324"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.321" endtime="20171005 01:18:45.324"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:18:45.425" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:18:45.426" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:45.325" endtime="20171005 01:18:45.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:45.427" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:45.427" endtime="20171005 01:18:45.428"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:45.429" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:45.428" endtime="20171005 01:18:45.429"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.428" endtime="20171005 01:18:45.429"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.426" endtime="20171005 01:18:45.429"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:45.426" endtime="20171005 01:18:45.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:18:45.430" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:18:45.429" endtime="20171005 01:18:45.430"></status>
</kw>
<msg timestamp="20171005 01:18:45.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:45.103" endtime="20171005 01:18:45.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:45.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:45.430" endtime="20171005 01:18:45.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:18:45.431" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:18:45.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:18:45.431" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:18:45.431" endtime="20171005 01:18:45.431"></status>
</kw>
<msg timestamp="20171005 01:18:45.432" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:18:45.102" endtime="20171005 01:18:45.432"></status>
</kw>
<msg timestamp="20171005 01:18:45.432" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:18:45.102" endtime="20171005 01:18:45.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:18:45.433" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:18:45.432" endtime="20171005 01:18:45.433"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:45.101" endtime="20171005 01:18:45.433"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:45.101" endtime="20171005 01:18:45.433"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:18:55.438" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:18:55.438" endtime="20171005 01:18:55.439"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:18:55.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:18:55.439" endtime="20171005 01:18:55.439"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:18:55.440" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:18:55.440" endtime="20171005 01:18:55.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:18:55.441" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:18:55.440" endtime="20171005 01:18:55.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:18:55.630" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:18:55.441" endtime="20171005 01:18:55.631"></status>
</kw>
<msg timestamp="20171005 01:18:55.631" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:18:55.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:55.441" endtime="20171005 01:18:55.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:18:55.631" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:55.631" endtime="20171005 01:18:55.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:55.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:55.632" endtime="20171005 01:18:55.632"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.437" endtime="20171005 01:18:55.632"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.437" endtime="20171005 01:18:55.632"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.436" endtime="20171005 01:18:55.633"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:18:55.633" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:18:55.633" endtime="20171005 01:18:55.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:55.635" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:55.635" endtime="20171005 01:18:55.635"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:55.636" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:18:55.636" endtime="20171005 01:18:55.636"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.635" endtime="20171005 01:18:55.636"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.634" endtime="20171005 01:18:55.637"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.633" endtime="20171005 01:18:55.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:18:55.710" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:18:55.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:55.637" endtime="20171005 01:18:55.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:18:55.712" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:55.712" endtime="20171005 01:18:55.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:18:55.714" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:18:55.713" endtime="20171005 01:18:55.714"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.713" endtime="20171005 01:18:55.714"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.711" endtime="20171005 01:18:55.714"></status>
</kw>
<status status="PASS" starttime="20171005 01:18:55.711" endtime="20171005 01:18:55.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:18:55.714" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:18:55.714" endtime="20171005 01:18:55.714"></status>
</kw>
<msg timestamp="20171005 01:18:55.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:18:55.435" endtime="20171005 01:18:55.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:18:55.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:18:55.715" endtime="20171005 01:18:55.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:18:55.716" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:18:55.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:18:55.716" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:18:55.716" endtime="20171005 01:18:55.716"></status>
</kw>
<msg timestamp="20171005 01:18:55.716" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:18:55.435" endtime="20171005 01:18:55.716"></status>
</kw>
<msg timestamp="20171005 01:18:55.717" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:18:55.435" endtime="20171005 01:18:55.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:18:55.717" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:18:55.717" endtime="20171005 01:18:55.717"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:55.434" endtime="20171005 01:18:55.718"></status>
</kw>
<status status="FAIL" starttime="20171005 01:18:55.434" endtime="20171005 01:18:55.718"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:05.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:05.723" endtime="20171005 01:19:05.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:05.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:05.724" endtime="20171005 01:19:05.725"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:05.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:05.725" endtime="20171005 01:19:05.726"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:05.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:05.726" endtime="20171005 01:19:05.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:05.915" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:05.727" endtime="20171005 01:19:05.915"></status>
</kw>
<msg timestamp="20171005 01:19:05.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:05.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:05.726" endtime="20171005 01:19:05.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:05.916" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:05.916" endtime="20171005 01:19:05.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:05.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:05.917" endtime="20171005 01:19:05.917"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.722" endtime="20171005 01:19:05.917"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.722" endtime="20171005 01:19:05.917"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.721" endtime="20171005 01:19:05.917"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:05.918" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:19:05.918" endtime="20171005 01:19:05.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:05.920" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:05.920" endtime="20171005 01:19:05.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:05.921" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:05.921" endtime="20171005 01:19:05.921"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.920" endtime="20171005 01:19:05.921"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.919" endtime="20171005 01:19:05.922"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.918" endtime="20171005 01:19:05.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:05.984" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:19:05.984" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:05.922" endtime="20171005 01:19:05.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:05.986" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:05.986" endtime="20171005 01:19:05.986"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:05.987" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:05.987" endtime="20171005 01:19:05.987"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.986" endtime="20171005 01:19:05.988"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.985" endtime="20171005 01:19:05.988"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:05.985" endtime="20171005 01:19:05.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:05.988" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:05.988" endtime="20171005 01:19:05.988"></status>
</kw>
<msg timestamp="20171005 01:19:05.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:05.721" endtime="20171005 01:19:05.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:05.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:05.989" endtime="20171005 01:19:05.989"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:05.990" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:05.990" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:05.990" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:19:05.990" endtime="20171005 01:19:05.990"></status>
</kw>
<msg timestamp="20171005 01:19:05.990" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:19:05.720" endtime="20171005 01:19:05.990"></status>
</kw>
<msg timestamp="20171005 01:19:05.991" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:19:05.720" endtime="20171005 01:19:05.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:19:05.991" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:19:05.991" endtime="20171005 01:19:05.991"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:05.719" endtime="20171005 01:19:05.992"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:05.719" endtime="20171005 01:19:05.992"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:15.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:15.997" endtime="20171005 01:19:15.997"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:15.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:15.998" endtime="20171005 01:19:15.998"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:15.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:15.998" endtime="20171005 01:19:15.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:15.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:15.999" endtime="20171005 01:19:15.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:16.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:16.000" endtime="20171005 01:19:16.207"></status>
</kw>
<msg timestamp="20171005 01:19:16.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:16.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:16.000" endtime="20171005 01:19:16.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:16.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:16.208" endtime="20171005 01:19:16.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:16.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:16.209" endtime="20171005 01:19:16.209"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:15.996" endtime="20171005 01:19:16.209"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:15.996" endtime="20171005 01:19:16.209"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:15.995" endtime="20171005 01:19:16.209"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:16.210" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:19:16.210" endtime="20171005 01:19:16.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:16.212" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:16.211" endtime="20171005 01:19:16.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:16.213" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:16.213" endtime="20171005 01:19:16.213"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:16.212" endtime="20171005 01:19:16.213"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:16.211" endtime="20171005 01:19:16.213"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:16.210" endtime="20171005 01:19:16.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:16.278" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:19:16.278" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:16.214" endtime="20171005 01:19:16.278"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:16.280" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:16.280" endtime="20171005 01:19:16.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:16.281" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:16.281" endtime="20171005 01:19:16.281"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:16.280" endtime="20171005 01:19:16.281"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:16.279" endtime="20171005 01:19:16.282"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:16.279" endtime="20171005 01:19:16.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:16.282" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:16.282" endtime="20171005 01:19:16.282"></status>
</kw>
<msg timestamp="20171005 01:19:16.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:15.994" endtime="20171005 01:19:16.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:16.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:16.283" endtime="20171005 01:19:16.283"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:16.284" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:16.284" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:16.284" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:19:16.283" endtime="20171005 01:19:16.284"></status>
</kw>
<msg timestamp="20171005 01:19:16.284" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:19:15.994" endtime="20171005 01:19:16.284"></status>
</kw>
<msg timestamp="20171005 01:19:16.284" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:19:15.993" endtime="20171005 01:19:16.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:19:16.285" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:19:16.285" endtime="20171005 01:19:16.285"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:15.993" endtime="20171005 01:19:16.285"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:15.992" endtime="20171005 01:19:16.285"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:26.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:26.291" endtime="20171005 01:19:26.292"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:26.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:26.292" endtime="20171005 01:19:26.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:26.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:26.293" endtime="20171005 01:19:26.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:26.294" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:26.293" endtime="20171005 01:19:26.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:26.489" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:26.294" endtime="20171005 01:19:26.490"></status>
</kw>
<msg timestamp="20171005 01:19:26.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:26.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:26.294" endtime="20171005 01:19:26.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:26.490" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:26.490" endtime="20171005 01:19:26.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:26.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:26.491" endtime="20171005 01:19:26.491"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.290" endtime="20171005 01:19:26.491"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.289" endtime="20171005 01:19:26.491"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.289" endtime="20171005 01:19:26.492"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:26.492" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:19:26.492" endtime="20171005 01:19:26.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:26.494" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:26.494" endtime="20171005 01:19:26.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:26.495" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:26.495" endtime="20171005 01:19:26.495"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.495" endtime="20171005 01:19:26.495"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.493" endtime="20171005 01:19:26.496"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.493" endtime="20171005 01:19:26.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:26.559" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:19:26.559" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:26.496" endtime="20171005 01:19:26.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:26.561" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:26.560" endtime="20171005 01:19:26.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:26.562" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:26.561" endtime="20171005 01:19:26.562"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.561" endtime="20171005 01:19:26.562"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.560" endtime="20171005 01:19:26.562"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:26.559" endtime="20171005 01:19:26.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:26.563" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:26.563" endtime="20171005 01:19:26.563"></status>
</kw>
<msg timestamp="20171005 01:19:26.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:26.288" endtime="20171005 01:19:26.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:26.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:26.563" endtime="20171005 01:19:26.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:26.564" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:26.564" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:26.565" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:19:26.564" endtime="20171005 01:19:26.565"></status>
</kw>
<msg timestamp="20171005 01:19:26.565" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:19:26.287" endtime="20171005 01:19:26.565"></status>
</kw>
<msg timestamp="20171005 01:19:26.565" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:19:26.287" endtime="20171005 01:19:26.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:19:26.566" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:19:26.565" endtime="20171005 01:19:26.566"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:26.287" endtime="20171005 01:19:26.566"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:26.286" endtime="20171005 01:19:26.566"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:36.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:36.572" endtime="20171005 01:19:36.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:36.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:36.573" endtime="20171005 01:19:36.574"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:36.574" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:36.574" endtime="20171005 01:19:36.574"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:36.575" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:36.575" endtime="20171005 01:19:36.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:36.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:36.576" endtime="20171005 01:19:36.821"></status>
</kw>
<msg timestamp="20171005 01:19:36.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:36.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:36.575" endtime="20171005 01:19:36.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:36.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:36.822" endtime="20171005 01:19:36.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:36.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:36.822" endtime="20171005 01:19:36.823"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.572" endtime="20171005 01:19:36.823"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.571" endtime="20171005 01:19:36.823"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.570" endtime="20171005 01:19:36.823"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:36.824" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 01:19:36.823" endtime="20171005 01:19:36.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:36.826" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:36.825" endtime="20171005 01:19:36.826"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:36.827" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 01:19:36.827" endtime="20171005 01:19:36.827"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.826" endtime="20171005 01:19:36.827"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.825" endtime="20171005 01:19:36.827"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.824" endtime="20171005 01:19:36.827"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:36.891" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 01:19:36.891" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:36.828" endtime="20171005 01:19:36.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:19:36.893" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:36.892" endtime="20171005 01:19:36.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:19:36.894" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:19:36.894" endtime="20171005 01:19:36.894"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.893" endtime="20171005 01:19:36.894"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.892" endtime="20171005 01:19:36.894"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.891" endtime="20171005 01:19:36.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:36.895" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:36.894" endtime="20171005 01:19:36.895"></status>
</kw>
<msg timestamp="20171005 01:19:36.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:36.569" endtime="20171005 01:19:36.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:36.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:36.895" endtime="20171005 01:19:36.896"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:36.896" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:36.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:36.896" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:19:36.896" endtime="20171005 01:19:36.896"></status>
</kw>
<msg timestamp="20171005 01:19:36.897" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 01:19:36.569" endtime="20171005 01:19:36.897"></status>
</kw>
<msg timestamp="20171005 01:19:36.897" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 01:19:36.569" endtime="20171005 01:19:36.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 01:19:36.898" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 01:19:36.897" endtime="20171005 01:19:36.898"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:36.568" endtime="20171005 01:19:36.898"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:36.567" endtime="20171005 01:19:36.898"></status>
</kw>
<msg timestamp="20171005 01:19:36.898" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status status="FAIL" starttime="20171005 01:09:32.624" endtime="20171005 01:19:36.898"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:31.681" endtime="20171005 01:19:36.898"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:29.588" endtime="20171005 01:19:36.899"></status>
</kw>
<status status="FAIL" starttime="20171005 01:09:29.587" endtime="20171005 01:19:36.899"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171005 01:19:36.931" level="INFO">Length is 10</msg>
<status status="PASS" starttime="20171005 01:19:36.931" endtime="20171005 01:19:36.931"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:19:36.940" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:19:39.962" level="INFO">${RC} = 0</msg>
<msg timestamp="20171005 01:19:39.963" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.75 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.583 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" starttime="20171005 01:19:36.932" endtime="20171005 01:19:39.963"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171005 01:19:39.966" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.75 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.583 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.566 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.572 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.566/0.868/1.751/0.509 ms</msg>
<status status="PASS" starttime="20171005 01:19:39.965" endtime="20171005 01:19:39.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:39.966" endtime="20171005 01:19:39.967"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.930" endtime="20171005 01:19:39.967"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:19:40.022" level="INFO">${cur_time} = 2017-10-05 01:19:40:021699</msg>
<status status="PASS" starttime="20171005 01:19:40.021" endtime="20171005 01:19:40.022"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:19:40.022" level="INFO">${cur_time} = 20171005011940021699</msg>
<status status="PASS" starttime="20171005 01:19:40.022" endtime="20171005 01:19:40.023"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.021" endtime="20171005 01:19:40.023"></status>
</kw>
<msg timestamp="20171005 01:19:40.023" level="INFO">${FFDC_TIME} = 20171005011940021699</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 01:19:40.034" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20171005 01:19:40.034" endtime="20171005 01:19:40.034"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 01:19:40.035" level="INFO">${suite_name} = 20171005011940021699_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20171005 01:19:40.034" endtime="20171005 01:19:40.035"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 01:19:40.035" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20171005 01:19:40.035" endtime="20171005 01:19:40.035"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 01:19:40.038" level="INFO">${test_name} = 20171005011940021699_PowerOnTest</msg>
<status status="PASS" starttime="20171005 01:19:40.036" endtime="20171005 01:19:40.038"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.033" endtime="20171005 01:19:40.039"></status>
</kw>
<msg timestamp="20171005 01:19:40.039" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/</msg>
<msg timestamp="20171005 01:19:40.039" level="INFO">${FFDC_PREFIX} = 20171005011940021699_</msg>
<msg timestamp="20171005 01:19:40.070" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.072" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.071" endtime="20171005 01:19:40.072"></status>
</kw>
<msg timestamp="20171005 01:19:40.077" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.110" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.108" endtime="20171005 01:19:40.110"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.107" endtime="20171005 01:19:40.110"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.111" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.111" endtime="20171005 01:19:40.112"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.110" endtime="20171005 01:19:40.112"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.113" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.113" endtime="20171005 01:19:40.113"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.112" endtime="20171005 01:19:40.113"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.114" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.114" endtime="20171005 01:19:40.114"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.113" endtime="20171005 01:19:40.114"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.116" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.115" endtime="20171005 01:19:40.116"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.115" endtime="20171005 01:19:40.116"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.119" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.118" endtime="20171005 01:19:40.119"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.117" endtime="20171005 01:19:40.119"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.120" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.120" endtime="20171005 01:19:40.120"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.119" endtime="20171005 01:19:40.120"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.121" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.121" endtime="20171005 01:19:40.122"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.120" endtime="20171005 01:19:40.122"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.123" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.122" endtime="20171005 01:19:40.123"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.122" endtime="20171005 01:19:40.123"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.124" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.124" endtime="20171005 01:19:40.125"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.123" endtime="20171005 01:19:40.125"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.126" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.125" endtime="20171005 01:19:40.126"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.125" endtime="20171005 01:19:40.126"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.127" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.127" endtime="20171005 01:19:40.127"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.126" endtime="20171005 01:19:40.127"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.129" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.129" endtime="20171005 01:19:40.129"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.127" endtime="20171005 01:19:40.129"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 01:19:40.175" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:40.176" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171005 01:19:40.274" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 01:19:40.291" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171005 01:19:40.291" level="INFO">${stderr} = </msg>
<msg timestamp="20171005 01:19:40.291" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20171005 01:19:40.130" endtime="20171005 01:19:40.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 01:19:40.292" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 01:19:40.291" endtime="20171005 01:19:40.292"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 01:19:40.293" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20171005 01:19:40.292" endtime="20171005 01:19:40.293"></status>
</kw>
<msg timestamp="20171005 01:19:40.293" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20171005 01:19:40.130" endtime="20171005 01:19:40.293"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.295" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.294" endtime="20171005 01:19:40.295"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.293" endtime="20171005 01:19:40.295"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.123" endtime="20171005 01:19:40.295"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.296" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.296" endtime="20171005 01:19:40.297"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.295" endtime="20171005 01:19:40.297"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:19:40.297" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status status="PASS" starttime="20171005 01:19:40.297" endtime="20171005 01:19:40.297"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.299" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.298" endtime="20171005 01:19:40.299"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.298" endtime="20171005 01:19:40.299"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.300" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.300" endtime="20171005 01:19:40.300"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.299" endtime="20171005 01:19:40.300"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.297" endtime="20171005 01:19:40.300"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.302" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.301" endtime="20171005 01:19:40.302"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.301" endtime="20171005 01:19:40.302"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.303" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.303" endtime="20171005 01:19:40.303"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.302" endtime="20171005 01:19:40.303"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.300" endtime="20171005 01:19:40.303"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.306" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.306" endtime="20171005 01:19:40.306"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.303" endtime="20171005 01:19:40.307"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.308" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.307" endtime="20171005 01:19:40.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.307" endtime="20171005 01:19:40.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.303" endtime="20171005 01:19:40.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.297" endtime="20171005 01:19:40.308"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.309" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.309" endtime="20171005 01:19:40.309"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.308" endtime="20171005 01:19:40.309"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.107" endtime="20171005 01:19:40.310"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:19:40.320" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20171005 01:19:40.320" endtime="20171005 01:19:40.320"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171005 01:19:40.322" level="INFO">@{method_list} = [ ('Sys Inventory Files', 'System Inventory Files') | ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('SEL Log', 'Collect eSEL...</msg>
<status status="PASS" starttime="20171005 01:19:40.322" endtime="20171005 01:19:40.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.323" endtime="20171005 01:19:40.323"></status>
</kw>
<msg timestamp="20171005 01:19:40.324" level="INFO">@{ffdc_function_list} = [ Sys Inventory Files | OS FFDC | BMC Specific Files | FFDC Generic Report | SEL Log | Get Request FFDC | Core Files ]</msg>
<status status="PASS" starttime="20171005 01:19:40.322" endtime="20171005 01:19:40.324"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.325" endtime="20171005 01:19:40.326"></status>
</kw>
<msg timestamp="20171005 01:19:40.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:40.326" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:40.325" endtime="20171005 01:19:40.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.326" endtime="20171005 01:19:40.326"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.372" endtime="20171005 01:19:40.373"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.374" level="INFO">File '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/2731/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20171005 01:19:40.373" endtime="20171005 01:19:40.374"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.372" endtime="20171005 01:19:40.374"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.327" endtime="20171005 01:19:40.374"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.324" endtime="20171005 01:19:40.374"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.324" endtime="20171005 01:19:40.374"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.376" endtime="20171005 01:19:40.376"></status>
</kw>
<msg timestamp="20171005 01:19:40.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:40.380" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:40.375" endtime="20171005 01:19:40.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.380" endtime="20171005 01:19:40.380"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171005 01:19:40.427" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 01:19:40.427" endtime="20171005 01:19:40.427"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.426" endtime="20171005 01:19:40.427"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.380" endtime="20171005 01:19:40.428"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.374" endtime="20171005 01:19:40.428"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.374" endtime="20171005 01:19:40.428"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.429" endtime="20171005 01:19:40.430"></status>
</kw>
<msg timestamp="20171005 01:19:40.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:40.430" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:40.429" endtime="20171005 01:19:40.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.430" endtime="20171005 01:19:40.430"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:19:40.478" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20171005 01:19:40.477" endtime="20171005 01:19:40.478"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:19:40.479" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd...</msg>
<status status="PASS" starttime="20171005 01:19:40.479" endtime="20171005 01:19:40.479"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:40.480" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20171005 01:19:40.480" endtime="20171005 01:19:40.480"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.481" endtime="20171005 01:19:40.481"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:40.482" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:40.482" endtime="20171005 01:19:40.482"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:40.617" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:40.617" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171005 01:19:40.916" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:40.548" endtime="20171005 01:19:40.916"></status>
</kw>
<msg timestamp="20171005 01:19:40.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:40.916" level="INFO">${ret_values} = (u'Mem: 155504K used, 276748K free, 8908K shrd, 12032K buff, 44236K cached\nCPU:  23% usr  15% sys   0% nic  61% idle   0% io   0% irq   0% sirq\nLoad average: 0.26 0.54 0.70 1/163 1831\n  PID  PPID U...</msg>
<status status="PASS" starttime="20171005 01:19:40.482" endtime="20171005 01:19:40.916"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:40.917" level="INFO">${stdout} = Mem: 155504K used, 276748K free, 8908K shrd, 12032K buff, 44236K cached
CPU:  23% usr  15% sys   0% nic  61% idle   0% io   0% irq   0% sirq
Load average: 0.26 0.54 0.70 1/163 1831
  PID  PPID USER   ...</msg>
<status status="PASS" starttime="20171005 01:19:40.917" endtime="20171005 01:19:40.917"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:40.918" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:40.917" endtime="20171005 01:19:40.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:40.929" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_proc_list.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:40.928" endtime="20171005 01:19:40.929"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.927" endtime="20171005 01:19:40.929"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.918" endtime="20171005 01:19:40.929"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.480" endtime="20171005 01:19:40.929"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.479" endtime="20171005 01:19:40.929"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:40.930" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_journalctl_pretty.txt</msg>
<status status="PASS" starttime="20171005 01:19:40.930" endtime="20171005 01:19:40.930"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:40.931" endtime="20171005 01:19:40.932"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:40.932" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:40.932" endtime="20171005 01:19:40.932"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:41.053" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:41.054" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171005 01:19:45.621" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:40.986" endtime="20171005 01:19:45.624"></status>
</kw>
<msg timestamp="20171005 01:19:45.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:45.650" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=a85d94a5f48d4613857a9a0b0dfcd8b5;i=1;b=9a9dbf1b773c42f5910517cf67865b3e;m=d03692;t=55ac25124df9d;x=cb3a09745c54e6fa",\n\t"__REALTIME_TIMESTAMP" : "1507165515079581",\n\t"__MONO...</msg>
<status status="PASS" starttime="20171005 01:19:40.933" endtime="20171005 01:19:45.650"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:45.656" level="INFO">${stdout} = {
	"__CURSOR" : "s=a85d94a5f48d4613857a9a0b0dfcd8b5;i=1;b=9a9dbf1b773c42f5910517cf67865b3e;m=d03692;t=55ac25124df9d;x=cb3a09745c54e6fa",
	"__REALTIME_TIMESTAMP" : "1507165515079581",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" starttime="20171005 01:19:45.650" endtime="20171005 01:19:45.656"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:45.657" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:45.656" endtime="20171005 01:19:45.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:45.682" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:45.673" endtime="20171005 01:19:45.682"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:45.665" endtime="20171005 01:19:45.683"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:45.657" endtime="20171005 01:19:45.683"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.930" endtime="20171005 01:19:45.683"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.929" endtime="20171005 01:19:45.683"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:45.684" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_journalctl_nopager.txt</msg>
<status status="PASS" starttime="20171005 01:19:45.683" endtime="20171005 01:19:45.684"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:45.685" endtime="20171005 01:19:45.685"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:45.686" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:45.685" endtime="20171005 01:19:45.686"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:45.821" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:45.821" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171005 01:19:47.334" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:45.743" endtime="20171005 01:19:47.335"></status>
</kw>
<msg timestamp="20171005 01:19:47.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:47.337" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-10-05 01:05:15 UTC, end at Thu 2017-10-05 01:19:52 UTC. --\nOct 05 01:05:15 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 05 01:05:15 witherspoon kernel: Linu...</msg>
<status status="PASS" starttime="20171005 01:19:45.686" endtime="20171005 01:19:47.338"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:47.339" level="INFO">${stdout} = -- Logs begin at Thu 2017-10-05 01:05:15 UTC, end at Thu 2017-10-05 01:19:52 UTC. --
Oct 05 01:05:15 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 05 01:05:15 witherspoon kernel: Linux ver...</msg>
<status status="PASS" starttime="20171005 01:19:47.338" endtime="20171005 01:19:47.339"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:47.340" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:47.340" endtime="20171005 01:19:47.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:47.349" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:47.348" endtime="20171005 01:19:47.349"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.346" endtime="20171005 01:19:47.349"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.340" endtime="20171005 01:19:47.349"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:45.684" endtime="20171005 01:19:47.349"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:45.683" endtime="20171005 01:19:47.349"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:47.350" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20171005 01:19:47.350" endtime="20171005 01:19:47.350"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:47.351" endtime="20171005 01:19:47.352"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:47.352" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:47.352" endtime="20171005 01:19:47.352"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:47.474" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:47.474" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171005 01:19:47.531" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:47.408" endtime="20171005 01:19:47.531"></status>
</kw>
<msg timestamp="20171005 01:19:47.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:47.532" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          276684 kB\nMemAvailable:     321408 kB\nBuffers:           12032 kB\nCached:            44236 kB\nSwapCached:            0 kB\nActive:           10229...</msg>
<status status="PASS" starttime="20171005 01:19:47.353" endtime="20171005 01:19:47.532"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:47.532" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          276684 kB
MemAvailable:     321408 kB
Buffers:           12032 kB
Cached:            44236 kB
SwapCached:            0 kB
Active:           102296 kB
Inac...</msg>
<status status="PASS" starttime="20171005 01:19:47.532" endtime="20171005 01:19:47.532"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:47.533" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:47.533" endtime="20171005 01:19:47.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:47.540" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_meminfo.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:47.540" endtime="20171005 01:19:47.540"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.539" endtime="20171005 01:19:47.541"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.533" endtime="20171005 01:19:47.541"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.350" endtime="20171005 01:19:47.541"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.349" endtime="20171005 01:19:47.541"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:47.542" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20171005 01:19:47.541" endtime="20171005 01:19:47.542"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:47.543" endtime="20171005 01:19:47.543"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:47.544" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:47.543" endtime="20171005 01:19:47.544"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:47.661" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:47.662" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171005 01:19:48.278" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:47.601" endtime="20171005 01:19:48.278"></status>
</kw>
<msg timestamp="20171005 01:19:48.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:48.279" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  5 01:08 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  5 01:08 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20171005 01:19:47.544" endtime="20171005 01:19:48.279"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:48.280" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  5 01:08 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  5 01:08 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20171005 01:19:48.280" endtime="20171005 01:19:48.280"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:48.281" level="INFO">${stderr} = ls: /proc/1835/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20171005 01:19:48.281" endtime="20171005 01:19:48.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.289" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.288" endtime="20171005 01:19:48.289"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.287" endtime="20171005 01:19:48.289"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.281" endtime="20171005 01:19:48.289"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.542" endtime="20171005 01:19:48.289"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:47.541" endtime="20171005 01:19:48.289"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:48.290" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20171005 01:19:48.290" endtime="20171005 01:19:48.290"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:48.291" endtime="20171005 01:19:48.292"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:48.292" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:48.292" endtime="20171005 01:19:48.293"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:48.419" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:48.419" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171005 01:19:48.466" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:48.348" endtime="20171005 01:19:48.466"></status>
</kw>
<msg timestamp="20171005 01:19:48.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:48.466" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20171005 01:19:48.293" endtime="20171005 01:19:48.466"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:48.467" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20171005 01:19:48.467" endtime="20171005 01:19:48.467"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:48.468" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:48.467" endtime="20171005 01:19:48.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.475" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_procinfo.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.474" endtime="20171005 01:19:48.475"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.474" endtime="20171005 01:19:48.475"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.468" endtime="20171005 01:19:48.475"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.291" endtime="20171005 01:19:48.475"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.290" endtime="20171005 01:19:48.476"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:48.476" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20171005 01:19:48.476" endtime="20171005 01:19:48.476"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:48.477" endtime="20171005 01:19:48.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:48.479" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:48.478" endtime="20171005 01:19:48.479"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:48.606" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:48.606" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171005 01:19:48.703" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:48.534" endtime="20171005 01:19:48.703"></status>
</kw>
<msg timestamp="20171005 01:19:48.703" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:48.704" level="INFO">${ret_values} = (u'[    0.290000] 1e78d000.serial: ttyS1 at MMIO 0x1e78d000 (irq = 24, base_baud = 1500000) is a 16550A\n[    0.290000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 1...</msg>
<status status="PASS" starttime="20171005 01:19:48.479" endtime="20171005 01:19:48.704"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:48.704" level="INFO">${stdout} = [    0.290000] 1e78d000.serial: ttyS1 at MMIO 0x1e78d000 (irq = 24, base_baud = 1500000) is a 16550A
[    0.290000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550...</msg>
<status status="PASS" starttime="20171005 01:19:48.704" endtime="20171005 01:19:48.705"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:48.705" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:48.705" endtime="20171005 01:19:48.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.716" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_dmesg.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.715" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.714" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.705" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.477" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.476" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.479" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.478" endtime="20171005 01:19:48.716"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.478" endtime="20171005 01:19:48.717"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.478" endtime="20171005 01:19:48.717"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.477" endtime="20171005 01:19:48.717"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.431" endtime="20171005 01:19:48.717"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.428" endtime="20171005 01:19:48.717"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.428" endtime="20171005 01:19:48.717"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:48.719" endtime="20171005 01:19:48.719"></status>
</kw>
<msg timestamp="20171005 01:19:48.719" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:48.719" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:48.718" endtime="20171005 01:19:48.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:48.720" endtime="20171005 01:19:48.720"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:19:48.761" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status status="PASS" starttime="20171005 01:19:48.761" endtime="20171005 01:19:48.761"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:19:48.763" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status status="PASS" starttime="20171005 01:19:48.762" endtime="20171005 01:19:48.763"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 01:19:48.771" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20171005 01:19:48.763" endtime="20171005 01:19:48.771"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.774" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.774" endtime="20171005 01:19:48.774"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.773" endtime="20171005 01:19:48.774"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.776" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.775" endtime="20171005 01:19:48.776"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.775" endtime="20171005 01:19:48.776"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.777" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.777" endtime="20171005 01:19:48.778"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.777" endtime="20171005 01:19:48.778"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.779" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.779" endtime="20171005 01:19:48.779"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.778" endtime="20171005 01:19:48.779"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.773" endtime="20171005 01:19:48.779"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.772" endtime="20171005 01:19:48.779"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:48.780" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:48.780" endtime="20171005 01:19:48.780"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:48.904" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:48.904" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171005 01:19:48.951" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:48.842" endtime="20171005 01:19:48.951"></status>
</kw>
<msg timestamp="20171005 01:19:48.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:48.951" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-107"\nVERSION_ID="v1.99.10-107-gc460ebe"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" starttime="20171005 01:19:48.781" endtime="20171005 01:19:48.952"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:48.952" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-107"
VERSION_ID="v1.99.10-107-gc460ebe"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" starttime="20171005 01:19:48.952" endtime="20171005 01:19:48.952"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:48.953" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:48.953" endtime="20171005 01:19:48.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.960" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.960" endtime="20171005 01:19:48.960"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.959" endtime="20171005 01:19:48.960"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.953" endtime="20171005 01:19:48.960"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.771" endtime="20171005 01:19:48.961"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.771" endtime="20171005 01:19:48.961"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.964" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.963" endtime="20171005 01:19:48.964"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.963" endtime="20171005 01:19:48.964"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.965" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.965" endtime="20171005 01:19:48.965"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.964" endtime="20171005 01:19:48.965"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.966" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.966" endtime="20171005 01:19:48.967"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.965" endtime="20171005 01:19:48.967"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:48.968" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:48.967" endtime="20171005 01:19:48.968"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.967" endtime="20171005 01:19:48.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.962" endtime="20171005 01:19:48.969"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.962" endtime="20171005 01:19:48.969"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:48.969" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:48.969" endtime="20171005 01:19:48.970"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:49.088" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:49.091" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171005 01:19:49.157" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:49.028" endtime="20171005 01:19:49.158"></status>
</kw>
<msg timestamp="20171005 01:19:49.158" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:49.158" level="INFO">${ret_values} = (u'20171004220210', u'', 0)</msg>
<status status="PASS" starttime="20171005 01:19:48.970" endtime="20171005 01:19:49.158"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:49.158" level="INFO">${stdout} = 20171004220210</msg>
<status status="PASS" starttime="20171005 01:19:49.158" endtime="20171005 01:19:49.159"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:49.159" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:49.159" endtime="20171005 01:19:49.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:49.166" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:49.166" endtime="20171005 01:19:49.166"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.165" endtime="20171005 01:19:49.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.159" endtime="20171005 01:19:49.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.961" endtime="20171005 01:19:49.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.961" endtime="20171005 01:19:49.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.771" endtime="20171005 01:19:49.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.762" endtime="20171005 01:19:49.167"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.762" endtime="20171005 01:19:49.167"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:19:49.168" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20171005 01:19:49.168" endtime="20171005 01:19:49.168"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 01:19:49.169" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20171005 01:19:49.169" endtime="20171005 01:19:49.169"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:49.172" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:49.172" endtime="20171005 01:19:49.172"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.171" endtime="20171005 01:19:49.172"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:49.174" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:49.173" endtime="20171005 01:19:49.174"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.172" endtime="20171005 01:19:49.174"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:49.175" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:49.175" endtime="20171005 01:19:49.175"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.174" endtime="20171005 01:19:49.175"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:49.177" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:49.176" endtime="20171005 01:19:49.177"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.175" endtime="20171005 01:19:49.177"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.171" endtime="20171005 01:19:49.177"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.170" endtime="20171005 01:19:49.177"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:49.178" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:49.177" endtime="20171005 01:19:49.178"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:49.293" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:49.294" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171005 01:19:50.664" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:49.235" endtime="20171005 01:19:50.664"></status>
</kw>
<msg timestamp="20171005 01:19:50.664" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:50.664" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" starttime="20171005 01:19:49.178" endtime="20171005 01:19:50.664"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:50.665" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20171005 01:19:50.665" endtime="20171005 01:19:50.665"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:50.666" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:50.665" endtime="20171005 01:19:50.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.673" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.672" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.672" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.666" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.169" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.169" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.169" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.167" endtime="20171005 01:19:50.673"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:49.167" endtime="20171005 01:19:50.673"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:19:50.675" level="INFO">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" starttime="20171005 01:19:50.674" endtime="20171005 01:19:50.675"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 01:19:50.675" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20171005 01:19:50.675" endtime="20171005 01:19:50.675"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.679" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.678" endtime="20171005 01:19:50.679"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.678" endtime="20171005 01:19:50.679"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.680" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.680" endtime="20171005 01:19:50.680"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.679" endtime="20171005 01:19:50.680"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.681" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.681" endtime="20171005 01:19:50.681"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.680" endtime="20171005 01:19:50.682"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.684" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.682" endtime="20171005 01:19:50.684"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.682" endtime="20171005 01:19:50.684"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.677" endtime="20171005 01:19:50.684"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.677" endtime="20171005 01:19:50.684"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:50.685" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:50.684" endtime="20171005 01:19:50.685"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:50.803" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:50.804" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171005 01:19:50.860" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:50.733" endtime="20171005 01:19:50.860"></status>
</kw>
<msg timestamp="20171005 01:19:50.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:50.861" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" starttime="20171005 01:19:50.685" endtime="20171005 01:19:50.861"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:50.861" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" starttime="20171005 01:19:50.861" endtime="20171005 01:19:50.861"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:50.862" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:50.862" endtime="20171005 01:19:50.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.869" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.869" endtime="20171005 01:19:50.869"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.868" endtime="20171005 01:19:50.869"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.862" endtime="20171005 01:19:50.869"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.676" endtime="20171005 01:19:50.870"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.676" endtime="20171005 01:19:50.870"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.873" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.872" endtime="20171005 01:19:50.873"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.872" endtime="20171005 01:19:50.873"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.874" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.874" endtime="20171005 01:19:50.874"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.873" endtime="20171005 01:19:50.874"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.875" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.875" endtime="20171005 01:19:50.876"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.874" endtime="20171005 01:19:50.876"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:50.877" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:50.876" endtime="20171005 01:19:50.877"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.876" endtime="20171005 01:19:50.877"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.871" endtime="20171005 01:19:50.877"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.871" endtime="20171005 01:19:50.877"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:50.878" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:50.877" endtime="20171005 01:19:50.878"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:50.995" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:50.995" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171005 01:19:51.040" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:50.934" endtime="20171005 01:19:51.041"></status>
</kw>
<msg timestamp="20171005 01:19:51.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:51.041" level="INFO">${ret_values} = (u' 01:20:06 up 15 min,  load average: 0.75, 0.64, 0.72', u'', 0)</msg>
<status status="PASS" starttime="20171005 01:19:50.878" endtime="20171005 01:19:51.041"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:51.042" level="INFO">${stdout} =  01:20:06 up 15 min,  load average: 0.75, 0.64, 0.72</msg>
<status status="PASS" starttime="20171005 01:19:51.041" endtime="20171005 01:19:51.042"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:51.042" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:51.042" endtime="20171005 01:19:51.042"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.052" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.051" endtime="20171005 01:19:51.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.051" endtime="20171005 01:19:51.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.043" endtime="20171005 01:19:51.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.870" endtime="20171005 01:19:51.052"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.870" endtime="20171005 01:19:51.053"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.055" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.055" endtime="20171005 01:19:51.056"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.055" endtime="20171005 01:19:51.056"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.057" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.057" endtime="20171005 01:19:51.057"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.056" endtime="20171005 01:19:51.057"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.058" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.058" endtime="20171005 01:19:51.058"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.057" endtime="20171005 01:19:51.059"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.060" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.059" endtime="20171005 01:19:51.060"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.059" endtime="20171005 01:19:51.060"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.054" endtime="20171005 01:19:51.060"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.054" endtime="20171005 01:19:51.060"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:19:51.061" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20171005 01:19:51.060" endtime="20171005 01:19:51.061"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 01:19:51.177" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:51.178" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171005 01:19:51.226" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 01:19:51.115" endtime="20171005 01:19:51.226"></status>
</kw>
<msg timestamp="20171005 01:19:51.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:51.226" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20171005 01:19:51.061" endtime="20171005 01:19:51.226"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 01:19:51.227" level="INFO">${stdout} = Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20171005 01:19:51.227" endtime="20171005 01:19:51.227"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 01:19:51.228" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 01:19:51.228" endtime="20171005 01:19:51.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.239" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.238" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.237" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.229" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.053" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.053" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.675" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.674" endtime="20171005 01:19:51.239"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:50.674" endtime="20171005 01:19:51.240"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.761" endtime="20171005 01:19:51.240"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.761" endtime="20171005 01:19:51.240"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.720" endtime="20171005 01:19:51.240"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.717" endtime="20171005 01:19:51.240"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:48.717" endtime="20171005 01:19:51.240"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.242" endtime="20171005 01:19:51.242"></status>
</kw>
<msg timestamp="20171005 01:19:51.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:51.243" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:51.241" endtime="20171005 01:19:51.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.243" endtime="20171005 01:19:51.243"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:51.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:51.289" endtime="20171005 01:19:51.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:51.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:51.290" endtime="20171005 01:19:51.290"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:51.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:51.291" endtime="20171005 01:19:51.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:51.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:51.291" endtime="20171005 01:19:51.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.479" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:51.292" endtime="20171005 01:19:51.479"></status>
</kw>
<msg timestamp="20171005 01:19:51.479" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:51.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.292" endtime="20171005 01:19:51.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.480" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.480" endtime="20171005 01:19:51.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.480" endtime="20171005 01:19:51.481"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.288" endtime="20171005 01:19:51.481"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.288" endtime="20171005 01:19:51.481"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.287" endtime="20171005 01:19:51.481"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:51.482" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20171005 01:19:51.481" endtime="20171005 01:19:51.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.482" endtime="20171005 01:19:51.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:51.660" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:51.660" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.483" endtime="20171005 01:19:51.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.660" endtime="20171005 01:19:51.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:51.661" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:51.661" endtime="20171005 01:19:51.661"></status>
</kw>
<msg timestamp="20171005 01:19:51.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.286" endtime="20171005 01:19:51.661"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.662" endtime="20171005 01:19:51.662"></status>
</kw>
<msg timestamp="20171005 01:19:51.663" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:51.662" endtime="20171005 01:19:51.663"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.663" endtime="20171005 01:19:51.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:51.664" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1323"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507165805466, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1323"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507165806835, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:51.664" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:51.664" level="INFO">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'AdditionalData': [u'_PID=1323'], u'associations': [], u'Resolved': 0, u'Timestamp': 1507165805466, u'Message': u'xyz.openbmc_project.Power.Fault....</msg>
<status status="PASS" starttime="20171005 01:19:51.663" endtime="20171005 01:19:51.664"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20171005 01:19:51.665" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" starttime="20171005 01:19:51.664" endtime="20171005 01:19:51.665"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:51.665" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_esel</msg>
<status status="PASS" starttime="20171005 01:19:51.665" endtime="20171005 01:19:51.665"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:51.666" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_esel"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:51.666" endtime="20171005 01:19:51.666"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.667" endtime="20171005 01:19:51.667"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:51.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:51.670" endtime="20171005 01:19:51.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:51.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:51.671" endtime="20171005 01:19:51.672"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:51.672" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:51.672" endtime="20171005 01:19:51.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:51.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:51.673" endtime="20171005 01:19:51.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:51.674" endtime="20171005 01:19:51.879"></status>
</kw>
<msg timestamp="20171005 01:19:51.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:51.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.673" endtime="20171005 01:19:51.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.879" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.879" endtime="20171005 01:19:51.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.880" endtime="20171005 01:19:51.880"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.670" endtime="20171005 01:19:51.880"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.669" endtime="20171005 01:19:51.880"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.669" endtime="20171005 01:19:51.881"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:51.881" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20171005 01:19:51.881" endtime="20171005 01:19:51.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.881" endtime="20171005 01:19:51.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:51.982" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171005 01:19:51.982" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.882" endtime="20171005 01:19:51.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.983" endtime="20171005 01:19:51.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:51.983" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:51.983" endtime="20171005 01:19:51.983"></status>
</kw>
<msg timestamp="20171005 01:19:51.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.668" endtime="20171005 01:19:51.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.984" endtime="20171005 01:19:51.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:51.985" level="INFO">To JSON using : content={
  "data": [
    "_PID=1323"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:51.985" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:51.985" level="INFO">${content} = {u'data': [u'_PID=1323'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:19:51.985" endtime="20171005 01:19:51.985"></status>
</kw>
<msg timestamp="20171005 01:19:51.985" level="INFO">${esel_data} = [u'_PID=1323']</msg>
<status status="PASS" starttime="20171005 01:19:51.667" endtime="20171005 01:19:51.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171005 01:19:51.987" level="FAIL">[ _PID=1323 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171005 01:19:51.986" endtime="20171005 01:19:51.987"></status>
</kw>
<msg timestamp="20171005 01:19:51.987" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 01:19:51.986" endtime="20171005 01:19:51.987"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171005 01:19:51.987" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 01:19:51.987" endtime="20171005 01:19:51.988"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.666" endtime="20171005 01:19:51.988"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:51.988" endtime="20171005 01:19:51.989"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:51.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:51.992" endtime="20171005 01:19:51.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:51.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:51.993" endtime="20171005 01:19:51.993"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:51.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:51.993" endtime="20171005 01:19:51.994"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:51.995" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:51.994" endtime="20171005 01:19:51.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:51.995" endtime="20171005 01:19:52.183"></status>
</kw>
<msg timestamp="20171005 01:19:52.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:52.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.995" endtime="20171005 01:19:52.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.183" endtime="20171005 01:19:52.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.184" endtime="20171005 01:19:52.185"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.991" endtime="20171005 01:19:52.185"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.991" endtime="20171005 01:19:52.185"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.990" endtime="20171005 01:19:52.185"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:52.185" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20171005 01:19:52.185" endtime="20171005 01:19:52.185"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.186" endtime="20171005 01:19:52.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:52.268" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171005 01:19:52.268" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.186" endtime="20171005 01:19:52.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.269" endtime="20171005 01:19:52.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:52.269" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:52.269" endtime="20171005 01:19:52.270"></status>
</kw>
<msg timestamp="20171005 01:19:52.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:51.989" endtime="20171005 01:19:52.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.270" endtime="20171005 01:19:52.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:19:52.271" level="INFO">To JSON using : content={
  "data": [
    "_PID=1323"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:52.271" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:19:52.271" level="INFO">${content} = {u'data': [u'_PID=1323'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:19:52.271" endtime="20171005 01:19:52.271"></status>
</kw>
<msg timestamp="20171005 01:19:52.272" level="INFO">${esel_data} = [u'_PID=1323']</msg>
<status status="PASS" starttime="20171005 01:19:51.989" endtime="20171005 01:19:52.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171005 01:19:52.273" level="FAIL">[ _PID=1323 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171005 01:19:52.272" endtime="20171005 01:19:52.273"></status>
</kw>
<msg timestamp="20171005 01:19:52.273" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 01:19:52.272" endtime="20171005 01:19:52.273"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.274" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 01:19:52.273" endtime="20171005 01:19:52.274"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.988" endtime="20171005 01:19:52.274"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.666" endtime="20171005 01:19:52.274"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20171005 01:19:52.278" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:19:52.283" level="INFO">${out} = </msg>
<status status="PASS" starttime="20171005 01:19:52.274" endtime="20171005 01:19:52.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20171005 01:19:52.288" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20171005 01:19:52.287" endtime="20171005 01:19:52.288"></status>
</kw>
<msg timestamp="20171005 01:19:52.288" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 01:19:52.286" endtime="20171005 01:19:52.288"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171005 01:19:52.289" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 01:19:52.289" endtime="20171005 01:19:52.289"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.284" endtime="20171005 01:19:52.290"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.244" endtime="20171005 01:19:52.290"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.240" endtime="20171005 01:19:52.290"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:51.240" endtime="20171005 01:19:52.290"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.292" endtime="20171005 01:19:52.293"></status>
</kw>
<msg timestamp="20171005 01:19:52.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:52.293" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:52.292" endtime="20171005 01:19:52.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.294" endtime="20171005 01:19:52.294"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 01:19:52.335" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20171005 01:19:52.335" endtime="20171005 01:19:52.335"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 01:19:52.337" level="INFO">@{cmd_list} = [ ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list',...</msg>
<status status="PASS" starttime="20171005 01:19:52.336" endtime="20171005 01:19:52.337"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:52.338" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_FIRMWARE_list.txt</msg>
<status status="PASS" starttime="20171005 01:19:52.338" endtime="20171005 01:19:52.338"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:52.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:52.342" endtime="20171005 01:19:52.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:52.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:52.343" endtime="20171005 01:19:52.343"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:52.344" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:52.344" endtime="20171005 01:19:52.344"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:52.345" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:52.344" endtime="20171005 01:19:52.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.535" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:52.345" endtime="20171005 01:19:52.535"></status>
</kw>
<msg timestamp="20171005 01:19:52.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:52.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.345" endtime="20171005 01:19:52.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.536" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.536" endtime="20171005 01:19:52.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.537" endtime="20171005 01:19:52.537"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.341" endtime="20171005 01:19:52.537"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.340" endtime="20171005 01:19:52.537"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.339" endtime="20171005 01:19:52.537"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:52.538" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:52.538" endtime="20171005 01:19:52.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.538" endtime="20171005 01:19:52.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:52.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:52.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.539" endtime="20171005 01:19:52.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.967" endtime="20171005 01:19:52.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:52.967" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:52.967" endtime="20171005 01:19:52.968"></status>
</kw>
<msg timestamp="20171005 01:19:52.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.339" endtime="20171005 01:19:52.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:52.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.969" endtime="20171005 01:19:52.969"></status>
</kw>
<msg timestamp="20171005 01:19:52.969" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:52.968" endtime="20171005 01:19:52.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:52.969" endtime="20171005 01:19:52.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:52.971" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/d9364d88", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/af631876", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/software/af631876": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-107-gc460ebe", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/af631876/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/af631876/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/d9364d88": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-106-g8a355b0", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/d9364d88/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/d9364d88/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/af631876"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:52.971" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:52.972" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" starttime="20171005 01:19:52.970" endtime="20171005 01:19:52.972"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:52.973" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_FIRMWARE_list.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:52.973" endtime="20171005 01:19:52.973"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.972" endtime="20171005 01:19:52.973"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.337" endtime="20171005 01:19:52.973"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:52.974" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_OCC_state.txt</msg>
<status status="PASS" starttime="20171005 01:19:52.974" endtime="20171005 01:19:52.974"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:52.977" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:52.977" endtime="20171005 01:19:52.977"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:52.978" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:52.978" endtime="20171005 01:19:52.978"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:52.979" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:52.978" endtime="20171005 01:19:52.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:52.980" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:52.979" endtime="20171005 01:19:52.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.193" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:52.980" endtime="20171005 01:19:53.193"></status>
</kw>
<msg timestamp="20171005 01:19:53.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:53.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.980" endtime="20171005 01:19:53.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.194" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.193" endtime="20171005 01:19:53.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.194" endtime="20171005 01:19:53.195"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.976" endtime="20171005 01:19:53.195"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.976" endtime="20171005 01:19:53.195"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.975" endtime="20171005 01:19:53.195"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:53.195" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:53.195" endtime="20171005 01:19:53.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.196" endtime="20171005 01:19:53.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:53.348" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:53.348" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.196" endtime="20171005 01:19:53.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.349" endtime="20171005 01:19:53.349"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:53.350" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:53.350" endtime="20171005 01:19:53.350"></status>
</kw>
<msg timestamp="20171005 01:19:53.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:52.974" endtime="20171005 01:19:53.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.351" endtime="20171005 01:19:53.351"></status>
</kw>
<msg timestamp="20171005 01:19:53.351" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:53.350" endtime="20171005 01:19:53.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.352" endtime="20171005 01:19:53.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:53.353" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:53.353" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:53.353" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" starttime="20171005 01:19:53.352" endtime="20171005 01:19:53.353"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:53.354" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_OCC_state.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:53.354" endtime="20171005 01:19:53.355"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.353" endtime="20171005 01:19:53.355"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.974" endtime="20171005 01:19:53.355"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:53.356" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_elog.txt</msg>
<status status="PASS" starttime="20171005 01:19:53.355" endtime="20171005 01:19:53.356"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:53.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:53.359" endtime="20171005 01:19:53.360"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:53.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:53.361" endtime="20171005 01:19:53.361"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:53.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:53.362" endtime="20171005 01:19:53.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:53.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:53.363" endtime="20171005 01:19:53.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:53.364" endtime="20171005 01:19:53.556"></status>
</kw>
<msg timestamp="20171005 01:19:53.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:53.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.364" endtime="20171005 01:19:53.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.556" endtime="20171005 01:19:53.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.557" endtime="20171005 01:19:53.558"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.359" endtime="20171005 01:19:53.559"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.358" endtime="20171005 01:19:53.559"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.357" endtime="20171005 01:19:53.559"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:53.559" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:53.559" endtime="20171005 01:19:53.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.560" endtime="20171005 01:19:53.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:53.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:53.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.560" endtime="20171005 01:19:53.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.715" endtime="20171005 01:19:53.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:53.716" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:53.716" endtime="20171005 01:19:53.716"></status>
</kw>
<msg timestamp="20171005 01:19:53.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.356" endtime="20171005 01:19:53.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.717" endtime="20171005 01:19:53.718"></status>
</kw>
<msg timestamp="20171005 01:19:53.718" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:53.717" endtime="20171005 01:19:53.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.718" endtime="20171005 01:19:53.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:53.719" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1323"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507165805466, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1323"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507165806835, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:53.719" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:53.719" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [
                "_PID=1323"
            ],
            "Id": 2,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" starttime="20171005 01:19:53.719" endtime="20171005 01:19:53.719"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:53.721" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_elog.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:53.720" endtime="20171005 01:19:53.721"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.720" endtime="20171005 01:19:53.721"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.355" endtime="20171005 01:19:53.721"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:53.722" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20171005 01:19:53.721" endtime="20171005 01:19:53.722"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:53.725" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:53.724" endtime="20171005 01:19:53.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:53.726" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:53.725" endtime="20171005 01:19:53.726"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:53.726" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:53.726" endtime="20171005 01:19:53.726"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:53.727" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:53.726" endtime="20171005 01:19:53.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:53.728" endtime="20171005 01:19:53.905"></status>
</kw>
<msg timestamp="20171005 01:19:53.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:53.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.727" endtime="20171005 01:19:53.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.905" endtime="20171005 01:19:53.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:53.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.906" endtime="20171005 01:19:53.907"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.724" endtime="20171005 01:19:53.907"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.723" endtime="20171005 01:19:53.907"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.723" endtime="20171005 01:19:53.907"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:53.907" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:53.907" endtime="20171005 01:19:53.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:53.908" endtime="20171005 01:19:53.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:54.511" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:54.512" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.908" endtime="20171005 01:19:54.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:54.512" endtime="20171005 01:19:54.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:54.513" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:54.513" endtime="20171005 01:19:54.513"></status>
</kw>
<msg timestamp="20171005 01:19:54.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:53.722" endtime="20171005 01:19:54.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:54.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:54.514" endtime="20171005 01:19:54.514"></status>
</kw>
<msg timestamp="20171005 01:19:54.514" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:54.513" endtime="20171005 01:19:54.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:54.515" endtime="20171005 01:19:54.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:54.516" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26020
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:54.516" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:54.517" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" starttime="20171005 01:19:54.515" endtime="20171005 01:19:54.517"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:54.518" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_sensor_list.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:54.518" endtime="20171005 01:19:54.518"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:54.517" endtime="20171005 01:19:54.518"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:53.721" endtime="20171005 01:19:54.518"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:54.519" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_led.txt</msg>
<status status="PASS" starttime="20171005 01:19:54.519" endtime="20171005 01:19:54.519"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:54.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:54.522" endtime="20171005 01:19:54.522"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:54.523" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:54.523" endtime="20171005 01:19:54.523"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:54.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:54.523" endtime="20171005 01:19:54.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:54.524" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:54.524" endtime="20171005 01:19:54.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:54.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:54.525" endtime="20171005 01:19:54.705"></status>
</kw>
<msg timestamp="20171005 01:19:54.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:54.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:54.525" endtime="20171005 01:19:54.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:54.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:54.705" endtime="20171005 01:19:54.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:54.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:54.706" endtime="20171005 01:19:54.706"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:54.521" endtime="20171005 01:19:54.707"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:54.521" endtime="20171005 01:19:54.707"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:54.520" endtime="20171005 01:19:54.707"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:54.707" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:54.707" endtime="20171005 01:19:54.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:54.708" endtime="20171005 01:19:54.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:56.317" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:56.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:54.708" endtime="20171005 01:19:56.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:56.318" endtime="20171005 01:19:56.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:56.319" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:56.318" endtime="20171005 01:19:56.319"></status>
</kw>
<msg timestamp="20171005 01:19:56.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:54.519" endtime="20171005 01:19:56.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:56.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.320" endtime="20171005 01:19:56.320"></status>
</kw>
<msg timestamp="20171005 01:19:56.320" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:56.319" endtime="20171005 01:19:56.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:56.321" endtime="20171005 01:19:56.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:56.323" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:56.323" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:56.323" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" starttime="20171005 01:19:56.321" endtime="20171005 01:19:56.323"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:56.325" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_led.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:56.324" endtime="20171005 01:19:56.325"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.324" endtime="20171005 01:19:56.325"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:54.518" endtime="20171005 01:19:56.325"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:56.326" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_control_list.txt</msg>
<status status="PASS" starttime="20171005 01:19:56.326" endtime="20171005 01:19:56.326"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:56.329" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:56.328" endtime="20171005 01:19:56.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:56.330" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:56.329" endtime="20171005 01:19:56.330"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:56.330" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:56.330" endtime="20171005 01:19:56.330"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:56.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:56.331" endtime="20171005 01:19:56.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:56.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:56.332" endtime="20171005 01:19:56.579"></status>
</kw>
<msg timestamp="20171005 01:19:56.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:56.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.331" endtime="20171005 01:19:56.579"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:56.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.579" endtime="20171005 01:19:56.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:56.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.580" endtime="20171005 01:19:56.581"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.328" endtime="20171005 01:19:56.581"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.327" endtime="20171005 01:19:56.581"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.327" endtime="20171005 01:19:56.581"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:56.581" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:56.581" endtime="20171005 01:19:56.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:56.582" endtime="20171005 01:19:56.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:56.819" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:56.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.582" endtime="20171005 01:19:56.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:56.819" endtime="20171005 01:19:56.819"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:56.820" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:56.820" endtime="20171005 01:19:56.820"></status>
</kw>
<msg timestamp="20171005 01:19:56.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.326" endtime="20171005 01:19:56.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:56.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.821" endtime="20171005 01:19:56.822"></status>
</kw>
<msg timestamp="20171005 01:19:56.822" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:56.821" endtime="20171005 01:19:56.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:56.822" endtime="20171005 01:19:56.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:56.823" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:56.823" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:56.823" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" starttime="20171005 01:19:56.822" endtime="20171005 01:19:56.823"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:56.825" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_control_list.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:56.824" endtime="20171005 01:19:56.825"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.823" endtime="20171005 01:19:56.825"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.325" endtime="20171005 01:19:56.825"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 01:19:56.826" level="INFO">${logpath} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_inventory.txt</msg>
<status status="PASS" starttime="20171005 01:19:56.825" endtime="20171005 01:19:56.826"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:19:56.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:19:56.828" endtime="20171005 01:19:56.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:19:56.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:19:56.829" endtime="20171005 01:19:56.830"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:19:56.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:19:56.830" endtime="20171005 01:19:56.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:19:56.831" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:19:56.831" endtime="20171005 01:19:56.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:19:57.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:19:56.832" endtime="20171005 01:19:57.010"></status>
</kw>
<msg timestamp="20171005 01:19:57.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:57.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.831" endtime="20171005 01:19:57.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:19:57.011" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:57.011" endtime="20171005 01:19:57.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:57.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:57.012" endtime="20171005 01:19:57.012"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.828" endtime="20171005 01:19:57.012"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.827" endtime="20171005 01:19:57.012"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.827" endtime="20171005 01:19:57.012"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:19:57.013" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20171005 01:19:57.013" endtime="20171005 01:19:57.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:57.013" endtime="20171005 01:19:57.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:19:59.298" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 01:19:59.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:57.014" endtime="20171005 01:19:59.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:59.299" endtime="20171005 01:19:59.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:19:59.300" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:19:59.299" endtime="20171005 01:19:59.300"></status>
</kw>
<msg timestamp="20171005 01:19:59.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:19:56.826" endtime="20171005 01:19:59.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:19:59.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:19:59.301" endtime="20171005 01:19:59.301"></status>
</kw>
<msg timestamp="20171005 01:19:59.301" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 01:19:59.300" endtime="20171005 01:19:59.301"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:59.301" endtime="20171005 01:19:59.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 01:19:59.305" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/d9364d88", 
        "/xyz/openbmc_project/software/af631876"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:19:59.305" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 01:19:59.306" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" starttime="20171005 01:19:59.302" endtime="20171005 01:19:59.306"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:19:59.307" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_inventory.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/20171005011940021699_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:19:59.307" endtime="20171005 01:19:59.307"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.306" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:56.825" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.337" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.336" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.336" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.336" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.335" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.294" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.291" endtime="20171005 01:19:59.308"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:52.290" endtime="20171005 01:19:59.308"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:59.310" endtime="20171005 01:19:59.310"></status>
</kw>
<msg timestamp="20171005 01:19:59.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:19:59.310" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 01:19:59.309" endtime="20171005 01:19:59.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:59.311" endtime="20171005 01:19:59.311"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 01:19:59.406" level="INFO">encoding=UTF-8
alias=bmc_connection
newline=

timeout=25 seconds
index=1
prompt=# 
port=22
width=80
height=24
path_separator=/
host=9.3.86.161
term_type=vt100</msg>
<msg timestamp="20171005 01:19:59.406" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171005 01:19:59.455" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171005 01:19:59.477" level="INFO">${core_files} = None</msg>
<msg timestamp="20171005 01:19:59.477" level="INFO">${stderr} = None</msg>
<msg timestamp="20171005 01:19:59.477" level="INFO">${rc} = None</msg>
<msg timestamp="20171005 01:19:59.477" level="FAIL">#(UTC) 2017/10/05 01:19:59.475210 -    0.069798 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" starttime="20171005 01:19:59.354" endtime="20171005 01:19:59.477"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171005 01:19:59.478" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171005 01:19:59.478" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" starttime="20171005 01:19:59.478" endtime="20171005 01:19:59.478"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:59.500" endtime="20171005 01:19:59.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:19:59.518" endtime="20171005 01:20:00.497"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.518" endtime="20171005 01:20:00.497"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.517" endtime="20171005 01:20:00.498"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.499" endtime="20171005 01:20:00.498"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.478" endtime="20171005 01:20:00.498"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" starttime="20171005 01:20:00.498" endtime="20171005 01:20:00.498"></status>
</kw>
<status status="FAIL" starttime="20171005 01:19:59.352" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.311" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.308" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:59.308" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.324" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.321" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.321" endtime="20171005 01:20:00.499"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.320" endtime="20171005 01:20:00.499"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20171005 01:20:00.512" endtime="20171005 01:20:00.512"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.499" endtime="20171005 01:20:00.512"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:40.319" endtime="20171005 01:20:00.512"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.900" endtime="20171005 01:20:00.513"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.900" endtime="20171005 01:20:00.513"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171005 01:20:00.524" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171005 01:20:00.514" endtime="20171005 01:20:00.524"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171005 01:20:00.525" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2731/obmc-robot/logs/20171005011940021699_TestsTestBasicPoweron/20171005011940021699_PowerOnTest/</msg>
<status status="PASS" starttime="20171005 01:20:00.525" endtime="20171005 01:20:00.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.525" endtime="20171005 01:20:00.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.526" endtime="20171005 01:20:00.526"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:20:00.527" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs"&gt;/tmp/fspcibld/2731/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20171005 01:20:00.527" endtime="20171005 01:20:00.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:20:00.528" level="INFO">File '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20171005 01:20:00.528" endtime="20171005 01:20:00.528"></status>
</kw>
<msg timestamp="20171005 01:20:00.528" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20171005 01:20:00.527" endtime="20171005 01:20:00.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.528" endtime="20171005 01:20:00.529"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.529" endtime="20171005 01:20:00.529"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:20:00.530" level="INFO">${cur_time} = 2017-10-05 01:20:00:530219</msg>
<status status="PASS" starttime="20171005 01:20:00.530" endtime="20171005 01:20:00.530"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 01:20:00.531" level="INFO">${cur_time} = 20171005012000530219</msg>
<status status="PASS" starttime="20171005 01:20:00.531" endtime="20171005 01:20:00.531"></status>
</kw>
<msg timestamp="20171005 01:20:00.531" level="INFO">${cur_time} = 20171005012000530219</msg>
<status status="PASS" starttime="20171005 01:20:00.530" endtime="20171005 01:20:00.531"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:20:00.533" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:20:00.532" endtime="20171005 01:20:00.533"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.513" endtime="20171005 01:20:00.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="utils" name="Delete Error Logs">
<doc>Delete error logs.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:20:00.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:20:00.537" endtime="20171005 01:20:00.538"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:20:00.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:20:00.538" endtime="20171005 01:20:00.539"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:20:00.539" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:20:00.539" endtime="20171005 01:20:00.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:00.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:20:00.540" endtime="20171005 01:20:00.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:20:00.725" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:20:00.543" endtime="20171005 01:20:00.725"></status>
</kw>
<msg timestamp="20171005 01:20:00.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:20:00.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.542" endtime="20171005 01:20:00.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:20:00.726" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.726" endtime="20171005 01:20:00.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:00.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.726" endtime="20171005 01:20:00.727"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.536" endtime="20171005 01:20:00.727"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.536" endtime="20171005 01:20:00.727"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.535" endtime="20171005 01:20:00.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:20:00.728" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" starttime="20171005 01:20:00.727" endtime="20171005 01:20:00.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.728" endtime="20171005 01:20:00.729"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:20:00.786" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 01:20:00.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.729" endtime="20171005 01:20:00.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.786" endtime="20171005 01:20:00.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:20:00.787" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:20:00.787" endtime="20171005 01:20:00.787"></status>
</kw>
<msg timestamp="20171005 01:20:00.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.535" endtime="20171005 01:20:00.787"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:00.787" endtime="20171005 01:20:00.788"></status>
</kw>
<kw library="utils" name="Get URL List">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:20:00.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:20:00.792" endtime="20171005 01:20:00.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:20:00.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:20:00.793" endtime="20171005 01:20:00.793"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:20:00.794" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:20:00.794" endtime="20171005 01:20:00.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:00.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:20:00.795" endtime="20171005 01:20:00.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.032" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:20:00.796" endtime="20171005 01:20:01.032"></status>
</kw>
<msg timestamp="20171005 01:20:01.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:20:01.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.796" endtime="20171005 01:20:01.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.032" endtime="20171005 01:20:01.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.033" endtime="20171005 01:20:01.033"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.791" endtime="20171005 01:20:01.034"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.791" endtime="20171005 01:20:01.034"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.790" endtime="20171005 01:20:01.034"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:20:01.034" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" starttime="20171005 01:20:01.034" endtime="20171005 01:20:01.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.035" endtime="20171005 01:20:01.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:20:01.091" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 01:20:01.091" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.035" endtime="20171005 01:20:01.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.091" endtime="20171005 01:20:01.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:20:01.092" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:20:01.092" endtime="20171005 01:20:01.092"></status>
</kw>
<msg timestamp="20171005 01:20:01.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:00.789" endtime="20171005 01:20:01.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.093" endtime="20171005 01:20:01.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 01:20:01.094" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 01:20:01.094" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 01:20:01.094" level="INFO">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 01:20:01.093" endtime="20171005 01:20:01.094"></status>
</kw>
<msg timestamp="20171005 01:20:01.094" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" starttime="20171005 01:20:00.789" endtime="20171005 01:20:01.094"></status>
</kw>
<kw library="Collections" name="Sort List">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.095" endtime="20171005 01:20:01.095"></status>
</kw>
<msg timestamp="20171005 01:20:01.095" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" starttime="20171005 01:20:00.788" endtime="20171005 01:20:01.095"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.096" endtime="20171005 01:20:01.096"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:01.097" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171005 01:20:01.097" endtime="20171005 01:20:01.097"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:20:01.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:20:01.100" endtime="20171005 01:20:01.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:20:01.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:20:01.102" endtime="20171005 01:20:01.102"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:20:01.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:20:01.102" endtime="20171005 01:20:01.103"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:01.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:20:01.103" endtime="20171005 01:20:01.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:20:01.104" endtime="20171005 01:20:01.296"></status>
</kw>
<msg timestamp="20171005 01:20:01.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:20:01.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.103" endtime="20171005 01:20:01.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.297" endtime="20171005 01:20:01.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.297" endtime="20171005 01:20:01.298"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.099" endtime="20171005 01:20:01.298"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.099" endtime="20171005 01:20:01.298"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.098" endtime="20171005 01:20:01.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:20:01.299" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" starttime="20171005 01:20:01.298" endtime="20171005 01:20:01.299"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:20:01.300" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 01:20:01.300" endtime="20171005 01:20:01.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:20:01.302" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 01:20:01.301" endtime="20171005 01:20:01.302"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.301" endtime="20171005 01:20:01.302"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.299" endtime="20171005 01:20:01.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:20:01.410" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171005 01:20:01.411" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.303" endtime="20171005 01:20:01.411"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:20:01.412" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:20:01.411" endtime="20171005 01:20:01.412"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:20:01.413" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:20:01.413" endtime="20171005 01:20:01.413"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.412" endtime="20171005 01:20:01.413"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.411" endtime="20171005 01:20:01.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:20:01.414" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:20:01.413" endtime="20171005 01:20:01.414"></status>
</kw>
<msg timestamp="20171005 01:20:01.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.097" endtime="20171005 01:20:01.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.414" endtime="20171005 01:20:01.415"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.095" endtime="20171005 01:20:01.415"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.095" endtime="20171005 01:20:01.415"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.415" endtime="20171005 01:20:01.416"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:01.416" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171005 01:20:01.416" endtime="20171005 01:20:01.416"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:20:01.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:20:01.419" endtime="20171005 01:20:01.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:20:01.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:20:01.420" endtime="20171005 01:20:01.421"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:20:01.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:20:01.421" endtime="20171005 01:20:01.421"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:01.422" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:20:01.421" endtime="20171005 01:20:01.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.631" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:20:01.423" endtime="20171005 01:20:01.631"></status>
</kw>
<msg timestamp="20171005 01:20:01.631" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:20:01.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.422" endtime="20171005 01:20:01.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.632" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.631" endtime="20171005 01:20:01.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.632" endtime="20171005 01:20:01.632"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.419" endtime="20171005 01:20:01.633"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.418" endtime="20171005 01:20:01.633"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.417" endtime="20171005 01:20:01.633"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:20:01.633" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" starttime="20171005 01:20:01.633" endtime="20171005 01:20:01.633"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:20:01.635" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 01:20:01.634" endtime="20171005 01:20:01.635"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:20:01.636" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 01:20:01.636" endtime="20171005 01:20:01.636"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.635" endtime="20171005 01:20:01.636"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.633" endtime="20171005 01:20:01.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:20:01.717" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171005 01:20:01.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.636" endtime="20171005 01:20:01.717"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 01:20:01.719" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:20:01.718" endtime="20171005 01:20:01.719"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 01:20:01.720" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 01:20:01.719" endtime="20171005 01:20:01.720"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.719" endtime="20171005 01:20:01.720"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.718" endtime="20171005 01:20:01.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:20:01.721" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:20:01.721" endtime="20171005 01:20:01.721"></status>
</kw>
<msg timestamp="20171005 01:20:01.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.417" endtime="20171005 01:20:01.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.721" endtime="20171005 01:20:01.722"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.415" endtime="20171005 01:20:01.722"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.415" endtime="20171005 01:20:01.722"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.095" endtime="20171005 01:20:01.722"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.534" endtime="20171005 01:20:01.722"></status>
</kw>
<kw library="dump_utils" name="Delete All Dumps">
<doc>Delete all dumps.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 01:20:01.725" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 01:20:01.725" endtime="20171005 01:20:01.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 01:20:01.726" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 01:20:01.726" endtime="20171005 01:20:01.726"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 01:20:01.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 01:20:01.726" endtime="20171005 01:20:01.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 01:20:01.727" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 01:20:01.727" endtime="20171005 01:20:01.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.943" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 01:20:01.728" endtime="20171005 01:20:01.943"></status>
</kw>
<msg timestamp="20171005 01:20:01.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 01:20:01.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.728" endtime="20171005 01:20:01.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.943" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.943" endtime="20171005 01:20:01.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.944" endtime="20171005 01:20:01.944"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.724" endtime="20171005 01:20:01.944"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.724" endtime="20171005 01:20:01.944"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.723" endtime="20171005 01:20:01.945"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 01:20:01.945" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" starttime="20171005 01:20:01.945" endtime="20171005 01:20:01.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.946" endtime="20171005 01:20:01.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 01:20:01.992" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171005 01:20:01.992" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.946" endtime="20171005 01:20:01.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:01.993" endtime="20171005 01:20:01.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 01:20:01.994" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 01:20:01.993" endtime="20171005 01:20:01.994"></status>
</kw>
<msg timestamp="20171005 01:20:01.994" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 01:20:01.723" endtime="20171005 01:20:01.994"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171005 01:20:01.994" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 01:20:01.994" endtime="20171005 01:20:01.995"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:01.722" endtime="20171005 01:20:01.995"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.534" endtime="20171005 01:20:01.995"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:00.533" endtime="20171005 01:20:01.995"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.899" endtime="20171005 01:20:01.995"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171005 01:20:01.997" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:20:01.997" endtime="20171005 01:20:01.997"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171005 01:20:01.998" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:20:01.997" endtime="20171005 01:20:01.998"></status>
</kw>
<msg timestamp="20171005 01:20:01.998" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 01:20:01.996" endtime="20171005 01:20:01.998"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:20:02.000" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 01:20:02.000" endtime="20171005 01:20:02.000"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.000" endtime="20171005 01:20:02.001"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:20:02.005" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:20:02.013" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:20:02.013" level="INFO">${output} = /tmp/fspcibld/2731/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 01:20:02.001" endtime="20171005 01:20:02.013"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.015" endtime="20171005 01:20:02.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.018" endtime="20171005 01:20:02.018"></status>
</kw>
<msg timestamp="20171005 01:20:02.018" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 01:20:02.017" endtime="20171005 01:20:02.018"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:20:02.019" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:20:02.018" endtime="20171005 01:20:02.019"></status>
</kw>
<msg timestamp="20171005 01:20:02.019" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:20:01.999" endtime="20171005 01:20:02.019"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171005 01:20:02.020" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 01:20:02.020" endtime="20171005 01:20:02.020"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:20:02.021" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171005 01:20:02.020" endtime="20171005 01:20:02.021"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.021" endtime="20171005 01:20:02.021"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171005 01:20:02.025" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 01:20:02.053" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:20:02.054" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 01:20:02.022" endtime="20171005 01:20:02.054"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.062" endtime="20171005 01:20:02.063"></status>
</kw>
<msg timestamp="20171005 01:20:02.063" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 01:20:01.999" endtime="20171005 01:20:02.064"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 01:20:02.065" level="INFO">${cmd_buf} = kill -9 202</msg>
<status status="PASS" starttime="20171005 01:20:02.064" endtime="20171005 01:20:02.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.066" endtime="20171005 01:20:02.067"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:02.065" endtime="20171005 01:20:02.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20171005 01:20:02.073" level="INFO">Running command 'kill -9 202 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20171005 01:20:02.068" endtime="20171005 01:20:02.075"></status>
</kw>
<msg timestamp="20171005 01:20:02.076" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:20:02.076" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 01:20:02.068" endtime="20171005 01:20:02.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.080" endtime="20171005 01:20:02.080"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:02.079" endtime="20171005 01:20:02.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171005 01:20:02.086" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2731/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/2731/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 01:20:02.083" endtime="20171005 01:20:02.087"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:02.082" endtime="20171005 01:20:02.087"></status>
</kw>
<status status="PASS" starttime="20171005 01:20:02.081" endtime="20171005 01:20:02.087"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171005 01:20:02.087" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 01:20:02.087" endtime="20171005 01:20:02.087"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171005 01:20:02.088" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171005 01:20:02.088" endtime="20171005 01:20:02.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 01:20:02.089" endtime="20171005 01:20:02.147"></status>
</kw>
<msg timestamp="20171005 01:20:02.148" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 01:20:02.148" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171005 01:20:02.088" endtime="20171005 01:20:02.148"></status>
</kw>
<msg timestamp="20171005 01:20:02.149" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171005 01:20:01.995" endtime="20171005 01:20:02.149"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20171005 01:20:02.151" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171005 01:20:02.151" endtime="20171005 01:20:02.151"></status>
</kw>
<status status="PASS" starttime="20171005 01:19:36.899" endtime="20171005 01:20:02.151"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20171005 01:09:28.332" critical="yes" endtime="20171005 01:20:02.151">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20171005 01:09:28.291" endtime="20171005 01:20:02.153"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20171005 01:09:18.980" endtime="20171005 01:20:02.156"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171005 01:09:44.842" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
