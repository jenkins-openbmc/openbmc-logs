<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170919 15:35:13.087">
<suite id="s1" name="Tests" source="/tmp/fspcibld/9467/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:13.795">Dictionary does not contain key 'host'.</msg>
<status starttime="20170919 15:35:13.795" status="FAIL" endtime="20170919 15:35:13.795"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:13.795">${has_host} = False</msg>
<status starttime="20170919 15:35:13.794" status="PASS" endtime="20170919 15:35:13.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170919 15:35:13.796" status="PASS" endtime="20170919 15:35:13.797"></status>
</kw>
<status starttime="20170919 15:35:13.796" status="PASS" endtime="20170919 15:35:13.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:13.798">${port_num} = 22</msg>
<status starttime="20170919 15:35:13.798" status="PASS" endtime="20170919 15:35:13.798"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:13.799">${SSH_PORT} = 22</msg>
<status starttime="20170919 15:35:13.798" status="PASS" endtime="20170919 15:35:13.799"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:13.799">${https_num} = 443</msg>
<status starttime="20170919 15:35:13.799" status="PASS" endtime="20170919 15:35:13.799"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:13.800">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170919 15:35:13.800" status="PASS" endtime="20170919 15:35:13.800"></status>
</kw>
<status starttime="20170919 15:35:13.797" status="PASS" endtime="20170919 15:35:13.800"></status>
</kw>
<status starttime="20170919 15:35:13.797" status="PASS" endtime="20170919 15:35:13.800"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:13.801">Dictionary does not contain key 'port'.</msg>
<status starttime="20170919 15:35:13.801" status="FAIL" endtime="20170919 15:35:13.801"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:13.802">${has_port} = False</msg>
<status starttime="20170919 15:35:13.801" status="PASS" endtime="20170919 15:35:13.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170919 15:35:13.803" status="PASS" endtime="20170919 15:35:13.803"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170919 15:35:13.804" status="PASS" endtime="20170919 15:35:13.804"></status>
</kw>
<status starttime="20170919 15:35:13.803" status="PASS" endtime="20170919 15:35:13.804"></status>
</kw>
<status starttime="20170919 15:35:13.802" status="PASS" endtime="20170919 15:35:13.804"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:13.805">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170919 15:35:15.539">Read output: root@witherspoon:~#</msg>
<status starttime="20170919 15:35:13.805" status="PASS" endtime="20170919 15:35:15.539"></status>
</kw>
<status starttime="20170919 15:35:13.793" status="PASS" endtime="20170919 15:35:15.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.541">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170919 15:35:15.628">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170919 15:35:15.629">${output} = VERSION_ID="v1.99.10-8-gd4b6b24"</msg>
<msg level="INFO" timestamp="20170919 15:35:15.629">${stderr} = </msg>
<status starttime="20170919 15:35:15.541" status="PASS" endtime="20170919 15:35:15.629"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.629">Length is 0</msg>
<status starttime="20170919 15:35:15.629" status="PASS" endtime="20170919 15:35:15.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.630">VERSION_ID="v1.99.10-8-gd4b6b24"</msg>
<status starttime="20170919 15:35:15.630" status="PASS" endtime="20170919 15:35:15.630"></status>
</kw>
<status starttime="20170919 15:35:15.540" status="PASS" endtime="20170919 15:35:15.630"></status>
</kw>
<status starttime="20170919 15:35:15.540" status="PASS" endtime="20170919 15:35:15.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Get Host Software Objects Details" library="code_update_utils">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.632">${software} = []</msg>
<status starttime="20170919 15:35:15.632" status="PASS" endtime="20170919 15:35:15.632"></status>
</kw>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.633">${host_list} = []</msg>
<status starttime="20170919 15:35:15.632" status="PASS" endtime="20170919 15:35:15.633"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.636">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:15.636" status="PASS" endtime="20170919 15:35:15.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.637">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:15.637" status="PASS" endtime="20170919 15:35:15.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.638">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:15.637" status="PASS" endtime="20170919 15:35:15.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.638">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:15.638" status="PASS" endtime="20170919 15:35:15.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:15.639" status="PASS" endtime="20170919 15:35:15.827"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:15.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:15.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:15.639" status="PASS" endtime="20170919 15:35:15.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:15.828" status="PASS" endtime="20170919 15:35:15.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:15.828" status="PASS" endtime="20170919 15:35:15.829"></status>
</kw>
<status starttime="20170919 15:35:15.635" status="PASS" endtime="20170919 15:35:15.829"></status>
</kw>
<status starttime="20170919 15:35:15.634" status="PASS" endtime="20170919 15:35:15.829"></status>
</kw>
<status starttime="20170919 15:35:15.634" status="PASS" endtime="20170919 15:35:15.830"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.830">${base_uri} = /xyz/openbmc_project/software/</msg>
<status starttime="20170919 15:35:15.830" status="PASS" endtime="20170919 15:35:15.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.833">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20170919 15:35:15.832" status="PASS" endtime="20170919 15:35:15.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.834">URI:https://9.41.166.169:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20170919 15:35:15.833" status="PASS" endtime="20170919 15:35:15.834"></status>
</kw>
<status starttime="20170919 15:35:15.833" status="PASS" endtime="20170919 15:35:15.834"></status>
</kw>
<status starttime="20170919 15:35:15.832" status="PASS" endtime="20170919 15:35:15.834"></status>
</kw>
<status starttime="20170919 15:35:15.831" status="PASS" endtime="20170919 15:35:15.834"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.915">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:15.915">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:15.834" status="PASS" endtime="20170919 15:35:15.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.917">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:15.917" status="PASS" endtime="20170919 15:35:15.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.918">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:15.918" status="PASS" endtime="20170919 15:35:15.918"></status>
</kw>
<status starttime="20170919 15:35:15.917" status="PASS" endtime="20170919 15:35:15.918"></status>
</kw>
<status starttime="20170919 15:35:15.916" status="PASS" endtime="20170919 15:35:15.918"></status>
</kw>
<status starttime="20170919 15:35:15.916" status="PASS" endtime="20170919 15:35:15.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:15.919">Delete All Sessions</msg>
<status starttime="20170919 15:35:15.919" status="PASS" endtime="20170919 15:35:15.919"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:15.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:15.633" status="PASS" endtime="20170919 15:35:15.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:15.919" status="PASS" endtime="20170919 15:35:15.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.920">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:15.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:15.921">${content} = {u'data': [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:15.920" status="PASS" endtime="20170919 15:35:15.921"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:15.921">${sw_list} = [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']</msg>
<status starttime="20170919 15:35:15.633" status="PASS" endtime="20170919 15:35:15.921"></status>
</kw>
<kw name="${index} IN [ @{sw_list} ]" type="for">
<kw name="${index} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:15.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:15.926" status="PASS" endtime="20170919 15:35:15.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:15.927" status="PASS" endtime="20170919 15:35:15.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:15.927" status="PASS" endtime="20170919 15:35:15.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:15.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:15.928" status="PASS" endtime="20170919 15:35:15.928"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:15.929" status="PASS" endtime="20170919 15:35:16.172"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:16.172">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:15.929" status="PASS" endtime="20170919 15:35:16.172"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.173">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:16.172" status="PASS" endtime="20170919 15:35:16.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:16.173" status="PASS" endtime="20170919 15:35:16.173"></status>
</kw>
<status starttime="20170919 15:35:15.923" status="PASS" endtime="20170919 15:35:16.173"></status>
</kw>
<status starttime="20170919 15:35:15.923" status="PASS" endtime="20170919 15:35:16.174"></status>
</kw>
<status starttime="20170919 15:35:15.922" status="PASS" endtime="20170919 15:35:16.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.174">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status starttime="20170919 15:35:16.174" status="PASS" endtime="20170919 15:35:16.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:35:16.175" status="PASS" endtime="20170919 15:35:16.175"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.299">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:16.299">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:16.175" status="PASS" endtime="20170919 15:35:16.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:35:16.299" status="PASS" endtime="20170919 15:35:16.300"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:16.300">Delete All Sessions</msg>
<status starttime="20170919 15:35:16.300" status="PASS" endtime="20170919 15:35:16.300"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.300">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:15.922" status="PASS" endtime="20170919 15:35:16.300"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20170919 15:35:16.301" status="PASS" endtime="20170919 15:35:16.301"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.301">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:16.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:16.302">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:16.301" status="PASS" endtime="20170919 15:35:16.302"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.302">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20170919 15:35:15.921" status="PASS" endtime="20170919 15:35:16.302"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20170919 15:35:16.302" status="PASS" endtime="20170919 15:35:16.303"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20170919 15:35:16.303" status="PASS" endtime="20170919 15:35:16.303"></status>
</kw>
<status starttime="20170919 15:35:15.921" status="PASS" endtime="20170919 15:35:16.303"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/active" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.307">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:16.306" status="PASS" endtime="20170919 15:35:16.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:16.307" status="PASS" endtime="20170919 15:35:16.307"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:16.308" status="PASS" endtime="20170919 15:35:16.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.309">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:16.308" status="PASS" endtime="20170919 15:35:16.309"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:16.309" status="PASS" endtime="20170919 15:35:16.491"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:16.491">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:16.309" status="PASS" endtime="20170919 15:35:16.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:16.491" status="PASS" endtime="20170919 15:35:16.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:16.492" status="PASS" endtime="20170919 15:35:16.492"></status>
</kw>
<status starttime="20170919 15:35:16.305" status="PASS" endtime="20170919 15:35:16.493"></status>
</kw>
<status starttime="20170919 15:35:16.305" status="PASS" endtime="20170919 15:35:16.493"></status>
</kw>
<status starttime="20170919 15:35:16.304" status="PASS" endtime="20170919 15:35:16.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.493">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status starttime="20170919 15:35:16.493" status="PASS" endtime="20170919 15:35:16.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:35:16.494" status="PASS" endtime="20170919 15:35:16.494"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.550">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:16.551">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170919 15:35:16.494" status="PASS" endtime="20170919 15:35:16.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:35:16.551" status="PASS" endtime="20170919 15:35:16.551"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:16.552">Delete All Sessions</msg>
<status starttime="20170919 15:35:16.552" status="PASS" endtime="20170919 15:35:16.552"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.552">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170919 15:35:16.304" status="PASS" endtime="20170919 15:35:16.552"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.553">Returning from the enclosing user keyword.</msg>
<status starttime="20170919 15:35:16.552" status="PASS" endtime="20170919 15:35:16.553"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.553">${attr_purpose} = None</msg>
<status starttime="20170919 15:35:16.303" status="PASS" endtime="20170919 15:35:16.553"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.554">Continuing for loop from the next iteration.</msg>
<status starttime="20170919 15:35:16.553" status="PASS" endtime="20170919 15:35:16.554"></status>
</kw>
<status starttime="20170919 15:35:16.303" status="PASS" endtime="20170919 15:35:16.554"></status>
</kw>
<status starttime="20170919 15:35:15.921" status="PASS" endtime="20170919 15:35:16.554"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.554">${pnor_details} = [u'/xyz/openbmc_project/software/8764baa3']</msg>
<status starttime="20170919 15:35:15.632" status="PASS" endtime="20170919 15:35:16.554"></status>
</kw>
<kw name="${pnor} IN [ @{pnor_details} ]" type="for">
<kw name="${pnor} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.557">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:16.557" status="PASS" endtime="20170919 15:35:16.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.558">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:16.558" status="PASS" endtime="20170919 15:35:16.558"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.559">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:16.558" status="PASS" endtime="20170919 15:35:16.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.559">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:16.559" status="PASS" endtime="20170919 15:35:16.559"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:16.560" status="PASS" endtime="20170919 15:35:16.762"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:16.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:16.560" status="PASS" endtime="20170919 15:35:16.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:16.763" status="PASS" endtime="20170919 15:35:16.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:16.764" status="PASS" endtime="20170919 15:35:16.764"></status>
</kw>
<status starttime="20170919 15:35:16.556" status="PASS" endtime="20170919 15:35:16.764"></status>
</kw>
<status starttime="20170919 15:35:16.556" status="PASS" endtime="20170919 15:35:16.764"></status>
</kw>
<status starttime="20170919 15:35:16.555" status="PASS" endtime="20170919 15:35:16.764"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.765">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status starttime="20170919 15:35:16.765" status="PASS" endtime="20170919 15:35:16.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:35:16.765" status="PASS" endtime="20170919 15:35:16.766"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:16.897">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:16.766" status="PASS" endtime="20170919 15:35:16.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:35:16.898" status="PASS" endtime="20170919 15:35:16.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:16.898">Delete All Sessions</msg>
<status starttime="20170919 15:35:16.898" status="PASS" endtime="20170919 15:35:16.899"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.899">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:16.555" status="PASS" endtime="20170919 15:35:16.899"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:16.899">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:16.900">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:16.900">${json} = {u'data': {u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Path': u'', u'associations': [[u'inv...</msg>
<status starttime="20170919 15:35:16.899" status="PASS" endtime="20170919 15:35:16.900"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20170919 15:35:16.900" status="PASS" endtime="20170919 15:35:16.900"></status>
</kw>
<status starttime="20170919 15:35:16.554" status="PASS" endtime="20170919 15:35:16.900"></status>
</kw>
<status starttime="20170919 15:35:16.554" status="PASS" endtime="20170919 15:35:16.900"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:16.901">${software} = [{u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Path': u'', u'associations': [[u'inventory', ...</msg>
<status starttime="20170919 15:35:15.631" status="PASS" endtime="20170919 15:35:16.901"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:16.901">[{u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Path': u'', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Priority': 0, u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None'}]</msg>
<status starttime="20170919 15:35:16.901" status="PASS" endtime="20170919 15:35:16.901"></status>
</kw>
<status starttime="20170919 15:35:15.631" status="PASS" endtime="20170919 15:35:16.901"></status>
</kw>
<status starttime="20170919 15:35:15.631" status="PASS" endtime="20170919 15:35:16.901"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:17.276">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:35:17.277">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170919 15:35:18.077">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170919 15:35:18.077">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170919 15:35:18.155">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170919 15:35:18.165">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170919 15:35:18.165">${stderr} = </msg>
<msg level="INFO" timestamp="20170919 15:35:18.166">${rc} = 0</msg>
<status starttime="20170919 15:35:16.903" status="PASS" endtime="20170919 15:35:18.166"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:18.166">Length is 0</msg>
<status starttime="20170919 15:35:18.166" status="PASS" endtime="20170919 15:35:18.166"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:18.167">Length is 11</msg>
<status starttime="20170919 15:35:18.167" status="PASS" endtime="20170919 15:35:18.167"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:18.167">${bmc_model} = Witherspoon</msg>
<status starttime="20170919 15:35:16.902" status="PASS" endtime="20170919 15:35:18.167"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:18.168">BMC Model=Witherspoon</msg>
<status starttime="20170919 15:35:18.167" status="PASS" endtime="20170919 15:35:18.168"></status>
</kw>
<status starttime="20170919 15:35:16.902" status="PASS" endtime="20170919 15:35:18.168"></status>
</kw>
<status starttime="20170919 15:35:16.902" status="PASS" endtime="20170919 15:35:18.168"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:18.170">Dictionary does not contain key 'host'.</msg>
<status starttime="20170919 15:35:18.170" status="FAIL" endtime="20170919 15:35:18.170"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:18.170">${has_host} = False</msg>
<status starttime="20170919 15:35:18.169" status="PASS" endtime="20170919 15:35:18.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170919 15:35:18.171" status="PASS" endtime="20170919 15:35:18.172"></status>
</kw>
<status starttime="20170919 15:35:18.171" status="PASS" endtime="20170919 15:35:18.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:18.174">${port_num} = 22</msg>
<status starttime="20170919 15:35:18.173" status="PASS" endtime="20170919 15:35:18.174"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:18.174">${SSH_PORT} = 22</msg>
<status starttime="20170919 15:35:18.174" status="PASS" endtime="20170919 15:35:18.174"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:18.175">${https_num} = 443</msg>
<status starttime="20170919 15:35:18.174" status="PASS" endtime="20170919 15:35:18.175"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:18.175">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170919 15:35:18.175" status="PASS" endtime="20170919 15:35:18.176"></status>
</kw>
<status starttime="20170919 15:35:18.172" status="PASS" endtime="20170919 15:35:18.176"></status>
</kw>
<status starttime="20170919 15:35:18.172" status="PASS" endtime="20170919 15:35:18.176"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:18.178">Dictionary does not contain key 'port'.</msg>
<status starttime="20170919 15:35:18.178" status="FAIL" endtime="20170919 15:35:18.178"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:18.178">${has_port} = False</msg>
<status starttime="20170919 15:35:18.176" status="PASS" endtime="20170919 15:35:18.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170919 15:35:18.180" status="PASS" endtime="20170919 15:35:18.180"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170919 15:35:18.181" status="PASS" endtime="20170919 15:35:18.181"></status>
</kw>
<status starttime="20170919 15:35:18.180" status="PASS" endtime="20170919 15:35:18.181"></status>
</kw>
<status starttime="20170919 15:35:18.178" status="PASS" endtime="20170919 15:35:18.181"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:18.182">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170919 15:35:19.863">Read output: root@witherspoon:~#</msg>
<status starttime="20170919 15:35:18.181" status="PASS" endtime="20170919 15:35:19.863"></status>
</kw>
<status starttime="20170919 15:35:18.169" status="PASS" endtime="20170919 15:35:19.863"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:19.864">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170919 15:35:19.941">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170919 15:35:19.941">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170919 15:35:19.941">${stderr} = </msg>
<status starttime="20170919 15:35:19.864" status="PASS" endtime="20170919 15:35:19.941"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:19.941">Length is 0</msg>
<status starttime="20170919 15:35:19.941" status="PASS" endtime="20170919 15:35:19.942"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:19.942">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170919 15:35:19.863" status="PASS" endtime="20170919 15:35:19.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170919 15:35:19.942" status="PASS" endtime="20170919 15:35:19.942"></status>
</kw>
<status starttime="20170919 15:35:18.169" status="PASS" endtime="20170919 15:35:19.942"></status>
</kw>
<status starttime="20170919 15:35:18.168" status="PASS" endtime="20170919 15:35:19.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170919 15:35:19.943" status="PASS" endtime="20170919 15:35:19.943"></status>
</kw>
<status starttime="20170919 15:35:13.793" status="PASS" endtime="20170919 15:35:19.943"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/9467/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/9467/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:19.985">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:19.985" status="PASS" endtime="20170919 15:35:19.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:19.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:19.986" status="PASS" endtime="20170919 15:35:19.986"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:19.987">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:19.987" status="PASS" endtime="20170919 15:35:19.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:19.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:19.987" status="PASS" endtime="20170919 15:35:19.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.193">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:19.988" status="PASS" endtime="20170919 15:35:20.193"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.193">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:20.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:19.988" status="PASS" endtime="20170919 15:35:20.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.194">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:20.194" status="PASS" endtime="20170919 15:35:20.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:20.194" status="PASS" endtime="20170919 15:35:20.195"></status>
</kw>
<status starttime="20170919 15:35:19.984" status="PASS" endtime="20170919 15:35:20.195"></status>
</kw>
<status starttime="20170919 15:35:19.984" status="PASS" endtime="20170919 15:35:20.195"></status>
</kw>
<status starttime="20170919 15:35:19.983" status="PASS" endtime="20170919 15:35:20.195"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.200">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:20.200" status="PASS" endtime="20170919 15:35:20.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:20.201" status="PASS" endtime="20170919 15:35:20.201"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.202">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:20.201" status="PASS" endtime="20170919 15:35:20.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.202">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:20.202" status="PASS" endtime="20170919 15:35:20.202"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:20.203" status="PASS" endtime="20170919 15:35:20.385"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:20.386">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:20.202" status="PASS" endtime="20170919 15:35:20.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:20.386" status="PASS" endtime="20170919 15:35:20.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:20.387" status="PASS" endtime="20170919 15:35:20.387"></status>
</kw>
<status starttime="20170919 15:35:20.199" status="PASS" endtime="20170919 15:35:20.387"></status>
</kw>
<status starttime="20170919 15:35:20.199" status="PASS" endtime="20170919 15:35:20.387"></status>
</kw>
<status starttime="20170919 15:35:20.198" status="PASS" endtime="20170919 15:35:20.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.388">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170919 15:35:20.388" status="PASS" endtime="20170919 15:35:20.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.392">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:20.390" status="PASS" endtime="20170919 15:35:20.392"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.393">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:20.393" status="PASS" endtime="20170919 15:35:20.393"></status>
</kw>
<status starttime="20170919 15:35:20.392" status="PASS" endtime="20170919 15:35:20.394"></status>
</kw>
<status starttime="20170919 15:35:20.389" status="PASS" endtime="20170919 15:35:20.394"></status>
</kw>
<status starttime="20170919 15:35:20.388" status="PASS" endtime="20170919 15:35:20.394"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:20.480">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:20.394" status="PASS" endtime="20170919 15:35:20.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.482">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:20.481" status="PASS" endtime="20170919 15:35:20.482"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.483">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:20.482" status="PASS" endtime="20170919 15:35:20.483"></status>
</kw>
<status starttime="20170919 15:35:20.482" status="PASS" endtime="20170919 15:35:20.483"></status>
</kw>
<status starttime="20170919 15:35:20.481" status="PASS" endtime="20170919 15:35:20.483"></status>
</kw>
<status starttime="20170919 15:35:20.480" status="PASS" endtime="20170919 15:35:20.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:20.483">Delete All Sessions</msg>
<status starttime="20170919 15:35:20.483" status="PASS" endtime="20170919 15:35:20.484"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:20.197" status="PASS" endtime="20170919 15:35:20.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:20.484" status="PASS" endtime="20170919 15:35:20.485"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:20.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:20.485">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:20.485" status="PASS" endtime="20170919 15:35:20.485"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.486">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170919 15:35:20.197" status="PASS" endtime="20170919 15:35:20.486"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.486">${host_state} = Off</msg>
<status starttime="20170919 15:35:20.196" status="PASS" endtime="20170919 15:35:20.486"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:20.487">Off != Quiesced</msg>
<status starttime="20170919 15:35:20.487" status="FAIL" endtime="20170919 15:35:20.487"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.487">${status} = False</msg>
<status starttime="20170919 15:35:20.486" status="PASS" endtime="20170919 15:35:20.487"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.487">${status} = False</msg>
<status starttime="20170919 15:35:20.196" status="PASS" endtime="20170919 15:35:20.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170919 15:35:20.488" status="PASS" endtime="20170919 15:35:20.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170919 15:35:20.488" status="PASS" endtime="20170919 15:35:20.489"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.499">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170919 15:35:20.489" status="PASS" endtime="20170919 15:35:20.499"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.509">${FFDC_DIR_PATH} = </msg>
<status starttime="20170919 15:35:20.500" status="PASS" endtime="20170919 15:35:20.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.511">${cur_time} = 2017-09-19 15:35:20:511192</msg>
<status starttime="20170919 15:35:20.511" status="PASS" endtime="20170919 15:35:20.511"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.512">${cur_time} = 20170919153520511192</msg>
<status starttime="20170919 15:35:20.512" status="PASS" endtime="20170919 15:35:20.512"></status>
</kw>
<status starttime="20170919 15:35:20.511" status="PASS" endtime="20170919 15:35:20.512"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.517">${FFDC_TIME} = 20170919153520511192</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.518">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170919 15:35:20.518" status="PASS" endtime="20170919 15:35:20.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.519">${suite_name} = 20170919153520511192_TestsSecurityTestSsl</msg>
<status starttime="20170919 15:35:20.518" status="PASS" endtime="20170919 15:35:20.519"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.519">${test_name} = TestSSLConnection</msg>
<status starttime="20170919 15:35:20.519" status="PASS" endtime="20170919 15:35:20.519"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.520">${test_name} = 20170919153520511192_TestSSLConnection</msg>
<status starttime="20170919 15:35:20.519" status="PASS" endtime="20170919 15:35:20.520"></status>
</kw>
<status starttime="20170919 15:35:20.517" status="PASS" endtime="20170919 15:35:20.520"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.520">${FFDC_DIR_PATH} = /tmp/fspcibld/9467/obmc-robot/logs/20170919153520511192_TestsSecurityTestSsl/20170919153520511192_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170919 15:35:20.525">${FFDC_PREFIX} = 20170919153520511192_</msg>
<status starttime="20170919 15:35:20.510" status="PASS" endtime="20170919 15:35:20.525"></status>
</kw>
<status starttime="20170919 15:35:20.510" status="PASS" endtime="20170919 15:35:20.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170919 15:35:20.526" status="PASS" endtime="20170919 15:35:20.526"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.527" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs"&gt;/tmp/fspcibld/9467/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170919 15:35:20.526" status="PASS" endtime="20170919 15:35:20.527"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:20.528">File '/tmp/fspcibld/9467/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170919 15:35:20.527" status="FAIL" endtime="20170919 15:35:20.528"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.528">${exist} = False</msg>
<status starttime="20170919 15:35:20.527" status="PASS" endtime="20170919 15:35:20.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.529" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:35:20.529" status="PASS" endtime="20170919 15:35:20.529"></status>
</kw>
<status starttime="20170919 15:35:20.528" status="PASS" endtime="20170919 15:35:20.529"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170919 15:35:20.530" status="PASS" endtime="20170919 15:35:20.530"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.531">${cur_time} = 2017-09-19 15:35:20:530771</msg>
<status starttime="20170919 15:35:20.531" status="PASS" endtime="20170919 15:35:20.531"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.531">${cur_time} = 20170919153520530771</msg>
<status starttime="20170919 15:35:20.531" status="PASS" endtime="20170919 15:35:20.532"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.532">${cur_time} = 20170919153520530771</msg>
<status starttime="20170919 15:35:20.530" status="PASS" endtime="20170919 15:35:20.532"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.533" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:35:20.532" status="PASS" endtime="20170919 15:35:20.533"></status>
</kw>
<status starttime="20170919 15:35:20.489" status="PASS" endtime="20170919 15:35:20.533"></status>
</kw>
<status starttime="20170919 15:35:20.195" status="PASS" endtime="20170919 15:35:20.533"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170919 15:35:19.983" status="PASS" endtime="20170919 15:35:20.533" critical="yes"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:20.534">Delete All Sessions</msg>
<status starttime="20170919 15:35:20.534" status="PASS" endtime="20170919 15:35:20.534"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170919 15:35:19.946" status="PASS" endtime="20170919 15:35:20.535"></status>
</suite>
<status starttime="20170919 15:35:19.943" status="PASS" endtime="20170919 15:35:20.537"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/9467/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.578">${default_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:35:20.578" status="PASS" endtime="20170919 15:35:20.578"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.579">${log_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:35:20.578" status="PASS" endtime="20170919 15:35:20.579"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.579">${log_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:35:20.577" status="PASS" endtime="20170919 15:35:20.579"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.581">${default_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:35:20.580" status="PASS" endtime="20170919 15:35:20.581"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.581">${log_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:35:20.581" status="PASS" endtime="20170919 15:35:20.581"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.582">${log_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:35:20.580" status="PASS" endtime="20170919 15:35:20.582"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.583">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170919 15:35:20.583" status="PASS" endtime="20170919 15:35:20.583"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:20.583" status="PASS" endtime="20170919 15:35:20.583"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.588">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:35:20.591">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:35:20.591">${output} = /tmp/fspcibld/9467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170919 15:35:20.584" status="PASS" endtime="20170919 15:35:20.591"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170919 15:35:20.593" status="PASS" endtime="20170919 15:35:20.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20170919 15:35:20.596" status="PASS" endtime="20170919 15:35:20.596"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.596">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170919 15:35:20.595" status="PASS" endtime="20170919 15:35:20.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.597">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:35:20.596" status="PASS" endtime="20170919 15:35:20.597"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.597">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:35:20.582" status="PASS" endtime="20170919 15:35:20.597"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.598">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status starttime="20170919 15:35:20.598" status="PASS" endtime="20170919 15:35:20.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.599">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170919 15:35:20.598" status="PASS" endtime="20170919 15:35:20.599"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:20.599" status="PASS" endtime="20170919 15:35:20.599"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.602">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:35:20.617">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:35:20.617">${os_con_pid} = </msg>
<status starttime="20170919 15:35:20.599" status="PASS" endtime="20170919 15:35:20.617"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170919 15:35:20.619" status="PASS" endtime="20170919 15:35:20.620"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.620">${os_con_pid} = </msg>
<status starttime="20170919 15:35:20.582" status="PASS" endtime="20170919 15:35:20.620"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.621">${cmd_buf} = kill -9 </msg>
<status starttime="20170919 15:35:20.621" status="PASS" endtime="20170919 15:35:20.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:20.622" status="PASS" endtime="20170919 15:35:20.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.624">${rc} = None</msg>
<msg level="INFO" timestamp="20170919 15:35:20.624">${output} = None</msg>
<status starttime="20170919 15:35:20.624" status="PASS" endtime="20170919 15:35:20.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170919 15:35:20.624" status="PASS" endtime="20170919 15:35:20.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:20.627">Source file '/tmp/9.41.166.169_os_console.txt' does not exist.</msg>
<status starttime="20170919 15:35:20.626" status="FAIL" endtime="20170919 15:35:20.627"></status>
</kw>
<status starttime="20170919 15:35:20.626" status="PASS" endtime="20170919 15:35:20.627"></status>
</kw>
<status starttime="20170919 15:35:20.625" status="PASS" endtime="20170919 15:35:20.627"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.628">${output} = </msg>
<status starttime="20170919 15:35:20.627" status="PASS" endtime="20170919 15:35:20.628"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.628">${loc_quiet} = 1</msg>
<status starttime="20170919 15:35:20.628" status="PASS" endtime="20170919 15:35:20.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170919 15:35:20.629" status="PASS" endtime="20170919 15:35:20.690"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.691">${rc} = 1</msg>
<msg level="INFO" timestamp="20170919 15:35:20.691">${output} = cat: /tmp/9.41.166.169_os_console.txt: No such file or directory
</msg>
<status starttime="20170919 15:35:20.629" status="PASS" endtime="20170919 15:35:20.691"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.692">${log_output} = cat: /tmp/9.41.166.169_os_console.txt: No such file or directory
</msg>
<status starttime="20170919 15:35:20.579" status="PASS" endtime="20170919 15:35:20.692"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:20.694" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console.txt"&gt;/tmp/9.41.166.169_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:35:20.693" status="PASS" endtime="20170919 15:35:20.694"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.695">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170919 15:35:20.695" status="PASS" endtime="20170919 15:35:20.695"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:20.695" status="PASS" endtime="20170919 15:35:20.696"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.699">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:35:20.701">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:35:20.701">${output} = /tmp/fspcibld/9467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170919 15:35:20.696" status="PASS" endtime="20170919 15:35:20.702"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170919 15:35:20.704" status="PASS" endtime="20170919 15:35:20.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20170919 15:35:20.707" status="PASS" endtime="20170919 15:35:20.707"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.707">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170919 15:35:20.706" status="PASS" endtime="20170919 15:35:20.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.708">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:35:20.707" status="PASS" endtime="20170919 15:35:20.708"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:20.708">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:35:20.694" status="PASS" endtime="20170919 15:35:20.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.709">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status starttime="20170919 15:35:20.708" status="PASS" endtime="20170919 15:35:20.709"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:20.709" status="PASS" endtime="20170919 15:35:20.709"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:20.712">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170919 15:35:20.715">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:35:20.715">${output} = </msg>
<status starttime="20170919 15:35:20.710" status="PASS" endtime="20170919 15:35:20.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170919 15:35:20.717" status="PASS" endtime="20170919 15:35:20.718"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.718">Slept 1 second</msg>
<status starttime="20170919 15:35:20.718" status="PASS" endtime="20170919 15:35:21.719"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.721">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170919 15:35:21.720" status="PASS" endtime="20170919 15:35:21.721"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:21.721" status="PASS" endtime="20170919 15:35:21.722"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.725">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:35:21.730">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:35:21.730">${output} = /tmp/fspcibld/9467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170919 15:35:21.722" status="PASS" endtime="20170919 15:35:21.730"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170919 15:35:21.731" status="PASS" endtime="20170919 15:35:21.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20170919 15:35:21.733" status="PASS" endtime="20170919 15:35:21.733"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:21.734">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170919 15:35:21.732" status="PASS" endtime="20170919 15:35:21.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.734">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:35:21.734" status="PASS" endtime="20170919 15:35:21.734"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:21.735">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:35:21.720" status="PASS" endtime="20170919 15:35:21.735"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.735">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status starttime="20170919 15:35:21.735" status="PASS" endtime="20170919 15:35:21.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.736">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170919 15:35:21.736" status="PASS" endtime="20170919 15:35:21.736"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:35:21.736" status="PASS" endtime="20170919 15:35:21.736"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.739">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:35:21.748">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:35:21.748">${os_con_pid} = 182</msg>
<status starttime="20170919 15:35:21.737" status="PASS" endtime="20170919 15:35:21.748"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170919 15:35:21.750" status="PASS" endtime="20170919 15:35:21.751"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:21.751">${os_con_pid} = 182</msg>
<status starttime="20170919 15:35:21.719" status="PASS" endtime="20170919 15:35:21.751"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.752">Length is 3</msg>
<status starttime="20170919 15:35:21.752" status="PASS" endtime="20170919 15:35:21.752"></status>
</kw>
<status starttime="20170919 15:35:20.577" status="PASS" endtime="20170919 15:35:21.752"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.753">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.755">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170919 15:35:21.754" status="PASS" endtime="20170919 15:35:21.755"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.756">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170919 15:35:21.756" status="PASS" endtime="20170919 15:35:21.756"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.760">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:21.759" status="PASS" endtime="20170919 15:35:21.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:21.761" status="PASS" endtime="20170919 15:35:21.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.762">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:21.762" status="PASS" endtime="20170919 15:35:21.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:21.762" status="PASS" endtime="20170919 15:35:21.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:21.764" status="PASS" endtime="20170919 15:35:21.958"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:21.959">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:21.959">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:21.763" status="PASS" endtime="20170919 15:35:21.959"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.959">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:21.959" status="PASS" endtime="20170919 15:35:21.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:21.960" status="PASS" endtime="20170919 15:35:21.960"></status>
</kw>
<status starttime="20170919 15:35:21.759" status="PASS" endtime="20170919 15:35:21.960"></status>
</kw>
<status starttime="20170919 15:35:21.758" status="PASS" endtime="20170919 15:35:21.960"></status>
</kw>
<status starttime="20170919 15:35:21.757" status="PASS" endtime="20170919 15:35:21.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.961">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170919 15:35:21.961" status="PASS" endtime="20170919 15:35:21.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.962">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:21.961" status="PASS" endtime="20170919 15:35:21.962"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170919 15:35:21.962" status="PASS" endtime="20170919 15:35:21.962"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:21.964">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170919 15:35:21.963" status="PASS" endtime="20170919 15:35:21.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:21.965">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170919 15:35:21.964" status="PASS" endtime="20170919 15:35:21.965"></status>
</kw>
<status starttime="20170919 15:35:21.964" status="PASS" endtime="20170919 15:35:21.965"></status>
</kw>
<status starttime="20170919 15:35:21.962" status="PASS" endtime="20170919 15:35:21.965"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:22.677">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170919 15:35:22.677">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:21.965" status="PASS" endtime="20170919 15:35:22.677"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:22.679">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:22.678" status="PASS" endtime="20170919 15:35:22.679"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:22.680">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:22.680" status="PASS" endtime="20170919 15:35:22.680"></status>
</kw>
<status starttime="20170919 15:35:22.679" status="PASS" endtime="20170919 15:35:22.680"></status>
</kw>
<status starttime="20170919 15:35:22.678" status="PASS" endtime="20170919 15:35:22.680"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:22.680">Delete All Sessions</msg>
<status starttime="20170919 15:35:22.680" status="PASS" endtime="20170919 15:35:22.681"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:22.681">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:21.756" status="PASS" endtime="20170919 15:35:22.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:22.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:22.681" status="PASS" endtime="20170919 15:35:22.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:22.682">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:22.682">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:22.682">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:22.682" status="PASS" endtime="20170919 15:35:22.682"></status>
</kw>
<status starttime="20170919 15:35:21.755" status="PASS" endtime="20170919 15:35:22.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170919 15:35:22.683" status="PASS" endtime="20170919 15:35:22.683"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:22.691">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:22.691" status="PASS" endtime="20170919 15:35:22.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:22.692">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:22.692" status="PASS" endtime="20170919 15:35:22.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:22.693">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:22.692" status="PASS" endtime="20170919 15:35:22.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:22.693">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:22.693" status="PASS" endtime="20170919 15:35:22.693"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:24.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:22.694" status="PASS" endtime="20170919 15:35:24.398"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:24.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:24.398">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:22.694" status="PASS" endtime="20170919 15:35:24.398"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:24.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:24.399" status="PASS" endtime="20170919 15:35:24.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:24.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:24.400" status="PASS" endtime="20170919 15:35:24.400"></status>
</kw>
<status starttime="20170919 15:35:22.690" status="PASS" endtime="20170919 15:35:24.400"></status>
</kw>
<status starttime="20170919 15:35:22.689" status="PASS" endtime="20170919 15:35:24.400"></status>
</kw>
<status starttime="20170919 15:35:22.689" status="PASS" endtime="20170919 15:35:24.400"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:24.401">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:35:24.401" status="PASS" endtime="20170919 15:35:24.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:24.403">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:24.402" status="PASS" endtime="20170919 15:35:24.403"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:24.404">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:24.404" status="PASS" endtime="20170919 15:35:24.404"></status>
</kw>
<status starttime="20170919 15:35:24.403" status="PASS" endtime="20170919 15:35:24.404"></status>
</kw>
<status starttime="20170919 15:35:24.402" status="PASS" endtime="20170919 15:35:24.404"></status>
</kw>
<status starttime="20170919 15:35:24.401" status="PASS" endtime="20170919 15:35:24.405"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.033">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:29.033">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:24.405" status="PASS" endtime="20170919 15:35:29.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.035">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:29.035" status="PASS" endtime="20170919 15:35:29.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.036">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:29.036" status="PASS" endtime="20170919 15:35:29.037"></status>
</kw>
<status starttime="20170919 15:35:29.036" status="PASS" endtime="20170919 15:35:29.037"></status>
</kw>
<status starttime="20170919 15:35:29.034" status="PASS" endtime="20170919 15:35:29.037"></status>
</kw>
<status starttime="20170919 15:35:29.034" status="PASS" endtime="20170919 15:35:29.037"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:29.037">Delete All Sessions</msg>
<status starttime="20170919 15:35:29.037" status="PASS" endtime="20170919 15:35:29.037"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:22.688" status="PASS" endtime="20170919 15:35:29.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:29.038" status="PASS" endtime="20170919 15:35:29.038"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.039">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:29.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:29.039">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:29.039" status="PASS" endtime="20170919 15:35:29.039"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.039">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:35:22.687" status="PASS" endtime="20170919 15:35:29.039"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.040">${power_state} = Off</msg>
<status starttime="20170919 15:35:22.687" status="PASS" endtime="20170919 15:35:29.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170919 15:35:29.040" status="PASS" endtime="20170919 15:35:29.040"></status>
</kw>
<status starttime="20170919 15:35:22.686" status="PASS" endtime="20170919 15:35:29.041"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.044">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:29.044" status="PASS" endtime="20170919 15:35:29.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.045">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:29.045" status="PASS" endtime="20170919 15:35:29.045"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.046">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:29.046" status="PASS" endtime="20170919 15:35:29.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:29.046" status="PASS" endtime="20170919 15:35:29.047"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:29.047" status="PASS" endtime="20170919 15:35:29.265"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:29.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:29.047" status="PASS" endtime="20170919 15:35:29.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:29.265" status="PASS" endtime="20170919 15:35:29.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:29.266" status="PASS" endtime="20170919 15:35:29.267"></status>
</kw>
<status starttime="20170919 15:35:29.043" status="PASS" endtime="20170919 15:35:29.267"></status>
</kw>
<status starttime="20170919 15:35:29.043" status="PASS" endtime="20170919 15:35:29.267"></status>
</kw>
<status starttime="20170919 15:35:29.042" status="PASS" endtime="20170919 15:35:29.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.267">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170919 15:35:29.267" status="PASS" endtime="20170919 15:35:29.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.270">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:29.269" status="PASS" endtime="20170919 15:35:29.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.270">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:29.270" status="PASS" endtime="20170919 15:35:29.271"></status>
</kw>
<status starttime="20170919 15:35:29.270" status="PASS" endtime="20170919 15:35:29.271"></status>
</kw>
<status starttime="20170919 15:35:29.268" status="PASS" endtime="20170919 15:35:29.271"></status>
</kw>
<status starttime="20170919 15:35:29.268" status="PASS" endtime="20170919 15:35:29.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.502">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:29.502">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:29.271" status="PASS" endtime="20170919 15:35:29.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.504">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:29.504" status="PASS" endtime="20170919 15:35:29.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.505">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:29.505" status="PASS" endtime="20170919 15:35:29.505"></status>
</kw>
<status starttime="20170919 15:35:29.504" status="PASS" endtime="20170919 15:35:29.506"></status>
</kw>
<status starttime="20170919 15:35:29.503" status="PASS" endtime="20170919 15:35:29.506"></status>
</kw>
<status starttime="20170919 15:35:29.503" status="PASS" endtime="20170919 15:35:29.506"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:29.506">Delete All Sessions</msg>
<status starttime="20170919 15:35:29.506" status="PASS" endtime="20170919 15:35:29.506"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.506">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:29.042" status="PASS" endtime="20170919 15:35:29.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:29.507" status="PASS" endtime="20170919 15:35:29.507"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.508">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:29.508">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:29.508">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:29.507" status="PASS" endtime="20170919 15:35:29.508"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.508">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170919 15:35:29.041" status="PASS" endtime="20170919 15:35:29.508"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.508">${host_state} = Off</msg>
<status starttime="20170919 15:35:29.041" status="PASS" endtime="20170919 15:35:29.508"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170919 15:35:29.509" status="PASS" endtime="20170919 15:35:29.509"></status>
</kw>
<status starttime="20170919 15:35:22.685" status="PASS" endtime="20170919 15:35:29.509"></status>
</kw>
<status starttime="20170919 15:35:22.685" status="PASS" endtime="20170919 15:35:29.509"></status>
</kw>
<status starttime="20170919 15:35:22.684" status="PASS" endtime="20170919 15:35:29.509"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:29.509">${status} = True</msg>
<status starttime="20170919 15:35:22.684" status="PASS" endtime="20170919 15:35:29.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status starttime="20170919 15:35:29.510" status="PASS" endtime="20170919 15:35:29.510"></status>
</kw>
<status starttime="20170919 15:35:21.754" status="PASS" endtime="20170919 15:35:29.510"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.511">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170919 15:35:29.511" status="PASS" endtime="20170919 15:35:29.511"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.512">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170919 15:35:29.512" status="PASS" endtime="20170919 15:35:29.512"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:29.518">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:29.518" status="PASS" endtime="20170919 15:35:29.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:29.519" status="PASS" endtime="20170919 15:35:29.519"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:29.520" status="PASS" endtime="20170919 15:35:29.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:29.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:29.520" status="PASS" endtime="20170919 15:35:29.521"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:29.522" status="PASS" endtime="20170919 15:35:30.169"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:30.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:30.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:29.521" status="PASS" endtime="20170919 15:35:30.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:30.169" status="PASS" endtime="20170919 15:35:30.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:30.170" status="PASS" endtime="20170919 15:35:30.171"></status>
</kw>
<status starttime="20170919 15:35:29.517" status="PASS" endtime="20170919 15:35:30.171"></status>
</kw>
<status starttime="20170919 15:35:29.517" status="PASS" endtime="20170919 15:35:30.171"></status>
</kw>
<status starttime="20170919 15:35:29.513" status="PASS" endtime="20170919 15:35:30.171"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.171">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170919 15:35:30.171" status="PASS" endtime="20170919 15:35:30.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.172">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:30.172" status="PASS" endtime="20170919 15:35:30.172"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170919 15:35:30.172" status="PASS" endtime="20170919 15:35:30.173"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.174">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170919 15:35:30.174" status="PASS" endtime="20170919 15:35:30.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.175">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170919 15:35:30.175" status="PASS" endtime="20170919 15:35:30.175"></status>
</kw>
<status starttime="20170919 15:35:30.174" status="PASS" endtime="20170919 15:35:30.175"></status>
</kw>
<status starttime="20170919 15:35:30.173" status="PASS" endtime="20170919 15:35:30.176"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.757">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170919 15:35:30.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:30.176" status="PASS" endtime="20170919 15:35:30.757"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.759">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:30.758" status="PASS" endtime="20170919 15:35:30.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.760">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:30.760" status="PASS" endtime="20170919 15:35:30.761"></status>
</kw>
<status starttime="20170919 15:35:30.759" status="PASS" endtime="20170919 15:35:30.761"></status>
</kw>
<status starttime="20170919 15:35:30.757" status="PASS" endtime="20170919 15:35:30.761"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:30.761">Delete All Sessions</msg>
<status starttime="20170919 15:35:30.761" status="PASS" endtime="20170919 15:35:30.761"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:30.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:29.513" status="PASS" endtime="20170919 15:35:30.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:30.762" status="PASS" endtime="20170919 15:35:30.762"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.763">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:30.763">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:30.763">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:30.763" status="PASS" endtime="20170919 15:35:30.763"></status>
</kw>
<status starttime="20170919 15:35:29.511" status="PASS" endtime="20170919 15:35:30.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170919 15:35:30.763" status="PASS" endtime="20170919 15:35:30.764"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:30.768">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:30.768" status="PASS" endtime="20170919 15:35:30.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.769">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:30.769" status="PASS" endtime="20170919 15:35:30.769"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.770">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:30.770" status="PASS" endtime="20170919 15:35:30.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:30.772">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:30.770" status="PASS" endtime="20170919 15:35:30.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:33.002">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:30.772" status="PASS" endtime="20170919 15:35:33.002"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:33.002">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:33.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:30.772" status="PASS" endtime="20170919 15:35:33.002"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:33.003">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:33.003" status="PASS" endtime="20170919 15:35:33.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:33.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:33.004" status="PASS" endtime="20170919 15:35:33.004"></status>
</kw>
<status starttime="20170919 15:35:30.768" status="PASS" endtime="20170919 15:35:33.004"></status>
</kw>
<status starttime="20170919 15:35:30.767" status="PASS" endtime="20170919 15:35:33.004"></status>
</kw>
<status starttime="20170919 15:35:30.767" status="PASS" endtime="20170919 15:35:33.004"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:33.005">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:35:33.005" status="PASS" endtime="20170919 15:35:33.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:33.007">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:33.006" status="PASS" endtime="20170919 15:35:33.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:33.008">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:33.008" status="PASS" endtime="20170919 15:35:33.008"></status>
</kw>
<status starttime="20170919 15:35:33.007" status="PASS" endtime="20170919 15:35:33.008"></status>
</kw>
<status starttime="20170919 15:35:33.006" status="PASS" endtime="20170919 15:35:33.008"></status>
</kw>
<status starttime="20170919 15:35:33.005" status="PASS" endtime="20170919 15:35:33.008"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:37.734">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:37.734">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:33.009" status="PASS" endtime="20170919 15:35:37.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:37.737">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:37.736" status="PASS" endtime="20170919 15:35:37.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:37.737">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:37.737" status="PASS" endtime="20170919 15:35:37.738"></status>
</kw>
<status starttime="20170919 15:35:37.737" status="PASS" endtime="20170919 15:35:37.738"></status>
</kw>
<status starttime="20170919 15:35:37.735" status="PASS" endtime="20170919 15:35:37.738"></status>
</kw>
<status starttime="20170919 15:35:37.735" status="PASS" endtime="20170919 15:35:37.738"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:37.738">Delete All Sessions</msg>
<status starttime="20170919 15:35:37.738" status="PASS" endtime="20170919 15:35:37.738"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:37.739">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:30.766" status="PASS" endtime="20170919 15:35:37.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:37.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:37.739" status="PASS" endtime="20170919 15:35:37.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:37.740">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:37.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:37.740">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:37.740" status="PASS" endtime="20170919 15:35:37.740"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:37.740">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:35:30.766" status="PASS" endtime="20170919 15:35:37.740"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:37.741">${power_state} = Off</msg>
<status starttime="20170919 15:35:30.765" status="PASS" endtime="20170919 15:35:37.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:37.741">On != Off</msg>
<status starttime="20170919 15:35:37.741" status="FAIL" endtime="20170919 15:35:37.741"></status>
</kw>
<status starttime="20170919 15:35:30.765" status="FAIL" endtime="20170919 15:35:37.742"></status>
</kw>
<status starttime="20170919 15:35:30.764" status="FAIL" endtime="20170919 15:35:37.742"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:47.747">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:47.747" status="PASS" endtime="20170919 15:35:47.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:47.748">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:47.748" status="PASS" endtime="20170919 15:35:47.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:47.749">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:47.748" status="PASS" endtime="20170919 15:35:47.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:47.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:47.749" status="PASS" endtime="20170919 15:35:47.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:47.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:47.750" status="PASS" endtime="20170919 15:35:47.938"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:47.938">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:47.938">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:47.750" status="PASS" endtime="20170919 15:35:47.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:47.939">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:47.939" status="PASS" endtime="20170919 15:35:47.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:47.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:47.939" status="PASS" endtime="20170919 15:35:47.940"></status>
</kw>
<status starttime="20170919 15:35:47.746" status="PASS" endtime="20170919 15:35:47.940"></status>
</kw>
<status starttime="20170919 15:35:47.745" status="PASS" endtime="20170919 15:35:47.940"></status>
</kw>
<status starttime="20170919 15:35:47.745" status="PASS" endtime="20170919 15:35:47.940"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:47.941">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:35:47.940" status="PASS" endtime="20170919 15:35:47.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:47.943">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:47.942" status="PASS" endtime="20170919 15:35:47.943"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:47.944">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:47.944" status="PASS" endtime="20170919 15:35:47.944"></status>
</kw>
<status starttime="20170919 15:35:47.943" status="PASS" endtime="20170919 15:35:47.944"></status>
</kw>
<status starttime="20170919 15:35:47.942" status="PASS" endtime="20170919 15:35:47.944"></status>
</kw>
<status starttime="20170919 15:35:47.941" status="PASS" endtime="20170919 15:35:47.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:48.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:48.010">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:47.945" status="PASS" endtime="20170919 15:35:48.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:48.012">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:48.011" status="PASS" endtime="20170919 15:35:48.012"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:48.013">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:48.013" status="PASS" endtime="20170919 15:35:48.013"></status>
</kw>
<status starttime="20170919 15:35:48.012" status="PASS" endtime="20170919 15:35:48.013"></status>
</kw>
<status starttime="20170919 15:35:48.011" status="PASS" endtime="20170919 15:35:48.013"></status>
</kw>
<status starttime="20170919 15:35:48.010" status="PASS" endtime="20170919 15:35:48.013"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:48.014">Delete All Sessions</msg>
<status starttime="20170919 15:35:48.014" status="PASS" endtime="20170919 15:35:48.014"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:48.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:47.744" status="PASS" endtime="20170919 15:35:48.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:48.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:48.014" status="PASS" endtime="20170919 15:35:48.015"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:48.015">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:48.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:48.015">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:48.015" status="PASS" endtime="20170919 15:35:48.015"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:48.016">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:35:47.744" status="PASS" endtime="20170919 15:35:48.016"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:48.016">${power_state} = Off</msg>
<status starttime="20170919 15:35:47.743" status="PASS" endtime="20170919 15:35:48.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:48.017">On != Off</msg>
<status starttime="20170919 15:35:48.016" status="FAIL" endtime="20170919 15:35:48.017"></status>
</kw>
<status starttime="20170919 15:35:47.743" status="FAIL" endtime="20170919 15:35:48.017"></status>
</kw>
<status starttime="20170919 15:35:47.742" status="FAIL" endtime="20170919 15:35:48.017"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.024">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:35:58.024" status="PASS" endtime="20170919 15:35:58.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.025">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:35:58.025" status="PASS" endtime="20170919 15:35:58.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.026">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:35:58.026" status="PASS" endtime="20170919 15:35:58.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:35:58.027" status="PASS" endtime="20170919 15:35:58.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:35:58.029" status="PASS" endtime="20170919 15:35:58.226"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:58.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:35:58.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:58.028" status="PASS" endtime="20170919 15:35:58.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:58.226" status="PASS" endtime="20170919 15:35:58.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:58.227" status="PASS" endtime="20170919 15:35:58.227"></status>
</kw>
<status starttime="20170919 15:35:58.023" status="PASS" endtime="20170919 15:35:58.228"></status>
</kw>
<status starttime="20170919 15:35:58.022" status="PASS" endtime="20170919 15:35:58.228"></status>
</kw>
<status starttime="20170919 15:35:58.021" status="PASS" endtime="20170919 15:35:58.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.228">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:35:58.228" status="PASS" endtime="20170919 15:35:58.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.231">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:58.230" status="PASS" endtime="20170919 15:35:58.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.233">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:35:58.232" status="PASS" endtime="20170919 15:35:58.233"></status>
</kw>
<status starttime="20170919 15:35:58.231" status="PASS" endtime="20170919 15:35:58.233"></status>
</kw>
<status starttime="20170919 15:35:58.229" status="PASS" endtime="20170919 15:35:58.233"></status>
</kw>
<status starttime="20170919 15:35:58.229" status="PASS" endtime="20170919 15:35:58.233"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.295">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:35:58.295">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:58.233" status="PASS" endtime="20170919 15:35:58.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.297">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:58.296" status="PASS" endtime="20170919 15:35:58.297"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.297">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:35:58.297" status="PASS" endtime="20170919 15:35:58.298"></status>
</kw>
<status starttime="20170919 15:35:58.297" status="PASS" endtime="20170919 15:35:58.298"></status>
</kw>
<status starttime="20170919 15:35:58.296" status="PASS" endtime="20170919 15:35:58.298"></status>
</kw>
<status starttime="20170919 15:35:58.295" status="PASS" endtime="20170919 15:35:58.298"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:35:58.298">Delete All Sessions</msg>
<status starttime="20170919 15:35:58.298" status="PASS" endtime="20170919 15:35:58.298"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:58.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:35:58.020" status="PASS" endtime="20170919 15:35:58.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:35:58.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:35:58.299" status="PASS" endtime="20170919 15:35:58.299"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:35:58.300">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:35:58.300">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:35:58.300">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:35:58.299" status="PASS" endtime="20170919 15:35:58.300"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:58.300">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:35:58.019" status="PASS" endtime="20170919 15:35:58.300"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:35:58.300">${power_state} = Off</msg>
<status starttime="20170919 15:35:58.019" status="PASS" endtime="20170919 15:35:58.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:35:58.301">On != Off</msg>
<status starttime="20170919 15:35:58.301" status="FAIL" endtime="20170919 15:35:58.301"></status>
</kw>
<status starttime="20170919 15:35:58.018" status="FAIL" endtime="20170919 15:35:58.302"></status>
</kw>
<status starttime="20170919 15:35:58.018" status="FAIL" endtime="20170919 15:35:58.302"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.307">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:36:08.307" status="PASS" endtime="20170919 15:36:08.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:36:08.308" status="PASS" endtime="20170919 15:36:08.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.309">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:36:08.309" status="PASS" endtime="20170919 15:36:08.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:36:08.309" status="PASS" endtime="20170919 15:36:08.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:36:08.310" status="PASS" endtime="20170919 15:36:08.503"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:08.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:36:08.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:08.310" status="PASS" endtime="20170919 15:36:08.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:08.504" status="PASS" endtime="20170919 15:36:08.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:08.504" status="PASS" endtime="20170919 15:36:08.505"></status>
</kw>
<status starttime="20170919 15:36:08.306" status="PASS" endtime="20170919 15:36:08.505"></status>
</kw>
<status starttime="20170919 15:36:08.306" status="PASS" endtime="20170919 15:36:08.505"></status>
</kw>
<status starttime="20170919 15:36:08.305" status="PASS" endtime="20170919 15:36:08.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.506">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:36:08.505" status="PASS" endtime="20170919 15:36:08.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.508">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:08.507" status="PASS" endtime="20170919 15:36:08.508"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.509">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:08.508" status="PASS" endtime="20170919 15:36:08.509"></status>
</kw>
<status starttime="20170919 15:36:08.508" status="PASS" endtime="20170919 15:36:08.509"></status>
</kw>
<status starttime="20170919 15:36:08.506" status="PASS" endtime="20170919 15:36:08.509"></status>
</kw>
<status starttime="20170919 15:36:08.506" status="PASS" endtime="20170919 15:36:08.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.573">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:36:08.573">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:08.510" status="PASS" endtime="20170919 15:36:08.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.575">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:08.575" status="PASS" endtime="20170919 15:36:08.575"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.577">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:08.576" status="PASS" endtime="20170919 15:36:08.577"></status>
</kw>
<status starttime="20170919 15:36:08.576" status="PASS" endtime="20170919 15:36:08.577"></status>
</kw>
<status starttime="20170919 15:36:08.574" status="PASS" endtime="20170919 15:36:08.577"></status>
</kw>
<status starttime="20170919 15:36:08.574" status="PASS" endtime="20170919 15:36:08.577"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:36:08.577">Delete All Sessions</msg>
<status starttime="20170919 15:36:08.577" status="PASS" endtime="20170919 15:36:08.577"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:08.578">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:08.304" status="PASS" endtime="20170919 15:36:08.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:08.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:08.578" status="PASS" endtime="20170919 15:36:08.578"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:08.579">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:36:08.579">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:36:08.579">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:36:08.579" status="PASS" endtime="20170919 15:36:08.579"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:08.579">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:36:08.304" status="PASS" endtime="20170919 15:36:08.579"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:08.580">${power_state} = Off</msg>
<status starttime="20170919 15:36:08.303" status="PASS" endtime="20170919 15:36:08.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:36:08.580">On != Off</msg>
<status starttime="20170919 15:36:08.580" status="FAIL" endtime="20170919 15:36:08.580"></status>
</kw>
<status starttime="20170919 15:36:08.303" status="FAIL" endtime="20170919 15:36:08.581"></status>
</kw>
<status starttime="20170919 15:36:08.302" status="FAIL" endtime="20170919 15:36:08.581"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.586">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:36:18.586" status="PASS" endtime="20170919 15:36:18.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:36:18.587" status="PASS" endtime="20170919 15:36:18.587"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.588">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:36:18.587" status="PASS" endtime="20170919 15:36:18.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.588">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:36:18.588" status="PASS" endtime="20170919 15:36:18.588"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:36:18.589" status="PASS" endtime="20170919 15:36:18.768"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:18.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:36:18.769">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:18.589" status="PASS" endtime="20170919 15:36:18.769"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:18.769" status="PASS" endtime="20170919 15:36:18.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:18.770" status="PASS" endtime="20170919 15:36:18.770"></status>
</kw>
<status starttime="20170919 15:36:18.585" status="PASS" endtime="20170919 15:36:18.770"></status>
</kw>
<status starttime="20170919 15:36:18.585" status="PASS" endtime="20170919 15:36:18.770"></status>
</kw>
<status starttime="20170919 15:36:18.584" status="PASS" endtime="20170919 15:36:18.770"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.771">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:36:18.771" status="PASS" endtime="20170919 15:36:18.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.773">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:18.772" status="PASS" endtime="20170919 15:36:18.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.774">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:18.774" status="PASS" endtime="20170919 15:36:18.774"></status>
</kw>
<status starttime="20170919 15:36:18.773" status="PASS" endtime="20170919 15:36:18.774"></status>
</kw>
<status starttime="20170919 15:36:18.772" status="PASS" endtime="20170919 15:36:18.774"></status>
</kw>
<status starttime="20170919 15:36:18.771" status="PASS" endtime="20170919 15:36:18.774"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.836">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:36:18.837">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:18.775" status="PASS" endtime="20170919 15:36:18.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.838">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:18.838" status="PASS" endtime="20170919 15:36:18.838"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.840">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:18.839" status="PASS" endtime="20170919 15:36:18.840"></status>
</kw>
<status starttime="20170919 15:36:18.839" status="PASS" endtime="20170919 15:36:18.840"></status>
</kw>
<status starttime="20170919 15:36:18.837" status="PASS" endtime="20170919 15:36:18.840"></status>
</kw>
<status starttime="20170919 15:36:18.837" status="PASS" endtime="20170919 15:36:18.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:36:18.840">Delete All Sessions</msg>
<status starttime="20170919 15:36:18.840" status="PASS" endtime="20170919 15:36:18.841"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:18.841">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:18.583" status="PASS" endtime="20170919 15:36:18.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:18.841">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:18.841" status="PASS" endtime="20170919 15:36:18.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:18.842">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:36:18.842">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:36:18.842">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:36:18.842" status="PASS" endtime="20170919 15:36:18.842"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:18.843">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:36:18.583" status="PASS" endtime="20170919 15:36:18.843"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:18.843">${power_state} = Off</msg>
<status starttime="20170919 15:36:18.582" status="PASS" endtime="20170919 15:36:18.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:36:18.844">On != Off</msg>
<status starttime="20170919 15:36:18.843" status="FAIL" endtime="20170919 15:36:18.844"></status>
</kw>
<status starttime="20170919 15:36:18.582" status="FAIL" endtime="20170919 15:36:18.844"></status>
</kw>
<status starttime="20170919 15:36:18.581" status="FAIL" endtime="20170919 15:36:18.844"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:28.850">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:36:28.850" status="PASS" endtime="20170919 15:36:28.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:28.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:36:28.851" status="PASS" endtime="20170919 15:36:28.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:28.852">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:36:28.852" status="PASS" endtime="20170919 15:36:28.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:28.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:36:28.852" status="PASS" endtime="20170919 15:36:28.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:29.039">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:36:28.853" status="PASS" endtime="20170919 15:36:29.039"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:29.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:36:29.040">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:28.853" status="PASS" endtime="20170919 15:36:29.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:29.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:29.040" status="PASS" endtime="20170919 15:36:29.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:29.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:29.041" status="PASS" endtime="20170919 15:36:29.041"></status>
</kw>
<status starttime="20170919 15:36:28.849" status="PASS" endtime="20170919 15:36:29.041"></status>
</kw>
<status starttime="20170919 15:36:28.848" status="PASS" endtime="20170919 15:36:29.041"></status>
</kw>
<status starttime="20170919 15:36:28.848" status="PASS" endtime="20170919 15:36:29.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:29.042">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:36:29.042" status="PASS" endtime="20170919 15:36:29.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:29.044">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:29.044" status="PASS" endtime="20170919 15:36:29.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:29.045">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:29.045" status="PASS" endtime="20170919 15:36:29.045"></status>
</kw>
<status starttime="20170919 15:36:29.044" status="PASS" endtime="20170919 15:36:29.045"></status>
</kw>
<status starttime="20170919 15:36:29.043" status="PASS" endtime="20170919 15:36:29.046"></status>
</kw>
<status starttime="20170919 15:36:29.042" status="PASS" endtime="20170919 15:36:29.046"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:29.110">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:36:29.110">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:29.046" status="PASS" endtime="20170919 15:36:29.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:29.112">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:29.112" status="PASS" endtime="20170919 15:36:29.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:29.114">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:29.113" status="PASS" endtime="20170919 15:36:29.114"></status>
</kw>
<status starttime="20170919 15:36:29.113" status="PASS" endtime="20170919 15:36:29.114"></status>
</kw>
<status starttime="20170919 15:36:29.111" status="PASS" endtime="20170919 15:36:29.114"></status>
</kw>
<status starttime="20170919 15:36:29.111" status="PASS" endtime="20170919 15:36:29.114"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:36:29.114">Delete All Sessions</msg>
<status starttime="20170919 15:36:29.114" status="PASS" endtime="20170919 15:36:29.114"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:29.115">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:28.847" status="PASS" endtime="20170919 15:36:29.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:29.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:29.115" status="PASS" endtime="20170919 15:36:29.115"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:29.116">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:36:29.116">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:36:29.116">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:36:29.116" status="PASS" endtime="20170919 15:36:29.116"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:29.116">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:36:28.846" status="PASS" endtime="20170919 15:36:29.116"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:29.117">${power_state} = Off</msg>
<status starttime="20170919 15:36:28.846" status="PASS" endtime="20170919 15:36:29.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:36:29.117">On != Off</msg>
<status starttime="20170919 15:36:29.117" status="FAIL" endtime="20170919 15:36:29.117"></status>
</kw>
<status starttime="20170919 15:36:28.846" status="FAIL" endtime="20170919 15:36:29.118"></status>
</kw>
<status starttime="20170919 15:36:28.845" status="FAIL" endtime="20170919 15:36:29.118"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.123">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:36:39.123" status="PASS" endtime="20170919 15:36:39.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:36:39.124" status="PASS" endtime="20170919 15:36:39.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.125">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:36:39.124" status="PASS" endtime="20170919 15:36:39.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:36:39.125" status="PASS" endtime="20170919 15:36:39.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.309">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:36:39.126" status="PASS" endtime="20170919 15:36:39.309"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:39.310">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:36:39.310">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:39.126" status="PASS" endtime="20170919 15:36:39.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.310">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:39.310" status="PASS" endtime="20170919 15:36:39.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:39.311" status="PASS" endtime="20170919 15:36:39.311"></status>
</kw>
<status starttime="20170919 15:36:39.122" status="PASS" endtime="20170919 15:36:39.311"></status>
</kw>
<status starttime="20170919 15:36:39.122" status="PASS" endtime="20170919 15:36:39.311"></status>
</kw>
<status starttime="20170919 15:36:39.121" status="PASS" endtime="20170919 15:36:39.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.312">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:36:39.312" status="PASS" endtime="20170919 15:36:39.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.314">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:39.313" status="PASS" endtime="20170919 15:36:39.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.315">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:39.315" status="PASS" endtime="20170919 15:36:39.315"></status>
</kw>
<status starttime="20170919 15:36:39.314" status="PASS" endtime="20170919 15:36:39.315"></status>
</kw>
<status starttime="20170919 15:36:39.313" status="PASS" endtime="20170919 15:36:39.315"></status>
</kw>
<status starttime="20170919 15:36:39.312" status="PASS" endtime="20170919 15:36:39.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.392">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:36:39.392">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:39.316" status="PASS" endtime="20170919 15:36:39.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.394">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:39.394" status="PASS" endtime="20170919 15:36:39.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.395">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:39.395" status="PASS" endtime="20170919 15:36:39.395"></status>
</kw>
<status starttime="20170919 15:36:39.395" status="PASS" endtime="20170919 15:36:39.396"></status>
</kw>
<status starttime="20170919 15:36:39.393" status="PASS" endtime="20170919 15:36:39.396"></status>
</kw>
<status starttime="20170919 15:36:39.393" status="PASS" endtime="20170919 15:36:39.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:36:39.396">Delete All Sessions</msg>
<status starttime="20170919 15:36:39.396" status="PASS" endtime="20170919 15:36:39.396"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:39.396">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:39.120" status="PASS" endtime="20170919 15:36:39.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:39.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:39.397" status="PASS" endtime="20170919 15:36:39.397"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:39.398">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:36:39.398">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:36:39.398">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:36:39.397" status="PASS" endtime="20170919 15:36:39.398"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:39.398">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:36:39.120" status="PASS" endtime="20170919 15:36:39.398"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:39.398">${power_state} = Off</msg>
<status starttime="20170919 15:36:39.119" status="PASS" endtime="20170919 15:36:39.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:36:39.399">On != Off</msg>
<status starttime="20170919 15:36:39.399" status="FAIL" endtime="20170919 15:36:39.399"></status>
</kw>
<status starttime="20170919 15:36:39.119" status="FAIL" endtime="20170919 15:36:39.399"></status>
</kw>
<status starttime="20170919 15:36:39.118" status="FAIL" endtime="20170919 15:36:39.400"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.409">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:36:49.409" status="PASS" endtime="20170919 15:36:49.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:36:49.410" status="PASS" endtime="20170919 15:36:49.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.411">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:36:49.410" status="PASS" endtime="20170919 15:36:49.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:36:49.411" status="PASS" endtime="20170919 15:36:49.412"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.621">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:36:49.412" status="PASS" endtime="20170919 15:36:49.621"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:49.621">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:36:49.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:49.412" status="PASS" endtime="20170919 15:36:49.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.622">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:49.622" status="PASS" endtime="20170919 15:36:49.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:49.623" status="PASS" endtime="20170919 15:36:49.623"></status>
</kw>
<status starttime="20170919 15:36:49.404" status="PASS" endtime="20170919 15:36:49.623"></status>
</kw>
<status starttime="20170919 15:36:49.403" status="PASS" endtime="20170919 15:36:49.623"></status>
</kw>
<status starttime="20170919 15:36:49.403" status="PASS" endtime="20170919 15:36:49.623"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.624">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:36:49.624" status="PASS" endtime="20170919 15:36:49.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.626">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:49.625" status="PASS" endtime="20170919 15:36:49.626"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.627">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:49.627" status="PASS" endtime="20170919 15:36:49.627"></status>
</kw>
<status starttime="20170919 15:36:49.626" status="PASS" endtime="20170919 15:36:49.627"></status>
</kw>
<status starttime="20170919 15:36:49.625" status="PASS" endtime="20170919 15:36:49.627"></status>
</kw>
<status starttime="20170919 15:36:49.624" status="PASS" endtime="20170919 15:36:49.627"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.730">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:36:49.730">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:49.628" status="PASS" endtime="20170919 15:36:49.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.732">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:49.732" status="PASS" endtime="20170919 15:36:49.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.763">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:36:49.762" status="PASS" endtime="20170919 15:36:49.763"></status>
</kw>
<status starttime="20170919 15:36:49.732" status="PASS" endtime="20170919 15:36:49.763"></status>
</kw>
<status starttime="20170919 15:36:49.731" status="PASS" endtime="20170919 15:36:49.763"></status>
</kw>
<status starttime="20170919 15:36:49.731" status="PASS" endtime="20170919 15:36:49.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:36:49.764">Delete All Sessions</msg>
<status starttime="20170919 15:36:49.764" status="PASS" endtime="20170919 15:36:49.764"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:49.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:49.402" status="PASS" endtime="20170919 15:36:49.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:49.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:49.764" status="PASS" endtime="20170919 15:36:49.765"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:49.766">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:36:49.766">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:36:49.766">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:36:49.765" status="PASS" endtime="20170919 15:36:49.766"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:49.766">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:36:49.402" status="PASS" endtime="20170919 15:36:49.766"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:49.766">${power_state} = Off</msg>
<status starttime="20170919 15:36:49.401" status="PASS" endtime="20170919 15:36:49.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:36:49.767">On != Off</msg>
<status starttime="20170919 15:36:49.767" status="FAIL" endtime="20170919 15:36:49.767"></status>
</kw>
<status starttime="20170919 15:36:49.401" status="FAIL" endtime="20170919 15:36:49.767"></status>
</kw>
<status starttime="20170919 15:36:49.400" status="FAIL" endtime="20170919 15:36:49.767"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:59.773">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:36:59.773" status="PASS" endtime="20170919 15:36:59.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:59.774">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:36:59.774" status="PASS" endtime="20170919 15:36:59.774"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:59.774">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:36:59.774" status="PASS" endtime="20170919 15:36:59.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:59.775">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:36:59.775" status="PASS" endtime="20170919 15:36:59.775"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:59.987">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:36:59.776" status="PASS" endtime="20170919 15:36:59.987"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:36:59.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:36:59.988">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:59.775" status="PASS" endtime="20170919 15:36:59.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:59.989">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:59.988" status="PASS" endtime="20170919 15:36:59.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:59.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:36:59.989" status="PASS" endtime="20170919 15:36:59.989"></status>
</kw>
<status starttime="20170919 15:36:59.772" status="PASS" endtime="20170919 15:36:59.990"></status>
</kw>
<status starttime="20170919 15:36:59.771" status="PASS" endtime="20170919 15:36:59.990"></status>
</kw>
<status starttime="20170919 15:36:59.771" status="PASS" endtime="20170919 15:36:59.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:59.990">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:36:59.990" status="PASS" endtime="20170919 15:36:59.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:36:59.993">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:59.992" status="PASS" endtime="20170919 15:36:59.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:36:59.994">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:36:59.994" status="PASS" endtime="20170919 15:36:59.994"></status>
</kw>
<status starttime="20170919 15:36:59.993" status="PASS" endtime="20170919 15:36:59.994"></status>
</kw>
<status starttime="20170919 15:36:59.992" status="PASS" endtime="20170919 15:36:59.994"></status>
</kw>
<status starttime="20170919 15:36:59.991" status="PASS" endtime="20170919 15:36:59.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:00.058">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:37:00.059">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:59.995" status="PASS" endtime="20170919 15:37:00.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:00.061">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:00.060" status="PASS" endtime="20170919 15:37:00.061"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:00.062">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:00.061" status="PASS" endtime="20170919 15:37:00.062"></status>
</kw>
<status starttime="20170919 15:37:00.061" status="PASS" endtime="20170919 15:37:00.062"></status>
</kw>
<status starttime="20170919 15:37:00.060" status="PASS" endtime="20170919 15:37:00.062"></status>
</kw>
<status starttime="20170919 15:37:00.059" status="PASS" endtime="20170919 15:37:00.062"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:37:00.062">Delete All Sessions</msg>
<status starttime="20170919 15:37:00.062" status="PASS" endtime="20170919 15:37:00.063"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:00.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:36:59.770" status="PASS" endtime="20170919 15:37:00.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:00.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:00.063" status="PASS" endtime="20170919 15:37:00.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:00.064">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:37:00.064">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:37:00.064">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:37:00.064" status="PASS" endtime="20170919 15:37:00.064"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:00.064">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:36:59.770" status="PASS" endtime="20170919 15:37:00.064"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:00.065">${power_state} = Off</msg>
<status starttime="20170919 15:36:59.769" status="PASS" endtime="20170919 15:37:00.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:37:00.065">On != Off</msg>
<status starttime="20170919 15:37:00.065" status="FAIL" endtime="20170919 15:37:00.065"></status>
</kw>
<status starttime="20170919 15:36:59.769" status="FAIL" endtime="20170919 15:37:00.066"></status>
</kw>
<status starttime="20170919 15:36:59.768" status="FAIL" endtime="20170919 15:37:00.066"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.071">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:37:10.071" status="PASS" endtime="20170919 15:37:10.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:37:10.072" status="PASS" endtime="20170919 15:37:10.073"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.073">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:37:10.073" status="PASS" endtime="20170919 15:37:10.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.074">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:37:10.073" status="PASS" endtime="20170919 15:37:10.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:37:10.075" status="PASS" endtime="20170919 15:37:10.263"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:10.263">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:37:10.263">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:10.074" status="PASS" endtime="20170919 15:37:10.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.264">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:10.264" status="PASS" endtime="20170919 15:37:10.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:10.265" status="PASS" endtime="20170919 15:37:10.265"></status>
</kw>
<status starttime="20170919 15:37:10.071" status="PASS" endtime="20170919 15:37:10.265"></status>
</kw>
<status starttime="20170919 15:37:10.070" status="PASS" endtime="20170919 15:37:10.265"></status>
</kw>
<status starttime="20170919 15:37:10.069" status="PASS" endtime="20170919 15:37:10.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.266">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:37:10.266" status="PASS" endtime="20170919 15:37:10.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.268">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:10.267" status="PASS" endtime="20170919 15:37:10.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.269">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:10.269" status="PASS" endtime="20170919 15:37:10.269"></status>
</kw>
<status starttime="20170919 15:37:10.268" status="PASS" endtime="20170919 15:37:10.269"></status>
</kw>
<status starttime="20170919 15:37:10.267" status="PASS" endtime="20170919 15:37:10.269"></status>
</kw>
<status starttime="20170919 15:37:10.266" status="PASS" endtime="20170919 15:37:10.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.335">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:37:10.335">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:10.270" status="PASS" endtime="20170919 15:37:10.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.337">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:10.337" status="PASS" endtime="20170919 15:37:10.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.338">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:10.338" status="PASS" endtime="20170919 15:37:10.338"></status>
</kw>
<status starttime="20170919 15:37:10.337" status="PASS" endtime="20170919 15:37:10.338"></status>
</kw>
<status starttime="20170919 15:37:10.336" status="PASS" endtime="20170919 15:37:10.338"></status>
</kw>
<status starttime="20170919 15:37:10.335" status="PASS" endtime="20170919 15:37:10.338"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:37:10.339">Delete All Sessions</msg>
<status starttime="20170919 15:37:10.339" status="PASS" endtime="20170919 15:37:10.339"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:10.339">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:10.068" status="PASS" endtime="20170919 15:37:10.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:10.340">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:10.339" status="PASS" endtime="20170919 15:37:10.340"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:10.340">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:37:10.341">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:37:10.341">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:37:10.340" status="PASS" endtime="20170919 15:37:10.341"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:10.341">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:37:10.068" status="PASS" endtime="20170919 15:37:10.342"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:10.342">${power_state} = Off</msg>
<status starttime="20170919 15:37:10.067" status="PASS" endtime="20170919 15:37:10.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:37:10.343">On != Off</msg>
<status starttime="20170919 15:37:10.342" status="FAIL" endtime="20170919 15:37:10.343"></status>
</kw>
<status starttime="20170919 15:37:10.067" status="FAIL" endtime="20170919 15:37:10.343"></status>
</kw>
<status starttime="20170919 15:37:10.066" status="FAIL" endtime="20170919 15:37:10.343"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.348">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:37:20.348" status="PASS" endtime="20170919 15:37:20.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:37:20.349" status="PASS" endtime="20170919 15:37:20.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.350">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:37:20.349" status="PASS" endtime="20170919 15:37:20.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:37:20.350" status="PASS" endtime="20170919 15:37:20.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:37:20.351" status="PASS" endtime="20170919 15:37:20.552"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:20.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:37:20.552">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:20.351" status="PASS" endtime="20170919 15:37:20.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:20.553" status="PASS" endtime="20170919 15:37:20.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:20.553" status="PASS" endtime="20170919 15:37:20.554"></status>
</kw>
<status starttime="20170919 15:37:20.347" status="PASS" endtime="20170919 15:37:20.554"></status>
</kw>
<status starttime="20170919 15:37:20.347" status="PASS" endtime="20170919 15:37:20.554"></status>
</kw>
<status starttime="20170919 15:37:20.346" status="PASS" endtime="20170919 15:37:20.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.555">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:37:20.554" status="PASS" endtime="20170919 15:37:20.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.557">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:20.556" status="PASS" endtime="20170919 15:37:20.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.558">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:20.558" status="PASS" endtime="20170919 15:37:20.558"></status>
</kw>
<status starttime="20170919 15:37:20.557" status="PASS" endtime="20170919 15:37:20.558"></status>
</kw>
<status starttime="20170919 15:37:20.555" status="PASS" endtime="20170919 15:37:20.558"></status>
</kw>
<status starttime="20170919 15:37:20.555" status="PASS" endtime="20170919 15:37:20.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.620">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:37:20.620">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:20.558" status="PASS" endtime="20170919 15:37:20.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.622">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:20.622" status="PASS" endtime="20170919 15:37:20.622"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.623">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:20.623" status="PASS" endtime="20170919 15:37:20.623"></status>
</kw>
<status starttime="20170919 15:37:20.622" status="PASS" endtime="20170919 15:37:20.623"></status>
</kw>
<status starttime="20170919 15:37:20.621" status="PASS" endtime="20170919 15:37:20.624"></status>
</kw>
<status starttime="20170919 15:37:20.621" status="PASS" endtime="20170919 15:37:20.624"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:37:20.624">Delete All Sessions</msg>
<status starttime="20170919 15:37:20.624" status="PASS" endtime="20170919 15:37:20.624"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:20.624">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:20.346" status="PASS" endtime="20170919 15:37:20.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:20.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:20.625" status="PASS" endtime="20170919 15:37:20.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:20.625">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:37:20.626">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:37:20.626">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:37:20.625" status="PASS" endtime="20170919 15:37:20.626"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:20.626">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:37:20.345" status="PASS" endtime="20170919 15:37:20.626"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:20.626">${power_state} = Off</msg>
<status starttime="20170919 15:37:20.345" status="PASS" endtime="20170919 15:37:20.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:37:20.627">On != Off</msg>
<status starttime="20170919 15:37:20.627" status="FAIL" endtime="20170919 15:37:20.627"></status>
</kw>
<status starttime="20170919 15:37:20.344" status="FAIL" endtime="20170919 15:37:20.627"></status>
</kw>
<status starttime="20170919 15:37:20.344" status="FAIL" endtime="20170919 15:37:20.627"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.633">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:37:30.633" status="PASS" endtime="20170919 15:37:30.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.634">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:37:30.634" status="PASS" endtime="20170919 15:37:30.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.635">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:37:30.635" status="PASS" endtime="20170919 15:37:30.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:37:30.635" status="PASS" endtime="20170919 15:37:30.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:37:30.637" status="PASS" endtime="20170919 15:37:30.837"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:30.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:37:30.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:30.636" status="PASS" endtime="20170919 15:37:30.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.839">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:30.838" status="PASS" endtime="20170919 15:37:30.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:30.839" status="PASS" endtime="20170919 15:37:30.839"></status>
</kw>
<status starttime="20170919 15:37:30.632" status="PASS" endtime="20170919 15:37:30.839"></status>
</kw>
<status starttime="20170919 15:37:30.632" status="PASS" endtime="20170919 15:37:30.840"></status>
</kw>
<status starttime="20170919 15:37:30.631" status="PASS" endtime="20170919 15:37:30.840"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.840">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:37:30.840" status="PASS" endtime="20170919 15:37:30.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.842">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:30.842" status="PASS" endtime="20170919 15:37:30.842"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.843">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:30.843" status="PASS" endtime="20170919 15:37:30.843"></status>
</kw>
<status starttime="20170919 15:37:30.843" status="PASS" endtime="20170919 15:37:30.844"></status>
</kw>
<status starttime="20170919 15:37:30.841" status="PASS" endtime="20170919 15:37:30.844"></status>
</kw>
<status starttime="20170919 15:37:30.841" status="PASS" endtime="20170919 15:37:30.844"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.908">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:37:30.908">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:30.844" status="PASS" endtime="20170919 15:37:30.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.910">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:30.909" status="PASS" endtime="20170919 15:37:30.910"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.911">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:30.911" status="PASS" endtime="20170919 15:37:30.911"></status>
</kw>
<status starttime="20170919 15:37:30.910" status="PASS" endtime="20170919 15:37:30.911"></status>
</kw>
<status starttime="20170919 15:37:30.909" status="PASS" endtime="20170919 15:37:30.911"></status>
</kw>
<status starttime="20170919 15:37:30.908" status="PASS" endtime="20170919 15:37:30.911"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:37:30.912">Delete All Sessions</msg>
<status starttime="20170919 15:37:30.912" status="PASS" endtime="20170919 15:37:30.912"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:30.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:30.630" status="PASS" endtime="20170919 15:37:30.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:30.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:30.913" status="PASS" endtime="20170919 15:37:30.913"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:30.914">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:37:30.914">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:37:30.914">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:37:30.913" status="PASS" endtime="20170919 15:37:30.914"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:30.914">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:37:30.630" status="PASS" endtime="20170919 15:37:30.914"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:30.914">${power_state} = Off</msg>
<status starttime="20170919 15:37:30.629" status="PASS" endtime="20170919 15:37:30.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:37:30.915">On != Off</msg>
<status starttime="20170919 15:37:30.915" status="FAIL" endtime="20170919 15:37:30.915"></status>
</kw>
<status starttime="20170919 15:37:30.629" status="FAIL" endtime="20170919 15:37:30.915"></status>
</kw>
<status starttime="20170919 15:37:30.628" status="FAIL" endtime="20170919 15:37:30.915"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:40.921">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:37:40.920" status="PASS" endtime="20170919 15:37:40.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:40.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:37:40.921" status="PASS" endtime="20170919 15:37:40.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:40.922">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:37:40.922" status="PASS" endtime="20170919 15:37:40.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:40.923">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:37:40.923" status="PASS" endtime="20170919 15:37:40.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:41.104">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:37:40.924" status="PASS" endtime="20170919 15:37:41.104"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:41.104">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:37:41.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:40.923" status="PASS" endtime="20170919 15:37:41.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:41.105">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:41.105" status="PASS" endtime="20170919 15:37:41.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:41.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:41.105" status="PASS" endtime="20170919 15:37:41.106"></status>
</kw>
<status starttime="20170919 15:37:40.920" status="PASS" endtime="20170919 15:37:41.106"></status>
</kw>
<status starttime="20170919 15:37:40.919" status="PASS" endtime="20170919 15:37:41.106"></status>
</kw>
<status starttime="20170919 15:37:40.919" status="PASS" endtime="20170919 15:37:41.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:41.107">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:37:41.106" status="PASS" endtime="20170919 15:37:41.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:41.109">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:41.108" status="PASS" endtime="20170919 15:37:41.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:41.110">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:41.110" status="PASS" endtime="20170919 15:37:41.110"></status>
</kw>
<status starttime="20170919 15:37:41.110" status="PASS" endtime="20170919 15:37:41.111"></status>
</kw>
<status starttime="20170919 15:37:41.108" status="PASS" endtime="20170919 15:37:41.111"></status>
</kw>
<status starttime="20170919 15:37:41.107" status="PASS" endtime="20170919 15:37:41.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:41.182">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:37:41.182">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:41.111" status="PASS" endtime="20170919 15:37:41.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:41.184">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:41.183" status="PASS" endtime="20170919 15:37:41.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:41.185">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:41.185" status="PASS" endtime="20170919 15:37:41.185"></status>
</kw>
<status starttime="20170919 15:37:41.184" status="PASS" endtime="20170919 15:37:41.185"></status>
</kw>
<status starttime="20170919 15:37:41.183" status="PASS" endtime="20170919 15:37:41.185"></status>
</kw>
<status starttime="20170919 15:37:41.182" status="PASS" endtime="20170919 15:37:41.185"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:37:41.186">Delete All Sessions</msg>
<status starttime="20170919 15:37:41.186" status="PASS" endtime="20170919 15:37:41.186"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:41.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:40.918" status="PASS" endtime="20170919 15:37:41.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:41.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:41.186" status="PASS" endtime="20170919 15:37:41.187"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:41.187">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:37:41.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:37:41.187">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:37:41.187" status="PASS" endtime="20170919 15:37:41.187"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:41.188">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:37:40.918" status="PASS" endtime="20170919 15:37:41.188"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:41.188">${power_state} = Off</msg>
<status starttime="20170919 15:37:40.917" status="PASS" endtime="20170919 15:37:41.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:37:41.189">On != Off</msg>
<status starttime="20170919 15:37:41.188" status="FAIL" endtime="20170919 15:37:41.189"></status>
</kw>
<status starttime="20170919 15:37:40.917" status="FAIL" endtime="20170919 15:37:41.189"></status>
</kw>
<status starttime="20170919 15:37:40.916" status="FAIL" endtime="20170919 15:37:41.189"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.198">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:37:51.197" status="PASS" endtime="20170919 15:37:51.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:37:51.198" status="PASS" endtime="20170919 15:37:51.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.199">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:37:51.199" status="PASS" endtime="20170919 15:37:51.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:37:51.200" status="PASS" endtime="20170919 15:37:51.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:37:51.201" status="PASS" endtime="20170919 15:37:51.445"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:51.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:37:51.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:51.200" status="PASS" endtime="20170919 15:37:51.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:51.446" status="PASS" endtime="20170919 15:37:51.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:51.446" status="PASS" endtime="20170919 15:37:51.447"></status>
</kw>
<status starttime="20170919 15:37:51.196" status="PASS" endtime="20170919 15:37:51.447"></status>
</kw>
<status starttime="20170919 15:37:51.195" status="PASS" endtime="20170919 15:37:51.447"></status>
</kw>
<status starttime="20170919 15:37:51.194" status="PASS" endtime="20170919 15:37:51.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.448">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:37:51.447" status="PASS" endtime="20170919 15:37:51.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.450">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:51.449" status="PASS" endtime="20170919 15:37:51.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.451">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:37:51.451" status="PASS" endtime="20170919 15:37:51.451"></status>
</kw>
<status starttime="20170919 15:37:51.450" status="PASS" endtime="20170919 15:37:51.451"></status>
</kw>
<status starttime="20170919 15:37:51.449" status="PASS" endtime="20170919 15:37:51.451"></status>
</kw>
<status starttime="20170919 15:37:51.448" status="PASS" endtime="20170919 15:37:51.451"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.523">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:37:51.523">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:51.451" status="PASS" endtime="20170919 15:37:51.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.525">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:51.525" status="PASS" endtime="20170919 15:37:51.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.527">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:37:51.526" status="PASS" endtime="20170919 15:37:51.527"></status>
</kw>
<status starttime="20170919 15:37:51.525" status="PASS" endtime="20170919 15:37:51.527"></status>
</kw>
<status starttime="20170919 15:37:51.524" status="PASS" endtime="20170919 15:37:51.527"></status>
</kw>
<status starttime="20170919 15:37:51.524" status="PASS" endtime="20170919 15:37:51.527"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:37:51.527">Delete All Sessions</msg>
<status starttime="20170919 15:37:51.527" status="PASS" endtime="20170919 15:37:51.528"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:51.528">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:37:51.193" status="PASS" endtime="20170919 15:37:51.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:37:51.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:37:51.528" status="PASS" endtime="20170919 15:37:51.528"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:37:51.529">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:37:51.529">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:37:51.529">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:37:51.529" status="PASS" endtime="20170919 15:37:51.529"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:51.529">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:37:51.192" status="PASS" endtime="20170919 15:37:51.529"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:37:51.531">${power_state} = Off</msg>
<status starttime="20170919 15:37:51.192" status="PASS" endtime="20170919 15:37:51.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:37:51.531">On != Off</msg>
<status starttime="20170919 15:37:51.531" status="FAIL" endtime="20170919 15:37:51.532"></status>
</kw>
<status starttime="20170919 15:37:51.192" status="FAIL" endtime="20170919 15:37:51.532"></status>
</kw>
<status starttime="20170919 15:37:51.190" status="FAIL" endtime="20170919 15:37:51.532"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.537">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:38:01.537" status="PASS" endtime="20170919 15:38:01.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.538">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:38:01.538" status="PASS" endtime="20170919 15:38:01.538"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.539">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:38:01.538" status="PASS" endtime="20170919 15:38:01.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.539">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:38:01.539" status="PASS" endtime="20170919 15:38:01.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:38:01.540" status="PASS" endtime="20170919 15:38:01.744"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:01.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:38:01.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:01.540" status="PASS" endtime="20170919 15:38:01.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.745">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:01.745" status="PASS" endtime="20170919 15:38:01.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:01.746" status="PASS" endtime="20170919 15:38:01.746"></status>
</kw>
<status starttime="20170919 15:38:01.536" status="PASS" endtime="20170919 15:38:01.746"></status>
</kw>
<status starttime="20170919 15:38:01.536" status="PASS" endtime="20170919 15:38:01.746"></status>
</kw>
<status starttime="20170919 15:38:01.535" status="PASS" endtime="20170919 15:38:01.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.747">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:38:01.747" status="PASS" endtime="20170919 15:38:01.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.749">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:01.749" status="PASS" endtime="20170919 15:38:01.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.750">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:01.750" status="PASS" endtime="20170919 15:38:01.750"></status>
</kw>
<status starttime="20170919 15:38:01.749" status="PASS" endtime="20170919 15:38:01.750"></status>
</kw>
<status starttime="20170919 15:38:01.748" status="PASS" endtime="20170919 15:38:01.751"></status>
</kw>
<status starttime="20170919 15:38:01.747" status="PASS" endtime="20170919 15:38:01.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.852">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:38:01.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:01.751" status="PASS" endtime="20170919 15:38:01.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.854">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:01.854" status="PASS" endtime="20170919 15:38:01.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.855">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:01.855" status="PASS" endtime="20170919 15:38:01.855"></status>
</kw>
<status starttime="20170919 15:38:01.854" status="PASS" endtime="20170919 15:38:01.855"></status>
</kw>
<status starttime="20170919 15:38:01.853" status="PASS" endtime="20170919 15:38:01.855"></status>
</kw>
<status starttime="20170919 15:38:01.852" status="PASS" endtime="20170919 15:38:01.855"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:38:01.856">Delete All Sessions</msg>
<status starttime="20170919 15:38:01.856" status="PASS" endtime="20170919 15:38:01.856"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:01.856">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:01.534" status="PASS" endtime="20170919 15:38:01.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:01.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:01.856" status="PASS" endtime="20170919 15:38:01.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:01.857">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:38:01.857">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:38:01.857">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:38:01.857" status="PASS" endtime="20170919 15:38:01.857"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:01.858">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:38:01.534" status="PASS" endtime="20170919 15:38:01.858"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:01.858">${power_state} = Off</msg>
<status starttime="20170919 15:38:01.533" status="PASS" endtime="20170919 15:38:01.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:38:01.859">On != Off</msg>
<status starttime="20170919 15:38:01.858" status="FAIL" endtime="20170919 15:38:01.859"></status>
</kw>
<status starttime="20170919 15:38:01.533" status="FAIL" endtime="20170919 15:38:01.859"></status>
</kw>
<status starttime="20170919 15:38:01.532" status="FAIL" endtime="20170919 15:38:01.859"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:11.865">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:38:11.864" status="PASS" endtime="20170919 15:38:11.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:11.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:38:11.865" status="PASS" endtime="20170919 15:38:11.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:11.866">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:38:11.866" status="PASS" endtime="20170919 15:38:11.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:11.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:38:11.867" status="PASS" endtime="20170919 15:38:11.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:12.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:38:11.868" status="PASS" endtime="20170919 15:38:12.063"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:12.064">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:38:12.064">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:11.867" status="PASS" endtime="20170919 15:38:12.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:12.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:12.064" status="PASS" endtime="20170919 15:38:12.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:12.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:12.065" status="PASS" endtime="20170919 15:38:12.065"></status>
</kw>
<status starttime="20170919 15:38:11.863" status="PASS" endtime="20170919 15:38:12.065"></status>
</kw>
<status starttime="20170919 15:38:11.863" status="PASS" endtime="20170919 15:38:12.065"></status>
</kw>
<status starttime="20170919 15:38:11.862" status="PASS" endtime="20170919 15:38:12.065"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:12.066">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:38:12.066" status="PASS" endtime="20170919 15:38:12.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:12.068">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:12.067" status="PASS" endtime="20170919 15:38:12.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:12.069">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:12.069" status="PASS" endtime="20170919 15:38:12.069"></status>
</kw>
<status starttime="20170919 15:38:12.068" status="PASS" endtime="20170919 15:38:12.069"></status>
</kw>
<status starttime="20170919 15:38:12.067" status="PASS" endtime="20170919 15:38:12.069"></status>
</kw>
<status starttime="20170919 15:38:12.066" status="PASS" endtime="20170919 15:38:12.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:12.131">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:38:12.132">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:12.070" status="PASS" endtime="20170919 15:38:12.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:12.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:12.133" status="PASS" endtime="20170919 15:38:12.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:12.139">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:12.139" status="PASS" endtime="20170919 15:38:12.139"></status>
</kw>
<status starttime="20170919 15:38:12.134" status="PASS" endtime="20170919 15:38:12.139"></status>
</kw>
<status starttime="20170919 15:38:12.133" status="PASS" endtime="20170919 15:38:12.139"></status>
</kw>
<status starttime="20170919 15:38:12.132" status="PASS" endtime="20170919 15:38:12.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:38:12.140">Delete All Sessions</msg>
<status starttime="20170919 15:38:12.140" status="PASS" endtime="20170919 15:38:12.140"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:12.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:11.862" status="PASS" endtime="20170919 15:38:12.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:12.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:12.140" status="PASS" endtime="20170919 15:38:12.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:12.141">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:38:12.142">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:38:12.142">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:38:12.141" status="PASS" endtime="20170919 15:38:12.142"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:12.142">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:38:11.861" status="PASS" endtime="20170919 15:38:12.142"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:12.142">${power_state} = Off</msg>
<status starttime="20170919 15:38:11.861" status="PASS" endtime="20170919 15:38:12.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:38:12.143">On != Off</msg>
<status starttime="20170919 15:38:12.143" status="FAIL" endtime="20170919 15:38:12.143"></status>
</kw>
<status starttime="20170919 15:38:11.860" status="FAIL" endtime="20170919 15:38:12.143"></status>
</kw>
<status starttime="20170919 15:38:11.860" status="FAIL" endtime="20170919 15:38:12.143"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.150">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:38:22.150" status="PASS" endtime="20170919 15:38:22.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.152">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:38:22.151" status="PASS" endtime="20170919 15:38:22.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.152">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:38:22.152" status="PASS" endtime="20170919 15:38:22.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.153">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:38:22.153" status="PASS" endtime="20170919 15:38:22.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.363">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:38:22.154" status="PASS" endtime="20170919 15:38:22.364"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:22.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:38:22.364">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:22.153" status="PASS" endtime="20170919 15:38:22.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.364">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:22.364" status="PASS" endtime="20170919 15:38:22.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:22.365" status="PASS" endtime="20170919 15:38:22.365"></status>
</kw>
<status starttime="20170919 15:38:22.149" status="PASS" endtime="20170919 15:38:22.365"></status>
</kw>
<status starttime="20170919 15:38:22.149" status="PASS" endtime="20170919 15:38:22.365"></status>
</kw>
<status starttime="20170919 15:38:22.148" status="PASS" endtime="20170919 15:38:22.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.366">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:38:22.366" status="PASS" endtime="20170919 15:38:22.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.369">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:22.368" status="PASS" endtime="20170919 15:38:22.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.370">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:22.370" status="PASS" endtime="20170919 15:38:22.370"></status>
</kw>
<status starttime="20170919 15:38:22.369" status="PASS" endtime="20170919 15:38:22.370"></status>
</kw>
<status starttime="20170919 15:38:22.367" status="PASS" endtime="20170919 15:38:22.371"></status>
</kw>
<status starttime="20170919 15:38:22.366" status="PASS" endtime="20170919 15:38:22.371"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.434">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:38:22.434">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:22.371" status="PASS" endtime="20170919 15:38:22.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.436">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:22.435" status="PASS" endtime="20170919 15:38:22.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.437">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:22.436" status="PASS" endtime="20170919 15:38:22.437"></status>
</kw>
<status starttime="20170919 15:38:22.436" status="PASS" endtime="20170919 15:38:22.437"></status>
</kw>
<status starttime="20170919 15:38:22.435" status="PASS" endtime="20170919 15:38:22.437"></status>
</kw>
<status starttime="20170919 15:38:22.434" status="PASS" endtime="20170919 15:38:22.437"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:38:22.437">Delete All Sessions</msg>
<status starttime="20170919 15:38:22.437" status="PASS" endtime="20170919 15:38:22.437"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:22.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:22.147" status="PASS" endtime="20170919 15:38:22.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:22.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:22.438" status="PASS" endtime="20170919 15:38:22.439"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:22.439">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:38:22.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:38:22.439">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:38:22.439" status="PASS" endtime="20170919 15:38:22.439"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:22.439">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:38:22.146" status="PASS" endtime="20170919 15:38:22.440"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:22.440">${power_state} = Off</msg>
<status starttime="20170919 15:38:22.146" status="PASS" endtime="20170919 15:38:22.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:38:22.440">On != Off</msg>
<status starttime="20170919 15:38:22.440" status="FAIL" endtime="20170919 15:38:22.441"></status>
</kw>
<status starttime="20170919 15:38:22.146" status="FAIL" endtime="20170919 15:38:22.441"></status>
</kw>
<status starttime="20170919 15:38:22.145" status="FAIL" endtime="20170919 15:38:22.441"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.450">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:38:32.450" status="PASS" endtime="20170919 15:38:32.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.451">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:38:32.451" status="PASS" endtime="20170919 15:38:32.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.452">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:38:32.451" status="PASS" endtime="20170919 15:38:32.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.452">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:38:32.452" status="PASS" endtime="20170919 15:38:32.452"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:38:32.453" status="PASS" endtime="20170919 15:38:32.651"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:32.651">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:38:32.651">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:32.453" status="PASS" endtime="20170919 15:38:32.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.652">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:32.652" status="PASS" endtime="20170919 15:38:32.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:32.652" status="PASS" endtime="20170919 15:38:32.653"></status>
</kw>
<status starttime="20170919 15:38:32.449" status="PASS" endtime="20170919 15:38:32.653"></status>
</kw>
<status starttime="20170919 15:38:32.448" status="PASS" endtime="20170919 15:38:32.653"></status>
</kw>
<status starttime="20170919 15:38:32.447" status="PASS" endtime="20170919 15:38:32.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.654">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:38:32.654" status="PASS" endtime="20170919 15:38:32.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.656">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:32.656" status="PASS" endtime="20170919 15:38:32.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.657">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:32.657" status="PASS" endtime="20170919 15:38:32.658"></status>
</kw>
<status starttime="20170919 15:38:32.657" status="PASS" endtime="20170919 15:38:32.658"></status>
</kw>
<status starttime="20170919 15:38:32.655" status="PASS" endtime="20170919 15:38:32.658"></status>
</kw>
<status starttime="20170919 15:38:32.654" status="PASS" endtime="20170919 15:38:32.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.720">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:38:32.720">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:32.658" status="PASS" endtime="20170919 15:38:32.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.722">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:32.721" status="PASS" endtime="20170919 15:38:32.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.723">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:32.722" status="PASS" endtime="20170919 15:38:32.723"></status>
</kw>
<status starttime="20170919 15:38:32.722" status="PASS" endtime="20170919 15:38:32.723"></status>
</kw>
<status starttime="20170919 15:38:32.721" status="PASS" endtime="20170919 15:38:32.723"></status>
</kw>
<status starttime="20170919 15:38:32.720" status="PASS" endtime="20170919 15:38:32.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:38:32.724">Delete All Sessions</msg>
<status starttime="20170919 15:38:32.724" status="PASS" endtime="20170919 15:38:32.724"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:32.724">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:32.447" status="PASS" endtime="20170919 15:38:32.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:32.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:32.725" status="PASS" endtime="20170919 15:38:32.725"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:32.725">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:38:32.725">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:38:32.726">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:38:32.725" status="PASS" endtime="20170919 15:38:32.726"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:32.726">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:38:32.446" status="PASS" endtime="20170919 15:38:32.726"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:32.726">${power_state} = Off</msg>
<status starttime="20170919 15:38:32.444" status="PASS" endtime="20170919 15:38:32.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:38:32.727">On != Off</msg>
<status starttime="20170919 15:38:32.727" status="FAIL" endtime="20170919 15:38:32.727"></status>
</kw>
<status starttime="20170919 15:38:32.444" status="FAIL" endtime="20170919 15:38:32.727"></status>
</kw>
<status starttime="20170919 15:38:32.441" status="FAIL" endtime="20170919 15:38:32.727"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:42.734">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:38:42.734" status="PASS" endtime="20170919 15:38:42.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:42.735">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:38:42.735" status="PASS" endtime="20170919 15:38:42.735"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:42.736">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:38:42.736" status="PASS" endtime="20170919 15:38:42.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:42.737">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:38:42.736" status="PASS" endtime="20170919 15:38:42.737"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:42.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:38:42.737" status="PASS" endtime="20170919 15:38:42.963"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:42.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:38:42.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:42.737" status="PASS" endtime="20170919 15:38:42.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:42.964">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:42.963" status="PASS" endtime="20170919 15:38:42.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:42.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:42.964" status="PASS" endtime="20170919 15:38:42.964"></status>
</kw>
<status starttime="20170919 15:38:42.733" status="PASS" endtime="20170919 15:38:42.965"></status>
</kw>
<status starttime="20170919 15:38:42.733" status="PASS" endtime="20170919 15:38:42.965"></status>
</kw>
<status starttime="20170919 15:38:42.732" status="PASS" endtime="20170919 15:38:42.965"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:42.965">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:38:42.965" status="PASS" endtime="20170919 15:38:42.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:42.967">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:42.967" status="PASS" endtime="20170919 15:38:42.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:42.968">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:42.968" status="PASS" endtime="20170919 15:38:42.968"></status>
</kw>
<status starttime="20170919 15:38:42.968" status="PASS" endtime="20170919 15:38:42.969"></status>
</kw>
<status starttime="20170919 15:38:42.966" status="PASS" endtime="20170919 15:38:42.969"></status>
</kw>
<status starttime="20170919 15:38:42.966" status="PASS" endtime="20170919 15:38:42.969"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:43.068">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:38:43.068">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:42.969" status="PASS" endtime="20170919 15:38:43.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:43.070">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:43.070" status="PASS" endtime="20170919 15:38:43.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:43.071">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:43.071" status="PASS" endtime="20170919 15:38:43.072"></status>
</kw>
<status starttime="20170919 15:38:43.071" status="PASS" endtime="20170919 15:38:43.072"></status>
</kw>
<status starttime="20170919 15:38:43.069" status="PASS" endtime="20170919 15:38:43.072"></status>
</kw>
<status starttime="20170919 15:38:43.069" status="PASS" endtime="20170919 15:38:43.072"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:38:43.072">Delete All Sessions</msg>
<status starttime="20170919 15:38:43.072" status="PASS" endtime="20170919 15:38:43.072"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:43.073">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:42.731" status="PASS" endtime="20170919 15:38:43.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:43.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:43.073" status="PASS" endtime="20170919 15:38:43.073"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:43.074">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:38:43.074">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:38:43.074">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:38:43.074" status="PASS" endtime="20170919 15:38:43.074"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:43.074">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:38:42.730" status="PASS" endtime="20170919 15:38:43.074"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:43.075">${power_state} = Off</msg>
<status starttime="20170919 15:38:42.729" status="PASS" endtime="20170919 15:38:43.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:38:43.075">On != Off</msg>
<status starttime="20170919 15:38:43.075" status="FAIL" endtime="20170919 15:38:43.075"></status>
</kw>
<status starttime="20170919 15:38:42.729" status="FAIL" endtime="20170919 15:38:43.076"></status>
</kw>
<status starttime="20170919 15:38:42.728" status="FAIL" endtime="20170919 15:38:43.076"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.081">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:38:53.081" status="PASS" endtime="20170919 15:38:53.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:38:53.082" status="PASS" endtime="20170919 15:38:53.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.083">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:38:53.083" status="PASS" endtime="20170919 15:38:53.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.084">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:38:53.083" status="PASS" endtime="20170919 15:38:53.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.288">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:38:53.084" status="PASS" endtime="20170919 15:38:53.288"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:53.288">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:38:53.288">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:53.084" status="PASS" endtime="20170919 15:38:53.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.289">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:53.288" status="PASS" endtime="20170919 15:38:53.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:53.289" status="PASS" endtime="20170919 15:38:53.289"></status>
</kw>
<status starttime="20170919 15:38:53.080" status="PASS" endtime="20170919 15:38:53.290"></status>
</kw>
<status starttime="20170919 15:38:53.080" status="PASS" endtime="20170919 15:38:53.290"></status>
</kw>
<status starttime="20170919 15:38:53.079" status="PASS" endtime="20170919 15:38:53.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.290">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:38:53.290" status="PASS" endtime="20170919 15:38:53.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.292">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:53.292" status="PASS" endtime="20170919 15:38:53.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.293">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:38:53.293" status="PASS" endtime="20170919 15:38:53.293"></status>
</kw>
<status starttime="20170919 15:38:53.293" status="PASS" endtime="20170919 15:38:53.294"></status>
</kw>
<status starttime="20170919 15:38:53.291" status="PASS" endtime="20170919 15:38:53.294"></status>
</kw>
<status starttime="20170919 15:38:53.291" status="PASS" endtime="20170919 15:38:53.294"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.363">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:38:53.363">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:53.294" status="PASS" endtime="20170919 15:38:53.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.365">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:53.364" status="PASS" endtime="20170919 15:38:53.365"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:38:53.366" status="PASS" endtime="20170919 15:38:53.366"></status>
</kw>
<status starttime="20170919 15:38:53.365" status="PASS" endtime="20170919 15:38:53.366"></status>
</kw>
<status starttime="20170919 15:38:53.364" status="PASS" endtime="20170919 15:38:53.367"></status>
</kw>
<status starttime="20170919 15:38:53.363" status="PASS" endtime="20170919 15:38:53.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:38:53.367">Delete All Sessions</msg>
<status starttime="20170919 15:38:53.367" status="PASS" endtime="20170919 15:38:53.367"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:53.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:38:53.078" status="PASS" endtime="20170919 15:38:53.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:38:53.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:38:53.368" status="PASS" endtime="20170919 15:38:53.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:38:53.369">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:38:53.369">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:38:53.369">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:38:53.368" status="PASS" endtime="20170919 15:38:53.369"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:53.369">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:38:53.078" status="PASS" endtime="20170919 15:38:53.369"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:38:53.369">${power_state} = Off</msg>
<status starttime="20170919 15:38:53.077" status="PASS" endtime="20170919 15:38:53.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:38:53.370">On != Off</msg>
<status starttime="20170919 15:38:53.370" status="FAIL" endtime="20170919 15:38:53.370"></status>
</kw>
<status starttime="20170919 15:38:53.077" status="FAIL" endtime="20170919 15:38:53.370"></status>
</kw>
<status starttime="20170919 15:38:53.076" status="FAIL" endtime="20170919 15:38:53.370"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.376">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:39:03.375" status="PASS" endtime="20170919 15:39:03.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:39:03.376" status="PASS" endtime="20170919 15:39:03.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.378">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:39:03.377" status="PASS" endtime="20170919 15:39:03.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:39:03.378" status="PASS" endtime="20170919 15:39:03.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.599">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:39:03.379" status="PASS" endtime="20170919 15:39:03.600"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:03.600">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:39:03.600">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:03.378" status="PASS" endtime="20170919 15:39:03.600"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.600">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:03.600" status="PASS" endtime="20170919 15:39:03.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:03.601" status="PASS" endtime="20170919 15:39:03.601"></status>
</kw>
<status starttime="20170919 15:39:03.375" status="PASS" endtime="20170919 15:39:03.601"></status>
</kw>
<status starttime="20170919 15:39:03.374" status="PASS" endtime="20170919 15:39:03.601"></status>
</kw>
<status starttime="20170919 15:39:03.374" status="PASS" endtime="20170919 15:39:03.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.602">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:39:03.602" status="PASS" endtime="20170919 15:39:03.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.604">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:03.604" status="PASS" endtime="20170919 15:39:03.604"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.605">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:03.605" status="PASS" endtime="20170919 15:39:03.605"></status>
</kw>
<status starttime="20170919 15:39:03.604" status="PASS" endtime="20170919 15:39:03.605"></status>
</kw>
<status starttime="20170919 15:39:03.603" status="PASS" endtime="20170919 15:39:03.606"></status>
</kw>
<status starttime="20170919 15:39:03.602" status="PASS" endtime="20170919 15:39:03.606"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.683">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:39:03.684">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:03.606" status="PASS" endtime="20170919 15:39:03.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.686">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:03.685" status="PASS" endtime="20170919 15:39:03.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.686">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:03.686" status="PASS" endtime="20170919 15:39:03.687"></status>
</kw>
<status starttime="20170919 15:39:03.686" status="PASS" endtime="20170919 15:39:03.687"></status>
</kw>
<status starttime="20170919 15:39:03.685" status="PASS" endtime="20170919 15:39:03.687"></status>
</kw>
<status starttime="20170919 15:39:03.684" status="PASS" endtime="20170919 15:39:03.687"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:39:03.687">Delete All Sessions</msg>
<status starttime="20170919 15:39:03.687" status="PASS" endtime="20170919 15:39:03.687"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:03.688">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:03.373" status="PASS" endtime="20170919 15:39:03.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:03.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:03.688" status="PASS" endtime="20170919 15:39:03.688"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:03.689">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:39:03.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:39:03.689">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:39:03.689" status="PASS" endtime="20170919 15:39:03.689"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:03.689">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:39:03.372" status="PASS" endtime="20170919 15:39:03.689"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:03.690">${power_state} = Off</msg>
<status starttime="20170919 15:39:03.372" status="PASS" endtime="20170919 15:39:03.690"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:39:03.690">On != Off</msg>
<status starttime="20170919 15:39:03.690" status="FAIL" endtime="20170919 15:39:03.690"></status>
</kw>
<status starttime="20170919 15:39:03.372" status="FAIL" endtime="20170919 15:39:03.691"></status>
</kw>
<status starttime="20170919 15:39:03.371" status="FAIL" endtime="20170919 15:39:03.691"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.696">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:39:13.696" status="PASS" endtime="20170919 15:39:13.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:39:13.697" status="PASS" endtime="20170919 15:39:13.697"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.698">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:39:13.698" status="PASS" endtime="20170919 15:39:13.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.699">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:39:13.698" status="PASS" endtime="20170919 15:39:13.699"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.921">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:39:13.699" status="PASS" endtime="20170919 15:39:13.921"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:13.921">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:39:13.921">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:13.699" status="PASS" endtime="20170919 15:39:13.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.922">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:13.921" status="PASS" endtime="20170919 15:39:13.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:13.922" status="PASS" endtime="20170919 15:39:13.922"></status>
</kw>
<status starttime="20170919 15:39:13.695" status="PASS" endtime="20170919 15:39:13.923"></status>
</kw>
<status starttime="20170919 15:39:13.694" status="PASS" endtime="20170919 15:39:13.923"></status>
</kw>
<status starttime="20170919 15:39:13.694" status="PASS" endtime="20170919 15:39:13.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.923">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:39:13.923" status="PASS" endtime="20170919 15:39:13.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.926">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:13.925" status="PASS" endtime="20170919 15:39:13.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.926">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:13.926" status="PASS" endtime="20170919 15:39:13.927"></status>
</kw>
<status starttime="20170919 15:39:13.926" status="PASS" endtime="20170919 15:39:13.927"></status>
</kw>
<status starttime="20170919 15:39:13.924" status="PASS" endtime="20170919 15:39:13.927"></status>
</kw>
<status starttime="20170919 15:39:13.924" status="PASS" endtime="20170919 15:39:13.927"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.989">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:39:13.989">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:13.927" status="PASS" endtime="20170919 15:39:13.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.991">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:13.991" status="PASS" endtime="20170919 15:39:13.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.993">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:13.992" status="PASS" endtime="20170919 15:39:13.993"></status>
</kw>
<status starttime="20170919 15:39:13.992" status="PASS" endtime="20170919 15:39:13.993"></status>
</kw>
<status starttime="20170919 15:39:13.990" status="PASS" endtime="20170919 15:39:13.994"></status>
</kw>
<status starttime="20170919 15:39:13.990" status="PASS" endtime="20170919 15:39:13.994"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:39:13.994">Delete All Sessions</msg>
<status starttime="20170919 15:39:13.994" status="PASS" endtime="20170919 15:39:13.994"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:13.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:13.693" status="PASS" endtime="20170919 15:39:13.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:13.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:13.995" status="PASS" endtime="20170919 15:39:13.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:13.997">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:39:13.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:39:13.997">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:39:13.996" status="PASS" endtime="20170919 15:39:13.997"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:13.997">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:39:13.693" status="PASS" endtime="20170919 15:39:13.997"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:13.998">${power_state} = Off</msg>
<status starttime="20170919 15:39:13.692" status="PASS" endtime="20170919 15:39:13.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:39:13.999">On != Off</msg>
<status starttime="20170919 15:39:13.998" status="FAIL" endtime="20170919 15:39:13.999"></status>
</kw>
<status starttime="20170919 15:39:13.692" status="FAIL" endtime="20170919 15:39:13.999"></status>
</kw>
<status starttime="20170919 15:39:13.691" status="FAIL" endtime="20170919 15:39:13.999"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.004">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:39:24.004" status="PASS" endtime="20170919 15:39:24.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:39:24.005" status="PASS" endtime="20170919 15:39:24.005"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.006">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:39:24.006" status="PASS" endtime="20170919 15:39:24.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:39:24.006" status="PASS" endtime="20170919 15:39:24.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.216">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:39:24.007" status="PASS" endtime="20170919 15:39:24.216"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:24.216">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:39:24.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:24.007" status="PASS" endtime="20170919 15:39:24.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.217">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:24.217" status="PASS" endtime="20170919 15:39:24.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:24.217" status="PASS" endtime="20170919 15:39:24.218"></status>
</kw>
<status starttime="20170919 15:39:24.003" status="PASS" endtime="20170919 15:39:24.218"></status>
</kw>
<status starttime="20170919 15:39:24.003" status="PASS" endtime="20170919 15:39:24.218"></status>
</kw>
<status starttime="20170919 15:39:24.002" status="PASS" endtime="20170919 15:39:24.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.219">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:39:24.218" status="PASS" endtime="20170919 15:39:24.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.221">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:24.220" status="PASS" endtime="20170919 15:39:24.221"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.222">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:24.222" status="PASS" endtime="20170919 15:39:24.222"></status>
</kw>
<status starttime="20170919 15:39:24.221" status="PASS" endtime="20170919 15:39:24.222"></status>
</kw>
<status starttime="20170919 15:39:24.220" status="PASS" endtime="20170919 15:39:24.222"></status>
</kw>
<status starttime="20170919 15:39:24.219" status="PASS" endtime="20170919 15:39:24.222"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.296">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:39:24.296">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:24.223" status="PASS" endtime="20170919 15:39:24.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.298">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:24.298" status="PASS" endtime="20170919 15:39:24.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:24.299" status="PASS" endtime="20170919 15:39:24.300"></status>
</kw>
<status starttime="20170919 15:39:24.299" status="PASS" endtime="20170919 15:39:24.300"></status>
</kw>
<status starttime="20170919 15:39:24.297" status="PASS" endtime="20170919 15:39:24.300"></status>
</kw>
<status starttime="20170919 15:39:24.297" status="PASS" endtime="20170919 15:39:24.300"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:39:24.301">Delete All Sessions</msg>
<status starttime="20170919 15:39:24.300" status="PASS" endtime="20170919 15:39:24.301"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:24.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:24.002" status="PASS" endtime="20170919 15:39:24.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:24.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:24.301" status="PASS" endtime="20170919 15:39:24.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:24.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:39:24.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:39:24.302">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:39:24.302" status="PASS" endtime="20170919 15:39:24.302"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:24.303">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:39:24.001" status="PASS" endtime="20170919 15:39:24.303"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:24.303">${power_state} = Off</msg>
<status starttime="20170919 15:39:24.001" status="PASS" endtime="20170919 15:39:24.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:39:24.304">On != Off</msg>
<status starttime="20170919 15:39:24.303" status="FAIL" endtime="20170919 15:39:24.304"></status>
</kw>
<status starttime="20170919 15:39:24.000" status="FAIL" endtime="20170919 15:39:24.304"></status>
</kw>
<status starttime="20170919 15:39:24.000" status="FAIL" endtime="20170919 15:39:24.304"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.310">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:39:34.310" status="PASS" endtime="20170919 15:39:34.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:39:34.311" status="PASS" endtime="20170919 15:39:34.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.312">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:39:34.312" status="PASS" endtime="20170919 15:39:34.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:39:34.312" status="PASS" endtime="20170919 15:39:34.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.516">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:39:34.313" status="PASS" endtime="20170919 15:39:34.516"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:34.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:39:34.517">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:34.313" status="PASS" endtime="20170919 15:39:34.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.517">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:34.517" status="PASS" endtime="20170919 15:39:34.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.519">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:34.518" status="PASS" endtime="20170919 15:39:34.519"></status>
</kw>
<status starttime="20170919 15:39:34.309" status="PASS" endtime="20170919 15:39:34.519"></status>
</kw>
<status starttime="20170919 15:39:34.308" status="PASS" endtime="20170919 15:39:34.519"></status>
</kw>
<status starttime="20170919 15:39:34.308" status="PASS" endtime="20170919 15:39:34.519"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.520">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:39:34.520" status="PASS" endtime="20170919 15:39:34.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.523">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:34.522" status="PASS" endtime="20170919 15:39:34.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.525">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:34.525" status="PASS" endtime="20170919 15:39:34.525"></status>
</kw>
<status starttime="20170919 15:39:34.524" status="PASS" endtime="20170919 15:39:34.525"></status>
</kw>
<status starttime="20170919 15:39:34.521" status="PASS" endtime="20170919 15:39:34.525"></status>
</kw>
<status starttime="20170919 15:39:34.521" status="PASS" endtime="20170919 15:39:34.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.605">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:39:34.605">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:34.526" status="PASS" endtime="20170919 15:39:34.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.607">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:34.606" status="PASS" endtime="20170919 15:39:34.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.613">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:34.613" status="PASS" endtime="20170919 15:39:34.613"></status>
</kw>
<status starttime="20170919 15:39:34.607" status="PASS" endtime="20170919 15:39:34.613"></status>
</kw>
<status starttime="20170919 15:39:34.606" status="PASS" endtime="20170919 15:39:34.613"></status>
</kw>
<status starttime="20170919 15:39:34.605" status="PASS" endtime="20170919 15:39:34.613"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:39:34.614">Delete All Sessions</msg>
<status starttime="20170919 15:39:34.614" status="PASS" endtime="20170919 15:39:34.614"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:34.614">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:34.307" status="PASS" endtime="20170919 15:39:34.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:34.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:34.614" status="PASS" endtime="20170919 15:39:34.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:34.616">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:39:34.616">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:39:34.616">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:39:34.615" status="PASS" endtime="20170919 15:39:34.616"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:34.617">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:39:34.306" status="PASS" endtime="20170919 15:39:34.617"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:34.617">${power_state} = Off</msg>
<status starttime="20170919 15:39:34.306" status="PASS" endtime="20170919 15:39:34.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:39:34.618">On != Off</msg>
<status starttime="20170919 15:39:34.617" status="FAIL" endtime="20170919 15:39:34.618"></status>
</kw>
<status starttime="20170919 15:39:34.306" status="FAIL" endtime="20170919 15:39:34.619"></status>
</kw>
<status starttime="20170919 15:39:34.305" status="FAIL" endtime="20170919 15:39:34.619"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.624">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:39:44.624" status="PASS" endtime="20170919 15:39:44.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:39:44.625" status="PASS" endtime="20170919 15:39:44.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.626">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:39:44.625" status="PASS" endtime="20170919 15:39:44.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:39:44.626" status="PASS" endtime="20170919 15:39:44.626"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:39:44.627" status="PASS" endtime="20170919 15:39:44.825"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:44.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:39:44.825">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:44.627" status="PASS" endtime="20170919 15:39:44.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.826">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:44.825" status="PASS" endtime="20170919 15:39:44.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:44.826" status="PASS" endtime="20170919 15:39:44.827"></status>
</kw>
<status starttime="20170919 15:39:44.623" status="PASS" endtime="20170919 15:39:44.827"></status>
</kw>
<status starttime="20170919 15:39:44.623" status="PASS" endtime="20170919 15:39:44.827"></status>
</kw>
<status starttime="20170919 15:39:44.622" status="PASS" endtime="20170919 15:39:44.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.828">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:39:44.827" status="PASS" endtime="20170919 15:39:44.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.830">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:44.829" status="PASS" endtime="20170919 15:39:44.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.831">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:44.830" status="PASS" endtime="20170919 15:39:44.831"></status>
</kw>
<status starttime="20170919 15:39:44.830" status="PASS" endtime="20170919 15:39:44.831"></status>
</kw>
<status starttime="20170919 15:39:44.828" status="PASS" endtime="20170919 15:39:44.831"></status>
</kw>
<status starttime="20170919 15:39:44.828" status="PASS" endtime="20170919 15:39:44.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.898">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:39:44.898">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:44.831" status="PASS" endtime="20170919 15:39:44.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.900">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:44.899" status="PASS" endtime="20170919 15:39:44.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.901">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:44.900" status="PASS" endtime="20170919 15:39:44.901"></status>
</kw>
<status starttime="20170919 15:39:44.900" status="PASS" endtime="20170919 15:39:44.901"></status>
</kw>
<status starttime="20170919 15:39:44.899" status="PASS" endtime="20170919 15:39:44.901"></status>
</kw>
<status starttime="20170919 15:39:44.898" status="PASS" endtime="20170919 15:39:44.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:39:44.901">Delete All Sessions</msg>
<status starttime="20170919 15:39:44.901" status="PASS" endtime="20170919 15:39:44.901"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:44.902">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:44.621" status="PASS" endtime="20170919 15:39:44.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:44.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:44.902" status="PASS" endtime="20170919 15:39:44.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:44.903">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:39:44.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:39:44.903">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:39:44.903" status="PASS" endtime="20170919 15:39:44.903"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:44.903">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:39:44.621" status="PASS" endtime="20170919 15:39:44.903"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:44.904">${power_state} = Off</msg>
<status starttime="20170919 15:39:44.620" status="PASS" endtime="20170919 15:39:44.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:39:44.904">On != Off</msg>
<status starttime="20170919 15:39:44.904" status="FAIL" endtime="20170919 15:39:44.904"></status>
</kw>
<status starttime="20170919 15:39:44.620" status="FAIL" endtime="20170919 15:39:44.905"></status>
</kw>
<status starttime="20170919 15:39:44.619" status="FAIL" endtime="20170919 15:39:44.905"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:54.910">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:39:54.910" status="PASS" endtime="20170919 15:39:54.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:54.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:39:54.911" status="PASS" endtime="20170919 15:39:54.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:54.912">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:39:54.912" status="PASS" endtime="20170919 15:39:54.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:54.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:39:54.912" status="PASS" endtime="20170919 15:39:54.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:55.111">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:39:54.913" status="PASS" endtime="20170919 15:39:55.111"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:55.111">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:39:55.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:54.913" status="PASS" endtime="20170919 15:39:55.111"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:55.112">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:55.111" status="PASS" endtime="20170919 15:39:55.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:55.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:55.112" status="PASS" endtime="20170919 15:39:55.113"></status>
</kw>
<status starttime="20170919 15:39:54.909" status="PASS" endtime="20170919 15:39:55.113"></status>
</kw>
<status starttime="20170919 15:39:54.909" status="PASS" endtime="20170919 15:39:55.113"></status>
</kw>
<status starttime="20170919 15:39:54.908" status="PASS" endtime="20170919 15:39:55.113"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:55.114">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:39:55.113" status="PASS" endtime="20170919 15:39:55.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:55.116">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:55.115" status="PASS" endtime="20170919 15:39:55.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:55.117">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:39:55.116" status="PASS" endtime="20170919 15:39:55.117"></status>
</kw>
<status starttime="20170919 15:39:55.116" status="PASS" endtime="20170919 15:39:55.117"></status>
</kw>
<status starttime="20170919 15:39:55.114" status="PASS" endtime="20170919 15:39:55.117"></status>
</kw>
<status starttime="20170919 15:39:55.114" status="PASS" endtime="20170919 15:39:55.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:55.178">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:39:55.178">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:55.117" status="PASS" endtime="20170919 15:39:55.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:55.180">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:55.180" status="PASS" endtime="20170919 15:39:55.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:55.181">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:39:55.181" status="PASS" endtime="20170919 15:39:55.182"></status>
</kw>
<status starttime="20170919 15:39:55.180" status="PASS" endtime="20170919 15:39:55.182"></status>
</kw>
<status starttime="20170919 15:39:55.179" status="PASS" endtime="20170919 15:39:55.182"></status>
</kw>
<status starttime="20170919 15:39:55.179" status="PASS" endtime="20170919 15:39:55.182"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:39:55.182">Delete All Sessions</msg>
<status starttime="20170919 15:39:55.182" status="PASS" endtime="20170919 15:39:55.182"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:55.183">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:39:54.907" status="PASS" endtime="20170919 15:39:55.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:39:55.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:39:55.183" status="PASS" endtime="20170919 15:39:55.183"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:39:55.184">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:39:55.184">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:39:55.184">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:39:55.183" status="PASS" endtime="20170919 15:39:55.184"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:55.184">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:39:54.907" status="PASS" endtime="20170919 15:39:55.184"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:39:55.185">${power_state} = Off</msg>
<status starttime="20170919 15:39:54.906" status="PASS" endtime="20170919 15:39:55.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:39:55.185">On != Off</msg>
<status starttime="20170919 15:39:55.185" status="FAIL" endtime="20170919 15:39:55.185"></status>
</kw>
<status starttime="20170919 15:39:54.906" status="FAIL" endtime="20170919 15:39:55.186"></status>
</kw>
<status starttime="20170919 15:39:54.905" status="FAIL" endtime="20170919 15:39:55.186"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.191">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:40:05.191" status="PASS" endtime="20170919 15:40:05.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:40:05.192" status="PASS" endtime="20170919 15:40:05.192"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.193">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:40:05.192" status="PASS" endtime="20170919 15:40:05.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:40:05.193" status="PASS" endtime="20170919 15:40:05.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.376">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:40:05.194" status="PASS" endtime="20170919 15:40:05.376"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:05.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:40:05.377">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:05.194" status="PASS" endtime="20170919 15:40:05.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.377">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:05.377" status="PASS" endtime="20170919 15:40:05.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:05.378" status="PASS" endtime="20170919 15:40:05.378"></status>
</kw>
<status starttime="20170919 15:40:05.190" status="PASS" endtime="20170919 15:40:05.378"></status>
</kw>
<status starttime="20170919 15:40:05.190" status="PASS" endtime="20170919 15:40:05.378"></status>
</kw>
<status starttime="20170919 15:40:05.189" status="PASS" endtime="20170919 15:40:05.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.379">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:40:05.379" status="PASS" endtime="20170919 15:40:05.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.381">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:05.381" status="PASS" endtime="20170919 15:40:05.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.382">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:05.382" status="PASS" endtime="20170919 15:40:05.382"></status>
</kw>
<status starttime="20170919 15:40:05.381" status="PASS" endtime="20170919 15:40:05.382"></status>
</kw>
<status starttime="20170919 15:40:05.380" status="PASS" endtime="20170919 15:40:05.383"></status>
</kw>
<status starttime="20170919 15:40:05.380" status="PASS" endtime="20170919 15:40:05.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:40:05.444">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:05.383" status="PASS" endtime="20170919 15:40:05.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.446">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:05.445" status="PASS" endtime="20170919 15:40:05.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.447">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:05.447" status="PASS" endtime="20170919 15:40:05.447"></status>
</kw>
<status starttime="20170919 15:40:05.446" status="PASS" endtime="20170919 15:40:05.447"></status>
</kw>
<status starttime="20170919 15:40:05.445" status="PASS" endtime="20170919 15:40:05.447"></status>
</kw>
<status starttime="20170919 15:40:05.444" status="PASS" endtime="20170919 15:40:05.447"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:40:05.448">Delete All Sessions</msg>
<status starttime="20170919 15:40:05.447" status="PASS" endtime="20170919 15:40:05.448"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:05.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:05.188" status="PASS" endtime="20170919 15:40:05.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:05.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:05.448" status="PASS" endtime="20170919 15:40:05.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:05.449">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:40:05.449">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:40:05.449">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:40:05.449" status="PASS" endtime="20170919 15:40:05.449"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:05.450">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:40:05.188" status="PASS" endtime="20170919 15:40:05.450"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:05.450">${power_state} = Off</msg>
<status starttime="20170919 15:40:05.187" status="PASS" endtime="20170919 15:40:05.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:40:05.451">On != Off</msg>
<status starttime="20170919 15:40:05.450" status="FAIL" endtime="20170919 15:40:05.451"></status>
</kw>
<status starttime="20170919 15:40:05.187" status="FAIL" endtime="20170919 15:40:05.451"></status>
</kw>
<status starttime="20170919 15:40:05.186" status="FAIL" endtime="20170919 15:40:05.451"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.457">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:40:15.457" status="PASS" endtime="20170919 15:40:15.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.458">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:40:15.458" status="PASS" endtime="20170919 15:40:15.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.459">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:40:15.458" status="PASS" endtime="20170919 15:40:15.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.459">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:40:15.459" status="PASS" endtime="20170919 15:40:15.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:40:15.460" status="PASS" endtime="20170919 15:40:15.676"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:15.676">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:40:15.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:15.460" status="PASS" endtime="20170919 15:40:15.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:15.676" status="PASS" endtime="20170919 15:40:15.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:15.677" status="PASS" endtime="20170919 15:40:15.677"></status>
</kw>
<status starttime="20170919 15:40:15.456" status="PASS" endtime="20170919 15:40:15.677"></status>
</kw>
<status starttime="20170919 15:40:15.455" status="PASS" endtime="20170919 15:40:15.677"></status>
</kw>
<status starttime="20170919 15:40:15.455" status="PASS" endtime="20170919 15:40:15.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.678">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:40:15.678" status="PASS" endtime="20170919 15:40:15.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.680">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:15.679" status="PASS" endtime="20170919 15:40:15.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.681">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:15.681" status="PASS" endtime="20170919 15:40:15.681"></status>
</kw>
<status starttime="20170919 15:40:15.680" status="PASS" endtime="20170919 15:40:15.681"></status>
</kw>
<status starttime="20170919 15:40:15.679" status="PASS" endtime="20170919 15:40:15.682"></status>
</kw>
<status starttime="20170919 15:40:15.678" status="PASS" endtime="20170919 15:40:15.682"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.743">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:40:15.743">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:15.682" status="PASS" endtime="20170919 15:40:15.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.745">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:15.745" status="PASS" endtime="20170919 15:40:15.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.747">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:15.746" status="PASS" endtime="20170919 15:40:15.747"></status>
</kw>
<status starttime="20170919 15:40:15.746" status="PASS" endtime="20170919 15:40:15.747"></status>
</kw>
<status starttime="20170919 15:40:15.744" status="PASS" endtime="20170919 15:40:15.747"></status>
</kw>
<status starttime="20170919 15:40:15.744" status="PASS" endtime="20170919 15:40:15.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:40:15.747">Delete All Sessions</msg>
<status starttime="20170919 15:40:15.747" status="PASS" endtime="20170919 15:40:15.747"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:15.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:15.454" status="PASS" endtime="20170919 15:40:15.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:15.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:15.748" status="PASS" endtime="20170919 15:40:15.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:15.749">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:40:15.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:40:15.749">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:40:15.749" status="PASS" endtime="20170919 15:40:15.749"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:15.749">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:40:15.453" status="PASS" endtime="20170919 15:40:15.749"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:15.750">${power_state} = Off</msg>
<status starttime="20170919 15:40:15.453" status="PASS" endtime="20170919 15:40:15.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:40:15.750">On != Off</msg>
<status starttime="20170919 15:40:15.750" status="FAIL" endtime="20170919 15:40:15.750"></status>
</kw>
<status starttime="20170919 15:40:15.453" status="FAIL" endtime="20170919 15:40:15.751"></status>
</kw>
<status starttime="20170919 15:40:15.452" status="FAIL" endtime="20170919 15:40:15.751"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:25.756">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:40:25.756" status="PASS" endtime="20170919 15:40:25.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:25.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:40:25.757" status="PASS" endtime="20170919 15:40:25.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:25.758">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:40:25.757" status="PASS" endtime="20170919 15:40:25.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:25.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:40:25.758" status="PASS" endtime="20170919 15:40:25.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:25.955">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:40:25.759" status="PASS" endtime="20170919 15:40:25.955"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:25.955">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:40:25.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:25.759" status="PASS" endtime="20170919 15:40:25.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:25.956">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:25.956" status="PASS" endtime="20170919 15:40:25.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:25.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:25.957" status="PASS" endtime="20170919 15:40:25.957"></status>
</kw>
<status starttime="20170919 15:40:25.755" status="PASS" endtime="20170919 15:40:25.957"></status>
</kw>
<status starttime="20170919 15:40:25.755" status="PASS" endtime="20170919 15:40:25.957"></status>
</kw>
<status starttime="20170919 15:40:25.754" status="PASS" endtime="20170919 15:40:25.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:25.958">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:40:25.958" status="PASS" endtime="20170919 15:40:25.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:25.960">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:25.959" status="PASS" endtime="20170919 15:40:25.960"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:25.961">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:25.961" status="PASS" endtime="20170919 15:40:25.961"></status>
</kw>
<status starttime="20170919 15:40:25.960" status="PASS" endtime="20170919 15:40:25.961"></status>
</kw>
<status starttime="20170919 15:40:25.959" status="PASS" endtime="20170919 15:40:25.961"></status>
</kw>
<status starttime="20170919 15:40:25.958" status="PASS" endtime="20170919 15:40:25.961"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:26.024">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:40:26.024">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:25.962" status="PASS" endtime="20170919 15:40:26.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:26.026">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:26.026" status="PASS" endtime="20170919 15:40:26.026"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:26.027">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:26.027" status="PASS" endtime="20170919 15:40:26.027"></status>
</kw>
<status starttime="20170919 15:40:26.026" status="PASS" endtime="20170919 15:40:26.027"></status>
</kw>
<status starttime="20170919 15:40:26.025" status="PASS" endtime="20170919 15:40:26.027"></status>
</kw>
<status starttime="20170919 15:40:26.025" status="PASS" endtime="20170919 15:40:26.027"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:40:26.028">Delete All Sessions</msg>
<status starttime="20170919 15:40:26.028" status="PASS" endtime="20170919 15:40:26.028"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:26.028">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:25.753" status="PASS" endtime="20170919 15:40:26.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:26.029">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:26.029" status="PASS" endtime="20170919 15:40:26.029"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:26.029">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:40:26.030">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:40:26.030">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:40:26.029" status="PASS" endtime="20170919 15:40:26.030"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:26.030">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:40:25.753" status="PASS" endtime="20170919 15:40:26.030"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:26.030">${power_state} = Off</msg>
<status starttime="20170919 15:40:25.752" status="PASS" endtime="20170919 15:40:26.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:40:26.031">On != Off</msg>
<status starttime="20170919 15:40:26.031" status="FAIL" endtime="20170919 15:40:26.031"></status>
</kw>
<status starttime="20170919 15:40:25.752" status="FAIL" endtime="20170919 15:40:26.031"></status>
</kw>
<status starttime="20170919 15:40:25.751" status="FAIL" endtime="20170919 15:40:26.031"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.037">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:40:36.037" status="PASS" endtime="20170919 15:40:36.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:40:36.038" status="PASS" endtime="20170919 15:40:36.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.039">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:40:36.038" status="PASS" endtime="20170919 15:40:36.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.039">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:40:36.039" status="PASS" endtime="20170919 15:40:36.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.223">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:40:36.040" status="PASS" endtime="20170919 15:40:36.223"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:36.223">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:40:36.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:36.040" status="PASS" endtime="20170919 15:40:36.224"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.224">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:36.224" status="PASS" endtime="20170919 15:40:36.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:36.225" status="PASS" endtime="20170919 15:40:36.225"></status>
</kw>
<status starttime="20170919 15:40:36.036" status="PASS" endtime="20170919 15:40:36.225"></status>
</kw>
<status starttime="20170919 15:40:36.035" status="PASS" endtime="20170919 15:40:36.225"></status>
</kw>
<status starttime="20170919 15:40:36.035" status="PASS" endtime="20170919 15:40:36.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.226">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:40:36.226" status="PASS" endtime="20170919 15:40:36.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.228">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:36.227" status="PASS" endtime="20170919 15:40:36.228"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.229">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:36.229" status="PASS" endtime="20170919 15:40:36.229"></status>
</kw>
<status starttime="20170919 15:40:36.228" status="PASS" endtime="20170919 15:40:36.229"></status>
</kw>
<status starttime="20170919 15:40:36.227" status="PASS" endtime="20170919 15:40:36.229"></status>
</kw>
<status starttime="20170919 15:40:36.226" status="PASS" endtime="20170919 15:40:36.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.308">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:40:36.308">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:36.230" status="PASS" endtime="20170919 15:40:36.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.310">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:36.309" status="PASS" endtime="20170919 15:40:36.310"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.311">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:36.310" status="PASS" endtime="20170919 15:40:36.311"></status>
</kw>
<status starttime="20170919 15:40:36.310" status="PASS" endtime="20170919 15:40:36.311"></status>
</kw>
<status starttime="20170919 15:40:36.309" status="PASS" endtime="20170919 15:40:36.311"></status>
</kw>
<status starttime="20170919 15:40:36.308" status="PASS" endtime="20170919 15:40:36.311"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:40:36.312">Delete All Sessions</msg>
<status starttime="20170919 15:40:36.312" status="PASS" endtime="20170919 15:40:36.312"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:36.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:36.034" status="PASS" endtime="20170919 15:40:36.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:36.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:36.312" status="PASS" endtime="20170919 15:40:36.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:36.313">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:40:36.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:40:36.313">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:40:36.313" status="PASS" endtime="20170919 15:40:36.313"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:36.314">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:40:36.033" status="PASS" endtime="20170919 15:40:36.314"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:36.314">${power_state} = Off</msg>
<status starttime="20170919 15:40:36.033" status="PASS" endtime="20170919 15:40:36.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:40:36.315">On != Off</msg>
<status starttime="20170919 15:40:36.314" status="FAIL" endtime="20170919 15:40:36.315"></status>
</kw>
<status starttime="20170919 15:40:36.033" status="FAIL" endtime="20170919 15:40:36.315"></status>
</kw>
<status starttime="20170919 15:40:36.032" status="FAIL" endtime="20170919 15:40:36.315"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.320">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:40:46.320" status="PASS" endtime="20170919 15:40:46.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:40:46.321" status="PASS" endtime="20170919 15:40:46.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.322">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:40:46.322" status="PASS" endtime="20170919 15:40:46.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:40:46.322" status="PASS" endtime="20170919 15:40:46.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.525">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:40:46.323" status="PASS" endtime="20170919 15:40:46.526"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:46.526">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:40:46.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:46.323" status="PASS" endtime="20170919 15:40:46.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.526">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:46.526" status="PASS" endtime="20170919 15:40:46.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:46.527" status="PASS" endtime="20170919 15:40:46.527"></status>
</kw>
<status starttime="20170919 15:40:46.319" status="PASS" endtime="20170919 15:40:46.527"></status>
</kw>
<status starttime="20170919 15:40:46.319" status="PASS" endtime="20170919 15:40:46.527"></status>
</kw>
<status starttime="20170919 15:40:46.318" status="PASS" endtime="20170919 15:40:46.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.528">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:40:46.528" status="PASS" endtime="20170919 15:40:46.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.530">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:46.529" status="PASS" endtime="20170919 15:40:46.530"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.531">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:46.531" status="PASS" endtime="20170919 15:40:46.531"></status>
</kw>
<status starttime="20170919 15:40:46.530" status="PASS" endtime="20170919 15:40:46.531"></status>
</kw>
<status starttime="20170919 15:40:46.529" status="PASS" endtime="20170919 15:40:46.531"></status>
</kw>
<status starttime="20170919 15:40:46.528" status="PASS" endtime="20170919 15:40:46.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.625">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:40:46.625">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:46.532" status="PASS" endtime="20170919 15:40:46.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.627">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:46.627" status="PASS" endtime="20170919 15:40:46.627"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.628">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:46.628" status="PASS" endtime="20170919 15:40:46.628"></status>
</kw>
<status starttime="20170919 15:40:46.627" status="PASS" endtime="20170919 15:40:46.628"></status>
</kw>
<status starttime="20170919 15:40:46.626" status="PASS" endtime="20170919 15:40:46.628"></status>
</kw>
<status starttime="20170919 15:40:46.626" status="PASS" endtime="20170919 15:40:46.629"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:40:46.629">Delete All Sessions</msg>
<status starttime="20170919 15:40:46.629" status="PASS" endtime="20170919 15:40:46.629"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:46.629">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:46.318" status="PASS" endtime="20170919 15:40:46.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:46.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:46.629" status="PASS" endtime="20170919 15:40:46.630"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:46.630">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:40:46.630">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:40:46.631">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:40:46.630" status="PASS" endtime="20170919 15:40:46.631"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:46.631">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:40:46.317" status="PASS" endtime="20170919 15:40:46.631"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:46.631">${power_state} = Off</msg>
<status starttime="20170919 15:40:46.317" status="PASS" endtime="20170919 15:40:46.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:40:46.632">On != Off</msg>
<status starttime="20170919 15:40:46.632" status="FAIL" endtime="20170919 15:40:46.632"></status>
</kw>
<status starttime="20170919 15:40:46.316" status="FAIL" endtime="20170919 15:40:46.632"></status>
</kw>
<status starttime="20170919 15:40:46.316" status="FAIL" endtime="20170919 15:40:46.632"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.638">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:40:56.638" status="PASS" endtime="20170919 15:40:56.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.639">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:40:56.639" status="PASS" endtime="20170919 15:40:56.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.640">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:40:56.639" status="PASS" endtime="20170919 15:40:56.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:40:56.640" status="PASS" endtime="20170919 15:40:56.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:40:56.641" status="PASS" endtime="20170919 15:40:56.896"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:56.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:40:56.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:56.641" status="PASS" endtime="20170919 15:40:56.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:56.896" status="PASS" endtime="20170919 15:40:56.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:56.897" status="PASS" endtime="20170919 15:40:56.897"></status>
</kw>
<status starttime="20170919 15:40:56.637" status="PASS" endtime="20170919 15:40:56.898"></status>
</kw>
<status starttime="20170919 15:40:56.636" status="PASS" endtime="20170919 15:40:56.898"></status>
</kw>
<status starttime="20170919 15:40:56.636" status="PASS" endtime="20170919 15:40:56.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.898">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:40:56.898" status="PASS" endtime="20170919 15:40:56.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.900">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:56.900" status="PASS" endtime="20170919 15:40:56.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.901">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:40:56.901" status="PASS" endtime="20170919 15:40:56.901"></status>
</kw>
<status starttime="20170919 15:40:56.901" status="PASS" endtime="20170919 15:40:56.902"></status>
</kw>
<status starttime="20170919 15:40:56.899" status="PASS" endtime="20170919 15:40:56.902"></status>
</kw>
<status starttime="20170919 15:40:56.899" status="PASS" endtime="20170919 15:40:56.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.964">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:40:56.964">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:56.902" status="PASS" endtime="20170919 15:40:56.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.966">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:56.965" status="PASS" endtime="20170919 15:40:56.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.972">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:40:56.971" status="PASS" endtime="20170919 15:40:56.972"></status>
</kw>
<status starttime="20170919 15:40:56.966" status="PASS" endtime="20170919 15:40:56.972"></status>
</kw>
<status starttime="20170919 15:40:56.965" status="PASS" endtime="20170919 15:40:56.972"></status>
</kw>
<status starttime="20170919 15:40:56.964" status="PASS" endtime="20170919 15:40:56.972"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:40:56.973">Delete All Sessions</msg>
<status starttime="20170919 15:40:56.972" status="PASS" endtime="20170919 15:40:56.973"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:56.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:40:56.635" status="PASS" endtime="20170919 15:40:56.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:40:56.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:40:56.973" status="PASS" endtime="20170919 15:40:56.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:40:56.974">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:40:56.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:40:56.974">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:40:56.974" status="PASS" endtime="20170919 15:40:56.974"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:56.975">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:40:56.634" status="PASS" endtime="20170919 15:40:56.975"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:40:56.975">${power_state} = Off</msg>
<status starttime="20170919 15:40:56.634" status="PASS" endtime="20170919 15:40:56.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:40:56.976">On != Off</msg>
<status starttime="20170919 15:40:56.975" status="FAIL" endtime="20170919 15:40:56.976"></status>
</kw>
<status starttime="20170919 15:40:56.634" status="FAIL" endtime="20170919 15:40:56.976"></status>
</kw>
<status starttime="20170919 15:40:56.633" status="FAIL" endtime="20170919 15:40:56.976"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:06.982">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:41:06.981" status="PASS" endtime="20170919 15:41:06.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:06.983">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:41:06.982" status="PASS" endtime="20170919 15:41:06.983"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:06.983">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:41:06.983" status="PASS" endtime="20170919 15:41:06.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:06.984">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:41:06.983" status="PASS" endtime="20170919 15:41:06.984"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:07.237">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:41:06.985" status="PASS" endtime="20170919 15:41:07.237"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:07.237">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:41:07.237">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:06.984" status="PASS" endtime="20170919 15:41:07.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:07.238">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:07.237" status="PASS" endtime="20170919 15:41:07.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:07.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:07.238" status="PASS" endtime="20170919 15:41:07.238"></status>
</kw>
<status starttime="20170919 15:41:06.981" status="PASS" endtime="20170919 15:41:07.239"></status>
</kw>
<status starttime="20170919 15:41:06.980" status="PASS" endtime="20170919 15:41:07.239"></status>
</kw>
<status starttime="20170919 15:41:06.980" status="PASS" endtime="20170919 15:41:07.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:07.239">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:41:07.239" status="PASS" endtime="20170919 15:41:07.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:07.241">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:07.241" status="PASS" endtime="20170919 15:41:07.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:07.242">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:07.242" status="PASS" endtime="20170919 15:41:07.242"></status>
</kw>
<status starttime="20170919 15:41:07.242" status="PASS" endtime="20170919 15:41:07.243"></status>
</kw>
<status starttime="20170919 15:41:07.240" status="PASS" endtime="20170919 15:41:07.243"></status>
</kw>
<status starttime="20170919 15:41:07.240" status="PASS" endtime="20170919 15:41:07.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:07.325">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:41:07.325">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:07.243" status="PASS" endtime="20170919 15:41:07.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:07.327">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:07.326" status="PASS" endtime="20170919 15:41:07.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:07.328">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:07.328" status="PASS" endtime="20170919 15:41:07.328"></status>
</kw>
<status starttime="20170919 15:41:07.327" status="PASS" endtime="20170919 15:41:07.328"></status>
</kw>
<status starttime="20170919 15:41:07.326" status="PASS" endtime="20170919 15:41:07.328"></status>
</kw>
<status starttime="20170919 15:41:07.325" status="PASS" endtime="20170919 15:41:07.328"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:41:07.329">Delete All Sessions</msg>
<status starttime="20170919 15:41:07.329" status="PASS" endtime="20170919 15:41:07.329"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:07.329">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:06.979" status="PASS" endtime="20170919 15:41:07.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:07.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:07.329" status="PASS" endtime="20170919 15:41:07.330"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:07.330">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:41:07.330">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:41:07.330">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:41:07.330" status="PASS" endtime="20170919 15:41:07.330"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:07.331">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:41:06.978" status="PASS" endtime="20170919 15:41:07.331"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:07.331">${power_state} = Off</msg>
<status starttime="20170919 15:41:06.978" status="PASS" endtime="20170919 15:41:07.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:41:07.332">On != Off</msg>
<status starttime="20170919 15:41:07.331" status="FAIL" endtime="20170919 15:41:07.332"></status>
</kw>
<status starttime="20170919 15:41:06.978" status="FAIL" endtime="20170919 15:41:07.332"></status>
</kw>
<status starttime="20170919 15:41:06.977" status="FAIL" endtime="20170919 15:41:07.332"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.338">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:41:17.338" status="PASS" endtime="20170919 15:41:17.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.339">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:41:17.339" status="PASS" endtime="20170919 15:41:17.339"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.340">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:41:17.339" status="PASS" endtime="20170919 15:41:17.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.340">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:41:17.340" status="PASS" endtime="20170919 15:41:17.340"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:41:17.341" status="PASS" endtime="20170919 15:41:17.531"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:17.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:41:17.531">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:17.341" status="PASS" endtime="20170919 15:41:17.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.531">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:17.531" status="PASS" endtime="20170919 15:41:17.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:17.532" status="PASS" endtime="20170919 15:41:17.532"></status>
</kw>
<status starttime="20170919 15:41:17.336" status="PASS" endtime="20170919 15:41:17.532"></status>
</kw>
<status starttime="20170919 15:41:17.336" status="PASS" endtime="20170919 15:41:17.533"></status>
</kw>
<status starttime="20170919 15:41:17.335" status="PASS" endtime="20170919 15:41:17.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.533">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:41:17.533" status="PASS" endtime="20170919 15:41:17.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.535">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:17.535" status="PASS" endtime="20170919 15:41:17.535"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.536">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:17.536" status="PASS" endtime="20170919 15:41:17.536"></status>
</kw>
<status starttime="20170919 15:41:17.535" status="PASS" endtime="20170919 15:41:17.537"></status>
</kw>
<status starttime="20170919 15:41:17.534" status="PASS" endtime="20170919 15:41:17.537"></status>
</kw>
<status starttime="20170919 15:41:17.534" status="PASS" endtime="20170919 15:41:17.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.598">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:41:17.598">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:17.537" status="PASS" endtime="20170919 15:41:17.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.600">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:17.600" status="PASS" endtime="20170919 15:41:17.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.601">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:17.601" status="PASS" endtime="20170919 15:41:17.602"></status>
</kw>
<status starttime="20170919 15:41:17.600" status="PASS" endtime="20170919 15:41:17.602"></status>
</kw>
<status starttime="20170919 15:41:17.599" status="PASS" endtime="20170919 15:41:17.602"></status>
</kw>
<status starttime="20170919 15:41:17.599" status="PASS" endtime="20170919 15:41:17.602"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:41:17.602">Delete All Sessions</msg>
<status starttime="20170919 15:41:17.602" status="PASS" endtime="20170919 15:41:17.602"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:17.603">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:17.335" status="PASS" endtime="20170919 15:41:17.603"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:17.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:17.603" status="PASS" endtime="20170919 15:41:17.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:17.604">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:41:17.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:41:17.604">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:41:17.604" status="PASS" endtime="20170919 15:41:17.604"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:17.604">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:41:17.334" status="PASS" endtime="20170919 15:41:17.604"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:17.605">${power_state} = Off</msg>
<status starttime="20170919 15:41:17.334" status="PASS" endtime="20170919 15:41:17.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:41:17.605">On != Off</msg>
<status starttime="20170919 15:41:17.605" status="FAIL" endtime="20170919 15:41:17.605"></status>
</kw>
<status starttime="20170919 15:41:17.333" status="FAIL" endtime="20170919 15:41:17.606"></status>
</kw>
<status starttime="20170919 15:41:17.333" status="FAIL" endtime="20170919 15:41:17.606"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.613">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:41:27.613" status="PASS" endtime="20170919 15:41:27.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:41:27.614" status="PASS" endtime="20170919 15:41:27.615"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.616">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:41:27.615" status="PASS" endtime="20170919 15:41:27.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.617">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:41:27.616" status="PASS" endtime="20170919 15:41:27.617"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.796">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:41:27.618" status="PASS" endtime="20170919 15:41:27.796"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:27.796">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:41:27.796">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:27.617" status="PASS" endtime="20170919 15:41:27.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.797">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:27.797" status="PASS" endtime="20170919 15:41:27.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.798">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:27.797" status="PASS" endtime="20170919 15:41:27.798"></status>
</kw>
<status starttime="20170919 15:41:27.612" status="PASS" endtime="20170919 15:41:27.798"></status>
</kw>
<status starttime="20170919 15:41:27.611" status="PASS" endtime="20170919 15:41:27.798"></status>
</kw>
<status starttime="20170919 15:41:27.610" status="PASS" endtime="20170919 15:41:27.798"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.799">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:41:27.798" status="PASS" endtime="20170919 15:41:27.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.801">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:27.800" status="PASS" endtime="20170919 15:41:27.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.802">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:27.802" status="PASS" endtime="20170919 15:41:27.802"></status>
</kw>
<status starttime="20170919 15:41:27.801" status="PASS" endtime="20170919 15:41:27.802"></status>
</kw>
<status starttime="20170919 15:41:27.800" status="PASS" endtime="20170919 15:41:27.802"></status>
</kw>
<status starttime="20170919 15:41:27.799" status="PASS" endtime="20170919 15:41:27.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.884">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:41:27.884">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:27.803" status="PASS" endtime="20170919 15:41:27.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.886">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:27.886" status="PASS" endtime="20170919 15:41:27.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.887">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:27.887" status="PASS" endtime="20170919 15:41:27.887"></status>
</kw>
<status starttime="20170919 15:41:27.886" status="PASS" endtime="20170919 15:41:27.887"></status>
</kw>
<status starttime="20170919 15:41:27.885" status="PASS" endtime="20170919 15:41:27.887"></status>
</kw>
<status starttime="20170919 15:41:27.885" status="PASS" endtime="20170919 15:41:27.888"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:41:27.888">Delete All Sessions</msg>
<status starttime="20170919 15:41:27.888" status="PASS" endtime="20170919 15:41:27.888"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:27.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:27.609" status="PASS" endtime="20170919 15:41:27.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:27.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:27.888" status="PASS" endtime="20170919 15:41:27.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:27.889">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:41:27.889">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:41:27.890">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:41:27.889" status="PASS" endtime="20170919 15:41:27.890"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:27.890">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:41:27.608" status="PASS" endtime="20170919 15:41:27.890"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:27.890">${power_state} = Off</msg>
<status starttime="20170919 15:41:27.608" status="PASS" endtime="20170919 15:41:27.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:41:27.891">On != Off</msg>
<status starttime="20170919 15:41:27.891" status="FAIL" endtime="20170919 15:41:27.891"></status>
</kw>
<status starttime="20170919 15:41:27.607" status="FAIL" endtime="20170919 15:41:27.891"></status>
</kw>
<status starttime="20170919 15:41:27.606" status="FAIL" endtime="20170919 15:41:27.891"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:37.897">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:41:37.897" status="PASS" endtime="20170919 15:41:37.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:37.898">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:41:37.898" status="PASS" endtime="20170919 15:41:37.898"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:37.899">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:41:37.898" status="PASS" endtime="20170919 15:41:37.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:37.899">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:41:37.899" status="PASS" endtime="20170919 15:41:37.899"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:38.086">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:41:37.900" status="PASS" endtime="20170919 15:41:38.086"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:38.087">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:41:38.087">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:37.900" status="PASS" endtime="20170919 15:41:38.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:38.087">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:38.087" status="PASS" endtime="20170919 15:41:38.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:38.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:38.088" status="PASS" endtime="20170919 15:41:38.088"></status>
</kw>
<status starttime="20170919 15:41:37.896" status="PASS" endtime="20170919 15:41:38.088"></status>
</kw>
<status starttime="20170919 15:41:37.895" status="PASS" endtime="20170919 15:41:38.088"></status>
</kw>
<status starttime="20170919 15:41:37.894" status="PASS" endtime="20170919 15:41:38.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:38.089">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:41:38.089" status="PASS" endtime="20170919 15:41:38.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:38.091">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:38.090" status="PASS" endtime="20170919 15:41:38.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:38.092">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:38.092" status="PASS" endtime="20170919 15:41:38.092"></status>
</kw>
<status starttime="20170919 15:41:38.091" status="PASS" endtime="20170919 15:41:38.092"></status>
</kw>
<status starttime="20170919 15:41:38.090" status="PASS" endtime="20170919 15:41:38.092"></status>
</kw>
<status starttime="20170919 15:41:38.089" status="PASS" endtime="20170919 15:41:38.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:38.165">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:41:38.166">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:38.093" status="PASS" endtime="20170919 15:41:38.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:38.167">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:38.167" status="PASS" endtime="20170919 15:41:38.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:38.169">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:38.168" status="PASS" endtime="20170919 15:41:38.169"></status>
</kw>
<status starttime="20170919 15:41:38.168" status="PASS" endtime="20170919 15:41:38.169"></status>
</kw>
<status starttime="20170919 15:41:38.166" status="PASS" endtime="20170919 15:41:38.169"></status>
</kw>
<status starttime="20170919 15:41:38.166" status="PASS" endtime="20170919 15:41:38.169"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:41:38.170">Delete All Sessions</msg>
<status starttime="20170919 15:41:38.169" status="PASS" endtime="20170919 15:41:38.170"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:38.170">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:37.894" status="PASS" endtime="20170919 15:41:38.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:38.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:38.170" status="PASS" endtime="20170919 15:41:38.171"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:38.171">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:41:38.171">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:41:38.171">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:41:38.171" status="PASS" endtime="20170919 15:41:38.171"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:38.172">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:41:37.893" status="PASS" endtime="20170919 15:41:38.172"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:38.172">${power_state} = Off</msg>
<status starttime="20170919 15:41:37.893" status="PASS" endtime="20170919 15:41:38.172"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:41:38.173">On != Off</msg>
<status starttime="20170919 15:41:38.172" status="FAIL" endtime="20170919 15:41:38.173"></status>
</kw>
<status starttime="20170919 15:41:37.893" status="FAIL" endtime="20170919 15:41:38.173"></status>
</kw>
<status starttime="20170919 15:41:37.892" status="FAIL" endtime="20170919 15:41:38.173"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.180">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:41:48.180" status="PASS" endtime="20170919 15:41:48.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:41:48.181" status="PASS" endtime="20170919 15:41:48.181"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.181">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:41:48.181" status="PASS" endtime="20170919 15:41:48.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:41:48.182" status="PASS" endtime="20170919 15:41:48.182"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.379">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:41:48.183" status="PASS" endtime="20170919 15:41:48.379"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:48.379">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:41:48.379">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:48.182" status="PASS" endtime="20170919 15:41:48.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.380">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:48.380" status="PASS" endtime="20170919 15:41:48.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:48.381" status="PASS" endtime="20170919 15:41:48.381"></status>
</kw>
<status starttime="20170919 15:41:48.179" status="PASS" endtime="20170919 15:41:48.381"></status>
</kw>
<status starttime="20170919 15:41:48.179" status="PASS" endtime="20170919 15:41:48.381"></status>
</kw>
<status starttime="20170919 15:41:48.178" status="PASS" endtime="20170919 15:41:48.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.382">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:41:48.382" status="PASS" endtime="20170919 15:41:48.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.384">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:48.383" status="PASS" endtime="20170919 15:41:48.384"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.385">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:48.385" status="PASS" endtime="20170919 15:41:48.385"></status>
</kw>
<status starttime="20170919 15:41:48.384" status="PASS" endtime="20170919 15:41:48.385"></status>
</kw>
<status starttime="20170919 15:41:48.383" status="PASS" endtime="20170919 15:41:48.385"></status>
</kw>
<status starttime="20170919 15:41:48.382" status="PASS" endtime="20170919 15:41:48.386"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.456">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:41:48.456">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:48.386" status="PASS" endtime="20170919 15:41:48.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:48.457" status="PASS" endtime="20170919 15:41:48.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:48.458" status="PASS" endtime="20170919 15:41:48.459"></status>
</kw>
<status starttime="20170919 15:41:48.458" status="PASS" endtime="20170919 15:41:48.459"></status>
</kw>
<status starttime="20170919 15:41:48.457" status="PASS" endtime="20170919 15:41:48.459"></status>
</kw>
<status starttime="20170919 15:41:48.456" status="PASS" endtime="20170919 15:41:48.459"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:41:48.459">Delete All Sessions</msg>
<status starttime="20170919 15:41:48.459" status="PASS" endtime="20170919 15:41:48.459"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:48.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:48.177" status="PASS" endtime="20170919 15:41:48.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:48.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:48.460" status="PASS" endtime="20170919 15:41:48.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:48.461">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:41:48.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:41:48.461">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:41:48.461" status="PASS" endtime="20170919 15:41:48.461"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:48.461">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:41:48.177" status="PASS" endtime="20170919 15:41:48.461"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:48.462">${power_state} = Off</msg>
<status starttime="20170919 15:41:48.176" status="PASS" endtime="20170919 15:41:48.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:41:48.462">On != Off</msg>
<status starttime="20170919 15:41:48.462" status="FAIL" endtime="20170919 15:41:48.462"></status>
</kw>
<status starttime="20170919 15:41:48.175" status="FAIL" endtime="20170919 15:41:48.463"></status>
</kw>
<status starttime="20170919 15:41:48.175" status="FAIL" endtime="20170919 15:41:48.463"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.471">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:41:58.471" status="PASS" endtime="20170919 15:41:58.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:41:58.472" status="PASS" endtime="20170919 15:41:58.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.474">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:41:58.473" status="PASS" endtime="20170919 15:41:58.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.475">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:41:58.474" status="PASS" endtime="20170919 15:41:58.475"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:41:58.476" status="PASS" endtime="20170919 15:41:58.679"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:58.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:41:58.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:58.475" status="PASS" endtime="20170919 15:41:58.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:58.679" status="PASS" endtime="20170919 15:41:58.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:58.680" status="PASS" endtime="20170919 15:41:58.681"></status>
</kw>
<status starttime="20170919 15:41:58.469" status="PASS" endtime="20170919 15:41:58.681"></status>
</kw>
<status starttime="20170919 15:41:58.469" status="PASS" endtime="20170919 15:41:58.681"></status>
</kw>
<status starttime="20170919 15:41:58.468" status="PASS" endtime="20170919 15:41:58.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.682">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:41:58.681" status="PASS" endtime="20170919 15:41:58.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.684">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:58.683" status="PASS" endtime="20170919 15:41:58.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.685">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:41:58.684" status="PASS" endtime="20170919 15:41:58.685"></status>
</kw>
<status starttime="20170919 15:41:58.684" status="PASS" endtime="20170919 15:41:58.685"></status>
</kw>
<status starttime="20170919 15:41:58.682" status="PASS" endtime="20170919 15:41:58.685"></status>
</kw>
<status starttime="20170919 15:41:58.682" status="PASS" endtime="20170919 15:41:58.685"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.747">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:41:58.747">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:58.685" status="PASS" endtime="20170919 15:41:58.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.749">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:58.748" status="PASS" endtime="20170919 15:41:58.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.750">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:41:58.749" status="PASS" endtime="20170919 15:41:58.750"></status>
</kw>
<status starttime="20170919 15:41:58.749" status="PASS" endtime="20170919 15:41:58.750"></status>
</kw>
<status starttime="20170919 15:41:58.748" status="PASS" endtime="20170919 15:41:58.750"></status>
</kw>
<status starttime="20170919 15:41:58.747" status="PASS" endtime="20170919 15:41:58.750"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:41:58.751">Delete All Sessions</msg>
<status starttime="20170919 15:41:58.751" status="PASS" endtime="20170919 15:41:58.751"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:58.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:41:58.467" status="PASS" endtime="20170919 15:41:58.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:41:58.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:41:58.751" status="PASS" endtime="20170919 15:41:58.752"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:41:58.752">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:41:58.752">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:41:58.752">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:41:58.752" status="PASS" endtime="20170919 15:41:58.753"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:58.753">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:41:58.466" status="PASS" endtime="20170919 15:41:58.753"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:41:58.753">${power_state} = Off</msg>
<status starttime="20170919 15:41:58.466" status="PASS" endtime="20170919 15:41:58.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:41:58.754">On != Off</msg>
<status starttime="20170919 15:41:58.753" status="FAIL" endtime="20170919 15:41:58.754"></status>
</kw>
<status starttime="20170919 15:41:58.465" status="FAIL" endtime="20170919 15:41:58.754"></status>
</kw>
<status starttime="20170919 15:41:58.464" status="FAIL" endtime="20170919 15:41:58.754"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:08.761">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:42:08.761" status="PASS" endtime="20170919 15:42:08.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:08.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:42:08.763" status="PASS" endtime="20170919 15:42:08.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:08.764">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:42:08.763" status="PASS" endtime="20170919 15:42:08.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:08.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:42:08.764" status="PASS" endtime="20170919 15:42:08.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:08.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:42:08.765" status="PASS" endtime="20170919 15:42:08.952"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:08.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:42:08.952">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:08.765" status="PASS" endtime="20170919 15:42:08.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:08.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:08.952" status="PASS" endtime="20170919 15:42:08.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:08.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:08.953" status="PASS" endtime="20170919 15:42:08.954"></status>
</kw>
<status starttime="20170919 15:42:08.760" status="PASS" endtime="20170919 15:42:08.954"></status>
</kw>
<status starttime="20170919 15:42:08.760" status="PASS" endtime="20170919 15:42:08.954"></status>
</kw>
<status starttime="20170919 15:42:08.759" status="PASS" endtime="20170919 15:42:08.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:08.955">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:42:08.954" status="PASS" endtime="20170919 15:42:08.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:08.957">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:08.956" status="PASS" endtime="20170919 15:42:08.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:08.958">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:08.958" status="PASS" endtime="20170919 15:42:08.958"></status>
</kw>
<status starttime="20170919 15:42:08.957" status="PASS" endtime="20170919 15:42:08.958"></status>
</kw>
<status starttime="20170919 15:42:08.956" status="PASS" endtime="20170919 15:42:08.958"></status>
</kw>
<status starttime="20170919 15:42:08.955" status="PASS" endtime="20170919 15:42:08.958"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:09.020">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:42:09.021">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:08.958" status="PASS" endtime="20170919 15:42:09.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:09.022">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:09.022" status="PASS" endtime="20170919 15:42:09.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:09.023">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:09.023" status="PASS" endtime="20170919 15:42:09.023"></status>
</kw>
<status starttime="20170919 15:42:09.023" status="PASS" endtime="20170919 15:42:09.024"></status>
</kw>
<status starttime="20170919 15:42:09.021" status="PASS" endtime="20170919 15:42:09.024"></status>
</kw>
<status starttime="20170919 15:42:09.021" status="PASS" endtime="20170919 15:42:09.024"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:42:09.024">Delete All Sessions</msg>
<status starttime="20170919 15:42:09.024" status="PASS" endtime="20170919 15:42:09.024"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:09.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:08.758" status="PASS" endtime="20170919 15:42:09.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:09.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:09.025" status="PASS" endtime="20170919 15:42:09.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:09.026">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:42:09.026">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:42:09.026">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:42:09.025" status="PASS" endtime="20170919 15:42:09.026"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:09.026">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:42:08.758" status="PASS" endtime="20170919 15:42:09.026"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:09.027">${power_state} = Off</msg>
<status starttime="20170919 15:42:08.757" status="PASS" endtime="20170919 15:42:09.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:42:09.027">On != Off</msg>
<status starttime="20170919 15:42:09.027" status="FAIL" endtime="20170919 15:42:09.027"></status>
</kw>
<status starttime="20170919 15:42:08.757" status="FAIL" endtime="20170919 15:42:09.028"></status>
</kw>
<status starttime="20170919 15:42:08.756" status="FAIL" endtime="20170919 15:42:09.028"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.033">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:42:19.033" status="PASS" endtime="20170919 15:42:19.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:42:19.034" status="PASS" endtime="20170919 15:42:19.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.035">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:42:19.034" status="PASS" endtime="20170919 15:42:19.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:42:19.035" status="PASS" endtime="20170919 15:42:19.036"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.222">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:42:19.036" status="PASS" endtime="20170919 15:42:19.222"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:19.222">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:42:19.222">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:19.036" status="PASS" endtime="20170919 15:42:19.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.223">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:19.223" status="PASS" endtime="20170919 15:42:19.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.224">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:19.223" status="PASS" endtime="20170919 15:42:19.224"></status>
</kw>
<status starttime="20170919 15:42:19.032" status="PASS" endtime="20170919 15:42:19.224"></status>
</kw>
<status starttime="20170919 15:42:19.031" status="PASS" endtime="20170919 15:42:19.224"></status>
</kw>
<status starttime="20170919 15:42:19.031" status="PASS" endtime="20170919 15:42:19.224"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.225">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:42:19.224" status="PASS" endtime="20170919 15:42:19.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.227">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:19.226" status="PASS" endtime="20170919 15:42:19.227"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.228">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:19.228" status="PASS" endtime="20170919 15:42:19.228"></status>
</kw>
<status starttime="20170919 15:42:19.227" status="PASS" endtime="20170919 15:42:19.228"></status>
</kw>
<status starttime="20170919 15:42:19.225" status="PASS" endtime="20170919 15:42:19.228"></status>
</kw>
<status starttime="20170919 15:42:19.225" status="PASS" endtime="20170919 15:42:19.228"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.309">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:42:19.309">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:19.229" status="PASS" endtime="20170919 15:42:19.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.311">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:19.311" status="PASS" endtime="20170919 15:42:19.311"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:19.312" status="PASS" endtime="20170919 15:42:19.317"></status>
</kw>
<status starttime="20170919 15:42:19.311" status="PASS" endtime="20170919 15:42:19.317"></status>
</kw>
<status starttime="20170919 15:42:19.310" status="PASS" endtime="20170919 15:42:19.317"></status>
</kw>
<status starttime="20170919 15:42:19.310" status="PASS" endtime="20170919 15:42:19.317"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:42:19.318">Delete All Sessions</msg>
<status starttime="20170919 15:42:19.318" status="PASS" endtime="20170919 15:42:19.318"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:19.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:19.030" status="PASS" endtime="20170919 15:42:19.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:19.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:19.318" status="PASS" endtime="20170919 15:42:19.319"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:19.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:42:19.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:42:19.319">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:42:19.319" status="PASS" endtime="20170919 15:42:19.320"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:19.320">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:42:19.030" status="PASS" endtime="20170919 15:42:19.320"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:19.320">${power_state} = Off</msg>
<status starttime="20170919 15:42:19.029" status="PASS" endtime="20170919 15:42:19.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:42:19.321">On != Off</msg>
<status starttime="20170919 15:42:19.320" status="FAIL" endtime="20170919 15:42:19.321"></status>
</kw>
<status starttime="20170919 15:42:19.029" status="FAIL" endtime="20170919 15:42:19.321"></status>
</kw>
<status starttime="20170919 15:42:19.028" status="FAIL" endtime="20170919 15:42:19.321"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.327">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:42:29.327" status="PASS" endtime="20170919 15:42:29.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.329">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:42:29.328" status="PASS" endtime="20170919 15:42:29.329"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.329">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:42:29.329" status="PASS" endtime="20170919 15:42:29.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.330">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:42:29.330" status="PASS" endtime="20170919 15:42:29.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.520">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:42:29.331" status="PASS" endtime="20170919 15:42:29.520"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:29.520">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:42:29.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:29.330" status="PASS" endtime="20170919 15:42:29.520"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.521">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:29.520" status="PASS" endtime="20170919 15:42:29.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:29.521" status="PASS" endtime="20170919 15:42:29.521"></status>
</kw>
<status starttime="20170919 15:42:29.326" status="PASS" endtime="20170919 15:42:29.521"></status>
</kw>
<status starttime="20170919 15:42:29.326" status="PASS" endtime="20170919 15:42:29.522"></status>
</kw>
<status starttime="20170919 15:42:29.324" status="PASS" endtime="20170919 15:42:29.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.522">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:42:29.522" status="PASS" endtime="20170919 15:42:29.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.524">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:29.524" status="PASS" endtime="20170919 15:42:29.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.525">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:29.525" status="PASS" endtime="20170919 15:42:29.525"></status>
</kw>
<status starttime="20170919 15:42:29.524" status="PASS" endtime="20170919 15:42:29.526"></status>
</kw>
<status starttime="20170919 15:42:29.523" status="PASS" endtime="20170919 15:42:29.526"></status>
</kw>
<status starttime="20170919 15:42:29.523" status="PASS" endtime="20170919 15:42:29.526"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.588">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:42:29.588">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:29.526" status="PASS" endtime="20170919 15:42:29.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.589">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:29.589" status="PASS" endtime="20170919 15:42:29.590"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.590">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:29.590" status="PASS" endtime="20170919 15:42:29.590"></status>
</kw>
<status starttime="20170919 15:42:29.590" status="PASS" endtime="20170919 15:42:29.591"></status>
</kw>
<status starttime="20170919 15:42:29.588" status="PASS" endtime="20170919 15:42:29.591"></status>
</kw>
<status starttime="20170919 15:42:29.588" status="PASS" endtime="20170919 15:42:29.591"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:42:29.591">Delete All Sessions</msg>
<status starttime="20170919 15:42:29.591" status="PASS" endtime="20170919 15:42:29.591"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:29.592">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:29.324" status="PASS" endtime="20170919 15:42:29.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:29.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:29.592" status="PASS" endtime="20170919 15:42:29.592"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:29.593">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:42:29.593">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:42:29.593">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:42:29.593" status="PASS" endtime="20170919 15:42:29.593"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:29.593">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:42:29.323" status="PASS" endtime="20170919 15:42:29.593"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:29.594">${power_state} = Off</msg>
<status starttime="20170919 15:42:29.323" status="PASS" endtime="20170919 15:42:29.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:42:29.594">On != Off</msg>
<status starttime="20170919 15:42:29.594" status="FAIL" endtime="20170919 15:42:29.594"></status>
</kw>
<status starttime="20170919 15:42:29.322" status="FAIL" endtime="20170919 15:42:29.595"></status>
</kw>
<status starttime="20170919 15:42:29.322" status="FAIL" endtime="20170919 15:42:29.595"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.600">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:42:39.600" status="PASS" endtime="20170919 15:42:39.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.601">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:42:39.601" status="PASS" endtime="20170919 15:42:39.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.602">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:42:39.602" status="PASS" endtime="20170919 15:42:39.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.603">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:42:39.602" status="PASS" endtime="20170919 15:42:39.603"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:42:39.603" status="PASS" endtime="20170919 15:42:39.800"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:39.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:42:39.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:39.603" status="PASS" endtime="20170919 15:42:39.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:39.800" status="PASS" endtime="20170919 15:42:39.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:39.801" status="PASS" endtime="20170919 15:42:39.801"></status>
</kw>
<status starttime="20170919 15:42:39.599" status="PASS" endtime="20170919 15:42:39.802"></status>
</kw>
<status starttime="20170919 15:42:39.599" status="PASS" endtime="20170919 15:42:39.802"></status>
</kw>
<status starttime="20170919 15:42:39.598" status="PASS" endtime="20170919 15:42:39.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.802">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:42:39.802" status="PASS" endtime="20170919 15:42:39.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.804">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:39.804" status="PASS" endtime="20170919 15:42:39.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.805">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:39.805" status="PASS" endtime="20170919 15:42:39.806"></status>
</kw>
<status starttime="20170919 15:42:39.805" status="PASS" endtime="20170919 15:42:39.806"></status>
</kw>
<status starttime="20170919 15:42:39.803" status="PASS" endtime="20170919 15:42:39.806"></status>
</kw>
<status starttime="20170919 15:42:39.803" status="PASS" endtime="20170919 15:42:39.806"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.868">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:42:39.868">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:39.806" status="PASS" endtime="20170919 15:42:39.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.870">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:39.870" status="PASS" endtime="20170919 15:42:39.870"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.871">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:39.871" status="PASS" endtime="20170919 15:42:39.871"></status>
</kw>
<status starttime="20170919 15:42:39.870" status="PASS" endtime="20170919 15:42:39.872"></status>
</kw>
<status starttime="20170919 15:42:39.869" status="PASS" endtime="20170919 15:42:39.872"></status>
</kw>
<status starttime="20170919 15:42:39.869" status="PASS" endtime="20170919 15:42:39.872"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:42:39.872">Delete All Sessions</msg>
<status starttime="20170919 15:42:39.872" status="PASS" endtime="20170919 15:42:39.872"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:39.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:39.597" status="PASS" endtime="20170919 15:42:39.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:39.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:39.873" status="PASS" endtime="20170919 15:42:39.873"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:39.874">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:42:39.874">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:42:39.874">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:42:39.873" status="PASS" endtime="20170919 15:42:39.874"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:39.874">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:42:39.597" status="PASS" endtime="20170919 15:42:39.874"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:39.875">${power_state} = Off</msg>
<status starttime="20170919 15:42:39.596" status="PASS" endtime="20170919 15:42:39.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:42:39.875">On != Off</msg>
<status starttime="20170919 15:42:39.875" status="FAIL" endtime="20170919 15:42:39.875"></status>
</kw>
<status starttime="20170919 15:42:39.596" status="FAIL" endtime="20170919 15:42:39.875"></status>
</kw>
<status starttime="20170919 15:42:39.595" status="FAIL" endtime="20170919 15:42:39.876"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:49.882">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:42:49.882" status="PASS" endtime="20170919 15:42:49.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:49.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:42:49.883" status="PASS" endtime="20170919 15:42:49.883"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:49.884">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:42:49.884" status="PASS" endtime="20170919 15:42:49.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:49.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:42:49.884" status="PASS" endtime="20170919 15:42:49.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:50.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:42:49.886" status="PASS" endtime="20170919 15:42:50.139"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:50.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:42:50.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:49.885" status="PASS" endtime="20170919 15:42:50.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:50.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:50.140" status="PASS" endtime="20170919 15:42:50.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:50.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:50.141" status="PASS" endtime="20170919 15:42:50.141"></status>
</kw>
<status starttime="20170919 15:42:49.881" status="PASS" endtime="20170919 15:42:50.141"></status>
</kw>
<status starttime="20170919 15:42:49.880" status="PASS" endtime="20170919 15:42:50.141"></status>
</kw>
<status starttime="20170919 15:42:49.879" status="PASS" endtime="20170919 15:42:50.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:50.142">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:42:50.142" status="PASS" endtime="20170919 15:42:50.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:50.145">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:50.144" status="PASS" endtime="20170919 15:42:50.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:50.147">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:42:50.146" status="PASS" endtime="20170919 15:42:50.147"></status>
</kw>
<status starttime="20170919 15:42:50.146" status="PASS" endtime="20170919 15:42:50.147"></status>
</kw>
<status starttime="20170919 15:42:50.143" status="PASS" endtime="20170919 15:42:50.147"></status>
</kw>
<status starttime="20170919 15:42:50.143" status="PASS" endtime="20170919 15:42:50.147"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:50.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:42:50.225">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:50.148" status="PASS" endtime="20170919 15:42:50.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:50.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:50.226" status="PASS" endtime="20170919 15:42:50.227"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:50.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:42:50.228" status="PASS" endtime="20170919 15:42:50.228"></status>
</kw>
<status starttime="20170919 15:42:50.227" status="PASS" endtime="20170919 15:42:50.228"></status>
</kw>
<status starttime="20170919 15:42:50.226" status="PASS" endtime="20170919 15:42:50.228"></status>
</kw>
<status starttime="20170919 15:42:50.225" status="PASS" endtime="20170919 15:42:50.228"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:42:50.229">Delete All Sessions</msg>
<status starttime="20170919 15:42:50.229" status="PASS" endtime="20170919 15:42:50.229"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:50.229">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:42:49.878" status="PASS" endtime="20170919 15:42:50.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:42:50.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:42:50.229" status="PASS" endtime="20170919 15:42:50.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:42:50.230">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:42:50.230">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:42:50.230">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:42:50.230" status="PASS" endtime="20170919 15:42:50.230"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:50.231">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:42:49.877" status="PASS" endtime="20170919 15:42:50.231"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:42:50.231">${power_state} = Off</msg>
<status starttime="20170919 15:42:49.877" status="PASS" endtime="20170919 15:42:50.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:42:50.232">On != Off</msg>
<status starttime="20170919 15:42:50.231" status="FAIL" endtime="20170919 15:42:50.232"></status>
</kw>
<status starttime="20170919 15:42:49.877" status="FAIL" endtime="20170919 15:42:50.232"></status>
</kw>
<status starttime="20170919 15:42:49.876" status="FAIL" endtime="20170919 15:42:50.232"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.238">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:43:00.237" status="PASS" endtime="20170919 15:43:00.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.239">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:43:00.238" status="PASS" endtime="20170919 15:43:00.239"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.239">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:43:00.239" status="PASS" endtime="20170919 15:43:00.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.240">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:43:00.240" status="PASS" endtime="20170919 15:43:00.240"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:43:00.241" status="PASS" endtime="20170919 15:43:00.434"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:00.435">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:43:00.435">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:00.240" status="PASS" endtime="20170919 15:43:00.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:00.435" status="PASS" endtime="20170919 15:43:00.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:00.436" status="PASS" endtime="20170919 15:43:00.436"></status>
</kw>
<status starttime="20170919 15:43:00.236" status="PASS" endtime="20170919 15:43:00.436"></status>
</kw>
<status starttime="20170919 15:43:00.236" status="PASS" endtime="20170919 15:43:00.436"></status>
</kw>
<status starttime="20170919 15:43:00.235" status="PASS" endtime="20170919 15:43:00.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.437">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:43:00.437" status="PASS" endtime="20170919 15:43:00.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.439">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:00.439" status="PASS" endtime="20170919 15:43:00.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.440">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:00.440" status="PASS" endtime="20170919 15:43:00.440"></status>
</kw>
<status starttime="20170919 15:43:00.440" status="PASS" endtime="20170919 15:43:00.441"></status>
</kw>
<status starttime="20170919 15:43:00.438" status="PASS" endtime="20170919 15:43:00.441"></status>
</kw>
<status starttime="20170919 15:43:00.437" status="PASS" endtime="20170919 15:43:00.441"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.546">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:43:00.547">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:00.441" status="PASS" endtime="20170919 15:43:00.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.548">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:00.548" status="PASS" endtime="20170919 15:43:00.548"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.550">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:00.549" status="PASS" endtime="20170919 15:43:00.550"></status>
</kw>
<status starttime="20170919 15:43:00.549" status="PASS" endtime="20170919 15:43:00.550"></status>
</kw>
<status starttime="20170919 15:43:00.547" status="PASS" endtime="20170919 15:43:00.550"></status>
</kw>
<status starttime="20170919 15:43:00.547" status="PASS" endtime="20170919 15:43:00.550"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:43:00.550">Delete All Sessions</msg>
<status starttime="20170919 15:43:00.550" status="PASS" endtime="20170919 15:43:00.551"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:00.551">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:00.235" status="PASS" endtime="20170919 15:43:00.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:00.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:00.551" status="PASS" endtime="20170919 15:43:00.551"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:00.552">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:43:00.552">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:43:00.552">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:43:00.552" status="PASS" endtime="20170919 15:43:00.552"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:00.553">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:43:00.234" status="PASS" endtime="20170919 15:43:00.553"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:00.553">${power_state} = Off</msg>
<status starttime="20170919 15:43:00.234" status="PASS" endtime="20170919 15:43:00.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:43:00.553">On != Off</msg>
<status starttime="20170919 15:43:00.553" status="FAIL" endtime="20170919 15:43:00.554"></status>
</kw>
<status starttime="20170919 15:43:00.233" status="FAIL" endtime="20170919 15:43:00.554"></status>
</kw>
<status starttime="20170919 15:43:00.233" status="FAIL" endtime="20170919 15:43:00.554"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.559">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:43:10.559" status="PASS" endtime="20170919 15:43:10.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.560">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:43:10.560" status="PASS" endtime="20170919 15:43:10.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.561">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:43:10.560" status="PASS" endtime="20170919 15:43:10.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.561">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:43:10.561" status="PASS" endtime="20170919 15:43:10.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.754">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:43:10.562" status="PASS" endtime="20170919 15:43:10.755"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:10.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:43:10.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:10.562" status="PASS" endtime="20170919 15:43:10.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.755">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:10.755" status="PASS" endtime="20170919 15:43:10.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:10.756" status="PASS" endtime="20170919 15:43:10.756"></status>
</kw>
<status starttime="20170919 15:43:10.558" status="PASS" endtime="20170919 15:43:10.756"></status>
</kw>
<status starttime="20170919 15:43:10.558" status="PASS" endtime="20170919 15:43:10.756"></status>
</kw>
<status starttime="20170919 15:43:10.557" status="PASS" endtime="20170919 15:43:10.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.757">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:43:10.757" status="PASS" endtime="20170919 15:43:10.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.759">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:10.759" status="PASS" endtime="20170919 15:43:10.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.760">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:10.760" status="PASS" endtime="20170919 15:43:10.760"></status>
</kw>
<status starttime="20170919 15:43:10.759" status="PASS" endtime="20170919 15:43:10.760"></status>
</kw>
<status starttime="20170919 15:43:10.758" status="PASS" endtime="20170919 15:43:10.761"></status>
</kw>
<status starttime="20170919 15:43:10.757" status="PASS" endtime="20170919 15:43:10.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.845">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:43:10.845">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:10.761" status="PASS" endtime="20170919 15:43:10.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.847">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:10.847" status="PASS" endtime="20170919 15:43:10.847"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.848">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:10.848" status="PASS" endtime="20170919 15:43:10.848"></status>
</kw>
<status starttime="20170919 15:43:10.847" status="PASS" endtime="20170919 15:43:10.848"></status>
</kw>
<status starttime="20170919 15:43:10.846" status="PASS" endtime="20170919 15:43:10.849"></status>
</kw>
<status starttime="20170919 15:43:10.846" status="PASS" endtime="20170919 15:43:10.849"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:43:10.849">Delete All Sessions</msg>
<status starttime="20170919 15:43:10.849" status="PASS" endtime="20170919 15:43:10.849"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:10.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:10.556" status="PASS" endtime="20170919 15:43:10.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:10.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:10.850" status="PASS" endtime="20170919 15:43:10.850"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:10.850">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:43:10.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:43:10.851">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:43:10.850" status="PASS" endtime="20170919 15:43:10.851"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:10.851">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:43:10.556" status="PASS" endtime="20170919 15:43:10.851"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:10.851">${power_state} = Off</msg>
<status starttime="20170919 15:43:10.555" status="PASS" endtime="20170919 15:43:10.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:43:10.852">On != Off</msg>
<status starttime="20170919 15:43:10.852" status="FAIL" endtime="20170919 15:43:10.852"></status>
</kw>
<status starttime="20170919 15:43:10.555" status="FAIL" endtime="20170919 15:43:10.852"></status>
</kw>
<status starttime="20170919 15:43:10.554" status="FAIL" endtime="20170919 15:43:10.852"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:20.858">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:43:20.857" status="PASS" endtime="20170919 15:43:20.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:20.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:43:20.858" status="PASS" endtime="20170919 15:43:20.859"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:20.860">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:43:20.859" status="PASS" endtime="20170919 15:43:20.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:20.860">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:43:20.860" status="PASS" endtime="20170919 15:43:20.860"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:21.057">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:43:20.861" status="PASS" endtime="20170919 15:43:21.057"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:21.057">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:43:21.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:20.861" status="PASS" endtime="20170919 15:43:21.057"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:21.058">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:21.058" status="PASS" endtime="20170919 15:43:21.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:21.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:21.058" status="PASS" endtime="20170919 15:43:21.059"></status>
</kw>
<status starttime="20170919 15:43:20.856" status="PASS" endtime="20170919 15:43:21.059"></status>
</kw>
<status starttime="20170919 15:43:20.856" status="PASS" endtime="20170919 15:43:21.059"></status>
</kw>
<status starttime="20170919 15:43:20.855" status="PASS" endtime="20170919 15:43:21.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:21.060">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:43:21.059" status="PASS" endtime="20170919 15:43:21.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:21.062">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:21.061" status="PASS" endtime="20170919 15:43:21.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:21.063">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:21.063" status="PASS" endtime="20170919 15:43:21.063"></status>
</kw>
<status starttime="20170919 15:43:21.062" status="PASS" endtime="20170919 15:43:21.063"></status>
</kw>
<status starttime="20170919 15:43:21.060" status="PASS" endtime="20170919 15:43:21.063"></status>
</kw>
<status starttime="20170919 15:43:21.060" status="PASS" endtime="20170919 15:43:21.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:21.125">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:43:21.125">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:21.063" status="PASS" endtime="20170919 15:43:21.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:21.127">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:21.127" status="PASS" endtime="20170919 15:43:21.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:21.128">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:21.128" status="PASS" endtime="20170919 15:43:21.129"></status>
</kw>
<status starttime="20170919 15:43:21.127" status="PASS" endtime="20170919 15:43:21.129"></status>
</kw>
<status starttime="20170919 15:43:21.126" status="PASS" endtime="20170919 15:43:21.129"></status>
</kw>
<status starttime="20170919 15:43:21.126" status="PASS" endtime="20170919 15:43:21.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:43:21.129">Delete All Sessions</msg>
<status starttime="20170919 15:43:21.129" status="PASS" endtime="20170919 15:43:21.129"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:21.130">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:20.855" status="PASS" endtime="20170919 15:43:21.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:21.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:21.130" status="PASS" endtime="20170919 15:43:21.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:21.131">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:43:21.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:43:21.131">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:43:21.131" status="PASS" endtime="20170919 15:43:21.131"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:21.131">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:43:20.854" status="PASS" endtime="20170919 15:43:21.131"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:21.132">${power_state} = Off</msg>
<status starttime="20170919 15:43:20.854" status="PASS" endtime="20170919 15:43:21.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:43:21.132">On != Off</msg>
<status starttime="20170919 15:43:21.132" status="FAIL" endtime="20170919 15:43:21.132"></status>
</kw>
<status starttime="20170919 15:43:20.853" status="FAIL" endtime="20170919 15:43:21.133"></status>
</kw>
<status starttime="20170919 15:43:20.853" status="FAIL" endtime="20170919 15:43:21.133"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.138">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:43:31.138" status="PASS" endtime="20170919 15:43:31.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.139">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:43:31.139" status="PASS" endtime="20170919 15:43:31.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.140">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:43:31.139" status="PASS" endtime="20170919 15:43:31.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:43:31.140" status="PASS" endtime="20170919 15:43:31.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:43:31.141" status="PASS" endtime="20170919 15:43:31.336"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:31.336">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:43:31.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:31.141" status="PASS" endtime="20170919 15:43:31.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:31.337" status="PASS" endtime="20170919 15:43:31.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:31.337" status="PASS" endtime="20170919 15:43:31.338"></status>
</kw>
<status starttime="20170919 15:43:31.137" status="PASS" endtime="20170919 15:43:31.338"></status>
</kw>
<status starttime="20170919 15:43:31.137" status="PASS" endtime="20170919 15:43:31.338"></status>
</kw>
<status starttime="20170919 15:43:31.136" status="PASS" endtime="20170919 15:43:31.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.339">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:43:31.338" status="PASS" endtime="20170919 15:43:31.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.341">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:31.340" status="PASS" endtime="20170919 15:43:31.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.342">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:31.342" status="PASS" endtime="20170919 15:43:31.342"></status>
</kw>
<status starttime="20170919 15:43:31.341" status="PASS" endtime="20170919 15:43:31.342"></status>
</kw>
<status starttime="20170919 15:43:31.340" status="PASS" endtime="20170919 15:43:31.342"></status>
</kw>
<status starttime="20170919 15:43:31.339" status="PASS" endtime="20170919 15:43:31.342"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.425">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:43:31.425">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:31.343" status="PASS" endtime="20170919 15:43:31.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.427">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:31.426" status="PASS" endtime="20170919 15:43:31.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.428">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:31.427" status="PASS" endtime="20170919 15:43:31.428"></status>
</kw>
<status starttime="20170919 15:43:31.427" status="PASS" endtime="20170919 15:43:31.428"></status>
</kw>
<status starttime="20170919 15:43:31.426" status="PASS" endtime="20170919 15:43:31.428"></status>
</kw>
<status starttime="20170919 15:43:31.425" status="PASS" endtime="20170919 15:43:31.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:43:31.428">Delete All Sessions</msg>
<status starttime="20170919 15:43:31.428" status="PASS" endtime="20170919 15:43:31.429"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:31.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:31.135" status="PASS" endtime="20170919 15:43:31.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:31.429">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:31.429" status="PASS" endtime="20170919 15:43:31.429"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:31.430">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:43:31.430">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:43:31.430">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:43:31.430" status="PASS" endtime="20170919 15:43:31.430"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:31.430">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:43:31.135" status="PASS" endtime="20170919 15:43:31.431"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:31.431">${power_state} = Off</msg>
<status starttime="20170919 15:43:31.134" status="PASS" endtime="20170919 15:43:31.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:43:31.431">On != Off</msg>
<status starttime="20170919 15:43:31.431" status="FAIL" endtime="20170919 15:43:31.432"></status>
</kw>
<status starttime="20170919 15:43:31.134" status="FAIL" endtime="20170919 15:43:31.432"></status>
</kw>
<status starttime="20170919 15:43:31.133" status="FAIL" endtime="20170919 15:43:31.432"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.439">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:43:41.438" status="PASS" endtime="20170919 15:43:41.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.440">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:43:41.440" status="PASS" endtime="20170919 15:43:41.440"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.441">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:43:41.441" status="PASS" endtime="20170919 15:43:41.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.442">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:43:41.442" status="PASS" endtime="20170919 15:43:41.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:43:41.443" status="PASS" endtime="20170919 15:43:41.619"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:41.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:43:41.619">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:41.443" status="PASS" endtime="20170919 15:43:41.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:41.620" status="PASS" endtime="20170919 15:43:41.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:41.620" status="PASS" endtime="20170919 15:43:41.621"></status>
</kw>
<status starttime="20170919 15:43:41.437" status="PASS" endtime="20170919 15:43:41.621"></status>
</kw>
<status starttime="20170919 15:43:41.437" status="PASS" endtime="20170919 15:43:41.621"></status>
</kw>
<status starttime="20170919 15:43:41.435" status="PASS" endtime="20170919 15:43:41.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.622">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:43:41.622" status="PASS" endtime="20170919 15:43:41.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.624">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:41.623" status="PASS" endtime="20170919 15:43:41.624"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.625">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:41.625" status="PASS" endtime="20170919 15:43:41.625"></status>
</kw>
<status starttime="20170919 15:43:41.624" status="PASS" endtime="20170919 15:43:41.625"></status>
</kw>
<status starttime="20170919 15:43:41.623" status="PASS" endtime="20170919 15:43:41.625"></status>
</kw>
<status starttime="20170919 15:43:41.622" status="PASS" endtime="20170919 15:43:41.625"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.760">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:43:41.760">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:41.626" status="PASS" endtime="20170919 15:43:41.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.762">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:41.762" status="PASS" endtime="20170919 15:43:41.762"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.766">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:41.763" status="PASS" endtime="20170919 15:43:41.767"></status>
</kw>
<status starttime="20170919 15:43:41.762" status="PASS" endtime="20170919 15:43:41.767"></status>
</kw>
<status starttime="20170919 15:43:41.761" status="PASS" endtime="20170919 15:43:41.767"></status>
</kw>
<status starttime="20170919 15:43:41.761" status="PASS" endtime="20170919 15:43:41.767"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:43:41.767">Delete All Sessions</msg>
<status starttime="20170919 15:43:41.767" status="PASS" endtime="20170919 15:43:41.768"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:41.768">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:41.435" status="PASS" endtime="20170919 15:43:41.768"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:41.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:41.768" status="PASS" endtime="20170919 15:43:41.769"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:41.769">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:43:41.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:43:41.769">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:43:41.769" status="PASS" endtime="20170919 15:43:41.769"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:41.770">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:43:41.434" status="PASS" endtime="20170919 15:43:41.770"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:41.770">${power_state} = Off</msg>
<status starttime="20170919 15:43:41.434" status="PASS" endtime="20170919 15:43:41.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:43:41.771">On != Off</msg>
<status starttime="20170919 15:43:41.770" status="FAIL" endtime="20170919 15:43:41.771"></status>
</kw>
<status starttime="20170919 15:43:41.433" status="FAIL" endtime="20170919 15:43:41.771"></status>
</kw>
<status starttime="20170919 15:43:41.433" status="FAIL" endtime="20170919 15:43:41.771"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:51.776">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:43:51.776" status="PASS" endtime="20170919 15:43:51.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:51.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:43:51.777" status="PASS" endtime="20170919 15:43:51.777"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:51.778">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:43:51.777" status="PASS" endtime="20170919 15:43:51.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:51.779">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:43:51.778" status="PASS" endtime="20170919 15:43:51.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:51.967">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:43:51.779" status="PASS" endtime="20170919 15:43:51.967"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:51.967">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:43:51.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:51.779" status="PASS" endtime="20170919 15:43:51.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:51.968">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:51.968" status="PASS" endtime="20170919 15:43:51.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:51.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:51.968" status="PASS" endtime="20170919 15:43:51.969"></status>
</kw>
<status starttime="20170919 15:43:51.775" status="PASS" endtime="20170919 15:43:51.969"></status>
</kw>
<status starttime="20170919 15:43:51.775" status="PASS" endtime="20170919 15:43:51.969"></status>
</kw>
<status starttime="20170919 15:43:51.774" status="PASS" endtime="20170919 15:43:51.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:51.970">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:43:51.969" status="PASS" endtime="20170919 15:43:51.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:51.972">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:51.971" status="PASS" endtime="20170919 15:43:51.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:51.973">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:43:51.972" status="PASS" endtime="20170919 15:43:51.973"></status>
</kw>
<status starttime="20170919 15:43:51.972" status="PASS" endtime="20170919 15:43:51.973"></status>
</kw>
<status starttime="20170919 15:43:51.970" status="PASS" endtime="20170919 15:43:51.973"></status>
</kw>
<status starttime="20170919 15:43:51.970" status="PASS" endtime="20170919 15:43:51.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:52.046">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:43:52.047">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:51.973" status="PASS" endtime="20170919 15:43:52.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:52.049">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:52.048" status="PASS" endtime="20170919 15:43:52.049"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:52.050">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:43:52.049" status="PASS" endtime="20170919 15:43:52.050"></status>
</kw>
<status starttime="20170919 15:43:52.049" status="PASS" endtime="20170919 15:43:52.050"></status>
</kw>
<status starttime="20170919 15:43:52.048" status="PASS" endtime="20170919 15:43:52.050"></status>
</kw>
<status starttime="20170919 15:43:52.047" status="PASS" endtime="20170919 15:43:52.050"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:43:52.050">Delete All Sessions</msg>
<status starttime="20170919 15:43:52.050" status="PASS" endtime="20170919 15:43:52.050"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:52.051">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:43:51.774" status="PASS" endtime="20170919 15:43:52.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:43:52.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:43:52.051" status="PASS" endtime="20170919 15:43:52.051"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:43:52.052">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:43:52.052">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:43:52.052">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:43:52.052" status="PASS" endtime="20170919 15:43:52.052"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:52.052">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:43:51.773" status="PASS" endtime="20170919 15:43:52.052"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:43:52.053">${power_state} = Off</msg>
<status starttime="20170919 15:43:51.773" status="PASS" endtime="20170919 15:43:52.053"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:43:52.053">On != Off</msg>
<status starttime="20170919 15:43:52.053" status="FAIL" endtime="20170919 15:43:52.053"></status>
</kw>
<status starttime="20170919 15:43:51.772" status="FAIL" endtime="20170919 15:43:52.054"></status>
</kw>
<status starttime="20170919 15:43:51.772" status="FAIL" endtime="20170919 15:43:52.054"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.059">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:44:02.059" status="PASS" endtime="20170919 15:44:02.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.060">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:44:02.060" status="PASS" endtime="20170919 15:44:02.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.061">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:44:02.061" status="PASS" endtime="20170919 15:44:02.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.062">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:44:02.061" status="PASS" endtime="20170919 15:44:02.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:44:02.062" status="PASS" endtime="20170919 15:44:02.258"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:02.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:44:02.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:02.062" status="PASS" endtime="20170919 15:44:02.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:02.258" status="PASS" endtime="20170919 15:44:02.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:02.259" status="PASS" endtime="20170919 15:44:02.259"></status>
</kw>
<status starttime="20170919 15:44:02.058" status="PASS" endtime="20170919 15:44:02.259"></status>
</kw>
<status starttime="20170919 15:44:02.058" status="PASS" endtime="20170919 15:44:02.260"></status>
</kw>
<status starttime="20170919 15:44:02.057" status="PASS" endtime="20170919 15:44:02.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.260">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:44:02.260" status="PASS" endtime="20170919 15:44:02.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.262">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:02.262" status="PASS" endtime="20170919 15:44:02.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.263">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:02.263" status="PASS" endtime="20170919 15:44:02.263"></status>
</kw>
<status starttime="20170919 15:44:02.263" status="PASS" endtime="20170919 15:44:02.264"></status>
</kw>
<status starttime="20170919 15:44:02.261" status="PASS" endtime="20170919 15:44:02.264"></status>
</kw>
<status starttime="20170919 15:44:02.261" status="PASS" endtime="20170919 15:44:02.264"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.351">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:44:02.351">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:02.264" status="PASS" endtime="20170919 15:44:02.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.353">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:02.353" status="PASS" endtime="20170919 15:44:02.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.354">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:02.354" status="PASS" endtime="20170919 15:44:02.354"></status>
</kw>
<status starttime="20170919 15:44:02.353" status="PASS" endtime="20170919 15:44:02.355"></status>
</kw>
<status starttime="20170919 15:44:02.352" status="PASS" endtime="20170919 15:44:02.355"></status>
</kw>
<status starttime="20170919 15:44:02.352" status="PASS" endtime="20170919 15:44:02.355"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:44:02.355">Delete All Sessions</msg>
<status starttime="20170919 15:44:02.355" status="PASS" endtime="20170919 15:44:02.355"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:02.355">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:02.056" status="PASS" endtime="20170919 15:44:02.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:02.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:02.356" status="PASS" endtime="20170919 15:44:02.356"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:02.357">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:44:02.357">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:44:02.357">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:44:02.356" status="PASS" endtime="20170919 15:44:02.357"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:02.357">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:44:02.056" status="PASS" endtime="20170919 15:44:02.357"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:02.357">${power_state} = Off</msg>
<status starttime="20170919 15:44:02.055" status="PASS" endtime="20170919 15:44:02.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:44:02.358">On != Off</msg>
<status starttime="20170919 15:44:02.358" status="FAIL" endtime="20170919 15:44:02.358"></status>
</kw>
<status starttime="20170919 15:44:02.055" status="FAIL" endtime="20170919 15:44:02.358"></status>
</kw>
<status starttime="20170919 15:44:02.054" status="FAIL" endtime="20170919 15:44:02.359"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.366">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:44:12.366" status="PASS" endtime="20170919 15:44:12.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.367">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:44:12.367" status="PASS" endtime="20170919 15:44:12.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.368">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:44:12.367" status="PASS" endtime="20170919 15:44:12.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.368">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:44:12.368" status="PASS" endtime="20170919 15:44:12.368"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.570">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:44:12.369" status="PASS" endtime="20170919 15:44:12.570"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:12.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:44:12.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:12.369" status="PASS" endtime="20170919 15:44:12.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.571">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:12.571" status="PASS" endtime="20170919 15:44:12.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:12.572" status="PASS" endtime="20170919 15:44:12.572"></status>
</kw>
<status starttime="20170919 15:44:12.365" status="PASS" endtime="20170919 15:44:12.572"></status>
</kw>
<status starttime="20170919 15:44:12.365" status="PASS" endtime="20170919 15:44:12.572"></status>
</kw>
<status starttime="20170919 15:44:12.364" status="PASS" endtime="20170919 15:44:12.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.573">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:44:12.573" status="PASS" endtime="20170919 15:44:12.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.575">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:12.574" status="PASS" endtime="20170919 15:44:12.575"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.576">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:12.576" status="PASS" endtime="20170919 15:44:12.576"></status>
</kw>
<status starttime="20170919 15:44:12.575" status="PASS" endtime="20170919 15:44:12.576"></status>
</kw>
<status starttime="20170919 15:44:12.574" status="PASS" endtime="20170919 15:44:12.577"></status>
</kw>
<status starttime="20170919 15:44:12.573" status="PASS" endtime="20170919 15:44:12.577"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.654">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:44:12.654">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:12.577" status="PASS" endtime="20170919 15:44:12.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.656">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:12.655" status="PASS" endtime="20170919 15:44:12.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.657">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:12.657" status="PASS" endtime="20170919 15:44:12.657"></status>
</kw>
<status starttime="20170919 15:44:12.656" status="PASS" endtime="20170919 15:44:12.657"></status>
</kw>
<status starttime="20170919 15:44:12.655" status="PASS" endtime="20170919 15:44:12.657"></status>
</kw>
<status starttime="20170919 15:44:12.654" status="PASS" endtime="20170919 15:44:12.657"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:44:12.658">Delete All Sessions</msg>
<status starttime="20170919 15:44:12.657" status="PASS" endtime="20170919 15:44:12.658"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:12.658">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:12.363" status="PASS" endtime="20170919 15:44:12.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:12.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:12.658" status="PASS" endtime="20170919 15:44:12.659"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:12.659">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:44:12.659">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:44:12.660">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:44:12.659" status="PASS" endtime="20170919 15:44:12.660"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:12.660">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:44:12.362" status="PASS" endtime="20170919 15:44:12.660"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:12.660">${power_state} = Off</msg>
<status starttime="20170919 15:44:12.362" status="PASS" endtime="20170919 15:44:12.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:44:12.661">On != Off</msg>
<status starttime="20170919 15:44:12.660" status="FAIL" endtime="20170919 15:44:12.661"></status>
</kw>
<status starttime="20170919 15:44:12.361" status="FAIL" endtime="20170919 15:44:12.661"></status>
</kw>
<status starttime="20170919 15:44:12.361" status="FAIL" endtime="20170919 15:44:12.661"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.667">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:44:22.667" status="PASS" endtime="20170919 15:44:22.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:44:22.668" status="PASS" endtime="20170919 15:44:22.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.669">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:44:22.668" status="PASS" endtime="20170919 15:44:22.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.670">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:44:22.669" status="PASS" endtime="20170919 15:44:22.670"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.867">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:44:22.670" status="PASS" endtime="20170919 15:44:22.867"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:22.867">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:44:22.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:22.670" status="PASS" endtime="20170919 15:44:22.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.868">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:22.867" status="PASS" endtime="20170919 15:44:22.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:22.868" status="PASS" endtime="20170919 15:44:22.868"></status>
</kw>
<status starttime="20170919 15:44:22.666" status="PASS" endtime="20170919 15:44:22.869"></status>
</kw>
<status starttime="20170919 15:44:22.665" status="PASS" endtime="20170919 15:44:22.869"></status>
</kw>
<status starttime="20170919 15:44:22.665" status="PASS" endtime="20170919 15:44:22.869"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.869">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:44:22.869" status="PASS" endtime="20170919 15:44:22.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.872">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:22.871" status="PASS" endtime="20170919 15:44:22.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.873">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:22.872" status="PASS" endtime="20170919 15:44:22.873"></status>
</kw>
<status starttime="20170919 15:44:22.872" status="PASS" endtime="20170919 15:44:22.873"></status>
</kw>
<status starttime="20170919 15:44:22.870" status="PASS" endtime="20170919 15:44:22.873"></status>
</kw>
<status starttime="20170919 15:44:22.870" status="PASS" endtime="20170919 15:44:22.873"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.957">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:44:22.957">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:22.873" status="PASS" endtime="20170919 15:44:22.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.959">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:22.959" status="PASS" endtime="20170919 15:44:22.959"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.961">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:22.960" status="PASS" endtime="20170919 15:44:22.961"></status>
</kw>
<status starttime="20170919 15:44:22.960" status="PASS" endtime="20170919 15:44:22.961"></status>
</kw>
<status starttime="20170919 15:44:22.958" status="PASS" endtime="20170919 15:44:22.961"></status>
</kw>
<status starttime="20170919 15:44:22.958" status="PASS" endtime="20170919 15:44:22.961"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:44:22.961">Delete All Sessions</msg>
<status starttime="20170919 15:44:22.961" status="PASS" endtime="20170919 15:44:22.962"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:22.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:22.664" status="PASS" endtime="20170919 15:44:22.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:22.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:22.962" status="PASS" endtime="20170919 15:44:22.962"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:22.963">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:44:22.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:44:22.963">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:44:22.963" status="PASS" endtime="20170919 15:44:22.963"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:22.963">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:44:22.663" status="PASS" endtime="20170919 15:44:22.964"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:22.964">${power_state} = Off</msg>
<status starttime="20170919 15:44:22.663" status="PASS" endtime="20170919 15:44:22.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:44:22.964">On != Off</msg>
<status starttime="20170919 15:44:22.964" status="FAIL" endtime="20170919 15:44:22.965"></status>
</kw>
<status starttime="20170919 15:44:22.663" status="FAIL" endtime="20170919 15:44:22.965"></status>
</kw>
<status starttime="20170919 15:44:22.662" status="FAIL" endtime="20170919 15:44:22.965"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:32.970">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:44:32.970" status="PASS" endtime="20170919 15:44:32.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:32.971">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:44:32.971" status="PASS" endtime="20170919 15:44:32.971"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:32.972">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:44:32.972" status="PASS" endtime="20170919 15:44:32.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:32.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:44:32.972" status="PASS" endtime="20170919 15:44:32.973"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:33.182">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:44:32.973" status="PASS" endtime="20170919 15:44:33.182"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:33.182">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:44:33.182">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:32.973" status="PASS" endtime="20170919 15:44:33.183"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:33.183">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:33.183" status="PASS" endtime="20170919 15:44:33.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:33.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:33.184" status="PASS" endtime="20170919 15:44:33.184"></status>
</kw>
<status starttime="20170919 15:44:32.969" status="PASS" endtime="20170919 15:44:33.184"></status>
</kw>
<status starttime="20170919 15:44:32.969" status="PASS" endtime="20170919 15:44:33.184"></status>
</kw>
<status starttime="20170919 15:44:32.968" status="PASS" endtime="20170919 15:44:33.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:33.185">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:44:33.185" status="PASS" endtime="20170919 15:44:33.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:33.187">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:33.186" status="PASS" endtime="20170919 15:44:33.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:33.188">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:33.188" status="PASS" endtime="20170919 15:44:33.188"></status>
</kw>
<status starttime="20170919 15:44:33.187" status="PASS" endtime="20170919 15:44:33.188"></status>
</kw>
<status starttime="20170919 15:44:33.186" status="PASS" endtime="20170919 15:44:33.188"></status>
</kw>
<status starttime="20170919 15:44:33.185" status="PASS" endtime="20170919 15:44:33.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:33.263">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:44:33.263">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:33.189" status="PASS" endtime="20170919 15:44:33.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:33.265">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:33.264" status="PASS" endtime="20170919 15:44:33.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:33.266">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:33.265" status="PASS" endtime="20170919 15:44:33.266"></status>
</kw>
<status starttime="20170919 15:44:33.265" status="PASS" endtime="20170919 15:44:33.266"></status>
</kw>
<status starttime="20170919 15:44:33.264" status="PASS" endtime="20170919 15:44:33.266"></status>
</kw>
<status starttime="20170919 15:44:33.263" status="PASS" endtime="20170919 15:44:33.266"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:44:33.266">Delete All Sessions</msg>
<status starttime="20170919 15:44:33.266" status="PASS" endtime="20170919 15:44:33.266"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:33.267">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:32.967" status="PASS" endtime="20170919 15:44:33.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:33.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:33.267" status="PASS" endtime="20170919 15:44:33.267"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:33.268">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:44:33.268">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:44:33.268">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:44:33.268" status="PASS" endtime="20170919 15:44:33.268"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:33.268">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:44:32.967" status="PASS" endtime="20170919 15:44:33.268"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:33.269">${power_state} = Off</msg>
<status starttime="20170919 15:44:32.966" status="PASS" endtime="20170919 15:44:33.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:44:33.269">On != Off</msg>
<status starttime="20170919 15:44:33.269" status="FAIL" endtime="20170919 15:44:33.269"></status>
</kw>
<status starttime="20170919 15:44:32.966" status="FAIL" endtime="20170919 15:44:33.270"></status>
</kw>
<status starttime="20170919 15:44:32.965" status="FAIL" endtime="20170919 15:44:33.270"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.275">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:44:43.275" status="PASS" endtime="20170919 15:44:43.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:44:43.276" status="PASS" endtime="20170919 15:44:43.276"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.277">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:44:43.276" status="PASS" endtime="20170919 15:44:43.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.277">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:44:43.277" status="PASS" endtime="20170919 15:44:43.278"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:44:43.278" status="PASS" endtime="20170919 15:44:43.464"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:43.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:44:43.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:43.278" status="PASS" endtime="20170919 15:44:43.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.465">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:43.464" status="PASS" endtime="20170919 15:44:43.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:43.465" status="PASS" endtime="20170919 15:44:43.466"></status>
</kw>
<status starttime="20170919 15:44:43.274" status="PASS" endtime="20170919 15:44:43.466"></status>
</kw>
<status starttime="20170919 15:44:43.273" status="PASS" endtime="20170919 15:44:43.466"></status>
</kw>
<status starttime="20170919 15:44:43.273" status="PASS" endtime="20170919 15:44:43.466"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.466">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:44:43.466" status="PASS" endtime="20170919 15:44:43.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.469">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:43.468" status="PASS" endtime="20170919 15:44:43.469"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.470">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:43.469" status="PASS" endtime="20170919 15:44:43.470"></status>
</kw>
<status starttime="20170919 15:44:43.469" status="PASS" endtime="20170919 15:44:43.470"></status>
</kw>
<status starttime="20170919 15:44:43.467" status="PASS" endtime="20170919 15:44:43.470"></status>
</kw>
<status starttime="20170919 15:44:43.467" status="PASS" endtime="20170919 15:44:43.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.541">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:44:43.541">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:43.470" status="PASS" endtime="20170919 15:44:43.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.543">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:43.543" status="PASS" endtime="20170919 15:44:43.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.545">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:43.544" status="PASS" endtime="20170919 15:44:43.545"></status>
</kw>
<status starttime="20170919 15:44:43.543" status="PASS" endtime="20170919 15:44:43.545"></status>
</kw>
<status starttime="20170919 15:44:43.542" status="PASS" endtime="20170919 15:44:43.545"></status>
</kw>
<status starttime="20170919 15:44:43.542" status="PASS" endtime="20170919 15:44:43.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:44:43.545">Delete All Sessions</msg>
<status starttime="20170919 15:44:43.545" status="PASS" endtime="20170919 15:44:43.545"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:43.546">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:43.272" status="PASS" endtime="20170919 15:44:43.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:43.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:43.546" status="PASS" endtime="20170919 15:44:43.547"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:43.547">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:44:43.548">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:44:43.548">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:44:43.547" status="PASS" endtime="20170919 15:44:43.548"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:43.548">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:44:43.272" status="PASS" endtime="20170919 15:44:43.548"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:43.549">${power_state} = Off</msg>
<status starttime="20170919 15:44:43.271" status="PASS" endtime="20170919 15:44:43.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:44:43.550">On != Off</msg>
<status starttime="20170919 15:44:43.549" status="FAIL" endtime="20170919 15:44:43.550"></status>
</kw>
<status starttime="20170919 15:44:43.271" status="FAIL" endtime="20170919 15:44:43.550"></status>
</kw>
<status starttime="20170919 15:44:43.270" status="FAIL" endtime="20170919 15:44:43.550"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.556">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:44:53.555" status="PASS" endtime="20170919 15:44:53.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.557">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:44:53.556" status="PASS" endtime="20170919 15:44:53.557"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.557">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:44:53.557" status="PASS" endtime="20170919 15:44:53.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.558">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:44:53.558" status="PASS" endtime="20170919 15:44:53.558"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:44:53.559" status="PASS" endtime="20170919 15:44:53.747"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:53.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:44:53.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:53.558" status="PASS" endtime="20170919 15:44:53.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:53.747" status="PASS" endtime="20170919 15:44:53.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:53.748" status="PASS" endtime="20170919 15:44:53.749"></status>
</kw>
<status starttime="20170919 15:44:53.555" status="PASS" endtime="20170919 15:44:53.749"></status>
</kw>
<status starttime="20170919 15:44:53.554" status="PASS" endtime="20170919 15:44:53.749"></status>
</kw>
<status starttime="20170919 15:44:53.554" status="PASS" endtime="20170919 15:44:53.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.750">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:44:53.749" status="PASS" endtime="20170919 15:44:53.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.752">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:53.751" status="PASS" endtime="20170919 15:44:53.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.752">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:44:53.752" status="PASS" endtime="20170919 15:44:53.753"></status>
</kw>
<status starttime="20170919 15:44:53.752" status="PASS" endtime="20170919 15:44:53.753"></status>
</kw>
<status starttime="20170919 15:44:53.750" status="PASS" endtime="20170919 15:44:53.753"></status>
</kw>
<status starttime="20170919 15:44:53.750" status="PASS" endtime="20170919 15:44:53.753"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:44:53.823">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:53.753" status="PASS" endtime="20170919 15:44:53.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:53.825" status="PASS" endtime="20170919 15:44:53.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:44:53.826" status="PASS" endtime="20170919 15:44:53.826"></status>
</kw>
<status starttime="20170919 15:44:53.825" status="PASS" endtime="20170919 15:44:53.826"></status>
</kw>
<status starttime="20170919 15:44:53.824" status="PASS" endtime="20170919 15:44:53.826"></status>
</kw>
<status starttime="20170919 15:44:53.824" status="PASS" endtime="20170919 15:44:53.827"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:44:53.827">Delete All Sessions</msg>
<status starttime="20170919 15:44:53.827" status="PASS" endtime="20170919 15:44:53.827"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:53.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:44:53.553" status="PASS" endtime="20170919 15:44:53.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:44:53.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:44:53.827" status="PASS" endtime="20170919 15:44:53.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:44:53.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:44:53.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:44:53.829">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:44:53.828" status="PASS" endtime="20170919 15:44:53.829"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:53.829">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:44:53.552" status="PASS" endtime="20170919 15:44:53.829"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:44:53.829">${power_state} = Off</msg>
<status starttime="20170919 15:44:53.552" status="PASS" endtime="20170919 15:44:53.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:44:53.830">On != Off</msg>
<status starttime="20170919 15:44:53.830" status="FAIL" endtime="20170919 15:44:53.830"></status>
</kw>
<status starttime="20170919 15:44:53.552" status="FAIL" endtime="20170919 15:44:53.830"></status>
</kw>
<status starttime="20170919 15:44:53.551" status="FAIL" endtime="20170919 15:44:53.830"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:03.836">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:03.836" status="PASS" endtime="20170919 15:45:03.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:03.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:03.837" status="PASS" endtime="20170919 15:45:03.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:03.838">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:03.837" status="PASS" endtime="20170919 15:45:03.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:03.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:03.838" status="PASS" endtime="20170919 15:45:03.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:04.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:03.839" status="PASS" endtime="20170919 15:45:04.034"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:04.034">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:04.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:03.838" status="PASS" endtime="20170919 15:45:04.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:04.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:04.035" status="PASS" endtime="20170919 15:45:04.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:04.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:04.036" status="PASS" endtime="20170919 15:45:04.036"></status>
</kw>
<status starttime="20170919 15:45:03.835" status="PASS" endtime="20170919 15:45:04.036"></status>
</kw>
<status starttime="20170919 15:45:03.834" status="PASS" endtime="20170919 15:45:04.036"></status>
</kw>
<status starttime="20170919 15:45:03.833" status="PASS" endtime="20170919 15:45:04.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:04.037">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:45:04.037" status="PASS" endtime="20170919 15:45:04.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:04.039">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:04.038" status="PASS" endtime="20170919 15:45:04.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:04.040">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:04.040" status="PASS" endtime="20170919 15:45:04.040"></status>
</kw>
<status starttime="20170919 15:45:04.039" status="PASS" endtime="20170919 15:45:04.040"></status>
</kw>
<status starttime="20170919 15:45:04.038" status="PASS" endtime="20170919 15:45:04.040"></status>
</kw>
<status starttime="20170919 15:45:04.037" status="PASS" endtime="20170919 15:45:04.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:04.103">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:04.103">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:04.041" status="PASS" endtime="20170919 15:45:04.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:04.105">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:04.104" status="PASS" endtime="20170919 15:45:04.105"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:04.109">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:04.105" status="PASS" endtime="20170919 15:45:04.109"></status>
</kw>
<status starttime="20170919 15:45:04.105" status="PASS" endtime="20170919 15:45:04.109"></status>
</kw>
<status starttime="20170919 15:45:04.104" status="PASS" endtime="20170919 15:45:04.109"></status>
</kw>
<status starttime="20170919 15:45:04.103" status="PASS" endtime="20170919 15:45:04.109"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:04.110">Delete All Sessions</msg>
<status starttime="20170919 15:45:04.110" status="PASS" endtime="20170919 15:45:04.110"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:04.110">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:03.833" status="PASS" endtime="20170919 15:45:04.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:04.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:04.111" status="PASS" endtime="20170919 15:45:04.111"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:04.112">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:04.112">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:45:04.112">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:45:04.111" status="PASS" endtime="20170919 15:45:04.112"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:04.112">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:45:03.832" status="PASS" endtime="20170919 15:45:04.112"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:04.112">${power_state} = Off</msg>
<status starttime="20170919 15:45:03.832" status="PASS" endtime="20170919 15:45:04.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:45:04.113">On != Off</msg>
<status starttime="20170919 15:45:04.113" status="FAIL" endtime="20170919 15:45:04.113"></status>
</kw>
<status starttime="20170919 15:45:03.831" status="FAIL" endtime="20170919 15:45:04.113"></status>
</kw>
<status starttime="20170919 15:45:03.831" status="FAIL" endtime="20170919 15:45:04.113"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.118">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:14.118" status="PASS" endtime="20170919 15:45:14.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:14.119" status="PASS" endtime="20170919 15:45:14.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:14.120" status="PASS" endtime="20170919 15:45:14.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:14.120" status="PASS" endtime="20170919 15:45:14.121"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:14.122" status="PASS" endtime="20170919 15:45:14.349"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:14.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:14.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:14.121" status="PASS" endtime="20170919 15:45:14.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:14.350" status="PASS" endtime="20170919 15:45:14.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:14.350" status="PASS" endtime="20170919 15:45:14.351"></status>
</kw>
<status starttime="20170919 15:45:14.118" status="PASS" endtime="20170919 15:45:14.351"></status>
</kw>
<status starttime="20170919 15:45:14.117" status="PASS" endtime="20170919 15:45:14.351"></status>
</kw>
<status starttime="20170919 15:45:14.117" status="PASS" endtime="20170919 15:45:14.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.352">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:45:14.351" status="PASS" endtime="20170919 15:45:14.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.354">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:14.353" status="PASS" endtime="20170919 15:45:14.354"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.355">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:14.355" status="PASS" endtime="20170919 15:45:14.355"></status>
</kw>
<status starttime="20170919 15:45:14.354" status="PASS" endtime="20170919 15:45:14.355"></status>
</kw>
<status starttime="20170919 15:45:14.352" status="PASS" endtime="20170919 15:45:14.355"></status>
</kw>
<status starttime="20170919 15:45:14.352" status="PASS" endtime="20170919 15:45:14.355"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.434">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:14.434">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:14.355" status="PASS" endtime="20170919 15:45:14.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.436">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:14.436" status="PASS" endtime="20170919 15:45:14.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.437">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:14.437" status="PASS" endtime="20170919 15:45:14.437"></status>
</kw>
<status starttime="20170919 15:45:14.436" status="PASS" endtime="20170919 15:45:14.437"></status>
</kw>
<status starttime="20170919 15:45:14.435" status="PASS" endtime="20170919 15:45:14.437"></status>
</kw>
<status starttime="20170919 15:45:14.435" status="PASS" endtime="20170919 15:45:14.437"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:14.438">Delete All Sessions</msg>
<status starttime="20170919 15:45:14.438" status="PASS" endtime="20170919 15:45:14.438"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:14.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:14.116" status="PASS" endtime="20170919 15:45:14.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:14.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:14.438" status="PASS" endtime="20170919 15:45:14.439"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:14.439">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:14.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:45:14.440">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:45:14.439" status="PASS" endtime="20170919 15:45:14.440"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:14.440">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:45:14.115" status="PASS" endtime="20170919 15:45:14.440"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:14.440">${power_state} = Off</msg>
<status starttime="20170919 15:45:14.115" status="PASS" endtime="20170919 15:45:14.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:45:14.441">On != Off</msg>
<status starttime="20170919 15:45:14.441" status="FAIL" endtime="20170919 15:45:14.441"></status>
</kw>
<status starttime="20170919 15:45:14.115" status="FAIL" endtime="20170919 15:45:14.441"></status>
</kw>
<status starttime="20170919 15:45:14.114" status="FAIL" endtime="20170919 15:45:14.441"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.447">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:24.446" status="PASS" endtime="20170919 15:45:24.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:24.448" status="PASS" endtime="20170919 15:45:24.448"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.448">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:24.448" status="PASS" endtime="20170919 15:45:24.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:24.449" status="PASS" endtime="20170919 15:45:24.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.681">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:24.450" status="PASS" endtime="20170919 15:45:24.681"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:24.681">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:24.681">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:24.449" status="PASS" endtime="20170919 15:45:24.681"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.682">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:24.682" status="PASS" endtime="20170919 15:45:24.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:24.682" status="PASS" endtime="20170919 15:45:24.683"></status>
</kw>
<status starttime="20170919 15:45:24.445" status="PASS" endtime="20170919 15:45:24.683"></status>
</kw>
<status starttime="20170919 15:45:24.445" status="PASS" endtime="20170919 15:45:24.683"></status>
</kw>
<status starttime="20170919 15:45:24.444" status="PASS" endtime="20170919 15:45:24.683"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.684">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:45:24.683" status="PASS" endtime="20170919 15:45:24.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.686">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:24.685" status="PASS" endtime="20170919 15:45:24.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.687">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:24.687" status="PASS" endtime="20170919 15:45:24.687"></status>
</kw>
<status starttime="20170919 15:45:24.686" status="PASS" endtime="20170919 15:45:24.687"></status>
</kw>
<status starttime="20170919 15:45:24.685" status="PASS" endtime="20170919 15:45:24.687"></status>
</kw>
<status starttime="20170919 15:45:24.684" status="PASS" endtime="20170919 15:45:24.687"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.749">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:24.749">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:24.688" status="PASS" endtime="20170919 15:45:24.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.751">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:24.750" status="PASS" endtime="20170919 15:45:24.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.752">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:24.752" status="PASS" endtime="20170919 15:45:24.752"></status>
</kw>
<status starttime="20170919 15:45:24.751" status="PASS" endtime="20170919 15:45:24.752"></status>
</kw>
<status starttime="20170919 15:45:24.750" status="PASS" endtime="20170919 15:45:24.753"></status>
</kw>
<status starttime="20170919 15:45:24.749" status="PASS" endtime="20170919 15:45:24.753"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:24.753">Delete All Sessions</msg>
<status starttime="20170919 15:45:24.753" status="PASS" endtime="20170919 15:45:24.753"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:24.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:24.444" status="PASS" endtime="20170919 15:45:24.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:24.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:24.754" status="PASS" endtime="20170919 15:45:24.754"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:24.755">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:24.755">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:45:24.755">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:45:24.754" status="PASS" endtime="20170919 15:45:24.755"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:24.755">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:45:24.443" status="PASS" endtime="20170919 15:45:24.755"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:24.755">${power_state} = Off</msg>
<status starttime="20170919 15:45:24.443" status="PASS" endtime="20170919 15:45:24.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:45:24.756">On != Off</msg>
<status starttime="20170919 15:45:24.756" status="FAIL" endtime="20170919 15:45:24.756"></status>
</kw>
<status starttime="20170919 15:45:24.442" status="FAIL" endtime="20170919 15:45:24.756"></status>
</kw>
<status starttime="20170919 15:45:24.442" status="FAIL" endtime="20170919 15:45:24.756"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:34.762">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:34.762" status="PASS" endtime="20170919 15:45:34.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:34.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:34.763" status="PASS" endtime="20170919 15:45:34.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:34.764">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:34.763" status="PASS" endtime="20170919 15:45:34.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:34.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:34.764" status="PASS" endtime="20170919 15:45:34.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:34.955">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:34.765" status="PASS" endtime="20170919 15:45:34.955"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:34.955">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:34.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:34.765" status="PASS" endtime="20170919 15:45:34.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:34.957">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:34.956" status="PASS" endtime="20170919 15:45:34.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:34.958">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:34.957" status="PASS" endtime="20170919 15:45:34.958"></status>
</kw>
<status starttime="20170919 15:45:34.761" status="PASS" endtime="20170919 15:45:34.958"></status>
</kw>
<status starttime="20170919 15:45:34.761" status="PASS" endtime="20170919 15:45:34.958"></status>
</kw>
<status starttime="20170919 15:45:34.760" status="PASS" endtime="20170919 15:45:34.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:34.959">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170919 15:45:34.958" status="PASS" endtime="20170919 15:45:34.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:34.961">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:34.960" status="PASS" endtime="20170919 15:45:34.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:34.962">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:34.962" status="PASS" endtime="20170919 15:45:34.962"></status>
</kw>
<status starttime="20170919 15:45:34.961" status="PASS" endtime="20170919 15:45:34.962"></status>
</kw>
<status starttime="20170919 15:45:34.960" status="PASS" endtime="20170919 15:45:34.962"></status>
</kw>
<status starttime="20170919 15:45:34.959" status="PASS" endtime="20170919 15:45:34.962"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.024">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:35.024">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:34.963" status="PASS" endtime="20170919 15:45:35.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.026">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:35.025" status="PASS" endtime="20170919 15:45:35.026"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.027">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:35.026" status="PASS" endtime="20170919 15:45:35.027"></status>
</kw>
<status starttime="20170919 15:45:35.026" status="PASS" endtime="20170919 15:45:35.027"></status>
</kw>
<status starttime="20170919 15:45:35.025" status="PASS" endtime="20170919 15:45:35.027"></status>
</kw>
<status starttime="20170919 15:45:35.024" status="PASS" endtime="20170919 15:45:35.027"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:35.027">Delete All Sessions</msg>
<status starttime="20170919 15:45:35.027" status="PASS" endtime="20170919 15:45:35.027"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.028">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:34.759" status="PASS" endtime="20170919 15:45:35.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:35.028" status="PASS" endtime="20170919 15:45:35.028"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.029">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:35.029">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:45:35.029">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:45:35.029" status="PASS" endtime="20170919 15:45:35.029"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.029">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170919 15:45:34.759" status="PASS" endtime="20170919 15:45:35.029"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.030">${power_state} = Off</msg>
<status starttime="20170919 15:45:34.758" status="PASS" endtime="20170919 15:45:35.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:45:35.030">On != Off</msg>
<status starttime="20170919 15:45:35.030" status="FAIL" endtime="20170919 15:45:35.031"></status>
</kw>
<status starttime="20170919 15:45:34.757" status="FAIL" endtime="20170919 15:45:35.031"></status>
</kw>
<status starttime="20170919 15:45:34.757" status="FAIL" endtime="20170919 15:45:35.031"></status>
</kw>
<msg level="FAIL" timestamp="20170919 15:45:35.031">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status starttime="20170919 15:35:30.764" status="FAIL" endtime="20170919 15:45:35.031"></status>
</kw>
<status starttime="20170919 15:35:29.510" status="FAIL" endtime="20170919 15:45:35.031"></status>
</kw>
<status starttime="20170919 15:35:21.753" status="FAIL" endtime="20170919 15:45:35.031"></status>
</kw>
<status starttime="20170919 15:35:21.753" status="FAIL" endtime="20170919 15:45:35.032"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.037">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:35.037" status="PASS" endtime="20170919 15:45:35.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:35.038" status="PASS" endtime="20170919 15:45:35.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.039">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:35.039" status="PASS" endtime="20170919 15:45:35.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:35.039" status="PASS" endtime="20170919 15:45:35.040"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:35.040" status="PASS" endtime="20170919 15:45:35.258"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:35.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:35.040" status="PASS" endtime="20170919 15:45:35.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.258">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:35.258" status="PASS" endtime="20170919 15:45:35.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:35.259" status="PASS" endtime="20170919 15:45:35.260"></status>
</kw>
<status starttime="20170919 15:45:35.036" status="PASS" endtime="20170919 15:45:35.260"></status>
</kw>
<status starttime="20170919 15:45:35.036" status="PASS" endtime="20170919 15:45:35.260"></status>
</kw>
<status starttime="20170919 15:45:35.035" status="PASS" endtime="20170919 15:45:35.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.261">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170919 15:45:35.260" status="PASS" endtime="20170919 15:45:35.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.264">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:35.263" status="PASS" endtime="20170919 15:45:35.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.265">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170919 15:45:35.265" status="PASS" endtime="20170919 15:45:35.266"></status>
</kw>
<status starttime="20170919 15:45:35.264" status="PASS" endtime="20170919 15:45:35.266"></status>
</kw>
<status starttime="20170919 15:45:35.262" status="PASS" endtime="20170919 15:45:35.266"></status>
</kw>
<status starttime="20170919 15:45:35.261" status="PASS" endtime="20170919 15:45:35.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.366">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:35.366">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:35.266" status="PASS" endtime="20170919 15:45:35.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.368">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:35.368" status="PASS" endtime="20170919 15:45:35.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.370">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170919 15:45:35.369" status="PASS" endtime="20170919 15:45:35.370"></status>
</kw>
<status starttime="20170919 15:45:35.369" status="PASS" endtime="20170919 15:45:35.370"></status>
</kw>
<status starttime="20170919 15:45:35.367" status="PASS" endtime="20170919 15:45:35.370"></status>
</kw>
<status starttime="20170919 15:45:35.366" status="PASS" endtime="20170919 15:45:35.370"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:35.371">Delete All Sessions</msg>
<status starttime="20170919 15:45:35.370" status="PASS" endtime="20170919 15:45:35.371"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.371">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:35.034" status="PASS" endtime="20170919 15:45:35.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:35.371" status="PASS" endtime="20170919 15:45:35.372"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.372">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:35.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170919 15:45:35.372">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170919 15:45:35.372" status="PASS" endtime="20170919 15:45:35.372"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.373">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170919 15:45:35.034" status="PASS" endtime="20170919 15:45:35.373"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.373">${host_state} = Off</msg>
<status starttime="20170919 15:45:35.033" status="PASS" endtime="20170919 15:45:35.373"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170919 15:45:35.374">Off != Quiesced</msg>
<status starttime="20170919 15:45:35.374" status="FAIL" endtime="20170919 15:45:35.374"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.374">${status} = False</msg>
<status starttime="20170919 15:45:35.373" status="PASS" endtime="20170919 15:45:35.374"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:35.374">${status} = False</msg>
<status starttime="20170919 15:45:35.033" status="PASS" endtime="20170919 15:45:35.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:35.405">Length is 12</msg>
<status starttime="20170919 15:45:35.405" status="PASS" endtime="20170919 15:45:35.405"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:35.411">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:45:38.418">${RC} = 0</msg>
<msg level="INFO" timestamp="20170919 15:45:38.418">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.718 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.38 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170919 15:45:35.405" status="PASS" endtime="20170919 15:45:38.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.422">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.718 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.38 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.558 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=2.78 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.558/1.361/2.784/0.878 ms</msg>
<status starttime="20170919 15:45:38.421" status="PASS" endtime="20170919 15:45:38.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170919 15:45:38.422" status="PASS" endtime="20170919 15:45:38.423"></status>
</kw>
<status starttime="20170919 15:45:35.404" status="PASS" endtime="20170919 15:45:38.423"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.440">${cur_time} = 2017-09-19 15:45:38:439605</msg>
<status starttime="20170919 15:45:38.439" status="PASS" endtime="20170919 15:45:38.440"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.440">${cur_time} = 20170919154538439605</msg>
<status starttime="20170919 15:45:38.440" status="PASS" endtime="20170919 15:45:38.441"></status>
</kw>
<status starttime="20170919 15:45:38.439" status="PASS" endtime="20170919 15:45:38.441"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.441">${FFDC_TIME} = 20170919154538439605</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.453">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170919 15:45:38.452" status="PASS" endtime="20170919 15:45:38.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.453">${suite_name} = 20170919154538439605_TestsTestBasicPoweron</msg>
<status starttime="20170919 15:45:38.453" status="PASS" endtime="20170919 15:45:38.453"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.454">${test_name} = PowerOnTest</msg>
<status starttime="20170919 15:45:38.454" status="PASS" endtime="20170919 15:45:38.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.455">${test_name} = 20170919154538439605_PowerOnTest</msg>
<status starttime="20170919 15:45:38.454" status="PASS" endtime="20170919 15:45:38.455"></status>
</kw>
<status starttime="20170919 15:45:38.452" status="PASS" endtime="20170919 15:45:38.455"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.455">${FFDC_DIR_PATH} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170919 15:45:38.455">${FFDC_PREFIX} = 20170919154538439605_</msg>
<msg level="INFO" timestamp="20170919 15:45:38.484">${LOG_PREFIX} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.485" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.485" status="PASS" endtime="20170919 15:45:38.485"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.492">${FFDC_FILE_PATH} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.519" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.519" status="PASS" endtime="20170919 15:45:38.520"></status>
</kw>
<status starttime="20170919 15:45:38.518" status="PASS" endtime="20170919 15:45:38.520"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.522" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.522" status="PASS" endtime="20170919 15:45:38.522"></status>
</kw>
<status starttime="20170919 15:45:38.520" status="PASS" endtime="20170919 15:45:38.522"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.524" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.523" status="PASS" endtime="20170919 15:45:38.524"></status>
</kw>
<status starttime="20170919 15:45:38.523" status="PASS" endtime="20170919 15:45:38.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.525" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.525" status="PASS" endtime="20170919 15:45:38.525"></status>
</kw>
<status starttime="20170919 15:45:38.524" status="PASS" endtime="20170919 15:45:38.525"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.526" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.526" status="PASS" endtime="20170919 15:45:38.526"></status>
</kw>
<status starttime="20170919 15:45:38.525" status="PASS" endtime="20170919 15:45:38.527"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.528" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.527" status="PASS" endtime="20170919 15:45:38.528"></status>
</kw>
<status starttime="20170919 15:45:38.527" status="PASS" endtime="20170919 15:45:38.528"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.531" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.530" status="PASS" endtime="20170919 15:45:38.531"></status>
</kw>
<status starttime="20170919 15:45:38.529" status="PASS" endtime="20170919 15:45:38.531"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.532" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.532" status="PASS" endtime="20170919 15:45:38.532"></status>
</kw>
<status starttime="20170919 15:45:38.531" status="PASS" endtime="20170919 15:45:38.532"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.534" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.533" status="PASS" endtime="20170919 15:45:38.534"></status>
</kw>
<status starttime="20170919 15:45:38.533" status="PASS" endtime="20170919 15:45:38.534"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.536" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.535" status="PASS" endtime="20170919 15:45:38.536"></status>
</kw>
<status starttime="20170919 15:45:38.534" status="PASS" endtime="20170919 15:45:38.536"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.537" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.537" status="PASS" endtime="20170919 15:45:38.537"></status>
</kw>
<status starttime="20170919 15:45:38.536" status="PASS" endtime="20170919 15:45:38.537"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.538" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.538" status="PASS" endtime="20170919 15:45:38.538"></status>
</kw>
<status starttime="20170919 15:45:38.537" status="PASS" endtime="20170919 15:45:38.538"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.540" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.539" status="PASS" endtime="20170919 15:45:38.540"></status>
</kw>
<status starttime="20170919 15:45:38.539" status="PASS" endtime="20170919 15:45:38.540"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.581">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:38.582">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170919 15:45:38.659">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170919 15:45:38.673">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170919 15:45:38.674">${stderr} = </msg>
<msg level="INFO" timestamp="20170919 15:45:38.674">${rc} = 0</msg>
<status starttime="20170919 15:45:38.541" status="PASS" endtime="20170919 15:45:38.674"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.674">Length is 0</msg>
<status starttime="20170919 15:45:38.674" status="PASS" endtime="20170919 15:45:38.674"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.675">Length is 11</msg>
<status starttime="20170919 15:45:38.675" status="PASS" endtime="20170919 15:45:38.675"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.675">${model_name} = Witherspoon</msg>
<status starttime="20170919 15:45:38.540" status="PASS" endtime="20170919 15:45:38.675"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.676" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.676" status="PASS" endtime="20170919 15:45:38.676"></status>
</kw>
<status starttime="20170919 15:45:38.675" status="PASS" endtime="20170919 15:45:38.677"></status>
</kw>
<status starttime="20170919 15:45:38.534" status="PASS" endtime="20170919 15:45:38.677"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.678" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.677" status="PASS" endtime="20170919 15:45:38.678"></status>
</kw>
<status starttime="20170919 15:45:38.677" status="PASS" endtime="20170919 15:45:38.678"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.679">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170919 15:45:38.678" status="PASS" endtime="20170919 15:45:38.679"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.680" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.680" status="PASS" endtime="20170919 15:45:38.680"></status>
</kw>
<status starttime="20170919 15:45:38.679" status="PASS" endtime="20170919 15:45:38.680"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.681" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.681" status="PASS" endtime="20170919 15:45:38.681"></status>
</kw>
<status starttime="20170919 15:45:38.680" status="PASS" endtime="20170919 15:45:38.682"></status>
</kw>
<status starttime="20170919 15:45:38.679" status="PASS" endtime="20170919 15:45:38.682"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.683" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.683" status="PASS" endtime="20170919 15:45:38.683"></status>
</kw>
<status starttime="20170919 15:45:38.682" status="PASS" endtime="20170919 15:45:38.683"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.687" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.686" status="PASS" endtime="20170919 15:45:38.687"></status>
</kw>
<status starttime="20170919 15:45:38.683" status="PASS" endtime="20170919 15:45:38.687"></status>
</kw>
<status starttime="20170919 15:45:38.682" status="PASS" endtime="20170919 15:45:38.687"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.689" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.688" status="PASS" endtime="20170919 15:45:38.689"></status>
</kw>
<status starttime="20170919 15:45:38.687" status="PASS" endtime="20170919 15:45:38.689"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.690" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.689" status="PASS" endtime="20170919 15:45:38.690"></status>
</kw>
<status starttime="20170919 15:45:38.689" status="PASS" endtime="20170919 15:45:38.690"></status>
</kw>
<status starttime="20170919 15:45:38.687" status="PASS" endtime="20170919 15:45:38.690"></status>
</kw>
<status starttime="20170919 15:45:38.679" status="PASS" endtime="20170919 15:45:38.690"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.691" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:38.691" status="PASS" endtime="20170919 15:45:38.691"></status>
</kw>
<status starttime="20170919 15:45:38.690" status="PASS" endtime="20170919 15:45:38.691"></status>
</kw>
<status starttime="20170919 15:45:38.518" status="PASS" endtime="20170919 15:45:38.692"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.701">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170919 15:45:38.701" status="PASS" endtime="20170919 15:45:38.701"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.702">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('Sys Inventory Files', 'System Inventory Files...</msg>
<status starttime="20170919 15:45:38.702" status="PASS" endtime="20170919 15:45:38.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170919 15:45:38.703" status="PASS" endtime="20170919 15:45:38.704"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.704">@{ffdc_function_list} = [ OS FFDC | SEL Log | FFDC Generic Report | Core Files | Sys Inventory Files | Get Request FFDC | BMC Specific Files ]</msg>
<status starttime="20170919 15:45:38.703" status="PASS" endtime="20170919 15:45:38.704"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:38.706" status="PASS" endtime="20170919 15:45:38.706"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.706">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:38.706">${ret_values} = None</msg>
<status starttime="20170919 15:45:38.705" status="PASS" endtime="20170919 15:45:38.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:38.706" status="PASS" endtime="20170919 15:45:38.707"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.748">Returning from the enclosing user keyword.</msg>
<status starttime="20170919 15:45:38.748" status="PASS" endtime="20170919 15:45:38.751"></status>
</kw>
<status starttime="20170919 15:45:38.747" status="PASS" endtime="20170919 15:45:38.751"></status>
</kw>
<status starttime="20170919 15:45:38.707" status="PASS" endtime="20170919 15:45:38.751"></status>
</kw>
<status starttime="20170919 15:45:38.704" status="PASS" endtime="20170919 15:45:38.751"></status>
</kw>
<status starttime="20170919 15:45:38.704" status="PASS" endtime="20170919 15:45:38.751"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:38.754" status="PASS" endtime="20170919 15:45:38.754"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:38.754">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:38.754">${ret_values} = None</msg>
<status starttime="20170919 15:45:38.753" status="PASS" endtime="20170919 15:45:38.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:38.755" status="PASS" endtime="20170919 15:45:38.755"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:38.799">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:38.799" status="PASS" endtime="20170919 15:45:38.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:38.800" status="PASS" endtime="20170919 15:45:38.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.801">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:38.800" status="PASS" endtime="20170919 15:45:38.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:38.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:38.801" status="PASS" endtime="20170919 15:45:38.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.035">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:38.802" status="PASS" endtime="20170919 15:45:39.035"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.035">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:39.035">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:38.802" status="PASS" endtime="20170919 15:45:39.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.036">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:39.035" status="PASS" endtime="20170919 15:45:39.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:39.036" status="PASS" endtime="20170919 15:45:39.037"></status>
</kw>
<status starttime="20170919 15:45:38.798" status="PASS" endtime="20170919 15:45:39.037"></status>
</kw>
<status starttime="20170919 15:45:38.798" status="PASS" endtime="20170919 15:45:39.037"></status>
</kw>
<status starttime="20170919 15:45:38.796" status="PASS" endtime="20170919 15:45:39.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.038">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170919 15:45:39.037" status="PASS" endtime="20170919 15:45:39.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:39.038" status="PASS" endtime="20170919 15:45:39.038"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.092">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:39.092">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170919 15:45:39.039" status="PASS" endtime="20170919 15:45:39.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:39.092" status="PASS" endtime="20170919 15:45:39.093"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:39.093">Delete All Sessions</msg>
<status starttime="20170919 15:45:39.093" status="PASS" endtime="20170919 15:45:39.093"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.094">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170919 15:45:38.795" status="PASS" endtime="20170919 15:45:39.094"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170919 15:45:39.095">404 != 200</msg>
<status starttime="20170919 15:45:39.094" status="FAIL" endtime="20170919 15:45:39.095"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.095">${status} = False</msg>
<status starttime="20170919 15:45:39.094" status="PASS" endtime="20170919 15:45:39.095"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.096">Returning from the enclosing user keyword.</msg>
<status starttime="20170919 15:45:39.095" status="PASS" endtime="20170919 15:45:39.096"></status>
</kw>
<status starttime="20170919 15:45:38.795" status="PASS" endtime="20170919 15:45:39.096"></status>
</kw>
<status starttime="20170919 15:45:38.756" status="PASS" endtime="20170919 15:45:39.096"></status>
</kw>
<status starttime="20170919 15:45:38.752" status="PASS" endtime="20170919 15:45:39.096"></status>
</kw>
<status starttime="20170919 15:45:38.752" status="PASS" endtime="20170919 15:45:39.096"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:39.098" status="PASS" endtime="20170919 15:45:39.098"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.098">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:39.098">${ret_values} = None</msg>
<status starttime="20170919 15:45:39.097" status="PASS" endtime="20170919 15:45:39.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:39.098" status="PASS" endtime="20170919 15:45:39.099"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.138">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170919 15:45:39.138" status="PASS" endtime="20170919 15:45:39.139"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.140">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170919 15:45:39.139" status="PASS" endtime="20170919 15:45:39.140"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.148">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170919 15:45:39.140" status="PASS" endtime="20170919 15:45:39.148"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.152" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.152" status="PASS" endtime="20170919 15:45:39.152"></status>
</kw>
<status starttime="20170919 15:45:39.151" status="PASS" endtime="20170919 15:45:39.152"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.154" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.153" status="PASS" endtime="20170919 15:45:39.154"></status>
</kw>
<status starttime="20170919 15:45:39.153" status="PASS" endtime="20170919 15:45:39.154"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.155" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.155" status="PASS" endtime="20170919 15:45:39.155"></status>
</kw>
<status starttime="20170919 15:45:39.154" status="PASS" endtime="20170919 15:45:39.155"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.156" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.156" status="PASS" endtime="20170919 15:45:39.156"></status>
</kw>
<status starttime="20170919 15:45:39.155" status="PASS" endtime="20170919 15:45:39.156"></status>
</kw>
<status starttime="20170919 15:45:39.150" status="PASS" endtime="20170919 15:45:39.157"></status>
</kw>
<status starttime="20170919 15:45:39.150" status="PASS" endtime="20170919 15:45:39.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.158">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status starttime="20170919 15:45:39.157" status="PASS" endtime="20170919 15:45:39.158"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.274">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:39.275">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170919 15:45:39.352">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:39.208" status="PASS" endtime="20170919 15:45:39.352"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:39.352">${ret_values} = (u'20170919150238', u'', 0)</msg>
<status starttime="20170919 15:45:39.158" status="PASS" endtime="20170919 15:45:39.352"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.353">${stdout} = 20170919150238</msg>
<status starttime="20170919 15:45:39.353" status="PASS" endtime="20170919 15:45:39.353"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.353">${stderr} = </msg>
<status starttime="20170919 15:45:39.353" status="PASS" endtime="20170919 15:45:39.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.361" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.361" status="PASS" endtime="20170919 15:45:39.361"></status>
</kw>
<status starttime="20170919 15:45:39.360" status="PASS" endtime="20170919 15:45:39.361"></status>
</kw>
<status starttime="20170919 15:45:39.354" status="PASS" endtime="20170919 15:45:39.362"></status>
</kw>
<status starttime="20170919 15:45:39.149" status="PASS" endtime="20170919 15:45:39.362"></status>
</kw>
<status starttime="20170919 15:45:39.148" status="PASS" endtime="20170919 15:45:39.362"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.365" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.365" status="PASS" endtime="20170919 15:45:39.365"></status>
</kw>
<status starttime="20170919 15:45:39.364" status="PASS" endtime="20170919 15:45:39.366"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.367" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.367" status="PASS" endtime="20170919 15:45:39.367"></status>
</kw>
<status starttime="20170919 15:45:39.366" status="PASS" endtime="20170919 15:45:39.367"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.369" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.368" status="PASS" endtime="20170919 15:45:39.369"></status>
</kw>
<status starttime="20170919 15:45:39.368" status="PASS" endtime="20170919 15:45:39.369"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.370" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.370" status="PASS" endtime="20170919 15:45:39.370"></status>
</kw>
<status starttime="20170919 15:45:39.369" status="PASS" endtime="20170919 15:45:39.370"></status>
</kw>
<status starttime="20170919 15:45:39.363" status="PASS" endtime="20170919 15:45:39.370"></status>
</kw>
<status starttime="20170919 15:45:39.363" status="PASS" endtime="20170919 15:45:39.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.371">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170919 15:45:39.371" status="PASS" endtime="20170919 15:45:39.371"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.486">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:39.487">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170919 15:45:39.563">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:39.420" status="PASS" endtime="20170919 15:45:39.563"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.563">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:39.563">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-8"\nVERSION_ID="v1.99.10-8-gd4b6b24"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status starttime="20170919 15:45:39.371" status="PASS" endtime="20170919 15:45:39.563"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.564">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-8"
VERSION_ID="v1.99.10-8-gd4b6b24"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status starttime="20170919 15:45:39.563" status="PASS" endtime="20170919 15:45:39.564"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.565">${stderr} = </msg>
<status starttime="20170919 15:45:39.564" status="PASS" endtime="20170919 15:45:39.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.575" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.575" status="PASS" endtime="20170919 15:45:39.575"></status>
</kw>
<status starttime="20170919 15:45:39.574" status="PASS" endtime="20170919 15:45:39.575"></status>
</kw>
<status starttime="20170919 15:45:39.565" status="PASS" endtime="20170919 15:45:39.576"></status>
</kw>
<status starttime="20170919 15:45:39.362" status="PASS" endtime="20170919 15:45:39.576"></status>
</kw>
<status starttime="20170919 15:45:39.362" status="PASS" endtime="20170919 15:45:39.576"></status>
</kw>
<status starttime="20170919 15:45:39.148" status="PASS" endtime="20170919 15:45:39.576"></status>
</kw>
<status starttime="20170919 15:45:39.139" status="PASS" endtime="20170919 15:45:39.576"></status>
</kw>
<status starttime="20170919 15:45:39.139" status="PASS" endtime="20170919 15:45:39.576"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.577">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170919 15:45:39.577" status="PASS" endtime="20170919 15:45:39.577"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.578">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170919 15:45:39.577" status="PASS" endtime="20170919 15:45:39.578"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.581" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.581" status="PASS" endtime="20170919 15:45:39.581"></status>
</kw>
<status starttime="20170919 15:45:39.580" status="PASS" endtime="20170919 15:45:39.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.582" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.582" status="PASS" endtime="20170919 15:45:39.582"></status>
</kw>
<status starttime="20170919 15:45:39.581" status="PASS" endtime="20170919 15:45:39.583"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.584" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.583" status="PASS" endtime="20170919 15:45:39.584"></status>
</kw>
<status starttime="20170919 15:45:39.583" status="PASS" endtime="20170919 15:45:39.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.585" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.585" status="PASS" endtime="20170919 15:45:39.585"></status>
</kw>
<status starttime="20170919 15:45:39.584" status="PASS" endtime="20170919 15:45:39.586"></status>
</kw>
<status starttime="20170919 15:45:39.579" status="PASS" endtime="20170919 15:45:39.586"></status>
</kw>
<status starttime="20170919 15:45:39.579" status="PASS" endtime="20170919 15:45:39.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.586">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170919 15:45:39.586" status="PASS" endtime="20170919 15:45:39.587"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.699">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:39.699">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170919 15:45:39.756">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:39.639" status="PASS" endtime="20170919 15:45:39.756"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.756">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:39.757">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170919 15:45:39.587" status="PASS" endtime="20170919 15:45:39.757"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.758">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status starttime="20170919 15:45:39.757" status="PASS" endtime="20170919 15:45:39.758"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.758">${stderr} = </msg>
<status starttime="20170919 15:45:39.758" status="PASS" endtime="20170919 15:45:39.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.766" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.765" status="PASS" endtime="20170919 15:45:39.766"></status>
</kw>
<status starttime="20170919 15:45:39.765" status="PASS" endtime="20170919 15:45:39.766"></status>
</kw>
<status starttime="20170919 15:45:39.758" status="PASS" endtime="20170919 15:45:39.766"></status>
</kw>
<status starttime="20170919 15:45:39.578" status="PASS" endtime="20170919 15:45:39.766"></status>
</kw>
<status starttime="20170919 15:45:39.578" status="PASS" endtime="20170919 15:45:39.766"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.770" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.769" status="PASS" endtime="20170919 15:45:39.770"></status>
</kw>
<status starttime="20170919 15:45:39.769" status="PASS" endtime="20170919 15:45:39.770"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.771" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.771" status="PASS" endtime="20170919 15:45:39.771"></status>
</kw>
<status starttime="20170919 15:45:39.770" status="PASS" endtime="20170919 15:45:39.772"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.773" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.772" status="PASS" endtime="20170919 15:45:39.773"></status>
</kw>
<status starttime="20170919 15:45:39.772" status="PASS" endtime="20170919 15:45:39.773"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.774" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.774" status="PASS" endtime="20170919 15:45:39.774"></status>
</kw>
<status starttime="20170919 15:45:39.773" status="PASS" endtime="20170919 15:45:39.774"></status>
</kw>
<status starttime="20170919 15:45:39.768" status="PASS" endtime="20170919 15:45:39.774"></status>
</kw>
<status starttime="20170919 15:45:39.767" status="PASS" endtime="20170919 15:45:39.774"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.775">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170919 15:45:39.775" status="PASS" endtime="20170919 15:45:39.775"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.898">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:39.899">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170919 15:45:39.966">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:39.826" status="PASS" endtime="20170919 15:45:39.966"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:39.966">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:39.966">${ret_values} = (u' 19:47:48 up 14 min,  load average: 0.27, 0.56, 0.70', u'', 0)</msg>
<status starttime="20170919 15:45:39.775" status="PASS" endtime="20170919 15:45:39.966"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.967">${stdout} =  19:47:48 up 14 min,  load average: 0.27, 0.56, 0.70</msg>
<status starttime="20170919 15:45:39.967" status="PASS" endtime="20170919 15:45:39.967"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.968">${stderr} = </msg>
<status starttime="20170919 15:45:39.968" status="PASS" endtime="20170919 15:45:39.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.979" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.978" status="PASS" endtime="20170919 15:45:39.979"></status>
</kw>
<status starttime="20170919 15:45:39.977" status="PASS" endtime="20170919 15:45:39.979"></status>
</kw>
<status starttime="20170919 15:45:39.969" status="PASS" endtime="20170919 15:45:39.979"></status>
</kw>
<status starttime="20170919 15:45:39.767" status="PASS" endtime="20170919 15:45:39.979"></status>
</kw>
<status starttime="20170919 15:45:39.766" status="PASS" endtime="20170919 15:45:39.979"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.982" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.982" status="PASS" endtime="20170919 15:45:39.982"></status>
</kw>
<status starttime="20170919 15:45:39.981" status="PASS" endtime="20170919 15:45:39.982"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.983" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.983" status="PASS" endtime="20170919 15:45:39.984"></status>
</kw>
<status starttime="20170919 15:45:39.982" status="PASS" endtime="20170919 15:45:39.984"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.985" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.984" status="PASS" endtime="20170919 15:45:39.985"></status>
</kw>
<status starttime="20170919 15:45:39.984" status="PASS" endtime="20170919 15:45:39.985"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:39.986" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:39.986" status="PASS" endtime="20170919 15:45:39.986"></status>
</kw>
<status starttime="20170919 15:45:39.985" status="PASS" endtime="20170919 15:45:39.986"></status>
</kw>
<status starttime="20170919 15:45:39.981" status="PASS" endtime="20170919 15:45:39.986"></status>
</kw>
<status starttime="20170919 15:45:39.980" status="PASS" endtime="20170919 15:45:39.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:39.987">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170919 15:45:39.987" status="PASS" endtime="20170919 15:45:39.987"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.106">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:40.106">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170919 15:45:40.153">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:40.043" status="PASS" endtime="20170919 15:45:40.153"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:40.153">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:40.153">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Tue Sep 19 15:01:28 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170919 15:45:39.988" status="PASS" endtime="20170919 15:45:40.154"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:40.154">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Tue Sep 19 15:01:28 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170919 15:45:40.154" status="PASS" endtime="20170919 15:45:40.154"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:40.155">${stderr} = </msg>
<status starttime="20170919 15:45:40.154" status="PASS" endtime="20170919 15:45:40.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.162" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:40.161" status="PASS" endtime="20170919 15:45:40.162"></status>
</kw>
<status starttime="20170919 15:45:40.161" status="PASS" endtime="20170919 15:45:40.162"></status>
</kw>
<status starttime="20170919 15:45:40.155" status="PASS" endtime="20170919 15:45:40.162"></status>
</kw>
<status starttime="20170919 15:45:39.979" status="PASS" endtime="20170919 15:45:40.162"></status>
</kw>
<status starttime="20170919 15:45:39.979" status="PASS" endtime="20170919 15:45:40.162"></status>
</kw>
<status starttime="20170919 15:45:39.578" status="PASS" endtime="20170919 15:45:40.162"></status>
</kw>
<status starttime="20170919 15:45:39.576" status="PASS" endtime="20170919 15:45:40.163"></status>
</kw>
<status starttime="20170919 15:45:39.576" status="PASS" endtime="20170919 15:45:40.163"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:40.164">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170919 15:45:40.163" status="PASS" endtime="20170919 15:45:40.164"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.164">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170919 15:45:40.164" status="PASS" endtime="20170919 15:45:40.164"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.168" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:40.167" status="PASS" endtime="20170919 15:45:40.168"></status>
</kw>
<status starttime="20170919 15:45:40.167" status="PASS" endtime="20170919 15:45:40.168"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.169" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:40.169" status="PASS" endtime="20170919 15:45:40.169"></status>
</kw>
<status starttime="20170919 15:45:40.168" status="PASS" endtime="20170919 15:45:40.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.170" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:40.170" status="PASS" endtime="20170919 15:45:40.170"></status>
</kw>
<status starttime="20170919 15:45:40.169" status="PASS" endtime="20170919 15:45:40.171"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.172" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:40.171" status="PASS" endtime="20170919 15:45:40.172"></status>
</kw>
<status starttime="20170919 15:45:40.171" status="PASS" endtime="20170919 15:45:40.172"></status>
</kw>
<status starttime="20170919 15:45:40.166" status="PASS" endtime="20170919 15:45:40.172"></status>
</kw>
<status starttime="20170919 15:45:40.166" status="PASS" endtime="20170919 15:45:40.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:40.173">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170919 15:45:40.172" status="PASS" endtime="20170919 15:45:40.173"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:40.287">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:40.287">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170919 15:45:41.695">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:40.225" status="PASS" endtime="20170919 15:45:41.695"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:41.695">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:41.695">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status starttime="20170919 15:45:40.173" status="PASS" endtime="20170919 15:45:41.695"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:41.696">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170919 15:45:41.696" status="PASS" endtime="20170919 15:45:41.696"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:41.697">${stderr} = </msg>
<status starttime="20170919 15:45:41.696" status="PASS" endtime="20170919 15:45:41.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:41.704" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:41.703" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:41.703" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:41.697" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:40.165" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:40.165" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:40.164" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:40.163" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:40.163" status="PASS" endtime="20170919 15:45:41.704"></status>
</kw>
<status starttime="20170919 15:45:39.139" status="PASS" endtime="20170919 15:45:41.705"></status>
</kw>
<status starttime="20170919 15:45:39.138" status="PASS" endtime="20170919 15:45:41.705"></status>
</kw>
<status starttime="20170919 15:45:39.099" status="PASS" endtime="20170919 15:45:41.705"></status>
</kw>
<status starttime="20170919 15:45:39.096" status="PASS" endtime="20170919 15:45:41.705"></status>
</kw>
<status starttime="20170919 15:45:39.096" status="PASS" endtime="20170919 15:45:41.705"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:41.706" status="PASS" endtime="20170919 15:45:41.707"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:41.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:41.707">${ret_values} = None</msg>
<status starttime="20170919 15:45:41.706" status="PASS" endtime="20170919 15:45:41.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:41.707" status="PASS" endtime="20170919 15:45:41.707"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:41.803">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:41.803">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170919 15:45:41.860">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170919 15:45:41.879">${core_files} = None</msg>
<msg level="INFO" timestamp="20170919 15:45:41.879">${stderr} = None</msg>
<msg level="INFO" timestamp="20170919 15:45:41.879">${rc} = None</msg>
<msg level="FAIL" timestamp="20170919 15:45:41.879">#(UTC) 2017/09/19 15:45:41.877657 -    0.075198 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20170919 15:45:41.748" status="FAIL" endtime="20170919 15:45:41.880"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:41.880">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20170919 15:45:41.881">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20170919 15:45:41.880" status="FAIL" endtime="20170919 15:45:41.881"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170919 15:45:41.899" status="PASS" endtime="20170919 15:45:41.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170919 15:45:41.925" status="PASS" endtime="20170919 15:45:42.595"></status>
</kw>
<status starttime="20170919 15:45:41.925" status="PASS" endtime="20170919 15:45:42.595"></status>
</kw>
<status starttime="20170919 15:45:41.923" status="PASS" endtime="20170919 15:45:42.596"></status>
</kw>
<status starttime="20170919 15:45:41.898" status="PASS" endtime="20170919 15:45:42.596"></status>
</kw>
<status starttime="20170919 15:45:41.881" status="PASS" endtime="20170919 15:45:42.596"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170919 15:45:42.596" status="PASS" endtime="20170919 15:45:42.596"></status>
</kw>
<status starttime="20170919 15:45:41.747" status="FAIL" endtime="20170919 15:45:42.596"></status>
</kw>
<status starttime="20170919 15:45:41.708" status="PASS" endtime="20170919 15:45:42.596"></status>
</kw>
<status starttime="20170919 15:45:41.705" status="PASS" endtime="20170919 15:45:42.596"></status>
</kw>
<status starttime="20170919 15:45:41.705" status="PASS" endtime="20170919 15:45:42.597"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:42.598" status="PASS" endtime="20170919 15:45:42.599"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:42.599">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:42.599">${ret_values} = None</msg>
<status starttime="20170919 15:45:42.598" status="PASS" endtime="20170919 15:45:42.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:42.599" status="PASS" endtime="20170919 15:45:42.599"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status starttime="20170919 15:45:42.640" status="PASS" endtime="20170919 15:45:42.641"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:42.641" html="yes">File '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/9467/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status starttime="20170919 15:45:42.641" status="PASS" endtime="20170919 15:45:42.641"></status>
</kw>
<status starttime="20170919 15:45:42.639" status="PASS" endtime="20170919 15:45:42.642"></status>
</kw>
<status starttime="20170919 15:45:42.600" status="PASS" endtime="20170919 15:45:42.642"></status>
</kw>
<status starttime="20170919 15:45:42.597" status="PASS" endtime="20170919 15:45:42.642"></status>
</kw>
<status starttime="20170919 15:45:42.597" status="PASS" endtime="20170919 15:45:42.642"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:42.643" status="PASS" endtime="20170919 15:45:42.644"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:42.644">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:42.644">${ret_values} = None</msg>
<status starttime="20170919 15:45:42.643" status="PASS" endtime="20170919 15:45:42.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:42.644" status="PASS" endtime="20170919 15:45:42.644"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.682">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170919 15:45:42.682" status="PASS" endtime="20170919 15:45:42.682"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.683">@{cmd_list} = [ ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('BMC_sensor_list', ...</msg>
<status starttime="20170919 15:45:42.683" status="PASS" endtime="20170919 15:45:42.683"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.685">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_FIRMWARE_list.txt</msg>
<status starttime="20170919 15:45:42.684" status="PASS" endtime="20170919 15:45:42.685"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:42.687">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:42.687" status="PASS" endtime="20170919 15:45:42.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:42.693" status="PASS" endtime="20170919 15:45:42.694"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:42.694" status="PASS" endtime="20170919 15:45:42.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:42.695" status="PASS" endtime="20170919 15:45:42.696"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:42.875">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:42.696" status="PASS" endtime="20170919 15:45:42.875"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:42.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:42.875">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:42.696" status="PASS" endtime="20170919 15:45:42.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:42.876">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:42.875" status="PASS" endtime="20170919 15:45:42.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:42.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:42.876" status="PASS" endtime="20170919 15:45:42.876"></status>
</kw>
<status starttime="20170919 15:45:42.687" status="PASS" endtime="20170919 15:45:42.877"></status>
</kw>
<status starttime="20170919 15:45:42.686" status="PASS" endtime="20170919 15:45:42.877"></status>
</kw>
<status starttime="20170919 15:45:42.686" status="PASS" endtime="20170919 15:45:42.877"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:42.877">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status starttime="20170919 15:45:42.877" status="PASS" endtime="20170919 15:45:42.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:42.878" status="PASS" endtime="20170919 15:45:42.878"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.086">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:43.086">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:42.878" status="PASS" endtime="20170919 15:45:43.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:43.086" status="PASS" endtime="20170919 15:45:43.087"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:43.087">Delete All Sessions</msg>
<status starttime="20170919 15:45:43.087" status="PASS" endtime="20170919 15:45:43.087"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:43.087">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:42.685" status="PASS" endtime="20170919 15:45:43.087"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:43.088" status="PASS" endtime="20170919 15:45:43.089"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:43.089">${status} = True</msg>
<status starttime="20170919 15:45:43.088" status="PASS" endtime="20170919 15:45:43.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170919 15:45:43.089" status="PASS" endtime="20170919 15:45:43.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.090">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:43.091">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170919 15:45:43.091">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/8764baa3": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status starttime="20170919 15:45:43.090" status="PASS" endtime="20170919 15:45:43.091"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.092" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_FIRMWARE_list.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:43.092" status="PASS" endtime="20170919 15:45:43.093"></status>
</kw>
<status starttime="20170919 15:45:43.091" status="PASS" endtime="20170919 15:45:43.093"></status>
</kw>
<status starttime="20170919 15:45:42.684" status="PASS" endtime="20170919 15:45:43.093"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.093">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_elog.txt</msg>
<status starttime="20170919 15:45:43.093" status="PASS" endtime="20170919 15:45:43.094"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.097">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:43.097" status="PASS" endtime="20170919 15:45:43.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:43.098" status="PASS" endtime="20170919 15:45:43.099"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.099">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:43.099" status="PASS" endtime="20170919 15:45:43.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.101">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:43.100" status="PASS" endtime="20170919 15:45:43.101"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:43.102" status="PASS" endtime="20170919 15:45:43.296"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:43.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:43.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:43.101" status="PASS" endtime="20170919 15:45:43.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:43.297" status="PASS" endtime="20170919 15:45:43.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:43.297" status="PASS" endtime="20170919 15:45:43.298"></status>
</kw>
<status starttime="20170919 15:45:43.096" status="PASS" endtime="20170919 15:45:43.298"></status>
</kw>
<status starttime="20170919 15:45:43.095" status="PASS" endtime="20170919 15:45:43.298"></status>
</kw>
<status starttime="20170919 15:45:43.094" status="PASS" endtime="20170919 15:45:43.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.299">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170919 15:45:43.298" status="PASS" endtime="20170919 15:45:43.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:43.299" status="PASS" endtime="20170919 15:45:43.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:43.344">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170919 15:45:43.300" status="PASS" endtime="20170919 15:45:43.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:43.345" status="PASS" endtime="20170919 15:45:43.345"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:43.345">Delete All Sessions</msg>
<status starttime="20170919 15:45:43.345" status="PASS" endtime="20170919 15:45:43.345"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:43.346">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170919 15:45:43.094" status="PASS" endtime="20170919 15:45:43.346"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170919 15:45:43.347">404 != 200</msg>
<status starttime="20170919 15:45:43.347" status="FAIL" endtime="20170919 15:45:43.347"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:43.347">${status} = False</msg>
<status starttime="20170919 15:45:43.346" status="PASS" endtime="20170919 15:45:43.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170919 15:45:43.348">Continuing for loop from the next iteration.</msg>
<status starttime="20170919 15:45:43.348" status="PASS" endtime="20170919 15:45:43.348"></status>
</kw>
<status starttime="20170919 15:45:43.348" status="PASS" endtime="20170919 15:45:43.348"></status>
</kw>
<status starttime="20170919 15:45:43.093" status="PASS" endtime="20170919 15:45:43.349"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.349">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_led.txt</msg>
<status starttime="20170919 15:45:43.349" status="PASS" endtime="20170919 15:45:43.349"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.352">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:43.352" status="PASS" endtime="20170919 15:45:43.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.353">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:43.353" status="PASS" endtime="20170919 15:45:43.353"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.354">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:43.353" status="PASS" endtime="20170919 15:45:43.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.354">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:43.354" status="PASS" endtime="20170919 15:45:43.354"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.559">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:43.355" status="PASS" endtime="20170919 15:45:43.559"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:43.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:43.559">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:43.355" status="PASS" endtime="20170919 15:45:43.560"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.560">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:43.560" status="PASS" endtime="20170919 15:45:43.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:43.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:43.561" status="PASS" endtime="20170919 15:45:43.561"></status>
</kw>
<status starttime="20170919 15:45:43.351" status="PASS" endtime="20170919 15:45:43.561"></status>
</kw>
<status starttime="20170919 15:45:43.351" status="PASS" endtime="20170919 15:45:43.561"></status>
</kw>
<status starttime="20170919 15:45:43.350" status="PASS" endtime="20170919 15:45:43.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:43.562">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status starttime="20170919 15:45:43.562" status="PASS" endtime="20170919 15:45:43.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:43.562" status="PASS" endtime="20170919 15:45:43.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.228">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:45.228">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:43.563" status="PASS" endtime="20170919 15:45:45.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:45.229" status="PASS" endtime="20170919 15:45:45.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:45.230">Delete All Sessions</msg>
<status starttime="20170919 15:45:45.230" status="PASS" endtime="20170919 15:45:45.230"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:45.230">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:43.349" status="PASS" endtime="20170919 15:45:45.230"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:45.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:45.231" status="PASS" endtime="20170919 15:45:45.232"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:45.232">${status} = True</msg>
<status starttime="20170919 15:45:45.231" status="PASS" endtime="20170919 15:45:45.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170919 15:45:45.233" status="PASS" endtime="20170919 15:45:45.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.236">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:45.236">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170919 15:45:45.237">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status starttime="20170919 15:45:45.233" status="PASS" endtime="20170919 15:45:45.237"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:45.238" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_led.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:45.238" status="PASS" endtime="20170919 15:45:45.238"></status>
</kw>
<status starttime="20170919 15:45:45.237" status="PASS" endtime="20170919 15:45:45.238"></status>
</kw>
<status starttime="20170919 15:45:43.349" status="PASS" endtime="20170919 15:45:45.238"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.239">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_sensor_list.txt</msg>
<status starttime="20170919 15:45:45.239" status="PASS" endtime="20170919 15:45:45.239"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:45.242">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:45.242" status="PASS" endtime="20170919 15:45:45.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.243">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:45.243" status="PASS" endtime="20170919 15:45:45.243"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.244">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:45.243" status="PASS" endtime="20170919 15:45:45.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:45.244" status="PASS" endtime="20170919 15:45:45.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:45.435">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:45.245" status="PASS" endtime="20170919 15:45:45.435"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:45.435">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:45.435">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:45.245" status="PASS" endtime="20170919 15:45:45.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:45.436">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:45.435" status="PASS" endtime="20170919 15:45:45.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:45.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:45.436" status="PASS" endtime="20170919 15:45:45.436"></status>
</kw>
<status starttime="20170919 15:45:45.241" status="PASS" endtime="20170919 15:45:45.437"></status>
</kw>
<status starttime="20170919 15:45:45.241" status="PASS" endtime="20170919 15:45:45.437"></status>
</kw>
<status starttime="20170919 15:45:45.240" status="PASS" endtime="20170919 15:45:45.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:45.438">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20170919 15:45:45.437" status="PASS" endtime="20170919 15:45:45.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:45.438" status="PASS" endtime="20170919 15:45:45.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.070">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:46.070">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:45.439" status="PASS" endtime="20170919 15:45:46.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:46.070" status="PASS" endtime="20170919 15:45:46.071"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:46.071">Delete All Sessions</msg>
<status starttime="20170919 15:45:46.071" status="PASS" endtime="20170919 15:45:46.071"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:46.072">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:45.239" status="PASS" endtime="20170919 15:45:46.072"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:46.072" status="PASS" endtime="20170919 15:45:46.073"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:46.073">${status} = True</msg>
<status starttime="20170919 15:45:46.072" status="PASS" endtime="20170919 15:45:46.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170919 15:45:46.073" status="PASS" endtime="20170919 15:45:46.073"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.075">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 375
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 6000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 8000000
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30820
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 31
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:46.075">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170919 15:45:46.075">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status starttime="20170919 15:45:46.074" status="PASS" endtime="20170919 15:45:46.075"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.077" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_sensor_list.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:46.076" status="PASS" endtime="20170919 15:45:46.077"></status>
</kw>
<status starttime="20170919 15:45:46.075" status="PASS" endtime="20170919 15:45:46.077"></status>
</kw>
<status starttime="20170919 15:45:45.239" status="PASS" endtime="20170919 15:45:46.077"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.078">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_control_list.txt</msg>
<status starttime="20170919 15:45:46.077" status="PASS" endtime="20170919 15:45:46.078"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.081">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:46.080" status="PASS" endtime="20170919 15:45:46.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:46.081" status="PASS" endtime="20170919 15:45:46.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.082">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:46.082" status="PASS" endtime="20170919 15:45:46.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.083">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:46.082" status="PASS" endtime="20170919 15:45:46.083"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.272">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:46.084" status="PASS" endtime="20170919 15:45:46.273"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:46.273">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:46.273">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:46.083" status="PASS" endtime="20170919 15:45:46.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.273">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:46.273" status="PASS" endtime="20170919 15:45:46.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:46.274" status="PASS" endtime="20170919 15:45:46.274"></status>
</kw>
<status starttime="20170919 15:45:46.080" status="PASS" endtime="20170919 15:45:46.274"></status>
</kw>
<status starttime="20170919 15:45:46.079" status="PASS" endtime="20170919 15:45:46.274"></status>
</kw>
<status starttime="20170919 15:45:46.079" status="PASS" endtime="20170919 15:45:46.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.275">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20170919 15:45:46.275" status="PASS" endtime="20170919 15:45:46.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:46.275" status="PASS" endtime="20170919 15:45:46.276"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.504">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:46.504">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:46.276" status="PASS" endtime="20170919 15:45:46.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:46.504" status="PASS" endtime="20170919 15:45:46.505"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:46.505">Delete All Sessions</msg>
<status starttime="20170919 15:45:46.505" status="PASS" endtime="20170919 15:45:46.505"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:46.505">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:46.078" status="PASS" endtime="20170919 15:45:46.505"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:46.506" status="PASS" endtime="20170919 15:45:46.506"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:46.507">${status} = True</msg>
<status starttime="20170919 15:45:46.506" status="PASS" endtime="20170919 15:45:46.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170919 15:45:46.507" status="PASS" endtime="20170919 15:45:46.507"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.508">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:46.509">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170919 15:45:46.509">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20170919 15:45:46.508" status="PASS" endtime="20170919 15:45:46.509"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.511" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_control_list.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:46.510" status="PASS" endtime="20170919 15:45:46.511"></status>
</kw>
<status starttime="20170919 15:45:46.509" status="PASS" endtime="20170919 15:45:46.511"></status>
</kw>
<status starttime="20170919 15:45:46.077" status="PASS" endtime="20170919 15:45:46.511"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.512">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_inventory.txt</msg>
<status starttime="20170919 15:45:46.512" status="PASS" endtime="20170919 15:45:46.512"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.515">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170919 15:45:46.515" status="PASS" endtime="20170919 15:45:46.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170919 15:45:46.515" status="PASS" endtime="20170919 15:45:46.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.516">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170919 15:45:46.516" status="PASS" endtime="20170919 15:45:46.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170919 15:45:46.517" status="PASS" endtime="20170919 15:45:46.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.732">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170919 15:45:46.518" status="PASS" endtime="20170919 15:45:46.732"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:46.732">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:46.732">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:46.517" status="PASS" endtime="20170919 15:45:46.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.733">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:46.732" status="PASS" endtime="20170919 15:45:46.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:46.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:46.733" status="PASS" endtime="20170919 15:45:46.734"></status>
</kw>
<status starttime="20170919 15:45:46.514" status="PASS" endtime="20170919 15:45:46.734"></status>
</kw>
<status starttime="20170919 15:45:46.514" status="PASS" endtime="20170919 15:45:46.734"></status>
</kw>
<status starttime="20170919 15:45:46.513" status="PASS" endtime="20170919 15:45:46.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:46.734">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170919 15:45:46.734" status="PASS" endtime="20170919 15:45:46.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170919 15:45:46.735" status="PASS" endtime="20170919 15:45:46.735"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:47.113">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170919 15:45:47.113">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:46.735" status="PASS" endtime="20170919 15:45:47.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170919 15:45:47.113" status="PASS" endtime="20170919 15:45:47.114"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170919 15:45:47.114">Delete All Sessions</msg>
<status starttime="20170919 15:45:47.114" status="PASS" endtime="20170919 15:45:47.114"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:47.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170919 15:45:46.512" status="PASS" endtime="20170919 15:45:47.114"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:47.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170919 15:45:47.115" status="PASS" endtime="20170919 15:45:47.115"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:47.115">${status} = True</msg>
<status starttime="20170919 15:45:47.115" status="PASS" endtime="20170919 15:45:47.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170919 15:45:47.116" status="PASS" endtime="20170919 15:45:47.116"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:47.117">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170919 15:45:47.117">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170919 15:45:47.117">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": ""
        },
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
        ...</msg>
<status starttime="20170919 15:45:47.116" status="PASS" endtime="20170919 15:45:47.117"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:47.119" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_inventory.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:47.118" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:47.117" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:46.511" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.684" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.683" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.682" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.682" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.681" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.645" status="PASS" endtime="20170919 15:45:47.119"></status>
</kw>
<status starttime="20170919 15:45:42.642" status="PASS" endtime="20170919 15:45:47.120"></status>
</kw>
<status starttime="20170919 15:45:42.642" status="PASS" endtime="20170919 15:45:47.120"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170919 15:45:47.121" status="PASS" endtime="20170919 15:45:47.122"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:47.122">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:47.122">${ret_values} = None</msg>
<status starttime="20170919 15:45:47.121" status="PASS" endtime="20170919 15:45:47.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170919 15:45:47.122" status="PASS" endtime="20170919 15:45:47.122"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:47.161">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170919 15:45:47.161" status="PASS" endtime="20170919 15:45:47.161"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:47.163">@{cmd_list} = [ ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl_p...</msg>
<status starttime="20170919 15:45:47.162" status="PASS" endtime="20170919 15:45:47.163"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:47.164">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_journalctl_nopager.txt</msg>
<status starttime="20170919 15:45:47.164" status="PASS" endtime="20170919 15:45:47.164"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:47.166" status="PASS" endtime="20170919 15:45:47.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:47.167">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170919 15:45:47.167" status="PASS" endtime="20170919 15:45:47.167"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:47.297">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:47.297">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170919 15:45:49.042">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:47.229" status="PASS" endtime="20170919 15:45:49.042"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:49.042">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:49.045">${ret_values} = (u'-- Logs begin at Mon 2017-08-28 19:33:51 UTC, end at Mon 2017-08-28 19:47:56 UTC. --\nAug 28 19:33:51 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 28 19:33:51 witherspoon kernel: Linu...</msg>
<status starttime="20170919 15:45:47.168" status="PASS" endtime="20170919 15:45:49.045"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.046">${stdout} = -- Logs begin at Mon 2017-08-28 19:33:51 UTC, end at Mon 2017-08-28 19:47:56 UTC. --
Aug 28 19:33:51 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 28 19:33:51 witherspoon kernel: Linux ver...</msg>
<status starttime="20170919 15:45:49.045" status="PASS" endtime="20170919 15:45:49.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.047">${stderr} = </msg>
<status starttime="20170919 15:45:49.047" status="PASS" endtime="20170919 15:45:49.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:49.056" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:49.055" status="PASS" endtime="20170919 15:45:49.056"></status>
</kw>
<status starttime="20170919 15:45:49.053" status="PASS" endtime="20170919 15:45:49.056"></status>
</kw>
<status starttime="20170919 15:45:49.047" status="PASS" endtime="20170919 15:45:49.056"></status>
</kw>
<status starttime="20170919 15:45:47.165" status="PASS" endtime="20170919 15:45:49.056"></status>
</kw>
<status starttime="20170919 15:45:47.163" status="PASS" endtime="20170919 15:45:49.056"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.057">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_meminfo.txt</msg>
<status starttime="20170919 15:45:49.057" status="PASS" endtime="20170919 15:45:49.057"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:49.058" status="PASS" endtime="20170919 15:45:49.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.059">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170919 15:45:49.059" status="PASS" endtime="20170919 15:45:49.059"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:49.179">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:49.180">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170919 15:45:49.228">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:49.115" status="PASS" endtime="20170919 15:45:49.228"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:49.228">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:49.229">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          268816 kB\nMemAvailable:     319416 kB\nBuffers:           12104 kB\nCached:            54832 kB\nSwapCached:            0 kB\nActive:            9839...</msg>
<status starttime="20170919 15:45:49.059" status="PASS" endtime="20170919 15:45:49.229"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.229">${stdout} = MemTotal:         432240 kB
MemFree:          268816 kB
MemAvailable:     319416 kB
Buffers:           12104 kB
Cached:            54832 kB
SwapCached:            0 kB
Active:            98396 kB
Inac...</msg>
<status starttime="20170919 15:45:49.229" status="PASS" endtime="20170919 15:45:49.229"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.230">${stderr} = </msg>
<status starttime="20170919 15:45:49.230" status="PASS" endtime="20170919 15:45:49.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:49.240" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_meminfo.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:49.239" status="PASS" endtime="20170919 15:45:49.240"></status>
</kw>
<status starttime="20170919 15:45:49.238" status="PASS" endtime="20170919 15:45:49.240"></status>
</kw>
<status starttime="20170919 15:45:49.230" status="PASS" endtime="20170919 15:45:49.240"></status>
</kw>
<status starttime="20170919 15:45:49.057" status="PASS" endtime="20170919 15:45:49.241"></status>
</kw>
<status starttime="20170919 15:45:49.056" status="PASS" endtime="20170919 15:45:49.241"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.241">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170919 15:45:49.241" status="PASS" endtime="20170919 15:45:49.241"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:49.242" status="PASS" endtime="20170919 15:45:49.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.243">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170919 15:45:49.243" status="PASS" endtime="20170919 15:45:49.243"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:49.363">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:49.363">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170919 15:45:49.965">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:49.296" status="PASS" endtime="20170919 15:45:49.965"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:49.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:49.967">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 28 19:47 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 28 19:47 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170919 15:45:49.244" status="PASS" endtime="20170919 15:45:49.967"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.968">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 28 19:47 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 28 19:47 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170919 15:45:49.967" status="PASS" endtime="20170919 15:45:49.968"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.968">${stderr} = ls: /proc/1675/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170919 15:45:49.968" status="PASS" endtime="20170919 15:45:49.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:49.976" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:49.975" status="PASS" endtime="20170919 15:45:49.976"></status>
</kw>
<status starttime="20170919 15:45:49.974" status="PASS" endtime="20170919 15:45:49.976"></status>
</kw>
<status starttime="20170919 15:45:49.969" status="PASS" endtime="20170919 15:45:49.976"></status>
</kw>
<status starttime="20170919 15:45:49.242" status="PASS" endtime="20170919 15:45:49.976"></status>
</kw>
<status starttime="20170919 15:45:49.241" status="PASS" endtime="20170919 15:45:49.977"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.977">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_proc_list.txt</msg>
<status starttime="20170919 15:45:49.977" status="PASS" endtime="20170919 15:45:49.977"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:49.978" status="PASS" endtime="20170919 15:45:49.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:49.979">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170919 15:45:49.979" status="PASS" endtime="20170919 15:45:49.979"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:50.093">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:50.094">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170919 15:45:50.413">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:50.029" status="PASS" endtime="20170919 15:45:50.414"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:50.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:50.414">${ret_values} = (u'Mem: 163548K used, 268692K free, 14492K shrd, 12104K buff, 54832K cached\nCPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.39 0.58 0.71 1/158 1676\n  PID  PPID ...</msg>
<status starttime="20170919 15:45:49.980" status="PASS" endtime="20170919 15:45:50.414"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:50.415">${stdout} = Mem: 163548K used, 268692K free, 14492K shrd, 12104K buff, 54832K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.39 0.58 0.71 1/158 1676
  PID  PPID USER  ...</msg>
<status starttime="20170919 15:45:50.414" status="PASS" endtime="20170919 15:45:50.415"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:50.415">${stderr} = </msg>
<status starttime="20170919 15:45:50.415" status="PASS" endtime="20170919 15:45:50.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:50.423" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_proc_list.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:50.422" status="PASS" endtime="20170919 15:45:50.423"></status>
</kw>
<status starttime="20170919 15:45:50.422" status="PASS" endtime="20170919 15:45:50.423"></status>
</kw>
<status starttime="20170919 15:45:50.416" status="PASS" endtime="20170919 15:45:50.423"></status>
</kw>
<status starttime="20170919 15:45:49.978" status="PASS" endtime="20170919 15:45:50.424"></status>
</kw>
<status starttime="20170919 15:45:49.977" status="PASS" endtime="20170919 15:45:50.424"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:50.424">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_journalctl_pretty.txt</msg>
<status starttime="20170919 15:45:50.424" status="PASS" endtime="20170919 15:45:50.424"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:50.425" status="PASS" endtime="20170919 15:45:50.426"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:50.427">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status starttime="20170919 15:45:50.426" status="PASS" endtime="20170919 15:45:50.427"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:50.539">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:50.539">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20170919 15:45:54.711">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:50.480" status="PASS" endtime="20170919 15:45:54.714"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:54.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:54.737">${ret_values} = (u'{\n\t"__CURSOR" : "s=d24604364af54198bb0f78c47ac4171f;i=1;b=bd6a93909fd54d6aa4f9c2535cdf148c;m=cd65ef;t=557d55fdfd180;x=9a1228ea6ad077ad",\n\t"__REALTIME_TIMESTAMP" : "1503948831707520",\n\t"__MONO...</msg>
<status starttime="20170919 15:45:50.427" status="PASS" endtime="20170919 15:45:54.737"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.743">${stdout} = {
	"__CURSOR" : "s=d24604364af54198bb0f78c47ac4171f;i=1;b=bd6a93909fd54d6aa4f9c2535cdf148c;m=cd65ef;t=557d55fdfd180;x=9a1228ea6ad077ad",
	"__REALTIME_TIMESTAMP" : "1503948831707520",
	"__MONOTONIC_TIM...</msg>
<status starttime="20170919 15:45:54.737" status="PASS" endtime="20170919 15:45:54.743"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.744">${stderr} = </msg>
<status starttime="20170919 15:45:54.743" status="PASS" endtime="20170919 15:45:54.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:54.761" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:54.757" status="PASS" endtime="20170919 15:45:54.761"></status>
</kw>
<status starttime="20170919 15:45:54.750" status="PASS" endtime="20170919 15:45:54.761"></status>
</kw>
<status starttime="20170919 15:45:54.744" status="PASS" endtime="20170919 15:45:54.761"></status>
</kw>
<status starttime="20170919 15:45:50.425" status="PASS" endtime="20170919 15:45:54.761"></status>
</kw>
<status starttime="20170919 15:45:50.424" status="PASS" endtime="20170919 15:45:54.761"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.762">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_dmesg.txt</msg>
<status starttime="20170919 15:45:54.762" status="PASS" endtime="20170919 15:45:54.762"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:54.763" status="PASS" endtime="20170919 15:45:54.764"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.764">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170919 15:45:54.764" status="PASS" endtime="20170919 15:45:54.764"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:54.876">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:54.880">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170919 15:45:54.949">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:54.815" status="PASS" endtime="20170919 15:45:54.949"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:54.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:54.949">${ret_values} = (u'[    0.000000] NR_IRQS:16 nr_irqs:16 16\n[    0.000000] i2c controller registered, irq 16\n[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7722264433...</msg>
<status starttime="20170919 15:45:54.765" status="PASS" endtime="20170919 15:45:54.949"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.950">${stdout} = [    0.000000] NR_IRQS:16 nr_irqs:16 16
[    0.000000] i2c controller registered, irq 16
[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 77222644334 ns
...</msg>
<status starttime="20170919 15:45:54.950" status="PASS" endtime="20170919 15:45:54.950"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.951">${stderr} = </msg>
<status starttime="20170919 15:45:54.950" status="PASS" endtime="20170919 15:45:54.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:54.958" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_dmesg.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:54.957" status="PASS" endtime="20170919 15:45:54.958"></status>
</kw>
<status starttime="20170919 15:45:54.957" status="PASS" endtime="20170919 15:45:54.958"></status>
</kw>
<status starttime="20170919 15:45:54.951" status="PASS" endtime="20170919 15:45:54.958"></status>
</kw>
<status starttime="20170919 15:45:54.762" status="PASS" endtime="20170919 15:45:54.958"></status>
</kw>
<status starttime="20170919 15:45:54.761" status="PASS" endtime="20170919 15:45:54.958"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.959">${logpath} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_procinfo.txt</msg>
<status starttime="20170919 15:45:54.959" status="PASS" endtime="20170919 15:45:54.959"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170919 15:45:54.960" status="PASS" endtime="20170919 15:45:54.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:54.961">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170919 15:45:54.961" status="PASS" endtime="20170919 15:45:54.961"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.074">index=1
encoding=UTF-8
width=80
newline=

host=9.41.166.169
height=24
path_separator=/
term_type=vt100
port=22
prompt=# 
timeout=25 seconds
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170919 15:45:55.074">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170919 15:45:55.123">Command exited with return code 0.</msg>
<status starttime="20170919 15:45:55.013" status="PASS" endtime="20170919 15:45:55.123"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170919 15:45:55.123">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170919 15:45:54.962" status="PASS" endtime="20170919 15:45:55.123"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.124">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170919 15:45:55.123" status="PASS" endtime="20170919 15:45:55.124"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.124">${stderr} = </msg>
<status starttime="20170919 15:45:55.124" status="PASS" endtime="20170919 15:45:55.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.132" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_procinfo.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/20170919154538439605_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:55.131" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:55.130" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:55.125" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:54.959" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:54.958" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:47.163" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:47.162" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:47.161" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:47.161" status="PASS" endtime="20170919 15:45:55.132"></status>
</kw>
<status starttime="20170919 15:45:47.160" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:47.123" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:47.120" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:47.120" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:38.704" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:38.702" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:38.701" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<status starttime="20170919 15:45:38.701" status="PASS" endtime="20170919 15:45:55.133"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170919 15:45:55.144" status="PASS" endtime="20170919 15:45:55.144"></status>
</kw>
<status starttime="20170919 15:45:55.133" status="PASS" endtime="20170919 15:45:55.144"></status>
</kw>
<status starttime="20170919 15:45:38.700" status="PASS" endtime="20170919 15:45:55.144"></status>
</kw>
<status starttime="20170919 15:45:35.375" status="PASS" endtime="20170919 15:45:55.145"></status>
</kw>
<status starttime="20170919 15:45:35.375" status="PASS" endtime="20170919 15:45:55.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170919 15:45:55.145" status="PASS" endtime="20170919 15:45:55.145"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.158">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170919 15:45:55.146" status="PASS" endtime="20170919 15:45:55.158"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.159">${FFDC_DIR_PATH} = /tmp/fspcibld/9467/obmc-robot/logs/20170919154538439605_TestsTestBasicPoweron/20170919154538439605_PowerOnTest/</msg>
<status starttime="20170919 15:45:55.158" status="PASS" endtime="20170919 15:45:55.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170919 15:45:55.159" status="PASS" endtime="20170919 15:45:55.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170919 15:45:55.160" status="PASS" endtime="20170919 15:45:55.160"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.161" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs"&gt;/tmp/fspcibld/9467/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170919 15:45:55.161" status="PASS" endtime="20170919 15:45:55.161"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.162" html="yes">File '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170919 15:45:55.162" status="PASS" endtime="20170919 15:45:55.162"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.162">${exist} = True</msg>
<status starttime="20170919 15:45:55.161" status="PASS" endtime="20170919 15:45:55.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170919 15:45:55.163" status="PASS" endtime="20170919 15:45:55.163"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170919 15:45:55.163" status="PASS" endtime="20170919 15:45:55.164"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.165">${cur_time} = 2017-09-19 15:45:55:164469</msg>
<status starttime="20170919 15:45:55.164" status="PASS" endtime="20170919 15:45:55.165"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.165">${cur_time} = 20170919154555164469</msg>
<status starttime="20170919 15:45:55.165" status="PASS" endtime="20170919 15:45:55.165"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.165">${cur_time} = 20170919154555164469</msg>
<status starttime="20170919 15:45:55.164" status="PASS" endtime="20170919 15:45:55.166"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.166" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:55.166" status="PASS" endtime="20170919 15:45:55.167"></status>
</kw>
<status starttime="20170919 15:45:55.146" status="PASS" endtime="20170919 15:45:55.167"></status>
</kw>
<status starttime="20170919 15:45:35.033" status="PASS" endtime="20170919 15:45:55.167"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.168">${default_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:45:55.168" status="PASS" endtime="20170919 15:45:55.169"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.169">${log_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:45:55.169" status="PASS" endtime="20170919 15:45:55.169"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.169">${log_file_path} = /tmp/9.41.166.169_os_console.txt</msg>
<status starttime="20170919 15:45:55.168" status="PASS" endtime="20170919 15:45:55.169"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.171">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170919 15:45:55.170" status="PASS" endtime="20170919 15:45:55.171"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:45:55.171" status="PASS" endtime="20170919 15:45:55.171"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.177">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:45:55.182">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:45:55.182">${output} = /tmp/fspcibld/9467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170919 15:45:55.172" status="PASS" endtime="20170919 15:45:55.182"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170919 15:45:55.184" status="PASS" endtime="20170919 15:45:55.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20170919 15:45:55.186" status="PASS" endtime="20170919 15:45:55.186"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.186">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170919 15:45:55.185" status="PASS" endtime="20170919 15:45:55.186"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.187">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:45:55.186" status="PASS" endtime="20170919 15:45:55.187"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.187">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170919 15:45:55.170" status="PASS" endtime="20170919 15:45:55.188"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.188">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status starttime="20170919 15:45:55.188" status="PASS" endtime="20170919 15:45:55.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.189">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170919 15:45:55.189" status="PASS" endtime="20170919 15:45:55.189"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:45:55.189" status="PASS" endtime="20170919 15:45:55.189"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.197">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170919 15:45:55.217">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:45:55.217">${os_con_pid} = 182</msg>
<status starttime="20170919 15:45:55.190" status="PASS" endtime="20170919 15:45:55.218"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170919 15:45:55.222" status="PASS" endtime="20170919 15:45:55.225"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.226">${os_con_pid} = 182</msg>
<status starttime="20170919 15:45:55.170" status="PASS" endtime="20170919 15:45:55.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.229">${cmd_buf} = kill -9 182</msg>
<status starttime="20170919 15:45:55.228" status="PASS" endtime="20170919 15:45:55.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170919 15:45:55.231" status="PASS" endtime="20170919 15:45:55.231"></status>
</kw>
<status starttime="20170919 15:45:55.230" status="PASS" endtime="20170919 15:45:55.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.236">Running command 'kill -9 182 2&gt;&amp;1'.</msg>
<status starttime="20170919 15:45:55.232" status="PASS" endtime="20170919 15:45:55.239"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.240">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:45:55.240">${output} = </msg>
<status starttime="20170919 15:45:55.232" status="PASS" endtime="20170919 15:45:55.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170919 15:45:55.244" status="PASS" endtime="20170919 15:45:55.244"></status>
</kw>
<status starttime="20170919 15:45:55.242" status="PASS" endtime="20170919 15:45:55.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.249" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console.txt"&gt;/tmp/9.41.166.169_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/9467/obmc-robot/logs/9.41.166.169_os_console.txt"&gt;/tmp/fspcibld/9467/obmc-robot/logs/9.41.166.169_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20170919 15:45:55.246" status="PASS" endtime="20170919 15:45:55.249"></status>
</kw>
<status starttime="20170919 15:45:55.245" status="PASS" endtime="20170919 15:45:55.249"></status>
</kw>
<status starttime="20170919 15:45:55.244" status="PASS" endtime="20170919 15:45:55.249"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.250">${output} = </msg>
<status starttime="20170919 15:45:55.249" status="PASS" endtime="20170919 15:45:55.250"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170919 15:45:55.250">${loc_quiet} = 1</msg>
<status starttime="20170919 15:45:55.250" status="PASS" endtime="20170919 15:45:55.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170919 15:45:55.252" status="PASS" endtime="20170919 15:45:55.304"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.306">${rc} = 0</msg>
<msg level="INFO" timestamp="20170919 15:45:55.306">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170919 15:45:55.251" status="PASS" endtime="20170919 15:45:55.306"></status>
</kw>
<msg level="INFO" timestamp="20170919 15:45:55.307">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170919 15:45:55.167" status="PASS" endtime="20170919 15:45:55.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170919 15:45:55.309">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170919 15:45:55.309" status="PASS" endtime="20170919 15:45:55.309"></status>
</kw>
<status starttime="20170919 15:45:35.032" status="PASS" endtime="20170919 15:45:55.309"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170919 15:35:20.576" status="FAIL" endtime="20170919 15:45:55.309" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170919 15:35:20.538" status="FAIL" endtime="20170919 15:45:55.311"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170919 15:35:13.089" status="FAIL" endtime="20170919 15:45:55.315"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
