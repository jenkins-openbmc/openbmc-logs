<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171005 19:25:57.034" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/7497/obmc-robot/tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw library="connection_client" name="Clear System Entry From Knownhosts">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:58.086">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status starttime="20171005 19:25:58.085" status="PASS" endtime="20171005 19:25:58.086"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:58.097">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:25:58.110">${rc} = 2</msg>
<msg level="INFO" timestamp="20171005 19:25:58.111">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status starttime="20171005 19:25:58.086" status="PASS" endtime="20171005 19:25:58.111"></status>
</kw>
<status starttime="20171005 19:25:58.085" status="PASS" endtime="20171005 19:25:58.114"></status>
</kw>
<status starttime="20171005 19:25:58.085" status="PASS" endtime="20171005 19:25:58.115"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:25:58.132">Dictionary does not contain key 'host'.</msg>
<status starttime="20171005 19:25:58.130" status="FAIL" endtime="20171005 19:25:58.132"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:25:58.132">${has_host} = False</msg>
<status starttime="20171005 19:25:58.130" status="PASS" endtime="20171005 19:25:58.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171005 19:25:58.134" status="PASS" endtime="20171005 19:25:58.135"></status>
</kw>
<status starttime="20171005 19:25:58.133" status="PASS" endtime="20171005 19:25:58.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:58.137">${port_num} = 22</msg>
<status starttime="20171005 19:25:58.136" status="PASS" endtime="20171005 19:25:58.137"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:58.138">${SSH_PORT} = 22</msg>
<status starttime="20171005 19:25:58.138" status="PASS" endtime="20171005 19:25:58.138"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:58.139">${https_num} = 443</msg>
<status starttime="20171005 19:25:58.139" status="PASS" endtime="20171005 19:25:58.139"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:25:58.140">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20171005 19:25:58.139" status="PASS" endtime="20171005 19:25:58.140"></status>
</kw>
<status starttime="20171005 19:25:58.136" status="PASS" endtime="20171005 19:25:58.140"></status>
</kw>
<status starttime="20171005 19:25:58.135" status="PASS" endtime="20171005 19:25:58.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:25:58.141">Dictionary does not contain key 'port'.</msg>
<status starttime="20171005 19:25:58.141" status="FAIL" endtime="20171005 19:25:58.141"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:25:58.141">${has_port} = False</msg>
<status starttime="20171005 19:25:58.140" status="PASS" endtime="20171005 19:25:58.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171005 19:25:58.143" status="PASS" endtime="20171005 19:25:58.143"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171005 19:25:58.144" status="PASS" endtime="20171005 19:25:58.146"></status>
</kw>
<status starttime="20171005 19:25:58.142" status="PASS" endtime="20171005 19:25:58.146"></status>
</kw>
<status starttime="20171005 19:25:58.142" status="PASS" endtime="20171005 19:25:58.146"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:25:58.147">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171005 19:25:59.894">Read output: root@witherspoon:~#</msg>
<status starttime="20171005 19:25:58.147" status="PASS" endtime="20171005 19:25:59.894"></status>
</kw>
<status starttime="20171005 19:25:58.121" status="PASS" endtime="20171005 19:25:59.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:59.896">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20171005 19:25:59.973">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171005 19:25:59.974">${output} = VERSION_ID="v1.99.10-112-ge7fe258"</msg>
<msg level="INFO" timestamp="20171005 19:25:59.974">${stderr} = </msg>
<status starttime="20171005 19:25:59.896" status="PASS" endtime="20171005 19:25:59.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:25:59.974">Length is 0</msg>
<status starttime="20171005 19:25:59.974" status="PASS" endtime="20171005 19:25:59.975"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:25:59.975">VERSION_ID="v1.99.10-112-ge7fe258"</msg>
<status starttime="20171005 19:25:59.975" status="PASS" endtime="20171005 19:25:59.975"></status>
</kw>
<status starttime="20171005 19:25:59.895" status="PASS" endtime="20171005 19:25:59.975"></status>
</kw>
<status starttime="20171005 19:25:59.895" status="PASS" endtime="20171005 19:25:59.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:59.977">${software} = []</msg>
<status starttime="20171005 19:25:59.977" status="PASS" endtime="20171005 19:25:59.977"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:59.978">${host_list} = []</msg>
<status starttime="20171005 19:25:59.978" status="PASS" endtime="20171005 19:25:59.978"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:25:59.983">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:25:59.983" status="PASS" endtime="20171005 19:25:59.984"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:59.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:25:59.984" status="PASS" endtime="20171005 19:25:59.985"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:59.985">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:25:59.985" status="PASS" endtime="20171005 19:25:59.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:25:59.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:25:59.986" status="PASS" endtime="20171005 19:25:59.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:25:59.987" status="PASS" endtime="20171005 19:26:00.176"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:00.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:25:59.986" status="PASS" endtime="20171005 19:26:00.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.177" status="PASS" endtime="20171005 19:26:00.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.177" status="PASS" endtime="20171005 19:26:00.178"></status>
</kw>
<status starttime="20171005 19:25:59.982" status="PASS" endtime="20171005 19:26:00.178"></status>
</kw>
<status starttime="20171005 19:25:59.982" status="PASS" endtime="20171005 19:26:00.178"></status>
</kw>
<status starttime="20171005 19:25:59.981" status="PASS" endtime="20171005 19:26:00.178"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.179">${base_uri} = /xyz/openbmc_project/software/</msg>
<status starttime="20171005 19:26:00.179" status="PASS" endtime="20171005 19:26:00.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20171005 19:26:00.181" status="PASS" endtime="20171005 19:26:00.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.182">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20171005 19:26:00.182" status="PASS" endtime="20171005 19:26:00.182"></status>
</kw>
<status starttime="20171005 19:26:00.181" status="PASS" endtime="20171005 19:26:00.183"></status>
</kw>
<status starttime="20171005 19:26:00.180" status="PASS" endtime="20171005 19:26:00.183"></status>
</kw>
<status starttime="20171005 19:26:00.179" status="PASS" endtime="20171005 19:26:00.183"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.250">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:00.250">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.183" status="PASS" endtime="20171005 19:26:00.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.252">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/2b498149", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/58493a9a", 
    "/xyz/openbmc_pr...</msg>
<status starttime="20171005 19:26:00.252" status="PASS" endtime="20171005 19:26:00.252"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.253">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/2b498149", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/58493a9a", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:00.253" status="PASS" endtime="20171005 19:26:00.253"></status>
</kw>
<status starttime="20171005 19:26:00.252" status="PASS" endtime="20171005 19:26:00.253"></status>
</kw>
<status starttime="20171005 19:26:00.251" status="PASS" endtime="20171005 19:26:00.253"></status>
</kw>
<status starttime="20171005 19:26:00.251" status="PASS" endtime="20171005 19:26:00.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:00.254">Delete All Sessions</msg>
<status starttime="20171005 19:26:00.254" status="PASS" endtime="20171005 19:26:00.254"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.254">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:25:59.979" status="PASS" endtime="20171005 19:26:00.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.254" status="PASS" endtime="20171005 19:26:00.255"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.256">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/2b498149", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/58493a9a", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:00.256">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:00.256">${content} = {u'data': [u'/xyz/openbmc_project/software/2b498149', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/58493a9a', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_proj...</msg>
<status starttime="20171005 19:26:00.255" status="PASS" endtime="20171005 19:26:00.256"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.256">${sw_list} = [u'/xyz/openbmc_project/software/2b498149', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/58493a9a', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/softwa...</msg>
<status starttime="20171005 19:25:59.978" status="PASS" endtime="20171005 19:26:00.256"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/2b498149">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.260">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:00.259" status="PASS" endtime="20171005 19:26:00.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.260">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:00.260" status="PASS" endtime="20171005 19:26:00.261"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.261">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:00.261" status="PASS" endtime="20171005 19:26:00.261"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.262">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:00.261" status="PASS" endtime="20171005 19:26:00.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.446">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:00.263" status="PASS" endtime="20171005 19:26:00.446"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.447">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:00.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.262" status="PASS" endtime="20171005 19:26:00.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.447">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.447" status="PASS" endtime="20171005 19:26:00.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.448" status="PASS" endtime="20171005 19:26:00.448"></status>
</kw>
<status starttime="20171005 19:26:00.259" status="PASS" endtime="20171005 19:26:00.448"></status>
</kw>
<status starttime="20171005 19:26:00.258" status="PASS" endtime="20171005 19:26:00.448"></status>
</kw>
<status starttime="20171005 19:26:00.258" status="PASS" endtime="20171005 19:26:00.449"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.449">${base_uri} = /xyz/openbmc_project/software/2b498149/attr/Purpose</msg>
<status starttime="20171005 19:26:00.449" status="PASS" endtime="20171005 19:26:00.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:00.450" status="PASS" endtime="20171005 19:26:00.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.569">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b498149/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:00.569">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.450" status="PASS" endtime="20171005 19:26:00.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:00.570" status="PASS" endtime="20171005 19:26:00.570"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:00.571">Delete All Sessions</msg>
<status starttime="20171005 19:26:00.571" status="PASS" endtime="20171005 19:26:00.571"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.257" status="PASS" endtime="20171005 19:26:00.571"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171005 19:26:00.572" status="PASS" endtime="20171005 19:26:00.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.573">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:00.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:00.573">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:00.573" status="PASS" endtime="20171005 19:26:00.573"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.574">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status starttime="20171005 19:26:00.257" status="PASS" endtime="20171005 19:26:00.574"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.574">Continuing for loop from the next iteration.</msg>
<status starttime="20171005 19:26:00.574" status="PASS" endtime="20171005 19:26:00.575"></status>
</kw>
<status starttime="20171005 19:26:00.256" status="PASS" endtime="20171005 19:26:00.575"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.578">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:00.577" status="PASS" endtime="20171005 19:26:00.578"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:00.578" status="PASS" endtime="20171005 19:26:00.579"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.579">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:00.579" status="PASS" endtime="20171005 19:26:00.579"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.580">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:00.580" status="PASS" endtime="20171005 19:26:00.580"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:00.581" status="PASS" endtime="20171005 19:26:00.817"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:00.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.580" status="PASS" endtime="20171005 19:26:00.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.818" status="PASS" endtime="20171005 19:26:00.818"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:00.818" status="PASS" endtime="20171005 19:26:00.819"></status>
</kw>
<status starttime="20171005 19:26:00.577" status="PASS" endtime="20171005 19:26:00.819"></status>
</kw>
<status starttime="20171005 19:26:00.576" status="PASS" endtime="20171005 19:26:00.819"></status>
</kw>
<status starttime="20171005 19:26:00.576" status="PASS" endtime="20171005 19:26:00.819"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.820">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status starttime="20171005 19:26:00.819" status="PASS" endtime="20171005 19:26:00.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:00.820" status="PASS" endtime="20171005 19:26:00.820"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.880">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:00.880">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171005 19:26:00.821" status="PASS" endtime="20171005 19:26:00.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:00.880" status="PASS" endtime="20171005 19:26:00.881"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:00.881">Delete All Sessions</msg>
<status starttime="20171005 19:26:00.881" status="PASS" endtime="20171005 19:26:00.881"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.881">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171005 19:26:00.575" status="PASS" endtime="20171005 19:26:00.881"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.882">Returning from the enclosing user keyword.</msg>
<status starttime="20171005 19:26:00.882" status="PASS" endtime="20171005 19:26:00.882"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:00.882">${attr_purpose} = None</msg>
<status starttime="20171005 19:26:00.575" status="PASS" endtime="20171005 19:26:00.882"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.883">Continuing for loop from the next iteration.</msg>
<status starttime="20171005 19:26:00.883" status="PASS" endtime="20171005 19:26:00.883"></status>
</kw>
<status starttime="20171005 19:26:00.575" status="PASS" endtime="20171005 19:26:00.883"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/58493a9a">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:00.887">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:00.886" status="PASS" endtime="20171005 19:26:00.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.888">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:00.887" status="PASS" endtime="20171005 19:26:00.888"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.888">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:00.888" status="PASS" endtime="20171005 19:26:00.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:00.889">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:00.889" status="PASS" endtime="20171005 19:26:00.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.071">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:00.890" status="PASS" endtime="20171005 19:26:01.071"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.071">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:01.071">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.889" status="PASS" endtime="20171005 19:26:01.071"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.072">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:01.072" status="PASS" endtime="20171005 19:26:01.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:01.072" status="PASS" endtime="20171005 19:26:01.073"></status>
</kw>
<status starttime="20171005 19:26:00.886" status="PASS" endtime="20171005 19:26:01.073"></status>
</kw>
<status starttime="20171005 19:26:00.885" status="PASS" endtime="20171005 19:26:01.073"></status>
</kw>
<status starttime="20171005 19:26:00.885" status="PASS" endtime="20171005 19:26:01.073"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.074">${base_uri} = /xyz/openbmc_project/software/58493a9a/attr/Purpose</msg>
<status starttime="20171005 19:26:01.074" status="PASS" endtime="20171005 19:26:01.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:01.075" status="PASS" endtime="20171005 19:26:01.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/58493a9a/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:01.189">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.076" status="PASS" endtime="20171005 19:26:01.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:01.190" status="PASS" endtime="20171005 19:26:01.190"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:01.190">Delete All Sessions</msg>
<status starttime="20171005 19:26:01.190" status="PASS" endtime="20171005 19:26:01.191"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.191">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:00.884" status="PASS" endtime="20171005 19:26:01.191"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171005 19:26:01.191" status="PASS" endtime="20171005 19:26:01.191"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.192">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:01.192">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:01.192">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:01.192" status="PASS" endtime="20171005 19:26:01.192"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.193">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status starttime="20171005 19:26:00.883" status="PASS" endtime="20171005 19:26:01.193"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.193">Continuing for loop from the next iteration.</msg>
<status starttime="20171005 19:26:01.193" status="PASS" endtime="20171005 19:26:01.193"></status>
</kw>
<status starttime="20171005 19:26:00.883" status="PASS" endtime="20171005 19:26:01.194"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.197">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:01.197" status="PASS" endtime="20171005 19:26:01.197"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.198">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:01.198" status="PASS" endtime="20171005 19:26:01.198"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.199">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:01.198" status="PASS" endtime="20171005 19:26:01.199"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.199">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:01.199" status="PASS" endtime="20171005 19:26:01.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:01.200" status="PASS" endtime="20171005 19:26:01.377"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.378">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:01.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.200" status="PASS" endtime="20171005 19:26:01.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:01.378" status="PASS" endtime="20171005 19:26:01.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:01.379" status="PASS" endtime="20171005 19:26:01.379"></status>
</kw>
<status starttime="20171005 19:26:01.196" status="PASS" endtime="20171005 19:26:01.379"></status>
</kw>
<status starttime="20171005 19:26:01.196" status="PASS" endtime="20171005 19:26:01.379"></status>
</kw>
<status starttime="20171005 19:26:01.195" status="PASS" endtime="20171005 19:26:01.380"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.380">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status starttime="20171005 19:26:01.380" status="PASS" endtime="20171005 19:26:01.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:01.381" status="PASS" endtime="20171005 19:26:01.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:01.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.381" status="PASS" endtime="20171005 19:26:01.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:01.509" status="PASS" endtime="20171005 19:26:01.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:01.510">Delete All Sessions</msg>
<status starttime="20171005 19:26:01.510" status="PASS" endtime="20171005 19:26:01.510"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.194" status="PASS" endtime="20171005 19:26:01.511"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171005 19:26:01.511" status="PASS" endtime="20171005 19:26:01.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.512">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:01.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:01.512">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:01.512" status="PASS" endtime="20171005 19:26:01.512"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.512">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20171005 19:26:01.194" status="PASS" endtime="20171005 19:26:01.512"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20171005 19:26:01.513" status="PASS" endtime="20171005 19:26:01.513"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20171005 19:26:01.513" status="PASS" endtime="20171005 19:26:01.514"></status>
</kw>
<status starttime="20171005 19:26:01.194" status="PASS" endtime="20171005 19:26:01.514"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.517">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:01.517" status="PASS" endtime="20171005 19:26:01.517"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.518">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:01.518" status="PASS" endtime="20171005 19:26:01.518"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.518">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:01.518" status="PASS" endtime="20171005 19:26:01.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.519">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:01.519" status="PASS" endtime="20171005 19:26:01.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.714">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:01.520" status="PASS" endtime="20171005 19:26:01.715"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:01.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.520" status="PASS" endtime="20171005 19:26:01.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:01.715" status="PASS" endtime="20171005 19:26:01.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:01.716" status="PASS" endtime="20171005 19:26:01.717"></status>
</kw>
<status starttime="20171005 19:26:01.516" status="PASS" endtime="20171005 19:26:01.717"></status>
</kw>
<status starttime="20171005 19:26:01.516" status="PASS" endtime="20171005 19:26:01.717"></status>
</kw>
<status starttime="20171005 19:26:01.515" status="PASS" endtime="20171005 19:26:01.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.717">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status starttime="20171005 19:26:01.717" status="PASS" endtime="20171005 19:26:01.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:01.718" status="PASS" endtime="20171005 19:26:01.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.868">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:01.868">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.718" status="PASS" endtime="20171005 19:26:01.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:01.868" status="PASS" endtime="20171005 19:26:01.869"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:01.869">Delete All Sessions</msg>
<status starttime="20171005 19:26:01.869" status="PASS" endtime="20171005 19:26:01.869"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.514" status="PASS" endtime="20171005 19:26:01.870"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171005 19:26:01.870" status="PASS" endtime="20171005 19:26:01.870"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.871">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:01.871">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:01.871">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:01.871" status="PASS" endtime="20171005 19:26:01.871"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:01.871">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20171005 19:26:01.514" status="PASS" endtime="20171005 19:26:01.871"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20171005 19:26:01.872" status="PASS" endtime="20171005 19:26:01.872"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20171005 19:26:01.872" status="PASS" endtime="20171005 19:26:01.873"></status>
</kw>
<status starttime="20171005 19:26:01.514" status="PASS" endtime="20171005 19:26:01.873"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:01.876">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:01.876" status="PASS" endtime="20171005 19:26:01.876"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.877">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:01.877" status="PASS" endtime="20171005 19:26:01.877"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.878">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:01.877" status="PASS" endtime="20171005 19:26:01.878"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:01.879">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:01.878" status="PASS" endtime="20171005 19:26:01.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:01.879" status="PASS" endtime="20171005 19:26:02.093"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:02.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:01.879" status="PASS" endtime="20171005 19:26:02.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:02.094" status="PASS" endtime="20171005 19:26:02.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:02.095" status="PASS" endtime="20171005 19:26:02.095"></status>
</kw>
<status starttime="20171005 19:26:01.875" status="PASS" endtime="20171005 19:26:02.095"></status>
</kw>
<status starttime="20171005 19:26:01.875" status="PASS" endtime="20171005 19:26:02.095"></status>
</kw>
<status starttime="20171005 19:26:01.874" status="PASS" endtime="20171005 19:26:02.095"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.096">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status starttime="20171005 19:26:02.096" status="PASS" endtime="20171005 19:26:02.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:02.096" status="PASS" endtime="20171005 19:26:02.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.153">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:02.153">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171005 19:26:02.097" status="PASS" endtime="20171005 19:26:02.153"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:02.153" status="PASS" endtime="20171005 19:26:02.154"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:02.154">Delete All Sessions</msg>
<status starttime="20171005 19:26:02.154" status="PASS" endtime="20171005 19:26:02.154"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.154">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171005 19:26:01.873" status="PASS" endtime="20171005 19:26:02.154"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.155">Returning from the enclosing user keyword.</msg>
<status starttime="20171005 19:26:02.155" status="PASS" endtime="20171005 19:26:02.155"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.155">${attr_purpose} = None</msg>
<status starttime="20171005 19:26:01.873" status="PASS" endtime="20171005 19:26:02.155"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.156">Continuing for loop from the next iteration.</msg>
<status starttime="20171005 19:26:02.156" status="PASS" endtime="20171005 19:26:02.156"></status>
</kw>
<status starttime="20171005 19:26:01.873" status="PASS" endtime="20171005 19:26:02.156"></status>
</kw>
<status starttime="20171005 19:26:00.256" status="PASS" endtime="20171005 19:26:02.156"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.156">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status starttime="20171005 19:25:59.977" status="PASS" endtime="20171005 19:26:02.156"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.159">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:02.159" status="PASS" endtime="20171005 19:26:02.160"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:02.160" status="PASS" endtime="20171005 19:26:02.160"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.161">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:02.161" status="PASS" endtime="20171005 19:26:02.161"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.162">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:02.161" status="PASS" endtime="20171005 19:26:02.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.346">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:02.162" status="PASS" endtime="20171005 19:26:02.346"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.346">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:02.346">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:02.162" status="PASS" endtime="20171005 19:26:02.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.347">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:02.346" status="PASS" endtime="20171005 19:26:02.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:02.347" status="PASS" endtime="20171005 19:26:02.348"></status>
</kw>
<status starttime="20171005 19:26:02.158" status="PASS" endtime="20171005 19:26:02.348"></status>
</kw>
<status starttime="20171005 19:26:02.158" status="PASS" endtime="20171005 19:26:02.348"></status>
</kw>
<status starttime="20171005 19:26:02.157" status="PASS" endtime="20171005 19:26:02.348"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.348">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status starttime="20171005 19:26:02.348" status="PASS" endtime="20171005 19:26:02.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:02.349" status="PASS" endtime="20171005 19:26:02.349"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.485">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:02.485">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:02.349" status="PASS" endtime="20171005 19:26:02.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:02.486" status="PASS" endtime="20171005 19:26:02.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:02.487">Delete All Sessions</msg>
<status starttime="20171005 19:26:02.487" status="PASS" endtime="20171005 19:26:02.487"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:02.157" status="PASS" endtime="20171005 19:26:02.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.488">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:02.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:02.488">${json} = {u'data': {u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'ExtendedVersion': u'op-build-57a0c...</msg>
<status starttime="20171005 19:26:02.487" status="PASS" endtime="20171005 19:26:02.488"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20171005 19:26:02.488" status="PASS" endtime="20171005 19:26:02.489"></status>
</kw>
<status starttime="20171005 19:26:02.157" status="PASS" endtime="20171005 19:26:02.489"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.491">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:02.491" status="PASS" endtime="20171005 19:26:02.492"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:02.492" status="PASS" endtime="20171005 19:26:02.492"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:02.493" status="PASS" endtime="20171005 19:26:02.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:02.493" status="PASS" endtime="20171005 19:26:02.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.700">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:02.495" status="PASS" endtime="20171005 19:26:02.700"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:02.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:02.494" status="PASS" endtime="20171005 19:26:02.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.701">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:02.701" status="PASS" endtime="20171005 19:26:02.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:02.701" status="PASS" endtime="20171005 19:26:02.702"></status>
</kw>
<status starttime="20171005 19:26:02.490" status="PASS" endtime="20171005 19:26:02.702"></status>
</kw>
<status starttime="20171005 19:26:02.490" status="PASS" endtime="20171005 19:26:02.702"></status>
</kw>
<status starttime="20171005 19:26:02.489" status="PASS" endtime="20171005 19:26:02.702"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.703">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status starttime="20171005 19:26:02.703" status="PASS" endtime="20171005 19:26:02.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:26:02.703" status="PASS" endtime="20171005 19:26:02.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.835">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:02.835">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:02.704" status="PASS" endtime="20171005 19:26:02.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:26:02.836" status="PASS" endtime="20171005 19:26:02.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:02.837">Delete All Sessions</msg>
<status starttime="20171005 19:26:02.837" status="PASS" endtime="20171005 19:26:02.837"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:02.489" status="PASS" endtime="20171005 19:26:02.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.838">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:02.838">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:02.838">${json} = {u'data': {u'Priority': 0, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'ExtendedVersion': u'op-build-v1.7-...</msg>
<status starttime="20171005 19:26:02.837" status="PASS" endtime="20171005 19:26:02.838"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20171005 19:26:02.838" status="PASS" endtime="20171005 19:26:02.839"></status>
</kw>
<status starttime="20171005 19:26:02.489" status="PASS" endtime="20171005 19:26:02.839"></status>
</kw>
<status starttime="20171005 19:26:02.156" status="PASS" endtime="20171005 19:26:02.839"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:02.839">${software} = [{u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'ExtendedVersion': u'op-build-57a0c70-dirty,...</msg>
<status starttime="20171005 19:25:59.976" status="PASS" endtime="20171005 19:26:02.839"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:02.839">[{u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None'}, {u'Priority': 0, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None'}]</msg>
<status starttime="20171005 19:26:02.839" status="PASS" endtime="20171005 19:26:02.840"></status>
</kw>
<status starttime="20171005 19:25:59.976" status="PASS" endtime="20171005 19:26:02.840"></status>
</kw>
<status starttime="20171005 19:25:59.976" status="PASS" endtime="20171005 19:26:02.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:02.860">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:26:02.860">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171005 19:26:03.764">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20171005 19:26:03.765">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171005 19:26:03.852">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171005 19:26:03.859">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171005 19:26:03.860">${stderr} = </msg>
<msg level="INFO" timestamp="20171005 19:26:03.860">${rc} = 0</msg>
<status starttime="20171005 19:26:02.841" status="PASS" endtime="20171005 19:26:03.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:03.860">Length is 0</msg>
<status starttime="20171005 19:26:03.860" status="PASS" endtime="20171005 19:26:03.860"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:03.861">Length is 11</msg>
<status starttime="20171005 19:26:03.861" status="PASS" endtime="20171005 19:26:03.861"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:03.861">${bmc_model} = Witherspoon</msg>
<status starttime="20171005 19:26:02.841" status="PASS" endtime="20171005 19:26:03.861"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:03.862">BMC Model=Witherspoon</msg>
<status starttime="20171005 19:26:03.861" status="PASS" endtime="20171005 19:26:03.862"></status>
</kw>
<status starttime="20171005 19:26:02.840" status="PASS" endtime="20171005 19:26:03.862"></status>
</kw>
<status starttime="20171005 19:26:02.840" status="PASS" endtime="20171005 19:26:03.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:03.865">Dictionary does not contain key 'host'.</msg>
<status starttime="20171005 19:26:03.864" status="FAIL" endtime="20171005 19:26:03.865"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:03.865">${has_host} = False</msg>
<status starttime="20171005 19:26:03.864" status="PASS" endtime="20171005 19:26:03.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171005 19:26:03.866" status="PASS" endtime="20171005 19:26:03.866"></status>
</kw>
<status starttime="20171005 19:26:03.865" status="PASS" endtime="20171005 19:26:03.866"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:03.868">${port_num} = 22</msg>
<status starttime="20171005 19:26:03.868" status="PASS" endtime="20171005 19:26:03.868"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:03.869">${SSH_PORT} = 22</msg>
<status starttime="20171005 19:26:03.868" status="PASS" endtime="20171005 19:26:03.869"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:03.869">${https_num} = 443</msg>
<status starttime="20171005 19:26:03.869" status="PASS" endtime="20171005 19:26:03.869"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:03.870">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20171005 19:26:03.870" status="PASS" endtime="20171005 19:26:03.870"></status>
</kw>
<status starttime="20171005 19:26:03.867" status="PASS" endtime="20171005 19:26:03.870"></status>
</kw>
<status starttime="20171005 19:26:03.866" status="PASS" endtime="20171005 19:26:03.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:03.871">Dictionary does not contain key 'port'.</msg>
<status starttime="20171005 19:26:03.871" status="FAIL" endtime="20171005 19:26:03.871"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:03.872">${has_port} = False</msg>
<status starttime="20171005 19:26:03.871" status="PASS" endtime="20171005 19:26:03.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171005 19:26:03.873" status="PASS" endtime="20171005 19:26:03.874"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171005 19:26:03.874" status="PASS" endtime="20171005 19:26:03.874"></status>
</kw>
<status starttime="20171005 19:26:03.873" status="PASS" endtime="20171005 19:26:03.874"></status>
</kw>
<status starttime="20171005 19:26:03.872" status="PASS" endtime="20171005 19:26:03.874"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:03.875">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171005 19:26:05.566">Read output: root@witherspoon:~#</msg>
<status starttime="20171005 19:26:03.875" status="PASS" endtime="20171005 19:26:05.567"></status>
</kw>
<status starttime="20171005 19:26:03.863" status="PASS" endtime="20171005 19:26:05.567"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.568">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20171005 19:26:05.645">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171005 19:26:05.645">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20171005 19:26:05.645">${stderr} = </msg>
<status starttime="20171005 19:26:05.568" status="PASS" endtime="20171005 19:26:05.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:05.646">Length is 0</msg>
<status starttime="20171005 19:26:05.645" status="PASS" endtime="20171005 19:26:05.646"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.646">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20171005 19:26:05.567" status="PASS" endtime="20171005 19:26:05.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20171005 19:26:05.647" status="PASS" endtime="20171005 19:26:05.647"></status>
</kw>
<status starttime="20171005 19:26:03.863" status="PASS" endtime="20171005 19:26:05.647"></status>
</kw>
<status starttime="20171005 19:26:03.862" status="PASS" endtime="20171005 19:26:05.647"></status>
</kw>
<status starttime="20171005 19:25:58.082" status="PASS" endtime="20171005 19:26:05.647"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/7497/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/7497/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:05.694">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:05.693" status="PASS" endtime="20171005 19:26:05.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.695">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:05.694" status="PASS" endtime="20171005 19:26:05.695"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:05.695" status="PASS" endtime="20171005 19:26:05.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:05.696" status="PASS" endtime="20171005 19:26:05.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:05.893">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:05.697" status="PASS" endtime="20171005 19:26:05.893"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.894">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:05.894">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:05.696" status="PASS" endtime="20171005 19:26:05.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:05.894">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:05.894" status="PASS" endtime="20171005 19:26:05.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:05.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:05.895" status="PASS" endtime="20171005 19:26:05.895"></status>
</kw>
<status starttime="20171005 19:26:05.693" status="PASS" endtime="20171005 19:26:05.895"></status>
</kw>
<status starttime="20171005 19:26:05.692" status="PASS" endtime="20171005 19:26:05.895"></status>
</kw>
<status starttime="20171005 19:26:05.692" status="PASS" endtime="20171005 19:26:05.895"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20171005 19:26:05.896" status="PASS" endtime="20171005 19:26:05.897"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.908">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171005 19:26:05.897" status="PASS" endtime="20171005 19:26:05.908"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.918">${FFDC_DIR_PATH} = </msg>
<status starttime="20171005 19:26:05.908" status="PASS" endtime="20171005 19:26:05.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.920">${cur_time} = 2017-10-05 19:26:05:919461</msg>
<status starttime="20171005 19:26:05.919" status="PASS" endtime="20171005 19:26:05.920"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.920">${cur_time} = 20171005192605919461</msg>
<status starttime="20171005 19:26:05.920" status="PASS" endtime="20171005 19:26:05.920"></status>
</kw>
<status starttime="20171005 19:26:05.919" status="PASS" endtime="20171005 19:26:05.921"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.925">${FFDC_TIME} = 20171005192605919461</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.927">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20171005 19:26:05.926" status="PASS" endtime="20171005 19:26:05.927"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.928">${suite_name} = 20171005192605919461_TestsSecurityTestSsl</msg>
<status starttime="20171005 19:26:05.927" status="PASS" endtime="20171005 19:26:05.928"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.928">${test_name} = TestSSLConnection</msg>
<status starttime="20171005 19:26:05.928" status="PASS" endtime="20171005 19:26:05.928"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.929">${test_name} = 20171005192605919461_TestSSLConnection</msg>
<status starttime="20171005 19:26:05.928" status="PASS" endtime="20171005 19:26:05.929"></status>
</kw>
<status starttime="20171005 19:26:05.926" status="PASS" endtime="20171005 19:26:05.929"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.929">${FFDC_DIR_PATH} = /tmp/fspcibld/7497/obmc-robot/logs/20171005192605919461_TestsSecurityTestSsl/20171005192605919461_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20171005 19:26:05.934">${FFDC_PREFIX} = 20171005192605919461_</msg>
<status starttime="20171005 19:26:05.919" status="PASS" endtime="20171005 19:26:05.935"></status>
</kw>
<status starttime="20171005 19:26:05.918" status="PASS" endtime="20171005 19:26:05.935"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171005 19:26:05.935" status="PASS" endtime="20171005 19:26:05.935"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:26:05.936">Created directory '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs"&gt;/tmp/fspcibld/7497/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20171005 19:26:05.936" status="PASS" endtime="20171005 19:26:05.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:05.937">File '/tmp/fspcibld/7497/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20171005 19:26:05.937" status="FAIL" endtime="20171005 19:26:05.937"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.937">${exist} = False</msg>
<status starttime="20171005 19:26:05.936" status="PASS" endtime="20171005 19:26:05.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:26:05.939">Created file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:26:05.938" status="PASS" endtime="20171005 19:26:05.939"></status>
</kw>
<status starttime="20171005 19:26:05.938" status="PASS" endtime="20171005 19:26:05.939"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171005 19:26:05.939" status="PASS" endtime="20171005 19:26:05.939"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.940">${cur_time} = 2017-10-05 19:26:05:940105</msg>
<status starttime="20171005 19:26:05.940" status="PASS" endtime="20171005 19:26:05.940"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.941">${cur_time} = 20171005192605940105</msg>
<status starttime="20171005 19:26:05.941" status="PASS" endtime="20171005 19:26:05.941"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.941">${cur_time} = 20171005192605940105</msg>
<status starttime="20171005 19:26:05.939" status="PASS" endtime="20171005 19:26:05.941"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:26:05.942">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:26:05.941" status="PASS" endtime="20171005 19:26:05.942"></status>
</kw>
<status starttime="20171005 19:26:05.897" status="PASS" endtime="20171005 19:26:05.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status starttime="20171005 19:26:05.942" status="PASS" endtime="20171005 19:26:05.943"></status>
</kw>
<status starttime="20171005 19:26:05.896" status="PASS" endtime="20171005 19:26:05.943"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20171005 19:26:05.691" status="PASS" endtime="20171005 19:26:05.943" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:05.944">Delete All Sessions</msg>
<status starttime="20171005 19:26:05.944" status="PASS" endtime="20171005 19:26:05.944"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20171005 19:26:05.650" status="PASS" endtime="20171005 19:26:05.944"></status>
</suite>
<status starttime="20171005 19:26:05.648" status="PASS" endtime="20171005 19:26:05.945"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/7497/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.985">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:26:05.985" status="PASS" endtime="20171005 19:26:05.985"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.986">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:26:05.986" status="PASS" endtime="20171005 19:26:05.986"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.986">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:26:05.984" status="PASS" endtime="20171005 19:26:05.986"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.988">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:26:05.988" status="PASS" endtime="20171005 19:26:05.988"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.989">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:26:05.988" status="PASS" endtime="20171005 19:26:05.989"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:05.989">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:26:05.987" status="PASS" endtime="20171005 19:26:05.989"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.990">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171005 19:26:05.990" status="PASS" endtime="20171005 19:26:05.990"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:05.990" status="PASS" endtime="20171005 19:26:05.991"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:05.996">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:26:05.998">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:26:05.998">${output} = /tmp/fspcibld/7497/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171005 19:26:05.991" status="PASS" endtime="20171005 19:26:05.999"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171005 19:26:06.001" status="PASS" endtime="20171005 19:26:06.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171005 19:26:06.003" status="PASS" endtime="20171005 19:26:06.003"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.003">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171005 19:26:06.002" status="PASS" endtime="20171005 19:26:06.003"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.004">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:26:06.003" status="PASS" endtime="20171005 19:26:06.004"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.005">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:26:05.989" status="PASS" endtime="20171005 19:26:06.005"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.005">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status starttime="20171005 19:26:06.005" status="PASS" endtime="20171005 19:26:06.005"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.006">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171005 19:26:06.006" status="PASS" endtime="20171005 19:26:06.006"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:06.006" status="PASS" endtime="20171005 19:26:06.044"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.049">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:26:06.057">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:26:06.057">${os_con_pid} = </msg>
<status starttime="20171005 19:26:06.045" status="PASS" endtime="20171005 19:26:06.057"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171005 19:26:06.059" status="PASS" endtime="20171005 19:26:06.060"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.061">${os_con_pid} = </msg>
<status starttime="20171005 19:26:05.989" status="PASS" endtime="20171005 19:26:06.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.061">${cmd_buf} = kill -9 </msg>
<status starttime="20171005 19:26:06.061" status="PASS" endtime="20171005 19:26:06.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:06.062" status="PASS" endtime="20171005 19:26:06.063"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.063">${rc} = None</msg>
<msg level="INFO" timestamp="20171005 19:26:06.064">${output} = None</msg>
<status starttime="20171005 19:26:06.063" status="PASS" endtime="20171005 19:26:06.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171005 19:26:06.064" status="PASS" endtime="20171005 19:26:06.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:06.067">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status starttime="20171005 19:26:06.066" status="FAIL" endtime="20171005 19:26:06.067"></status>
</kw>
<status starttime="20171005 19:26:06.066" status="PASS" endtime="20171005 19:26:06.067"></status>
</kw>
<status starttime="20171005 19:26:06.065" status="PASS" endtime="20171005 19:26:06.067"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.067">${output} = </msg>
<status starttime="20171005 19:26:06.067" status="PASS" endtime="20171005 19:26:06.067"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.068">${loc_quiet} = 1</msg>
<status starttime="20171005 19:26:06.068" status="PASS" endtime="20171005 19:26:06.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20171005 19:26:06.069" status="PASS" endtime="20171005 19:26:06.119"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.119">${rc} = 1</msg>
<msg level="INFO" timestamp="20171005 19:26:06.120">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status starttime="20171005 19:26:06.069" status="PASS" endtime="20171005 19:26:06.120"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.120">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status starttime="20171005 19:26:05.987" status="PASS" endtime="20171005 19:26:06.120"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:26:06.122">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:26:06.121" status="PASS" endtime="20171005 19:26:06.122"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.123">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171005 19:26:06.123" status="PASS" endtime="20171005 19:26:06.123"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:06.124" status="PASS" endtime="20171005 19:26:06.124"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.135">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:26:06.153">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:26:06.154">${output} = /tmp/fspcibld/7497/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171005 19:26:06.124" status="PASS" endtime="20171005 19:26:06.154"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171005 19:26:06.156" status="PASS" endtime="20171005 19:26:06.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171005 19:26:06.159" status="PASS" endtime="20171005 19:26:06.159"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.159">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171005 19:26:06.158" status="PASS" endtime="20171005 19:26:06.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.161">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:26:06.160" status="PASS" endtime="20171005 19:26:06.161"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:06.161">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:26:06.122" status="PASS" endtime="20171005 19:26:06.161"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.162">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status starttime="20171005 19:26:06.162" status="PASS" endtime="20171005 19:26:06.162"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:06.163" status="PASS" endtime="20171005 19:26:06.163"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:06.167">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20171005 19:26:06.171">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:26:06.171">${output} = </msg>
<status starttime="20171005 19:26:06.163" status="PASS" endtime="20171005 19:26:06.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171005 19:26:06.174" status="PASS" endtime="20171005 19:26:06.177"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.178">Slept 1 second</msg>
<status starttime="20171005 19:26:06.177" status="PASS" endtime="20171005 19:26:07.178"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.180">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171005 19:26:07.180" status="PASS" endtime="20171005 19:26:07.180"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:07.180" status="PASS" endtime="20171005 19:26:07.181"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.185">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:26:07.188">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:26:07.188">${output} = /tmp/fspcibld/7497/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171005 19:26:07.181" status="PASS" endtime="20171005 19:26:07.188"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171005 19:26:07.191" status="PASS" endtime="20171005 19:26:07.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171005 19:26:07.194" status="PASS" endtime="20171005 19:26:07.194"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:07.194">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171005 19:26:07.193" status="PASS" endtime="20171005 19:26:07.195"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.195">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:26:07.195" status="PASS" endtime="20171005 19:26:07.196"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:07.196">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:26:07.179" status="PASS" endtime="20171005 19:26:07.196"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.197">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status starttime="20171005 19:26:07.196" status="PASS" endtime="20171005 19:26:07.197"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.197">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171005 19:26:07.197" status="PASS" endtime="20171005 19:26:07.197"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:26:07.198" status="PASS" endtime="20171005 19:26:07.198"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.202">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:26:07.209">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:26:07.209">${os_con_pid} = 202</msg>
<status starttime="20171005 19:26:07.198" status="PASS" endtime="20171005 19:26:07.209"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171005 19:26:07.211" status="PASS" endtime="20171005 19:26:07.213"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:07.213">${os_con_pid} = 202</msg>
<status starttime="20171005 19:26:07.178" status="PASS" endtime="20171005 19:26:07.213"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.214">Length is 3</msg>
<status starttime="20171005 19:26:07.214" status="PASS" endtime="20171005 19:26:07.214"></status>
</kw>
<status starttime="20171005 19:26:05.984" status="PASS" endtime="20171005 19:26:07.215"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.216">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.218">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20171005 19:26:07.217" status="PASS" endtime="20171005 19:26:07.218"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.219">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171005 19:26:07.219" status="PASS" endtime="20171005 19:26:07.219"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.224">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:07.223" status="PASS" endtime="20171005 19:26:07.224"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:07.224" status="PASS" endtime="20171005 19:26:07.225"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.225">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:07.225" status="PASS" endtime="20171005 19:26:07.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:07.226" status="PASS" endtime="20171005 19:26:07.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.411">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:07.227" status="PASS" endtime="20171005 19:26:07.411"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:07.411">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:07.411">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:07.226" status="PASS" endtime="20171005 19:26:07.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.412">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:07.412" status="PASS" endtime="20171005 19:26:07.412"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:07.413" status="PASS" endtime="20171005 19:26:07.413"></status>
</kw>
<status starttime="20171005 19:26:07.222" status="PASS" endtime="20171005 19:26:07.413"></status>
</kw>
<status starttime="20171005 19:26:07.222" status="PASS" endtime="20171005 19:26:07.413"></status>
</kw>
<status starttime="20171005 19:26:07.220" status="PASS" endtime="20171005 19:26:07.413"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.414">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171005 19:26:07.414" status="PASS" endtime="20171005 19:26:07.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:07.414" status="PASS" endtime="20171005 19:26:07.415"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171005 19:26:07.415" status="PASS" endtime="20171005 19:26:07.415"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.417">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20171005 19:26:07.416" status="PASS" endtime="20171005 19:26:07.417"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.418">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171005 19:26:07.418" status="PASS" endtime="20171005 19:26:07.418"></status>
</kw>
<status starttime="20171005 19:26:07.417" status="PASS" endtime="20171005 19:26:07.418"></status>
</kw>
<status starttime="20171005 19:26:07.415" status="PASS" endtime="20171005 19:26:07.418"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.693">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171005 19:26:07.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:07.418" status="PASS" endtime="20171005 19:26:07.693"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.694">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:07.694" status="PASS" endtime="20171005 19:26:07.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.695">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:07.695" status="PASS" endtime="20171005 19:26:07.695"></status>
</kw>
<status starttime="20171005 19:26:07.695" status="PASS" endtime="20171005 19:26:07.696"></status>
</kw>
<status starttime="20171005 19:26:07.693" status="PASS" endtime="20171005 19:26:07.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:07.696">Delete All Sessions</msg>
<status starttime="20171005 19:26:07.696" status="PASS" endtime="20171005 19:26:07.696"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:07.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:07.220" status="PASS" endtime="20171005 19:26:07.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:07.697" status="PASS" endtime="20171005 19:26:07.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.698">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:07.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:07.698">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:07.697" status="PASS" endtime="20171005 19:26:07.698"></status>
</kw>
<status starttime="20171005 19:26:07.218" status="PASS" endtime="20171005 19:26:07.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171005 19:26:07.698" status="PASS" endtime="20171005 19:26:07.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:07.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:07.704" status="PASS" endtime="20171005 19:26:07.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:07.706" status="PASS" endtime="20171005 19:26:07.706"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.707">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:07.707" status="PASS" endtime="20171005 19:26:07.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:07.708">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:07.708" status="PASS" endtime="20171005 19:26:07.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.668">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:07.709" status="PASS" endtime="20171005 19:26:08.668"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:08.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:08.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:07.709" status="PASS" endtime="20171005 19:26:08.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.669">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:08.669" status="PASS" endtime="20171005 19:26:08.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:08.669" status="PASS" endtime="20171005 19:26:08.670"></status>
</kw>
<status starttime="20171005 19:26:07.704" status="PASS" endtime="20171005 19:26:08.670"></status>
</kw>
<status starttime="20171005 19:26:07.703" status="PASS" endtime="20171005 19:26:08.670"></status>
</kw>
<status starttime="20171005 19:26:07.703" status="PASS" endtime="20171005 19:26:08.670"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.671">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:26:08.670" status="PASS" endtime="20171005 19:26:08.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.673">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:08.672" status="PASS" endtime="20171005 19:26:08.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.674">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:08.674" status="PASS" endtime="20171005 19:26:08.674"></status>
</kw>
<status starttime="20171005 19:26:08.673" status="PASS" endtime="20171005 19:26:08.674"></status>
</kw>
<status starttime="20171005 19:26:08.671" status="PASS" endtime="20171005 19:26:08.674"></status>
</kw>
<status starttime="20171005 19:26:08.671" status="PASS" endtime="20171005 19:26:08.674"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.857">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:08.857">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:08.675" status="PASS" endtime="20171005 19:26:08.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.860">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:08.859" status="PASS" endtime="20171005 19:26:08.860"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.861">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:08.861" status="PASS" endtime="20171005 19:26:08.861"></status>
</kw>
<status starttime="20171005 19:26:08.860" status="PASS" endtime="20171005 19:26:08.863"></status>
</kw>
<status starttime="20171005 19:26:08.858" status="PASS" endtime="20171005 19:26:08.863"></status>
</kw>
<status starttime="20171005 19:26:08.857" status="PASS" endtime="20171005 19:26:08.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:08.863">Delete All Sessions</msg>
<status starttime="20171005 19:26:08.863" status="PASS" endtime="20171005 19:26:08.863"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:08.864">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:07.702" status="PASS" endtime="20171005 19:26:08.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:08.864" status="PASS" endtime="20171005 19:26:08.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.865">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:08.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:08.865">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:08.865" status="PASS" endtime="20171005 19:26:08.865"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:08.865">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:26:07.701" status="PASS" endtime="20171005 19:26:08.865"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:08.866">${power_state} = Off</msg>
<status starttime="20171005 19:26:07.701" status="PASS" endtime="20171005 19:26:08.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171005 19:26:08.866" status="PASS" endtime="20171005 19:26:08.866"></status>
</kw>
<status starttime="20171005 19:26:07.701" status="PASS" endtime="20171005 19:26:08.866"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:08.870">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:08.870" status="PASS" endtime="20171005 19:26:08.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:08.871" status="PASS" endtime="20171005 19:26:08.871"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.872">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:08.872" status="PASS" endtime="20171005 19:26:08.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:08.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:08.873" status="PASS" endtime="20171005 19:26:08.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.255">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:08.874" status="PASS" endtime="20171005 19:26:09.255"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:09.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:09.256">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:08.873" status="PASS" endtime="20171005 19:26:09.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.256">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:09.256" status="PASS" endtime="20171005 19:26:09.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:09.257" status="PASS" endtime="20171005 19:26:09.257"></status>
</kw>
<status starttime="20171005 19:26:08.869" status="PASS" endtime="20171005 19:26:09.257"></status>
</kw>
<status starttime="20171005 19:26:08.869" status="PASS" endtime="20171005 19:26:09.257"></status>
</kw>
<status starttime="20171005 19:26:08.868" status="PASS" endtime="20171005 19:26:09.258"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.258">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171005 19:26:09.258" status="PASS" endtime="20171005 19:26:09.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.260">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:09.260" status="PASS" endtime="20171005 19:26:09.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.262">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:09.262" status="PASS" endtime="20171005 19:26:09.262"></status>
</kw>
<status starttime="20171005 19:26:09.261" status="PASS" endtime="20171005 19:26:09.262"></status>
</kw>
<status starttime="20171005 19:26:09.259" status="PASS" endtime="20171005 19:26:09.262"></status>
</kw>
<status starttime="20171005 19:26:09.259" status="PASS" endtime="20171005 19:26:09.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.495">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:09.495">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:09.263" status="PASS" endtime="20171005 19:26:09.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.497">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:09.496" status="PASS" endtime="20171005 19:26:09.497"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.498">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:09.498" status="PASS" endtime="20171005 19:26:09.498"></status>
</kw>
<status starttime="20171005 19:26:09.497" status="PASS" endtime="20171005 19:26:09.498"></status>
</kw>
<status starttime="20171005 19:26:09.496" status="PASS" endtime="20171005 19:26:09.498"></status>
</kw>
<status starttime="20171005 19:26:09.495" status="PASS" endtime="20171005 19:26:09.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:09.499">Delete All Sessions</msg>
<status starttime="20171005 19:26:09.499" status="PASS" endtime="20171005 19:26:09.499"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:09.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:08.868" status="PASS" endtime="20171005 19:26:09.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:09.499" status="PASS" endtime="20171005 19:26:09.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.500">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:09.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:09.500">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:09.500" status="PASS" endtime="20171005 19:26:09.500"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:09.501">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20171005 19:26:08.867" status="PASS" endtime="20171005 19:26:09.501"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:09.501">${host_state} = Off</msg>
<status starttime="20171005 19:26:08.867" status="PASS" endtime="20171005 19:26:09.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171005 19:26:09.501" status="PASS" endtime="20171005 19:26:09.502"></status>
</kw>
<status starttime="20171005 19:26:07.700" status="PASS" endtime="20171005 19:26:09.502"></status>
</kw>
<status starttime="20171005 19:26:07.700" status="PASS" endtime="20171005 19:26:09.502"></status>
</kw>
<status starttime="20171005 19:26:07.699" status="PASS" endtime="20171005 19:26:09.502"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:09.502">${status} = True</msg>
<status starttime="20171005 19:26:07.699" status="PASS" endtime="20171005 19:26:09.502"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status starttime="20171005 19:26:09.502" status="PASS" endtime="20171005 19:26:09.503"></status>
</kw>
<status starttime="20171005 19:26:07.217" status="PASS" endtime="20171005 19:26:09.503"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.504">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20171005 19:26:09.504" status="PASS" endtime="20171005 19:26:09.504"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.505">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171005 19:26:09.505" status="PASS" endtime="20171005 19:26:09.505"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.508">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:09.508" status="PASS" endtime="20171005 19:26:09.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.509">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:09.509" status="PASS" endtime="20171005 19:26:09.509"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.510">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:09.509" status="PASS" endtime="20171005 19:26:09.510"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.510">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:09.510" status="PASS" endtime="20171005 19:26:09.510"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.701">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:09.511" status="PASS" endtime="20171005 19:26:09.701"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:09.701">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:09.701">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:09.511" status="PASS" endtime="20171005 19:26:09.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.702">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:09.702" status="PASS" endtime="20171005 19:26:09.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:09.702" status="PASS" endtime="20171005 19:26:09.703"></status>
</kw>
<status starttime="20171005 19:26:09.507" status="PASS" endtime="20171005 19:26:09.703"></status>
</kw>
<status starttime="20171005 19:26:09.507" status="PASS" endtime="20171005 19:26:09.703"></status>
</kw>
<status starttime="20171005 19:26:09.506" status="PASS" endtime="20171005 19:26:09.703"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.704">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171005 19:26:09.704" status="PASS" endtime="20171005 19:26:09.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:09.704" status="PASS" endtime="20171005 19:26:09.705"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171005 19:26:09.705" status="PASS" endtime="20171005 19:26:09.705"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:09.707">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20171005 19:26:09.706" status="PASS" endtime="20171005 19:26:09.707"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:09.708">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171005 19:26:09.708" status="PASS" endtime="20171005 19:26:09.708"></status>
</kw>
<status starttime="20171005 19:26:09.707" status="PASS" endtime="20171005 19:26:09.708"></status>
</kw>
<status starttime="20171005 19:26:09.705" status="PASS" endtime="20171005 19:26:09.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:10.064">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171005 19:26:10.065">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:09.708" status="PASS" endtime="20171005 19:26:10.065"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:10.066">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:10.066" status="PASS" endtime="20171005 19:26:10.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:10.067">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:10.067" status="PASS" endtime="20171005 19:26:10.067"></status>
</kw>
<status starttime="20171005 19:26:10.066" status="PASS" endtime="20171005 19:26:10.067"></status>
</kw>
<status starttime="20171005 19:26:10.065" status="PASS" endtime="20171005 19:26:10.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:10.068">Delete All Sessions</msg>
<status starttime="20171005 19:26:10.068" status="PASS" endtime="20171005 19:26:10.068"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:10.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:09.505" status="PASS" endtime="20171005 19:26:10.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:10.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:10.068" status="PASS" endtime="20171005 19:26:10.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:10.069">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:10.069">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:10.070">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:10.069" status="PASS" endtime="20171005 19:26:10.070"></status>
</kw>
<status starttime="20171005 19:26:09.504" status="PASS" endtime="20171005 19:26:10.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171005 19:26:10.070" status="PASS" endtime="20171005 19:26:10.070"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:10.076">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:10.076" status="PASS" endtime="20171005 19:26:10.076"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:10.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:10.077" status="PASS" endtime="20171005 19:26:10.077"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:10.077">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:10.077" status="PASS" endtime="20171005 19:26:10.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:10.078">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:10.078" status="PASS" endtime="20171005 19:26:10.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:11.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:10.079" status="PASS" endtime="20171005 19:26:11.930"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:11.931">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:11.931">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:10.079" status="PASS" endtime="20171005 19:26:11.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:11.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:11.931" status="PASS" endtime="20171005 19:26:11.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:11.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:11.932" status="PASS" endtime="20171005 19:26:11.932"></status>
</kw>
<status starttime="20171005 19:26:10.075" status="PASS" endtime="20171005 19:26:11.932"></status>
</kw>
<status starttime="20171005 19:26:10.075" status="PASS" endtime="20171005 19:26:11.932"></status>
</kw>
<status starttime="20171005 19:26:10.074" status="PASS" endtime="20171005 19:26:11.933"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:11.933">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:26:11.933" status="PASS" endtime="20171005 19:26:11.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:11.935">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:11.935" status="PASS" endtime="20171005 19:26:11.935"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:11.936">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:11.936" status="PASS" endtime="20171005 19:26:11.936"></status>
</kw>
<status starttime="20171005 19:26:11.936" status="PASS" endtime="20171005 19:26:11.937"></status>
</kw>
<status starttime="20171005 19:26:11.934" status="PASS" endtime="20171005 19:26:11.937"></status>
</kw>
<status starttime="20171005 19:26:11.934" status="PASS" endtime="20171005 19:26:11.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171005 19:26:21.949">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171005 19:26:29.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:29.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:11.937" status="PASS" endtime="20171005 19:26:29.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:29.512">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:29.511" status="PASS" endtime="20171005 19:26:29.512"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:29.513">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:29.512" status="PASS" endtime="20171005 19:26:29.513"></status>
</kw>
<status starttime="20171005 19:26:29.512" status="PASS" endtime="20171005 19:26:29.513"></status>
</kw>
<status starttime="20171005 19:26:29.510" status="PASS" endtime="20171005 19:26:29.513"></status>
</kw>
<status starttime="20171005 19:26:29.510" status="PASS" endtime="20171005 19:26:29.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:29.513">Delete All Sessions</msg>
<status starttime="20171005 19:26:29.513" status="PASS" endtime="20171005 19:26:29.514"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:29.514">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:10.073" status="PASS" endtime="20171005 19:26:29.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:29.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:29.514" status="PASS" endtime="20171005 19:26:29.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:29.515">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:29.515">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:29.515">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:29.515" status="PASS" endtime="20171005 19:26:29.515"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:29.516">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:26:10.072" status="PASS" endtime="20171005 19:26:29.516"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:29.516">${power_state} = Off</msg>
<status starttime="20171005 19:26:10.072" status="PASS" endtime="20171005 19:26:29.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:29.517">On != Off</msg>
<status starttime="20171005 19:26:29.516" status="FAIL" endtime="20171005 19:26:29.517"></status>
</kw>
<status starttime="20171005 19:26:10.071" status="FAIL" endtime="20171005 19:26:29.517"></status>
</kw>
<status starttime="20171005 19:26:10.071" status="FAIL" endtime="20171005 19:26:29.517"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:39.522">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:39.522" status="PASS" endtime="20171005 19:26:39.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:39.523">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:39.523" status="PASS" endtime="20171005 19:26:39.523"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:39.524">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:39.524" status="PASS" endtime="20171005 19:26:39.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:39.525">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:39.524" status="PASS" endtime="20171005 19:26:39.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:40.060">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:39.526" status="PASS" endtime="20171005 19:26:40.061"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:40.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:40.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:39.525" status="PASS" endtime="20171005 19:26:40.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:40.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:40.061" status="PASS" endtime="20171005 19:26:40.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:40.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:40.062" status="PASS" endtime="20171005 19:26:40.062"></status>
</kw>
<status starttime="20171005 19:26:39.521" status="PASS" endtime="20171005 19:26:40.063"></status>
</kw>
<status starttime="20171005 19:26:39.521" status="PASS" endtime="20171005 19:26:40.063"></status>
</kw>
<status starttime="20171005 19:26:39.520" status="PASS" endtime="20171005 19:26:40.063"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:40.063">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:26:40.063" status="PASS" endtime="20171005 19:26:40.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:40.066">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:40.065" status="PASS" endtime="20171005 19:26:40.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:40.067">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:40.066" status="PASS" endtime="20171005 19:26:40.067"></status>
</kw>
<status starttime="20171005 19:26:40.066" status="PASS" endtime="20171005 19:26:40.067"></status>
</kw>
<status starttime="20171005 19:26:40.064" status="PASS" endtime="20171005 19:26:40.067"></status>
</kw>
<status starttime="20171005 19:26:40.064" status="PASS" endtime="20171005 19:26:40.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:40.200">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:40.200">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:40.067" status="PASS" endtime="20171005 19:26:40.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:40.202">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:40.202" status="PASS" endtime="20171005 19:26:40.202"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:40.203">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:40.203" status="PASS" endtime="20171005 19:26:40.203"></status>
</kw>
<status starttime="20171005 19:26:40.202" status="PASS" endtime="20171005 19:26:40.203"></status>
</kw>
<status starttime="20171005 19:26:40.201" status="PASS" endtime="20171005 19:26:40.203"></status>
</kw>
<status starttime="20171005 19:26:40.201" status="PASS" endtime="20171005 19:26:40.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:40.204">Delete All Sessions</msg>
<status starttime="20171005 19:26:40.204" status="PASS" endtime="20171005 19:26:40.204"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:40.204">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:39.520" status="PASS" endtime="20171005 19:26:40.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:40.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:40.205" status="PASS" endtime="20171005 19:26:40.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:40.206">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:40.206">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:40.206">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:40.205" status="PASS" endtime="20171005 19:26:40.206"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:40.206">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:26:39.519" status="PASS" endtime="20171005 19:26:40.206"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:40.206">${power_state} = Off</msg>
<status starttime="20171005 19:26:39.519" status="PASS" endtime="20171005 19:26:40.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:40.207">On != Off</msg>
<status starttime="20171005 19:26:40.207" status="FAIL" endtime="20171005 19:26:40.207"></status>
</kw>
<status starttime="20171005 19:26:39.518" status="FAIL" endtime="20171005 19:26:40.207"></status>
</kw>
<status starttime="20171005 19:26:39.518" status="FAIL" endtime="20171005 19:26:40.207"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.213">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:26:50.213" status="PASS" endtime="20171005 19:26:50.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:26:50.214" status="PASS" endtime="20171005 19:26:50.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.216">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:26:50.215" status="PASS" endtime="20171005 19:26:50.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.217">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:26:50.216" status="PASS" endtime="20171005 19:26:50.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.416">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:26:50.218" status="PASS" endtime="20171005 19:26:50.416"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:50.416">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:26:50.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:50.217" status="PASS" endtime="20171005 19:26:50.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.417">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:50.417" status="PASS" endtime="20171005 19:26:50.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:50.417" status="PASS" endtime="20171005 19:26:50.418"></status>
</kw>
<status starttime="20171005 19:26:50.212" status="PASS" endtime="20171005 19:26:50.418"></status>
</kw>
<status starttime="20171005 19:26:50.211" status="PASS" endtime="20171005 19:26:50.418"></status>
</kw>
<status starttime="20171005 19:26:50.211" status="PASS" endtime="20171005 19:26:50.418"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.419">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:26:50.418" status="PASS" endtime="20171005 19:26:50.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.422">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:50.421" status="PASS" endtime="20171005 19:26:50.422"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.423">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:26:50.423" status="PASS" endtime="20171005 19:26:50.423"></status>
</kw>
<status starttime="20171005 19:26:50.422" status="PASS" endtime="20171005 19:26:50.424"></status>
</kw>
<status starttime="20171005 19:26:50.420" status="PASS" endtime="20171005 19:26:50.424"></status>
</kw>
<status starttime="20171005 19:26:50.419" status="PASS" endtime="20171005 19:26:50.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.488">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:26:50.488">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:50.424" status="PASS" endtime="20171005 19:26:50.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.493">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:50.490" status="PASS" endtime="20171005 19:26:50.493"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.494">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:26:50.494" status="PASS" endtime="20171005 19:26:50.494"></status>
</kw>
<status starttime="20171005 19:26:50.493" status="PASS" endtime="20171005 19:26:50.494"></status>
</kw>
<status starttime="20171005 19:26:50.489" status="PASS" endtime="20171005 19:26:50.494"></status>
</kw>
<status starttime="20171005 19:26:50.488" status="PASS" endtime="20171005 19:26:50.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:26:50.495">Delete All Sessions</msg>
<status starttime="20171005 19:26:50.495" status="PASS" endtime="20171005 19:26:50.495"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:50.495">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:26:50.210" status="PASS" endtime="20171005 19:26:50.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:26:50.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:26:50.495" status="PASS" endtime="20171005 19:26:50.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:26:50.496">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:26:50.496">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:26:50.497">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:26:50.496" status="PASS" endtime="20171005 19:26:50.497"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:50.497">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:26:50.209" status="PASS" endtime="20171005 19:26:50.497"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:26:50.497">${power_state} = Off</msg>
<status starttime="20171005 19:26:50.209" status="PASS" endtime="20171005 19:26:50.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:26:50.498">On != Off</msg>
<status starttime="20171005 19:26:50.498" status="FAIL" endtime="20171005 19:26:50.498"></status>
</kw>
<status starttime="20171005 19:26:50.209" status="FAIL" endtime="20171005 19:26:50.498"></status>
</kw>
<status starttime="20171005 19:26:50.208" status="FAIL" endtime="20171005 19:26:50.498"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.504">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:27:00.503" status="PASS" endtime="20171005 19:27:00.504"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.505">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:27:00.504" status="PASS" endtime="20171005 19:27:00.505"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.505">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:27:00.505" status="PASS" endtime="20171005 19:27:00.505"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:27:00.506" status="PASS" endtime="20171005 19:27:00.506"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:27:00.507" status="PASS" endtime="20171005 19:27:00.710"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:00.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:27:00.710">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:00.506" status="PASS" endtime="20171005 19:27:00.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:00.711" status="PASS" endtime="20171005 19:27:00.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:00.712" status="PASS" endtime="20171005 19:27:00.712"></status>
</kw>
<status starttime="20171005 19:27:00.503" status="PASS" endtime="20171005 19:27:00.712"></status>
</kw>
<status starttime="20171005 19:27:00.502" status="PASS" endtime="20171005 19:27:00.712"></status>
</kw>
<status starttime="20171005 19:27:00.502" status="PASS" endtime="20171005 19:27:00.712"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.713">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:27:00.713" status="PASS" endtime="20171005 19:27:00.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.715">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:00.715" status="PASS" endtime="20171005 19:27:00.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.717">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:00.716" status="PASS" endtime="20171005 19:27:00.717"></status>
</kw>
<status starttime="20171005 19:27:00.716" status="PASS" endtime="20171005 19:27:00.717"></status>
</kw>
<status starttime="20171005 19:27:00.714" status="PASS" endtime="20171005 19:27:00.717"></status>
</kw>
<status starttime="20171005 19:27:00.713" status="PASS" endtime="20171005 19:27:00.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.779">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:27:00.780">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:00.717" status="PASS" endtime="20171005 19:27:00.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.782">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:00.781" status="PASS" endtime="20171005 19:27:00.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.783">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:00.782" status="PASS" endtime="20171005 19:27:00.783"></status>
</kw>
<status starttime="20171005 19:27:00.782" status="PASS" endtime="20171005 19:27:00.783"></status>
</kw>
<status starttime="20171005 19:27:00.781" status="PASS" endtime="20171005 19:27:00.783"></status>
</kw>
<status starttime="20171005 19:27:00.780" status="PASS" endtime="20171005 19:27:00.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:27:00.784">Delete All Sessions</msg>
<status starttime="20171005 19:27:00.783" status="PASS" endtime="20171005 19:27:00.784"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:00.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:00.501" status="PASS" endtime="20171005 19:27:00.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:00.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:00.784" status="PASS" endtime="20171005 19:27:00.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:00.785">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:27:00.785">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:27:00.785">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:27:00.785" status="PASS" endtime="20171005 19:27:00.785"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:00.786">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:27:00.500" status="PASS" endtime="20171005 19:27:00.786"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:00.786">${power_state} = Off</msg>
<status starttime="20171005 19:27:00.500" status="PASS" endtime="20171005 19:27:00.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:27:00.787">On != Off</msg>
<status starttime="20171005 19:27:00.786" status="FAIL" endtime="20171005 19:27:00.787"></status>
</kw>
<status starttime="20171005 19:27:00.500" status="FAIL" endtime="20171005 19:27:00.787"></status>
</kw>
<status starttime="20171005 19:27:00.499" status="FAIL" endtime="20171005 19:27:00.787"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:10.793">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:27:10.793" status="PASS" endtime="20171005 19:27:10.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:10.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:27:10.794" status="PASS" endtime="20171005 19:27:10.795"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:10.796">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:27:10.795" status="PASS" endtime="20171005 19:27:10.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:10.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:27:10.796" status="PASS" endtime="20171005 19:27:10.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:10.987">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:27:10.798" status="PASS" endtime="20171005 19:27:10.987"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:10.987">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:27:10.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:10.797" status="PASS" endtime="20171005 19:27:10.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:10.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:10.987" status="PASS" endtime="20171005 19:27:10.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:10.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:10.988" status="PASS" endtime="20171005 19:27:10.988"></status>
</kw>
<status starttime="20171005 19:27:10.791" status="PASS" endtime="20171005 19:27:10.988"></status>
</kw>
<status starttime="20171005 19:27:10.791" status="PASS" endtime="20171005 19:27:10.989"></status>
</kw>
<status starttime="20171005 19:27:10.790" status="PASS" endtime="20171005 19:27:10.989"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:10.989">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:27:10.989" status="PASS" endtime="20171005 19:27:10.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:10.991">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:10.991" status="PASS" endtime="20171005 19:27:10.991"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:10.992">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:10.992" status="PASS" endtime="20171005 19:27:10.992"></status>
</kw>
<status starttime="20171005 19:27:10.992" status="PASS" endtime="20171005 19:27:10.993"></status>
</kw>
<status starttime="20171005 19:27:10.990" status="PASS" endtime="20171005 19:27:10.993"></status>
</kw>
<status starttime="20171005 19:27:10.990" status="PASS" endtime="20171005 19:27:10.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:11.068">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:27:11.068">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:10.993" status="PASS" endtime="20171005 19:27:11.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:11.070">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:11.069" status="PASS" endtime="20171005 19:27:11.070"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:11.071">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:11.071" status="PASS" endtime="20171005 19:27:11.072"></status>
</kw>
<status starttime="20171005 19:27:11.070" status="PASS" endtime="20171005 19:27:11.072"></status>
</kw>
<status starttime="20171005 19:27:11.069" status="PASS" endtime="20171005 19:27:11.072"></status>
</kw>
<status starttime="20171005 19:27:11.068" status="PASS" endtime="20171005 19:27:11.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:27:11.072">Delete All Sessions</msg>
<status starttime="20171005 19:27:11.072" status="PASS" endtime="20171005 19:27:11.072"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:11.073">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:10.790" status="PASS" endtime="20171005 19:27:11.073"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:11.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:11.073" status="PASS" endtime="20171005 19:27:11.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:11.074">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:27:11.074">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:27:11.074">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:27:11.074" status="PASS" endtime="20171005 19:27:11.074"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:11.074">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:27:10.789" status="PASS" endtime="20171005 19:27:11.074"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:11.075">${power_state} = Off</msg>
<status starttime="20171005 19:27:10.789" status="PASS" endtime="20171005 19:27:11.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:27:11.075">On != Off</msg>
<status starttime="20171005 19:27:11.075" status="FAIL" endtime="20171005 19:27:11.075"></status>
</kw>
<status starttime="20171005 19:27:10.788" status="FAIL" endtime="20171005 19:27:11.076"></status>
</kw>
<status starttime="20171005 19:27:10.788" status="FAIL" endtime="20171005 19:27:11.076"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.081">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:27:21.081" status="PASS" endtime="20171005 19:27:21.082"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:27:21.082" status="PASS" endtime="20171005 19:27:21.082"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.083">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:27:21.083" status="PASS" endtime="20171005 19:27:21.083"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.084">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:27:21.083" status="PASS" endtime="20171005 19:27:21.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.281">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:27:21.085" status="PASS" endtime="20171005 19:27:21.281"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:21.282">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:27:21.282">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:21.084" status="PASS" endtime="20171005 19:27:21.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.282">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:21.282" status="PASS" endtime="20171005 19:27:21.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:21.283" status="PASS" endtime="20171005 19:27:21.283"></status>
</kw>
<status starttime="20171005 19:27:21.080" status="PASS" endtime="20171005 19:27:21.283"></status>
</kw>
<status starttime="20171005 19:27:21.080" status="PASS" endtime="20171005 19:27:21.283"></status>
</kw>
<status starttime="20171005 19:27:21.079" status="PASS" endtime="20171005 19:27:21.283"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.284">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:27:21.284" status="PASS" endtime="20171005 19:27:21.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.286">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:21.286" status="PASS" endtime="20171005 19:27:21.286"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.287">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:21.287" status="PASS" endtime="20171005 19:27:21.287"></status>
</kw>
<status starttime="20171005 19:27:21.286" status="PASS" endtime="20171005 19:27:21.287"></status>
</kw>
<status starttime="20171005 19:27:21.285" status="PASS" endtime="20171005 19:27:21.288"></status>
</kw>
<status starttime="20171005 19:27:21.285" status="PASS" endtime="20171005 19:27:21.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.363">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:27:21.363">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:21.288" status="PASS" endtime="20171005 19:27:21.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.365">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:21.364" status="PASS" endtime="20171005 19:27:21.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:21.365" status="PASS" endtime="20171005 19:27:21.366"></status>
</kw>
<status starttime="20171005 19:27:21.365" status="PASS" endtime="20171005 19:27:21.366"></status>
</kw>
<status starttime="20171005 19:27:21.364" status="PASS" endtime="20171005 19:27:21.366"></status>
</kw>
<status starttime="20171005 19:27:21.363" status="PASS" endtime="20171005 19:27:21.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:27:21.366">Delete All Sessions</msg>
<status starttime="20171005 19:27:21.366" status="PASS" endtime="20171005 19:27:21.367"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:21.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:21.078" status="PASS" endtime="20171005 19:27:21.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:21.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:21.367" status="PASS" endtime="20171005 19:27:21.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:21.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:27:21.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:27:21.368">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:27:21.368" status="PASS" endtime="20171005 19:27:21.368"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:21.369">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:27:21.078" status="PASS" endtime="20171005 19:27:21.369"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:21.369">${power_state} = Off</msg>
<status starttime="20171005 19:27:21.077" status="PASS" endtime="20171005 19:27:21.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:27:21.370">On != Off</msg>
<status starttime="20171005 19:27:21.369" status="FAIL" endtime="20171005 19:27:21.370"></status>
</kw>
<status starttime="20171005 19:27:21.077" status="FAIL" endtime="20171005 19:27:21.370"></status>
</kw>
<status starttime="20171005 19:27:21.076" status="FAIL" endtime="20171005 19:27:21.370"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.376">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:27:31.375" status="PASS" endtime="20171005 19:27:31.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:27:31.376" status="PASS" endtime="20171005 19:27:31.377"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:27:31.377" status="PASS" endtime="20171005 19:27:31.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:27:31.378" status="PASS" endtime="20171005 19:27:31.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.632">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:27:31.379" status="PASS" endtime="20171005 19:27:31.632"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:31.632">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:27:31.632">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:31.378" status="PASS" endtime="20171005 19:27:31.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.633">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:31.632" status="PASS" endtime="20171005 19:27:31.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:31.633" status="PASS" endtime="20171005 19:27:31.634"></status>
</kw>
<status starttime="20171005 19:27:31.374" status="PASS" endtime="20171005 19:27:31.634"></status>
</kw>
<status starttime="20171005 19:27:31.374" status="PASS" endtime="20171005 19:27:31.634"></status>
</kw>
<status starttime="20171005 19:27:31.373" status="PASS" endtime="20171005 19:27:31.634"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.634">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:27:31.634" status="PASS" endtime="20171005 19:27:31.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.637">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:31.636" status="PASS" endtime="20171005 19:27:31.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.638">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:31.638" status="PASS" endtime="20171005 19:27:31.638"></status>
</kw>
<status starttime="20171005 19:27:31.637" status="PASS" endtime="20171005 19:27:31.638"></status>
</kw>
<status starttime="20171005 19:27:31.635" status="PASS" endtime="20171005 19:27:31.638"></status>
</kw>
<status starttime="20171005 19:27:31.635" status="PASS" endtime="20171005 19:27:31.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.719">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:27:31.719">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:31.638" status="PASS" endtime="20171005 19:27:31.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.721">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:31.720" status="PASS" endtime="20171005 19:27:31.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.722">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:31.722" status="PASS" endtime="20171005 19:27:31.722"></status>
</kw>
<status starttime="20171005 19:27:31.721" status="PASS" endtime="20171005 19:27:31.723"></status>
</kw>
<status starttime="20171005 19:27:31.720" status="PASS" endtime="20171005 19:27:31.723"></status>
</kw>
<status starttime="20171005 19:27:31.719" status="PASS" endtime="20171005 19:27:31.723"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:27:31.723">Delete All Sessions</msg>
<status starttime="20171005 19:27:31.723" status="PASS" endtime="20171005 19:27:31.723"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:31.724">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:31.373" status="PASS" endtime="20171005 19:27:31.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:31.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:31.724" status="PASS" endtime="20171005 19:27:31.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:31.725">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:27:31.725">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:27:31.725">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:27:31.725" status="PASS" endtime="20171005 19:27:31.725"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:31.725">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:27:31.372" status="PASS" endtime="20171005 19:27:31.726"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:31.726">${power_state} = Off</msg>
<status starttime="20171005 19:27:31.372" status="PASS" endtime="20171005 19:27:31.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:27:31.726">On != Off</msg>
<status starttime="20171005 19:27:31.726" status="FAIL" endtime="20171005 19:27:31.727"></status>
</kw>
<status starttime="20171005 19:27:31.371" status="FAIL" endtime="20171005 19:27:31.727"></status>
</kw>
<status starttime="20171005 19:27:31.371" status="FAIL" endtime="20171005 19:27:31.727"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:41.732">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:27:41.732" status="PASS" endtime="20171005 19:27:41.733"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.733">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:27:41.733" status="PASS" endtime="20171005 19:27:41.733"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.734">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:27:41.733" status="PASS" endtime="20171005 19:27:41.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.734">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:27:41.734" status="PASS" endtime="20171005 19:27:41.734"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:41.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:27:41.735" status="PASS" endtime="20171005 19:27:41.926"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:41.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:27:41.926">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:41.735" status="PASS" endtime="20171005 19:27:41.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:41.927">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:41.926" status="PASS" endtime="20171005 19:27:41.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:41.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:41.927" status="PASS" endtime="20171005 19:27:41.927"></status>
</kw>
<status starttime="20171005 19:27:41.731" status="PASS" endtime="20171005 19:27:41.927"></status>
</kw>
<status starttime="20171005 19:27:41.731" status="PASS" endtime="20171005 19:27:41.928"></status>
</kw>
<status starttime="20171005 19:27:41.730" status="PASS" endtime="20171005 19:27:41.928"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.928">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:27:41.928" status="PASS" endtime="20171005 19:27:41.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.930">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:41.930" status="PASS" endtime="20171005 19:27:41.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:41.931">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:41.931" status="PASS" endtime="20171005 19:27:41.931"></status>
</kw>
<status starttime="20171005 19:27:41.931" status="PASS" endtime="20171005 19:27:41.932"></status>
</kw>
<status starttime="20171005 19:27:41.929" status="PASS" endtime="20171005 19:27:41.932"></status>
</kw>
<status starttime="20171005 19:27:41.929" status="PASS" endtime="20171005 19:27:41.932"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.994">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:27:41.994">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:41.932" status="PASS" endtime="20171005 19:27:41.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:41.997">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:41.996" status="PASS" endtime="20171005 19:27:41.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:41.999">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:41.998" status="PASS" endtime="20171005 19:27:41.999"></status>
</kw>
<status starttime="20171005 19:27:41.997" status="PASS" endtime="20171005 19:27:41.999"></status>
</kw>
<status starttime="20171005 19:27:41.996" status="PASS" endtime="20171005 19:27:41.999"></status>
</kw>
<status starttime="20171005 19:27:41.995" status="PASS" endtime="20171005 19:27:41.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:27:41.999">Delete All Sessions</msg>
<status starttime="20171005 19:27:41.999" status="PASS" endtime="20171005 19:27:41.999"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:42.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:41.729" status="PASS" endtime="20171005 19:27:42.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:42.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:42.000" status="PASS" endtime="20171005 19:27:42.000"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:42.001">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:27:42.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:27:42.001">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:27:42.001" status="PASS" endtime="20171005 19:27:42.001"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:42.001">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:27:41.729" status="PASS" endtime="20171005 19:27:42.002"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:42.002">${power_state} = Off</msg>
<status starttime="20171005 19:27:41.728" status="PASS" endtime="20171005 19:27:42.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:27:42.002">On != Off</msg>
<status starttime="20171005 19:27:42.002" status="FAIL" endtime="20171005 19:27:42.003"></status>
</kw>
<status starttime="20171005 19:27:41.728" status="FAIL" endtime="20171005 19:27:42.003"></status>
</kw>
<status starttime="20171005 19:27:41.727" status="FAIL" endtime="20171005 19:27:42.003"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.009">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:27:52.008" status="PASS" endtime="20171005 19:27:52.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:27:52.009" status="PASS" endtime="20171005 19:27:52.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:27:52.010" status="PASS" endtime="20171005 19:27:52.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:27:52.011" status="PASS" endtime="20171005 19:27:52.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:27:52.012" status="PASS" endtime="20171005 19:27:52.189"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:52.189">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:27:52.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:52.011" status="PASS" endtime="20171005 19:27:52.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:52.189" status="PASS" endtime="20171005 19:27:52.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:52.190" status="PASS" endtime="20171005 19:27:52.191"></status>
</kw>
<status starttime="20171005 19:27:52.007" status="PASS" endtime="20171005 19:27:52.191"></status>
</kw>
<status starttime="20171005 19:27:52.007" status="PASS" endtime="20171005 19:27:52.191"></status>
</kw>
<status starttime="20171005 19:27:52.006" status="PASS" endtime="20171005 19:27:52.191"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.192">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:27:52.191" status="PASS" endtime="20171005 19:27:52.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.194">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:52.193" status="PASS" endtime="20171005 19:27:52.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.195">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:27:52.194" status="PASS" endtime="20171005 19:27:52.195"></status>
</kw>
<status starttime="20171005 19:27:52.194" status="PASS" endtime="20171005 19:27:52.195"></status>
</kw>
<status starttime="20171005 19:27:52.192" status="PASS" endtime="20171005 19:27:52.195"></status>
</kw>
<status starttime="20171005 19:27:52.192" status="PASS" endtime="20171005 19:27:52.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:27:52.269">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:52.195" status="PASS" endtime="20171005 19:27:52.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:52.271" status="PASS" endtime="20171005 19:27:52.271"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:27:52.272" status="PASS" endtime="20171005 19:27:52.273"></status>
</kw>
<status starttime="20171005 19:27:52.271" status="PASS" endtime="20171005 19:27:52.273"></status>
</kw>
<status starttime="20171005 19:27:52.270" status="PASS" endtime="20171005 19:27:52.273"></status>
</kw>
<status starttime="20171005 19:27:52.270" status="PASS" endtime="20171005 19:27:52.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:27:52.273">Delete All Sessions</msg>
<status starttime="20171005 19:27:52.273" status="PASS" endtime="20171005 19:27:52.273"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:52.273">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:27:52.005" status="PASS" endtime="20171005 19:27:52.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:27:52.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:27:52.274" status="PASS" endtime="20171005 19:27:52.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:27:52.275">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:27:52.275">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:27:52.275">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:27:52.274" status="PASS" endtime="20171005 19:27:52.275"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:52.275">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:27:52.005" status="PASS" endtime="20171005 19:27:52.275"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:27:52.276">${power_state} = Off</msg>
<status starttime="20171005 19:27:52.004" status="PASS" endtime="20171005 19:27:52.276"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:27:52.276">On != Off</msg>
<status starttime="20171005 19:27:52.276" status="FAIL" endtime="20171005 19:27:52.276"></status>
</kw>
<status starttime="20171005 19:27:52.004" status="FAIL" endtime="20171005 19:27:52.277"></status>
</kw>
<status starttime="20171005 19:27:52.003" status="FAIL" endtime="20171005 19:27:52.277"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.282">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:28:02.282" status="PASS" endtime="20171005 19:28:02.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:28:02.283" status="PASS" endtime="20171005 19:28:02.283"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.284">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:28:02.283" status="PASS" endtime="20171005 19:28:02.284"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:28:02.284" status="PASS" endtime="20171005 19:28:02.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:28:02.285" status="PASS" endtime="20171005 19:28:02.486"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:02.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:28:02.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:02.285" status="PASS" endtime="20171005 19:28:02.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:02.487" status="PASS" endtime="20171005 19:28:02.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:02.487" status="PASS" endtime="20171005 19:28:02.488"></status>
</kw>
<status starttime="20171005 19:28:02.281" status="PASS" endtime="20171005 19:28:02.488"></status>
</kw>
<status starttime="20171005 19:28:02.281" status="PASS" endtime="20171005 19:28:02.488"></status>
</kw>
<status starttime="20171005 19:28:02.280" status="PASS" endtime="20171005 19:28:02.488"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.489">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:28:02.488" status="PASS" endtime="20171005 19:28:02.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.491">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:02.490" status="PASS" endtime="20171005 19:28:02.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.492">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:02.492" status="PASS" endtime="20171005 19:28:02.492"></status>
</kw>
<status starttime="20171005 19:28:02.491" status="PASS" endtime="20171005 19:28:02.492"></status>
</kw>
<status starttime="20171005 19:28:02.490" status="PASS" endtime="20171005 19:28:02.492"></status>
</kw>
<status starttime="20171005 19:28:02.489" status="PASS" endtime="20171005 19:28:02.492"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.555">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:28:02.555">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:02.492" status="PASS" endtime="20171005 19:28:02.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.557">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:02.556" status="PASS" endtime="20171005 19:28:02.557"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.558">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:02.558" status="PASS" endtime="20171005 19:28:02.558"></status>
</kw>
<status starttime="20171005 19:28:02.557" status="PASS" endtime="20171005 19:28:02.558"></status>
</kw>
<status starttime="20171005 19:28:02.556" status="PASS" endtime="20171005 19:28:02.558"></status>
</kw>
<status starttime="20171005 19:28:02.555" status="PASS" endtime="20171005 19:28:02.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:28:02.559">Delete All Sessions</msg>
<status starttime="20171005 19:28:02.559" status="PASS" endtime="20171005 19:28:02.559"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:02.559">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:02.279" status="PASS" endtime="20171005 19:28:02.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:02.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:02.559" status="PASS" endtime="20171005 19:28:02.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:02.560">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:28:02.560">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:28:02.560">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:28:02.560" status="PASS" endtime="20171005 19:28:02.560"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:02.561">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:28:02.279" status="PASS" endtime="20171005 19:28:02.561"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:02.561">${power_state} = Off</msg>
<status starttime="20171005 19:28:02.278" status="PASS" endtime="20171005 19:28:02.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:28:02.562">On != Off</msg>
<status starttime="20171005 19:28:02.561" status="FAIL" endtime="20171005 19:28:02.562"></status>
</kw>
<status starttime="20171005 19:28:02.278" status="FAIL" endtime="20171005 19:28:02.562"></status>
</kw>
<status starttime="20171005 19:28:02.277" status="FAIL" endtime="20171005 19:28:02.562"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.568">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:28:12.567" status="PASS" endtime="20171005 19:28:12.568"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.569">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:28:12.568" status="PASS" endtime="20171005 19:28:12.569"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.569">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:28:12.569" status="PASS" endtime="20171005 19:28:12.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:28:12.570" status="PASS" endtime="20171005 19:28:12.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.775">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:28:12.571" status="PASS" endtime="20171005 19:28:12.775"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:12.775">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:28:12.775">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:12.570" status="PASS" endtime="20171005 19:28:12.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.776">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:12.776" status="PASS" endtime="20171005 19:28:12.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:12.776" status="PASS" endtime="20171005 19:28:12.777"></status>
</kw>
<status starttime="20171005 19:28:12.566" status="PASS" endtime="20171005 19:28:12.777"></status>
</kw>
<status starttime="20171005 19:28:12.566" status="PASS" endtime="20171005 19:28:12.777"></status>
</kw>
<status starttime="20171005 19:28:12.565" status="PASS" endtime="20171005 19:28:12.777"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.778">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:28:12.777" status="PASS" endtime="20171005 19:28:12.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.781">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:12.780" status="PASS" endtime="20171005 19:28:12.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.782">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:12.782" status="PASS" endtime="20171005 19:28:12.782"></status>
</kw>
<status starttime="20171005 19:28:12.781" status="PASS" endtime="20171005 19:28:12.782"></status>
</kw>
<status starttime="20171005 19:28:12.779" status="PASS" endtime="20171005 19:28:12.782"></status>
</kw>
<status starttime="20171005 19:28:12.778" status="PASS" endtime="20171005 19:28:12.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.852">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:28:12.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:12.783" status="PASS" endtime="20171005 19:28:12.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.854">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:12.853" status="PASS" endtime="20171005 19:28:12.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.858">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:12.858" status="PASS" endtime="20171005 19:28:12.858"></status>
</kw>
<status starttime="20171005 19:28:12.854" status="PASS" endtime="20171005 19:28:12.858"></status>
</kw>
<status starttime="20171005 19:28:12.853" status="PASS" endtime="20171005 19:28:12.859"></status>
</kw>
<status starttime="20171005 19:28:12.852" status="PASS" endtime="20171005 19:28:12.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:28:12.859">Delete All Sessions</msg>
<status starttime="20171005 19:28:12.859" status="PASS" endtime="20171005 19:28:12.859"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:12.859">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:12.564" status="PASS" endtime="20171005 19:28:12.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:12.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:12.860" status="PASS" endtime="20171005 19:28:12.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:12.861">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:28:12.861">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:28:12.861">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:28:12.860" status="PASS" endtime="20171005 19:28:12.861"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:12.861">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:28:12.564" status="PASS" endtime="20171005 19:28:12.861"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:12.861">${power_state} = Off</msg>
<status starttime="20171005 19:28:12.563" status="PASS" endtime="20171005 19:28:12.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:28:12.862">On != Off</msg>
<status starttime="20171005 19:28:12.862" status="FAIL" endtime="20171005 19:28:12.862"></status>
</kw>
<status starttime="20171005 19:28:12.563" status="FAIL" endtime="20171005 19:28:12.862"></status>
</kw>
<status starttime="20171005 19:28:12.563" status="FAIL" endtime="20171005 19:28:12.863"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:22.868">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:28:22.867" status="PASS" endtime="20171005 19:28:22.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:22.869">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:28:22.868" status="PASS" endtime="20171005 19:28:22.869"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:22.869">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:28:22.869" status="PASS" endtime="20171005 19:28:22.869"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:22.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:28:22.870" status="PASS" endtime="20171005 19:28:22.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:23.095">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:28:22.871" status="PASS" endtime="20171005 19:28:23.095"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:23.095">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:28:23.095">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:22.870" status="PASS" endtime="20171005 19:28:23.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:23.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:23.096" status="PASS" endtime="20171005 19:28:23.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:23.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:23.097" status="PASS" endtime="20171005 19:28:23.097"></status>
</kw>
<status starttime="20171005 19:28:22.867" status="PASS" endtime="20171005 19:28:23.097"></status>
</kw>
<status starttime="20171005 19:28:22.866" status="PASS" endtime="20171005 19:28:23.098"></status>
</kw>
<status starttime="20171005 19:28:22.866" status="PASS" endtime="20171005 19:28:23.098"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:23.099">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:28:23.098" status="PASS" endtime="20171005 19:28:23.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:23.102">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:23.101" status="PASS" endtime="20171005 19:28:23.102"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:23.103">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:23.103" status="PASS" endtime="20171005 19:28:23.103"></status>
</kw>
<status starttime="20171005 19:28:23.102" status="PASS" endtime="20171005 19:28:23.103"></status>
</kw>
<status starttime="20171005 19:28:23.100" status="PASS" endtime="20171005 19:28:23.103"></status>
</kw>
<status starttime="20171005 19:28:23.099" status="PASS" endtime="20171005 19:28:23.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:23.180">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:28:23.180">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:23.103" status="PASS" endtime="20171005 19:28:23.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:23.182">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:23.182" status="PASS" endtime="20171005 19:28:23.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:23.183">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:23.183" status="PASS" endtime="20171005 19:28:23.183"></status>
</kw>
<status starttime="20171005 19:28:23.182" status="PASS" endtime="20171005 19:28:23.183"></status>
</kw>
<status starttime="20171005 19:28:23.181" status="PASS" endtime="20171005 19:28:23.183"></status>
</kw>
<status starttime="20171005 19:28:23.181" status="PASS" endtime="20171005 19:28:23.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:28:23.184">Delete All Sessions</msg>
<status starttime="20171005 19:28:23.184" status="PASS" endtime="20171005 19:28:23.184"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:23.184">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:22.865" status="PASS" endtime="20171005 19:28:23.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:23.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:23.185" status="PASS" endtime="20171005 19:28:23.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:23.186">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:28:23.186">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:28:23.186">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:28:23.185" status="PASS" endtime="20171005 19:28:23.186"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:23.186">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:28:22.864" status="PASS" endtime="20171005 19:28:23.186"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:23.186">${power_state} = Off</msg>
<status starttime="20171005 19:28:22.864" status="PASS" endtime="20171005 19:28:23.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:28:23.187">On != Off</msg>
<status starttime="20171005 19:28:23.187" status="FAIL" endtime="20171005 19:28:23.187"></status>
</kw>
<status starttime="20171005 19:28:22.864" status="FAIL" endtime="20171005 19:28:23.187"></status>
</kw>
<status starttime="20171005 19:28:22.863" status="FAIL" endtime="20171005 19:28:23.187"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.193">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:28:33.192" status="PASS" endtime="20171005 19:28:33.193"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.194">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:28:33.193" status="PASS" endtime="20171005 19:28:33.194"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.195">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:28:33.194" status="PASS" endtime="20171005 19:28:33.195"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.195">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:28:33.195" status="PASS" endtime="20171005 19:28:33.195"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.390">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:28:33.196" status="PASS" endtime="20171005 19:28:33.390"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:33.391">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:28:33.391">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:33.196" status="PASS" endtime="20171005 19:28:33.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.391">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:33.391" status="PASS" endtime="20171005 19:28:33.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:33.392" status="PASS" endtime="20171005 19:28:33.392"></status>
</kw>
<status starttime="20171005 19:28:33.191" status="PASS" endtime="20171005 19:28:33.392"></status>
</kw>
<status starttime="20171005 19:28:33.191" status="PASS" endtime="20171005 19:28:33.392"></status>
</kw>
<status starttime="20171005 19:28:33.190" status="PASS" endtime="20171005 19:28:33.393"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.393">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:28:33.393" status="PASS" endtime="20171005 19:28:33.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.395">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:33.395" status="PASS" endtime="20171005 19:28:33.395"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.396">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:33.396" status="PASS" endtime="20171005 19:28:33.396"></status>
</kw>
<status starttime="20171005 19:28:33.395" status="PASS" endtime="20171005 19:28:33.397"></status>
</kw>
<status starttime="20171005 19:28:33.394" status="PASS" endtime="20171005 19:28:33.397"></status>
</kw>
<status starttime="20171005 19:28:33.393" status="PASS" endtime="20171005 19:28:33.397"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:28:33.481">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:33.397" status="PASS" endtime="20171005 19:28:33.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:33.483" status="PASS" endtime="20171005 19:28:33.483"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.485">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:33.484" status="PASS" endtime="20171005 19:28:33.485"></status>
</kw>
<status starttime="20171005 19:28:33.483" status="PASS" endtime="20171005 19:28:33.485"></status>
</kw>
<status starttime="20171005 19:28:33.482" status="PASS" endtime="20171005 19:28:33.485"></status>
</kw>
<status starttime="20171005 19:28:33.482" status="PASS" endtime="20171005 19:28:33.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:28:33.486">Delete All Sessions</msg>
<status starttime="20171005 19:28:33.485" status="PASS" endtime="20171005 19:28:33.486"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:33.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:33.190" status="PASS" endtime="20171005 19:28:33.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:33.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:33.486" status="PASS" endtime="20171005 19:28:33.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:33.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:28:33.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:28:33.487">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:28:33.487" status="PASS" endtime="20171005 19:28:33.487"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:33.488">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:28:33.189" status="PASS" endtime="20171005 19:28:33.488"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:33.488">${power_state} = Off</msg>
<status starttime="20171005 19:28:33.189" status="PASS" endtime="20171005 19:28:33.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:28:33.489">On != Off</msg>
<status starttime="20171005 19:28:33.488" status="FAIL" endtime="20171005 19:28:33.489"></status>
</kw>
<status starttime="20171005 19:28:33.188" status="FAIL" endtime="20171005 19:28:33.489"></status>
</kw>
<status starttime="20171005 19:28:33.188" status="FAIL" endtime="20171005 19:28:33.489"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.494">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:28:43.494" status="PASS" endtime="20171005 19:28:43.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:28:43.495" status="PASS" endtime="20171005 19:28:43.495"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:28:43.495" status="PASS" endtime="20171005 19:28:43.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:28:43.496" status="PASS" endtime="20171005 19:28:43.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:28:43.497" status="PASS" endtime="20171005 19:28:43.721"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:43.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:28:43.721">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:43.497" status="PASS" endtime="20171005 19:28:43.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.721">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:43.721" status="PASS" endtime="20171005 19:28:43.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:43.722" status="PASS" endtime="20171005 19:28:43.722"></status>
</kw>
<status starttime="20171005 19:28:43.493" status="PASS" endtime="20171005 19:28:43.722"></status>
</kw>
<status starttime="20171005 19:28:43.493" status="PASS" endtime="20171005 19:28:43.722"></status>
</kw>
<status starttime="20171005 19:28:43.492" status="PASS" endtime="20171005 19:28:43.723"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.723">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:28:43.723" status="PASS" endtime="20171005 19:28:43.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.725">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:43.725" status="PASS" endtime="20171005 19:28:43.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.726">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:43.726" status="PASS" endtime="20171005 19:28:43.727"></status>
</kw>
<status starttime="20171005 19:28:43.726" status="PASS" endtime="20171005 19:28:43.727"></status>
</kw>
<status starttime="20171005 19:28:43.724" status="PASS" endtime="20171005 19:28:43.727"></status>
</kw>
<status starttime="20171005 19:28:43.724" status="PASS" endtime="20171005 19:28:43.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:28:43.806">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:43.727" status="PASS" endtime="20171005 19:28:43.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.808">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:43.808" status="PASS" endtime="20171005 19:28:43.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.810">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:43.809" status="PASS" endtime="20171005 19:28:43.810"></status>
</kw>
<status starttime="20171005 19:28:43.809" status="PASS" endtime="20171005 19:28:43.810"></status>
</kw>
<status starttime="20171005 19:28:43.807" status="PASS" endtime="20171005 19:28:43.810"></status>
</kw>
<status starttime="20171005 19:28:43.807" status="PASS" endtime="20171005 19:28:43.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:28:43.810">Delete All Sessions</msg>
<status starttime="20171005 19:28:43.810" status="PASS" endtime="20171005 19:28:43.811"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:43.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:43.491" status="PASS" endtime="20171005 19:28:43.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:43.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:43.811" status="PASS" endtime="20171005 19:28:43.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:43.812">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:28:43.812">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:28:43.812">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:28:43.812" status="PASS" endtime="20171005 19:28:43.812"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:43.812">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:28:43.491" status="PASS" endtime="20171005 19:28:43.813"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:43.813">${power_state} = Off</msg>
<status starttime="20171005 19:28:43.490" status="PASS" endtime="20171005 19:28:43.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:28:43.813">On != Off</msg>
<status starttime="20171005 19:28:43.813" status="FAIL" endtime="20171005 19:28:43.814"></status>
</kw>
<status starttime="20171005 19:28:43.490" status="FAIL" endtime="20171005 19:28:43.814"></status>
</kw>
<status starttime="20171005 19:28:43.489" status="FAIL" endtime="20171005 19:28:43.814"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:53.819">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:28:53.819" status="PASS" endtime="20171005 19:28:53.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:53.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:28:53.820" status="PASS" endtime="20171005 19:28:53.820"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:53.821">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:28:53.821" status="PASS" endtime="20171005 19:28:53.821"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:53.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:28:53.821" status="PASS" endtime="20171005 19:28:53.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:54.025">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:28:53.822" status="PASS" endtime="20171005 19:28:54.025"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:54.025">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:28:54.025">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:53.822" status="PASS" endtime="20171005 19:28:54.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:54.026">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:54.025" status="PASS" endtime="20171005 19:28:54.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:54.026">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:54.026" status="PASS" endtime="20171005 19:28:54.026"></status>
</kw>
<status starttime="20171005 19:28:53.818" status="PASS" endtime="20171005 19:28:54.027"></status>
</kw>
<status starttime="20171005 19:28:53.818" status="PASS" endtime="20171005 19:28:54.027"></status>
</kw>
<status starttime="20171005 19:28:53.817" status="PASS" endtime="20171005 19:28:54.027"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:54.027">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:28:54.027" status="PASS" endtime="20171005 19:28:54.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:54.029">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:54.029" status="PASS" endtime="20171005 19:28:54.029"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:54.030">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:28:54.030" status="PASS" endtime="20171005 19:28:54.030"></status>
</kw>
<status starttime="20171005 19:28:54.030" status="PASS" endtime="20171005 19:28:54.031"></status>
</kw>
<status starttime="20171005 19:28:54.028" status="PASS" endtime="20171005 19:28:54.031"></status>
</kw>
<status starttime="20171005 19:28:54.028" status="PASS" endtime="20171005 19:28:54.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:54.104">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:28:54.104">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:54.031" status="PASS" endtime="20171005 19:28:54.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:54.106">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:54.105" status="PASS" endtime="20171005 19:28:54.106"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:54.107">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:28:54.107" status="PASS" endtime="20171005 19:28:54.107"></status>
</kw>
<status starttime="20171005 19:28:54.106" status="PASS" endtime="20171005 19:28:54.107"></status>
</kw>
<status starttime="20171005 19:28:54.105" status="PASS" endtime="20171005 19:28:54.107"></status>
</kw>
<status starttime="20171005 19:28:54.104" status="PASS" endtime="20171005 19:28:54.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:28:54.108">Delete All Sessions</msg>
<status starttime="20171005 19:28:54.108" status="PASS" endtime="20171005 19:28:54.108"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:54.108">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:28:53.816" status="PASS" endtime="20171005 19:28:54.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:28:54.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:28:54.109" status="PASS" endtime="20171005 19:28:54.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:28:54.109">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:28:54.110">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:28:54.110">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:28:54.109" status="PASS" endtime="20171005 19:28:54.110"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:54.110">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:28:53.816" status="PASS" endtime="20171005 19:28:54.110"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:28:54.110">${power_state} = Off</msg>
<status starttime="20171005 19:28:53.815" status="PASS" endtime="20171005 19:28:54.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:28:54.111">On != Off</msg>
<status starttime="20171005 19:28:54.111" status="FAIL" endtime="20171005 19:28:54.111"></status>
</kw>
<status starttime="20171005 19:28:53.815" status="FAIL" endtime="20171005 19:28:54.111"></status>
</kw>
<status starttime="20171005 19:28:53.814" status="FAIL" endtime="20171005 19:28:54.111"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.116">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:29:04.116" status="PASS" endtime="20171005 19:29:04.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:29:04.117" status="PASS" endtime="20171005 19:29:04.117"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.118">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:29:04.118" status="PASS" endtime="20171005 19:29:04.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.119">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:29:04.118" status="PASS" endtime="20171005 19:29:04.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:29:04.119" status="PASS" endtime="20171005 19:29:04.337"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:04.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:29:04.337">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:04.119" status="PASS" endtime="20171005 19:29:04.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:04.338" status="PASS" endtime="20171005 19:29:04.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:04.339" status="PASS" endtime="20171005 19:29:04.339"></status>
</kw>
<status starttime="20171005 19:29:04.115" status="PASS" endtime="20171005 19:29:04.339"></status>
</kw>
<status starttime="20171005 19:29:04.115" status="PASS" endtime="20171005 19:29:04.339"></status>
</kw>
<status starttime="20171005 19:29:04.114" status="PASS" endtime="20171005 19:29:04.339"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.340">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:29:04.340" status="PASS" endtime="20171005 19:29:04.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.342">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:04.341" status="PASS" endtime="20171005 19:29:04.342"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.343">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:04.343" status="PASS" endtime="20171005 19:29:04.343"></status>
</kw>
<status starttime="20171005 19:29:04.342" status="PASS" endtime="20171005 19:29:04.343"></status>
</kw>
<status starttime="20171005 19:29:04.341" status="PASS" endtime="20171005 19:29:04.343"></status>
</kw>
<status starttime="20171005 19:29:04.340" status="PASS" endtime="20171005 19:29:04.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.405">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:29:04.405">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:04.344" status="PASS" endtime="20171005 19:29:04.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.407">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:04.407" status="PASS" endtime="20171005 19:29:04.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.408">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:04.408" status="PASS" endtime="20171005 19:29:04.408"></status>
</kw>
<status starttime="20171005 19:29:04.407" status="PASS" endtime="20171005 19:29:04.408"></status>
</kw>
<status starttime="20171005 19:29:04.406" status="PASS" endtime="20171005 19:29:04.409"></status>
</kw>
<status starttime="20171005 19:29:04.406" status="PASS" endtime="20171005 19:29:04.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:29:04.409">Delete All Sessions</msg>
<status starttime="20171005 19:29:04.409" status="PASS" endtime="20171005 19:29:04.409"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:04.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:04.114" status="PASS" endtime="20171005 19:29:04.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:04.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:04.410" status="PASS" endtime="20171005 19:29:04.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:04.411">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:29:04.411">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:29:04.411">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:29:04.410" status="PASS" endtime="20171005 19:29:04.411"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:04.411">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:29:04.113" status="PASS" endtime="20171005 19:29:04.411"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:04.411">${power_state} = Off</msg>
<status starttime="20171005 19:29:04.113" status="PASS" endtime="20171005 19:29:04.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:29:04.412">On != Off</msg>
<status starttime="20171005 19:29:04.412" status="FAIL" endtime="20171005 19:29:04.412"></status>
</kw>
<status starttime="20171005 19:29:04.112" status="FAIL" endtime="20171005 19:29:04.412"></status>
</kw>
<status starttime="20171005 19:29:04.112" status="FAIL" endtime="20171005 19:29:04.412"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.419">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:29:14.419" status="PASS" endtime="20171005 19:29:14.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:29:14.420" status="PASS" endtime="20171005 19:29:14.421"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.422">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:29:14.421" status="PASS" endtime="20171005 19:29:14.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.423">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:29:14.422" status="PASS" endtime="20171005 19:29:14.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.650">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:29:14.424" status="PASS" endtime="20171005 19:29:14.650"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:14.650">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:29:14.650">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:14.423" status="PASS" endtime="20171005 19:29:14.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.651">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:14.651" status="PASS" endtime="20171005 19:29:14.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:14.651" status="PASS" endtime="20171005 19:29:14.652"></status>
</kw>
<status starttime="20171005 19:29:14.418" status="PASS" endtime="20171005 19:29:14.652"></status>
</kw>
<status starttime="20171005 19:29:14.417" status="PASS" endtime="20171005 19:29:14.652"></status>
</kw>
<status starttime="20171005 19:29:14.416" status="PASS" endtime="20171005 19:29:14.652"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.653">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:29:14.652" status="PASS" endtime="20171005 19:29:14.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.655">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:14.654" status="PASS" endtime="20171005 19:29:14.655"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.656">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:14.655" status="PASS" endtime="20171005 19:29:14.656"></status>
</kw>
<status starttime="20171005 19:29:14.655" status="PASS" endtime="20171005 19:29:14.656"></status>
</kw>
<status starttime="20171005 19:29:14.653" status="PASS" endtime="20171005 19:29:14.656"></status>
</kw>
<status starttime="20171005 19:29:14.653" status="PASS" endtime="20171005 19:29:14.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.720">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:29:14.720">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:14.657" status="PASS" endtime="20171005 19:29:14.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.722">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:14.721" status="PASS" endtime="20171005 19:29:14.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.723">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:14.723" status="PASS" endtime="20171005 19:29:14.723"></status>
</kw>
<status starttime="20171005 19:29:14.722" status="PASS" endtime="20171005 19:29:14.723"></status>
</kw>
<status starttime="20171005 19:29:14.721" status="PASS" endtime="20171005 19:29:14.724"></status>
</kw>
<status starttime="20171005 19:29:14.721" status="PASS" endtime="20171005 19:29:14.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:29:14.724">Delete All Sessions</msg>
<status starttime="20171005 19:29:14.724" status="PASS" endtime="20171005 19:29:14.724"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:14.724">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:14.415" status="PASS" endtime="20171005 19:29:14.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:14.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:14.725" status="PASS" endtime="20171005 19:29:14.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:14.726">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:29:14.726">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:29:14.726">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:29:14.725" status="PASS" endtime="20171005 19:29:14.726"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:14.727">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:29:14.414" status="PASS" endtime="20171005 19:29:14.727"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:14.727">${power_state} = Off</msg>
<status starttime="20171005 19:29:14.414" status="PASS" endtime="20171005 19:29:14.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:29:14.728">On != Off</msg>
<status starttime="20171005 19:29:14.728" status="FAIL" endtime="20171005 19:29:14.728"></status>
</kw>
<status starttime="20171005 19:29:14.413" status="FAIL" endtime="20171005 19:29:14.728"></status>
</kw>
<status starttime="20171005 19:29:14.413" status="FAIL" endtime="20171005 19:29:14.729"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:24.734">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:29:24.733" status="PASS" endtime="20171005 19:29:24.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:24.735">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:29:24.734" status="PASS" endtime="20171005 19:29:24.735"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:24.735">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:29:24.735" status="PASS" endtime="20171005 19:29:24.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:24.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:29:24.736" status="PASS" endtime="20171005 19:29:24.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:24.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:29:24.737" status="PASS" endtime="20171005 19:29:24.925"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:24.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:29:24.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:24.737" status="PASS" endtime="20171005 19:29:24.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:24.926">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:24.925" status="PASS" endtime="20171005 19:29:24.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:24.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:24.926" status="PASS" endtime="20171005 19:29:24.927"></status>
</kw>
<status starttime="20171005 19:29:24.733" status="PASS" endtime="20171005 19:29:24.927"></status>
</kw>
<status starttime="20171005 19:29:24.732" status="PASS" endtime="20171005 19:29:24.927"></status>
</kw>
<status starttime="20171005 19:29:24.732" status="PASS" endtime="20171005 19:29:24.927"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:24.927">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:29:24.927" status="PASS" endtime="20171005 19:29:24.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:24.930">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:24.929" status="PASS" endtime="20171005 19:29:24.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:24.930">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:24.930" status="PASS" endtime="20171005 19:29:24.931"></status>
</kw>
<status starttime="20171005 19:29:24.930" status="PASS" endtime="20171005 19:29:24.931"></status>
</kw>
<status starttime="20171005 19:29:24.928" status="PASS" endtime="20171005 19:29:24.931"></status>
</kw>
<status starttime="20171005 19:29:24.928" status="PASS" endtime="20171005 19:29:24.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:25.020">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:29:25.020">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:24.931" status="PASS" endtime="20171005 19:29:25.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:25.022">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:25.021" status="PASS" endtime="20171005 19:29:25.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:25.023">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:25.022" status="PASS" endtime="20171005 19:29:25.023"></status>
</kw>
<status starttime="20171005 19:29:25.022" status="PASS" endtime="20171005 19:29:25.023"></status>
</kw>
<status starttime="20171005 19:29:25.021" status="PASS" endtime="20171005 19:29:25.023"></status>
</kw>
<status starttime="20171005 19:29:25.020" status="PASS" endtime="20171005 19:29:25.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:29:25.023">Delete All Sessions</msg>
<status starttime="20171005 19:29:25.023" status="PASS" endtime="20171005 19:29:25.024"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:25.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:24.731" status="PASS" endtime="20171005 19:29:25.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:25.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:25.024" status="PASS" endtime="20171005 19:29:25.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:25.025">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:29:25.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:29:25.025">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:29:25.025" status="PASS" endtime="20171005 19:29:25.025"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:25.026">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:29:24.731" status="PASS" endtime="20171005 19:29:25.026"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:25.026">${power_state} = Off</msg>
<status starttime="20171005 19:29:24.730" status="PASS" endtime="20171005 19:29:25.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:29:25.027">On != Off</msg>
<status starttime="20171005 19:29:25.026" status="FAIL" endtime="20171005 19:29:25.027"></status>
</kw>
<status starttime="20171005 19:29:24.730" status="FAIL" endtime="20171005 19:29:25.027"></status>
</kw>
<status starttime="20171005 19:29:24.729" status="FAIL" endtime="20171005 19:29:25.027"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.032">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:29:35.032" status="PASS" endtime="20171005 19:29:35.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:29:35.033" status="PASS" endtime="20171005 19:29:35.034"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.034">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:29:35.034" status="PASS" endtime="20171005 19:29:35.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:29:35.034" status="PASS" endtime="20171005 19:29:35.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.210">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:29:35.036" status="PASS" endtime="20171005 19:29:35.210"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:35.210">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:29:35.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:35.035" status="PASS" endtime="20171005 19:29:35.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.211">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:35.211" status="PASS" endtime="20171005 19:29:35.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:35.211" status="PASS" endtime="20171005 19:29:35.212"></status>
</kw>
<status starttime="20171005 19:29:35.031" status="PASS" endtime="20171005 19:29:35.212"></status>
</kw>
<status starttime="20171005 19:29:35.031" status="PASS" endtime="20171005 19:29:35.212"></status>
</kw>
<status starttime="20171005 19:29:35.030" status="PASS" endtime="20171005 19:29:35.212"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.213">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:29:35.212" status="PASS" endtime="20171005 19:29:35.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.215">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:35.214" status="PASS" endtime="20171005 19:29:35.215"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.216">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:35.216" status="PASS" endtime="20171005 19:29:35.217"></status>
</kw>
<status starttime="20171005 19:29:35.215" status="PASS" endtime="20171005 19:29:35.217"></status>
</kw>
<status starttime="20171005 19:29:35.214" status="PASS" endtime="20171005 19:29:35.217"></status>
</kw>
<status starttime="20171005 19:29:35.213" status="PASS" endtime="20171005 19:29:35.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.294">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:29:35.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:35.217" status="PASS" endtime="20171005 19:29:35.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.295">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:35.295" status="PASS" endtime="20171005 19:29:35.296"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:35.299" status="PASS" endtime="20171005 19:29:35.300"></status>
</kw>
<status starttime="20171005 19:29:35.296" status="PASS" endtime="20171005 19:29:35.300"></status>
</kw>
<status starttime="20171005 19:29:35.294" status="PASS" endtime="20171005 19:29:35.300"></status>
</kw>
<status starttime="20171005 19:29:35.294" status="PASS" endtime="20171005 19:29:35.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:29:35.301">Delete All Sessions</msg>
<status starttime="20171005 19:29:35.300" status="PASS" endtime="20171005 19:29:35.301"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:35.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:35.029" status="PASS" endtime="20171005 19:29:35.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:35.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:35.301" status="PASS" endtime="20171005 19:29:35.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:35.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:29:35.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:29:35.302">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:29:35.302" status="PASS" endtime="20171005 19:29:35.303"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:35.303">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:29:35.029" status="PASS" endtime="20171005 19:29:35.303"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:35.303">${power_state} = Off</msg>
<status starttime="20171005 19:29:35.028" status="PASS" endtime="20171005 19:29:35.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:29:35.304">On != Off</msg>
<status starttime="20171005 19:29:35.303" status="FAIL" endtime="20171005 19:29:35.304"></status>
</kw>
<status starttime="20171005 19:29:35.028" status="FAIL" endtime="20171005 19:29:35.304"></status>
</kw>
<status starttime="20171005 19:29:35.027" status="FAIL" endtime="20171005 19:29:35.304"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.311">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:29:45.310" status="PASS" endtime="20171005 19:29:45.311"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:29:45.312" status="PASS" endtime="20171005 19:29:45.312"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.313">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:29:45.312" status="PASS" endtime="20171005 19:29:45.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:29:45.313" status="PASS" endtime="20171005 19:29:45.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:29:45.314" status="PASS" endtime="20171005 19:29:45.503"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:45.504">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:29:45.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:45.314" status="PASS" endtime="20171005 19:29:45.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:45.504" status="PASS" endtime="20171005 19:29:45.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:45.505" status="PASS" endtime="20171005 19:29:45.505"></status>
</kw>
<status starttime="20171005 19:29:45.310" status="PASS" endtime="20171005 19:29:45.505"></status>
</kw>
<status starttime="20171005 19:29:45.309" status="PASS" endtime="20171005 19:29:45.505"></status>
</kw>
<status starttime="20171005 19:29:45.308" status="PASS" endtime="20171005 19:29:45.505"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.506">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:29:45.506" status="PASS" endtime="20171005 19:29:45.506"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.508">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:45.508" status="PASS" endtime="20171005 19:29:45.508"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.509">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:45.509" status="PASS" endtime="20171005 19:29:45.509"></status>
</kw>
<status starttime="20171005 19:29:45.508" status="PASS" endtime="20171005 19:29:45.509"></status>
</kw>
<status starttime="20171005 19:29:45.507" status="PASS" endtime="20171005 19:29:45.510"></status>
</kw>
<status starttime="20171005 19:29:45.506" status="PASS" endtime="20171005 19:29:45.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.572">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:29:45.572">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:45.510" status="PASS" endtime="20171005 19:29:45.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.574">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:45.573" status="PASS" endtime="20171005 19:29:45.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.575">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:45.575" status="PASS" endtime="20171005 19:29:45.575"></status>
</kw>
<status starttime="20171005 19:29:45.574" status="PASS" endtime="20171005 19:29:45.575"></status>
</kw>
<status starttime="20171005 19:29:45.573" status="PASS" endtime="20171005 19:29:45.575"></status>
</kw>
<status starttime="20171005 19:29:45.573" status="PASS" endtime="20171005 19:29:45.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:29:45.576">Delete All Sessions</msg>
<status starttime="20171005 19:29:45.576" status="PASS" endtime="20171005 19:29:45.576"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:45.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:45.307" status="PASS" endtime="20171005 19:29:45.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:45.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:45.577" status="PASS" endtime="20171005 19:29:45.577"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:45.578">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:29:45.578">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:29:45.578">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:29:45.577" status="PASS" endtime="20171005 19:29:45.578"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:45.578">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:29:45.306" status="PASS" endtime="20171005 19:29:45.578"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:45.578">${power_state} = Off</msg>
<status starttime="20171005 19:29:45.306" status="PASS" endtime="20171005 19:29:45.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:29:45.579">On != Off</msg>
<status starttime="20171005 19:29:45.579" status="FAIL" endtime="20171005 19:29:45.579"></status>
</kw>
<status starttime="20171005 19:29:45.305" status="FAIL" endtime="20171005 19:29:45.579"></status>
</kw>
<status starttime="20171005 19:29:45.305" status="FAIL" endtime="20171005 19:29:45.579"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.587">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:29:55.587" status="PASS" endtime="20171005 19:29:55.588"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.589">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:29:55.588" status="PASS" endtime="20171005 19:29:55.589"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.590">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:29:55.589" status="PASS" endtime="20171005 19:29:55.590"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.591">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:29:55.590" status="PASS" endtime="20171005 19:29:55.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.793">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:29:55.592" status="PASS" endtime="20171005 19:29:55.794"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:55.794">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:29:55.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:55.591" status="PASS" endtime="20171005 19:29:55.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.794">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:55.794" status="PASS" endtime="20171005 19:29:55.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:55.795" status="PASS" endtime="20171005 19:29:55.795"></status>
</kw>
<status starttime="20171005 19:29:55.585" status="PASS" endtime="20171005 19:29:55.796"></status>
</kw>
<status starttime="20171005 19:29:55.585" status="PASS" endtime="20171005 19:29:55.796"></status>
</kw>
<status starttime="20171005 19:29:55.584" status="PASS" endtime="20171005 19:29:55.796"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.796">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:29:55.796" status="PASS" endtime="20171005 19:29:55.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.799">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:55.798" status="PASS" endtime="20171005 19:29:55.799"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.800">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:29:55.800" status="PASS" endtime="20171005 19:29:55.800"></status>
</kw>
<status starttime="20171005 19:29:55.799" status="PASS" endtime="20171005 19:29:55.800"></status>
</kw>
<status starttime="20171005 19:29:55.797" status="PASS" endtime="20171005 19:29:55.800"></status>
</kw>
<status starttime="20171005 19:29:55.797" status="PASS" endtime="20171005 19:29:55.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.863">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:29:55.863">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:55.801" status="PASS" endtime="20171005 19:29:55.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.865">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:55.864" status="PASS" endtime="20171005 19:29:55.865"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.866">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:29:55.866" status="PASS" endtime="20171005 19:29:55.867"></status>
</kw>
<status starttime="20171005 19:29:55.865" status="PASS" endtime="20171005 19:29:55.867"></status>
</kw>
<status starttime="20171005 19:29:55.864" status="PASS" endtime="20171005 19:29:55.867"></status>
</kw>
<status starttime="20171005 19:29:55.863" status="PASS" endtime="20171005 19:29:55.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:29:55.868">Delete All Sessions</msg>
<status starttime="20171005 19:29:55.867" status="PASS" endtime="20171005 19:29:55.868"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:55.868">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:29:55.583" status="PASS" endtime="20171005 19:29:55.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:29:55.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:29:55.868" status="PASS" endtime="20171005 19:29:55.869"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:29:55.869">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:29:55.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:29:55.869">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:29:55.869" status="PASS" endtime="20171005 19:29:55.869"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:55.870">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:29:55.582" status="PASS" endtime="20171005 19:29:55.870"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:29:55.870">${power_state} = Off</msg>
<status starttime="20171005 19:29:55.581" status="PASS" endtime="20171005 19:29:55.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:29:55.871">On != Off</msg>
<status starttime="20171005 19:29:55.870" status="FAIL" endtime="20171005 19:29:55.871"></status>
</kw>
<status starttime="20171005 19:29:55.581" status="FAIL" endtime="20171005 19:29:55.871"></status>
</kw>
<status starttime="20171005 19:29:55.580" status="FAIL" endtime="20171005 19:29:55.871"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:05.876">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:30:05.876" status="PASS" endtime="20171005 19:30:05.876"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:05.877">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:30:05.877" status="PASS" endtime="20171005 19:30:05.877"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:05.878">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:30:05.877" status="PASS" endtime="20171005 19:30:05.878"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:05.878">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:30:05.878" status="PASS" endtime="20171005 19:30:05.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:06.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:30:05.879" status="PASS" endtime="20171005 19:30:06.063"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:06.063">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:30:06.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:05.879" status="PASS" endtime="20171005 19:30:06.063"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:06.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:06.064" status="PASS" endtime="20171005 19:30:06.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:06.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:06.064" status="PASS" endtime="20171005 19:30:06.065"></status>
</kw>
<status starttime="20171005 19:30:05.875" status="PASS" endtime="20171005 19:30:06.065"></status>
</kw>
<status starttime="20171005 19:30:05.875" status="PASS" endtime="20171005 19:30:06.065"></status>
</kw>
<status starttime="20171005 19:30:05.874" status="PASS" endtime="20171005 19:30:06.065"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:06.066">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:30:06.065" status="PASS" endtime="20171005 19:30:06.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:06.068">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:06.067" status="PASS" endtime="20171005 19:30:06.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:06.069">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:06.069" status="PASS" endtime="20171005 19:30:06.069"></status>
</kw>
<status starttime="20171005 19:30:06.068" status="PASS" endtime="20171005 19:30:06.069"></status>
</kw>
<status starttime="20171005 19:30:06.067" status="PASS" endtime="20171005 19:30:06.069"></status>
</kw>
<status starttime="20171005 19:30:06.066" status="PASS" endtime="20171005 19:30:06.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:06.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:30:06.132">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:06.070" status="PASS" endtime="20171005 19:30:06.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:06.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:06.133" status="PASS" endtime="20171005 19:30:06.134"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:06.135">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:06.134" status="PASS" endtime="20171005 19:30:06.135"></status>
</kw>
<status starttime="20171005 19:30:06.134" status="PASS" endtime="20171005 19:30:06.135"></status>
</kw>
<status starttime="20171005 19:30:06.133" status="PASS" endtime="20171005 19:30:06.135"></status>
</kw>
<status starttime="20171005 19:30:06.132" status="PASS" endtime="20171005 19:30:06.135"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:30:06.135">Delete All Sessions</msg>
<status starttime="20171005 19:30:06.135" status="PASS" endtime="20171005 19:30:06.136"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:06.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:05.873" status="PASS" endtime="20171005 19:30:06.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:06.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:06.136" status="PASS" endtime="20171005 19:30:06.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:06.137">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:30:06.137">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:30:06.137">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:30:06.137" status="PASS" endtime="20171005 19:30:06.137"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:06.138">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:30:05.873" status="PASS" endtime="20171005 19:30:06.138"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:06.138">${power_state} = Off</msg>
<status starttime="20171005 19:30:05.872" status="PASS" endtime="20171005 19:30:06.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:30:06.139">On != Off</msg>
<status starttime="20171005 19:30:06.138" status="FAIL" endtime="20171005 19:30:06.139"></status>
</kw>
<status starttime="20171005 19:30:05.872" status="FAIL" endtime="20171005 19:30:06.139"></status>
</kw>
<status starttime="20171005 19:30:05.871" status="FAIL" endtime="20171005 19:30:06.139"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.144">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:30:16.144" status="PASS" endtime="20171005 19:30:16.145"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:30:16.145" status="PASS" endtime="20171005 19:30:16.145"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.146">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:30:16.146" status="PASS" endtime="20171005 19:30:16.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:30:16.146" status="PASS" endtime="20171005 19:30:16.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:30:16.148" status="PASS" endtime="20171005 19:30:16.352"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:16.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:30:16.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:16.147" status="PASS" endtime="20171005 19:30:16.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:16.353" status="PASS" endtime="20171005 19:30:16.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:16.353" status="PASS" endtime="20171005 19:30:16.354"></status>
</kw>
<status starttime="20171005 19:30:16.143" status="PASS" endtime="20171005 19:30:16.354"></status>
</kw>
<status starttime="20171005 19:30:16.143" status="PASS" endtime="20171005 19:30:16.354"></status>
</kw>
<status starttime="20171005 19:30:16.142" status="PASS" endtime="20171005 19:30:16.354"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.355">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:30:16.354" status="PASS" endtime="20171005 19:30:16.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.357">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:16.356" status="PASS" endtime="20171005 19:30:16.357"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.358">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:16.358" status="PASS" endtime="20171005 19:30:16.358"></status>
</kw>
<status starttime="20171005 19:30:16.357" status="PASS" endtime="20171005 19:30:16.358"></status>
</kw>
<status starttime="20171005 19:30:16.355" status="PASS" endtime="20171005 19:30:16.358"></status>
</kw>
<status starttime="20171005 19:30:16.355" status="PASS" endtime="20171005 19:30:16.358"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.421">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:30:16.421">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:16.359" status="PASS" endtime="20171005 19:30:16.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.423">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:16.423" status="PASS" endtime="20171005 19:30:16.423"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.424">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:16.424" status="PASS" endtime="20171005 19:30:16.425"></status>
</kw>
<status starttime="20171005 19:30:16.423" status="PASS" endtime="20171005 19:30:16.425"></status>
</kw>
<status starttime="20171005 19:30:16.422" status="PASS" endtime="20171005 19:30:16.425"></status>
</kw>
<status starttime="20171005 19:30:16.422" status="PASS" endtime="20171005 19:30:16.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:30:16.425">Delete All Sessions</msg>
<status starttime="20171005 19:30:16.425" status="PASS" endtime="20171005 19:30:16.425"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:16.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:16.141" status="PASS" endtime="20171005 19:30:16.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:16.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:16.426" status="PASS" endtime="20171005 19:30:16.426"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:16.427">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:30:16.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:30:16.427">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:30:16.426" status="PASS" endtime="20171005 19:30:16.427"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:16.427">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:30:16.141" status="PASS" endtime="20171005 19:30:16.427"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:16.428">${power_state} = Off</msg>
<status starttime="20171005 19:30:16.140" status="PASS" endtime="20171005 19:30:16.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:30:16.428">On != Off</msg>
<status starttime="20171005 19:30:16.428" status="FAIL" endtime="20171005 19:30:16.428"></status>
</kw>
<status starttime="20171005 19:30:16.140" status="FAIL" endtime="20171005 19:30:16.429"></status>
</kw>
<status starttime="20171005 19:30:16.139" status="FAIL" endtime="20171005 19:30:16.429"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.434">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:30:26.434" status="PASS" endtime="20171005 19:30:26.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:30:26.435" status="PASS" endtime="20171005 19:30:26.436"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.437">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:30:26.436" status="PASS" endtime="20171005 19:30:26.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:30:26.437" status="PASS" endtime="20171005 19:30:26.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.633">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:30:26.439" status="PASS" endtime="20171005 19:30:26.634"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:26.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:30:26.634">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:26.438" status="PASS" endtime="20171005 19:30:26.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:26.634" status="PASS" endtime="20171005 19:30:26.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:26.635" status="PASS" endtime="20171005 19:30:26.635"></status>
</kw>
<status starttime="20171005 19:30:26.433" status="PASS" endtime="20171005 19:30:26.635"></status>
</kw>
<status starttime="20171005 19:30:26.433" status="PASS" endtime="20171005 19:30:26.635"></status>
</kw>
<status starttime="20171005 19:30:26.432" status="PASS" endtime="20171005 19:30:26.636"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.636">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:30:26.636" status="PASS" endtime="20171005 19:30:26.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.638">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:26.638" status="PASS" endtime="20171005 19:30:26.639"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.639">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:26.639" status="PASS" endtime="20171005 19:30:26.640"></status>
</kw>
<status starttime="20171005 19:30:26.639" status="PASS" endtime="20171005 19:30:26.640"></status>
</kw>
<status starttime="20171005 19:30:26.637" status="PASS" endtime="20171005 19:30:26.640"></status>
</kw>
<status starttime="20171005 19:30:26.637" status="PASS" endtime="20171005 19:30:26.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.709">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:30:26.709">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:26.640" status="PASS" endtime="20171005 19:30:26.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.711">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:26.710" status="PASS" endtime="20171005 19:30:26.711"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.712">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:26.712" status="PASS" endtime="20171005 19:30:26.712"></status>
</kw>
<status starttime="20171005 19:30:26.711" status="PASS" endtime="20171005 19:30:26.714"></status>
</kw>
<status starttime="20171005 19:30:26.710" status="PASS" endtime="20171005 19:30:26.714"></status>
</kw>
<status starttime="20171005 19:30:26.709" status="PASS" endtime="20171005 19:30:26.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:30:26.714">Delete All Sessions</msg>
<status starttime="20171005 19:30:26.714" status="PASS" endtime="20171005 19:30:26.714"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:26.714">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:26.431" status="PASS" endtime="20171005 19:30:26.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:26.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:26.715" status="PASS" endtime="20171005 19:30:26.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:26.716">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:30:26.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:30:26.716">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:30:26.715" status="PASS" endtime="20171005 19:30:26.716"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:26.716">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:30:26.431" status="PASS" endtime="20171005 19:30:26.716"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:26.717">${power_state} = Off</msg>
<status starttime="20171005 19:30:26.430" status="PASS" endtime="20171005 19:30:26.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:30:26.717">On != Off</msg>
<status starttime="20171005 19:30:26.717" status="FAIL" endtime="20171005 19:30:26.717"></status>
</kw>
<status starttime="20171005 19:30:26.430" status="FAIL" endtime="20171005 19:30:26.718"></status>
</kw>
<status starttime="20171005 19:30:26.429" status="FAIL" endtime="20171005 19:30:26.718"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:36.723">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:30:36.723" status="PASS" endtime="20171005 19:30:36.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:36.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:30:36.724" status="PASS" endtime="20171005 19:30:36.724"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:36.725">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:30:36.725" status="PASS" endtime="20171005 19:30:36.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:36.726">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:30:36.725" status="PASS" endtime="20171005 19:30:36.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:36.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:30:36.726" status="PASS" endtime="20171005 19:30:36.949"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:36.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:30:36.949">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:36.726" status="PASS" endtime="20171005 19:30:36.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:36.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:36.950" status="PASS" endtime="20171005 19:30:36.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:36.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:36.950" status="PASS" endtime="20171005 19:30:36.951"></status>
</kw>
<status starttime="20171005 19:30:36.722" status="PASS" endtime="20171005 19:30:36.951"></status>
</kw>
<status starttime="20171005 19:30:36.721" status="PASS" endtime="20171005 19:30:36.951"></status>
</kw>
<status starttime="20171005 19:30:36.721" status="PASS" endtime="20171005 19:30:36.951"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:36.952">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:30:36.951" status="PASS" endtime="20171005 19:30:36.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:36.954">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:36.953" status="PASS" endtime="20171005 19:30:36.954"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:36.955">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:36.954" status="PASS" endtime="20171005 19:30:36.955"></status>
</kw>
<status starttime="20171005 19:30:36.954" status="PASS" endtime="20171005 19:30:36.955"></status>
</kw>
<status starttime="20171005 19:30:36.952" status="PASS" endtime="20171005 19:30:36.955"></status>
</kw>
<status starttime="20171005 19:30:36.952" status="PASS" endtime="20171005 19:30:36.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:37.019">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:30:37.019">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:36.955" status="PASS" endtime="20171005 19:30:37.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:37.021">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:37.020" status="PASS" endtime="20171005 19:30:37.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:37.022">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:37.021" status="PASS" endtime="20171005 19:30:37.022"></status>
</kw>
<status starttime="20171005 19:30:37.021" status="PASS" endtime="20171005 19:30:37.022"></status>
</kw>
<status starttime="20171005 19:30:37.020" status="PASS" endtime="20171005 19:30:37.022"></status>
</kw>
<status starttime="20171005 19:30:37.019" status="PASS" endtime="20171005 19:30:37.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:30:37.023">Delete All Sessions</msg>
<status starttime="20171005 19:30:37.023" status="PASS" endtime="20171005 19:30:37.023"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:37.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:36.720" status="PASS" endtime="20171005 19:30:37.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:37.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:37.024" status="PASS" endtime="20171005 19:30:37.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:37.025">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:30:37.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:30:37.025">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:30:37.024" status="PASS" endtime="20171005 19:30:37.025"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:37.025">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:30:36.719" status="PASS" endtime="20171005 19:30:37.025"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:37.025">${power_state} = Off</msg>
<status starttime="20171005 19:30:36.719" status="PASS" endtime="20171005 19:30:37.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:30:37.026">On != Off</msg>
<status starttime="20171005 19:30:37.026" status="FAIL" endtime="20171005 19:30:37.026"></status>
</kw>
<status starttime="20171005 19:30:36.719" status="FAIL" endtime="20171005 19:30:37.026"></status>
</kw>
<status starttime="20171005 19:30:36.718" status="FAIL" endtime="20171005 19:30:37.026"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.031">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:30:47.031" status="PASS" endtime="20171005 19:30:47.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.032">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:30:47.032" status="PASS" endtime="20171005 19:30:47.032"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.033">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:30:47.033" status="PASS" endtime="20171005 19:30:47.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:30:47.033" status="PASS" endtime="20171005 19:30:47.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.218">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:30:47.035" status="PASS" endtime="20171005 19:30:47.218"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:47.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:30:47.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:47.034" status="PASS" endtime="20171005 19:30:47.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.219">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:47.218" status="PASS" endtime="20171005 19:30:47.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:47.219" status="PASS" endtime="20171005 19:30:47.219"></status>
</kw>
<status starttime="20171005 19:30:47.031" status="PASS" endtime="20171005 19:30:47.220"></status>
</kw>
<status starttime="20171005 19:30:47.030" status="PASS" endtime="20171005 19:30:47.220"></status>
</kw>
<status starttime="20171005 19:30:47.029" status="PASS" endtime="20171005 19:30:47.220"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.220">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:30:47.220" status="PASS" endtime="20171005 19:30:47.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.222">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:47.222" status="PASS" endtime="20171005 19:30:47.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.223">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:47.223" status="PASS" endtime="20171005 19:30:47.224"></status>
</kw>
<status starttime="20171005 19:30:47.223" status="PASS" endtime="20171005 19:30:47.224"></status>
</kw>
<status starttime="20171005 19:30:47.221" status="PASS" endtime="20171005 19:30:47.224"></status>
</kw>
<status starttime="20171005 19:30:47.221" status="PASS" endtime="20171005 19:30:47.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.293">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:30:47.293">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:47.224" status="PASS" endtime="20171005 19:30:47.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.295">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:47.294" status="PASS" endtime="20171005 19:30:47.295"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.296">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:47.295" status="PASS" endtime="20171005 19:30:47.296"></status>
</kw>
<status starttime="20171005 19:30:47.295" status="PASS" endtime="20171005 19:30:47.296"></status>
</kw>
<status starttime="20171005 19:30:47.294" status="PASS" endtime="20171005 19:30:47.296"></status>
</kw>
<status starttime="20171005 19:30:47.293" status="PASS" endtime="20171005 19:30:47.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:30:47.297">Delete All Sessions</msg>
<status starttime="20171005 19:30:47.296" status="PASS" endtime="20171005 19:30:47.297"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:47.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:47.029" status="PASS" endtime="20171005 19:30:47.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:47.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:47.297" status="PASS" endtime="20171005 19:30:47.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:47.298">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:30:47.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:30:47.298">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:30:47.298" status="PASS" endtime="20171005 19:30:47.298"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:47.299">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:30:47.028" status="PASS" endtime="20171005 19:30:47.299"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:47.299">${power_state} = Off</msg>
<status starttime="20171005 19:30:47.028" status="PASS" endtime="20171005 19:30:47.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:30:47.300">On != Off</msg>
<status starttime="20171005 19:30:47.299" status="FAIL" endtime="20171005 19:30:47.300"></status>
</kw>
<status starttime="20171005 19:30:47.027" status="FAIL" endtime="20171005 19:30:47.300"></status>
</kw>
<status starttime="20171005 19:30:47.027" status="FAIL" endtime="20171005 19:30:47.300"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.306">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:30:57.306" status="PASS" endtime="20171005 19:30:57.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:30:57.307" status="PASS" endtime="20171005 19:30:57.307"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:30:57.307" status="PASS" endtime="20171005 19:30:57.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:30:57.308" status="PASS" endtime="20171005 19:30:57.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:30:57.309" status="PASS" endtime="20171005 19:30:57.491"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:57.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:30:57.491">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:57.309" status="PASS" endtime="20171005 19:30:57.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:57.492" status="PASS" endtime="20171005 19:30:57.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:57.492" status="PASS" endtime="20171005 19:30:57.493"></status>
</kw>
<status starttime="20171005 19:30:57.305" status="PASS" endtime="20171005 19:30:57.493"></status>
</kw>
<status starttime="20171005 19:30:57.304" status="PASS" endtime="20171005 19:30:57.493"></status>
</kw>
<status starttime="20171005 19:30:57.303" status="PASS" endtime="20171005 19:30:57.493"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.494">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:30:57.493" status="PASS" endtime="20171005 19:30:57.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.496">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:57.495" status="PASS" endtime="20171005 19:30:57.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.497">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:30:57.496" status="PASS" endtime="20171005 19:30:57.497"></status>
</kw>
<status starttime="20171005 19:30:57.496" status="PASS" endtime="20171005 19:30:57.497"></status>
</kw>
<status starttime="20171005 19:30:57.494" status="PASS" endtime="20171005 19:30:57.497"></status>
</kw>
<status starttime="20171005 19:30:57.494" status="PASS" endtime="20171005 19:30:57.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.559">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:30:57.559">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:57.497" status="PASS" endtime="20171005 19:30:57.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.561">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:57.561" status="PASS" endtime="20171005 19:30:57.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.566">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:30:57.562" status="PASS" endtime="20171005 19:30:57.566"></status>
</kw>
<status starttime="20171005 19:30:57.562" status="PASS" endtime="20171005 19:30:57.566"></status>
</kw>
<status starttime="20171005 19:30:57.560" status="PASS" endtime="20171005 19:30:57.566"></status>
</kw>
<status starttime="20171005 19:30:57.560" status="PASS" endtime="20171005 19:30:57.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:30:57.567">Delete All Sessions</msg>
<status starttime="20171005 19:30:57.567" status="PASS" endtime="20171005 19:30:57.567"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:57.567">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:30:57.302" status="PASS" endtime="20171005 19:30:57.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:30:57.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:30:57.567" status="PASS" endtime="20171005 19:30:57.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:30:57.568">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:30:57.568">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:30:57.569">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:30:57.568" status="PASS" endtime="20171005 19:30:57.569"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:57.569">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:30:57.302" status="PASS" endtime="20171005 19:30:57.569"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:30:57.569">${power_state} = Off</msg>
<status starttime="20171005 19:30:57.301" status="PASS" endtime="20171005 19:30:57.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:30:57.570">On != Off</msg>
<status starttime="20171005 19:30:57.570" status="FAIL" endtime="20171005 19:30:57.570"></status>
</kw>
<status starttime="20171005 19:30:57.301" status="FAIL" endtime="20171005 19:30:57.570"></status>
</kw>
<status starttime="20171005 19:30:57.300" status="FAIL" endtime="20171005 19:30:57.570"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.575">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:31:07.575" status="PASS" endtime="20171005 19:31:07.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.576">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:31:07.576" status="PASS" endtime="20171005 19:31:07.577"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.577">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:31:07.577" status="PASS" endtime="20171005 19:31:07.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:31:07.577" status="PASS" endtime="20171005 19:31:07.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:31:07.579" status="PASS" endtime="20171005 19:31:07.762"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:07.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:31:07.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:07.578" status="PASS" endtime="20171005 19:31:07.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:07.763" status="PASS" endtime="20171005 19:31:07.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:07.763" status="PASS" endtime="20171005 19:31:07.764"></status>
</kw>
<status starttime="20171005 19:31:07.575" status="PASS" endtime="20171005 19:31:07.764"></status>
</kw>
<status starttime="20171005 19:31:07.574" status="PASS" endtime="20171005 19:31:07.764"></status>
</kw>
<status starttime="20171005 19:31:07.574" status="PASS" endtime="20171005 19:31:07.764"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.765">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:31:07.764" status="PASS" endtime="20171005 19:31:07.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.767">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:07.766" status="PASS" endtime="20171005 19:31:07.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.768">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:07.768" status="PASS" endtime="20171005 19:31:07.768"></status>
</kw>
<status starttime="20171005 19:31:07.767" status="PASS" endtime="20171005 19:31:07.768"></status>
</kw>
<status starttime="20171005 19:31:07.766" status="PASS" endtime="20171005 19:31:07.768"></status>
</kw>
<status starttime="20171005 19:31:07.765" status="PASS" endtime="20171005 19:31:07.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.831">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:31:07.831">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:07.769" status="PASS" endtime="20171005 19:31:07.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.833">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:07.833" status="PASS" endtime="20171005 19:31:07.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.834">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:07.834" status="PASS" endtime="20171005 19:31:07.834"></status>
</kw>
<status starttime="20171005 19:31:07.833" status="PASS" endtime="20171005 19:31:07.834"></status>
</kw>
<status starttime="20171005 19:31:07.832" status="PASS" endtime="20171005 19:31:07.834"></status>
</kw>
<status starttime="20171005 19:31:07.832" status="PASS" endtime="20171005 19:31:07.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:31:07.835">Delete All Sessions</msg>
<status starttime="20171005 19:31:07.835" status="PASS" endtime="20171005 19:31:07.835"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:07.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:07.573" status="PASS" endtime="20171005 19:31:07.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:07.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:07.835" status="PASS" endtime="20171005 19:31:07.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:07.836">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:31:07.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:31:07.837">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:31:07.836" status="PASS" endtime="20171005 19:31:07.837"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:07.837">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:31:07.572" status="PASS" endtime="20171005 19:31:07.837"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:07.837">${power_state} = Off</msg>
<status starttime="20171005 19:31:07.572" status="PASS" endtime="20171005 19:31:07.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:31:07.838">On != Off</msg>
<status starttime="20171005 19:31:07.838" status="FAIL" endtime="20171005 19:31:07.838"></status>
</kw>
<status starttime="20171005 19:31:07.571" status="FAIL" endtime="20171005 19:31:07.838"></status>
</kw>
<status starttime="20171005 19:31:07.571" status="FAIL" endtime="20171005 19:31:07.839"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:17.850">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:31:17.850" status="PASS" endtime="20171005 19:31:17.851"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:17.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:31:17.851" status="PASS" endtime="20171005 19:31:17.851"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:17.852">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:31:17.852" status="PASS" endtime="20171005 19:31:17.852"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:17.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:31:17.853" status="PASS" endtime="20171005 19:31:17.853"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:18.068">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:31:17.854" status="PASS" endtime="20171005 19:31:18.068"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:18.068">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:31:18.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:17.853" status="PASS" endtime="20171005 19:31:18.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:18.069">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:18.068" status="PASS" endtime="20171005 19:31:18.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:18.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:18.069" status="PASS" endtime="20171005 19:31:18.070"></status>
</kw>
<status starttime="20171005 19:31:17.849" status="PASS" endtime="20171005 19:31:18.070"></status>
</kw>
<status starttime="20171005 19:31:17.848" status="PASS" endtime="20171005 19:31:18.070"></status>
</kw>
<status starttime="20171005 19:31:17.847" status="PASS" endtime="20171005 19:31:18.070"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:18.070">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:31:18.070" status="PASS" endtime="20171005 19:31:18.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:18.073">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:18.072" status="PASS" endtime="20171005 19:31:18.073"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:18.074">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:18.073" status="PASS" endtime="20171005 19:31:18.074"></status>
</kw>
<status starttime="20171005 19:31:18.073" status="PASS" endtime="20171005 19:31:18.074"></status>
</kw>
<status starttime="20171005 19:31:18.071" status="PASS" endtime="20171005 19:31:18.074"></status>
</kw>
<status starttime="20171005 19:31:18.071" status="PASS" endtime="20171005 19:31:18.074"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:18.158">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:31:18.158">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:18.074" status="PASS" endtime="20171005 19:31:18.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:18.160">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:18.159" status="PASS" endtime="20171005 19:31:18.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:18.161">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:18.161" status="PASS" endtime="20171005 19:31:18.161"></status>
</kw>
<status starttime="20171005 19:31:18.160" status="PASS" endtime="20171005 19:31:18.162"></status>
</kw>
<status starttime="20171005 19:31:18.159" status="PASS" endtime="20171005 19:31:18.162"></status>
</kw>
<status starttime="20171005 19:31:18.158" status="PASS" endtime="20171005 19:31:18.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:31:18.162">Delete All Sessions</msg>
<status starttime="20171005 19:31:18.162" status="PASS" endtime="20171005 19:31:18.162"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:18.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:17.846" status="PASS" endtime="20171005 19:31:18.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:18.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:18.163" status="PASS" endtime="20171005 19:31:18.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:18.164">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:31:18.164">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:31:18.164">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:31:18.163" status="PASS" endtime="20171005 19:31:18.164"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:18.164">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:31:17.845" status="PASS" endtime="20171005 19:31:18.164"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:18.165">${power_state} = Off</msg>
<status starttime="20171005 19:31:17.844" status="PASS" endtime="20171005 19:31:18.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:31:18.165">On != Off</msg>
<status starttime="20171005 19:31:18.165" status="FAIL" endtime="20171005 19:31:18.165"></status>
</kw>
<status starttime="20171005 19:31:17.844" status="FAIL" endtime="20171005 19:31:18.166"></status>
</kw>
<status starttime="20171005 19:31:17.843" status="FAIL" endtime="20171005 19:31:18.166"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.172">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:31:28.171" status="PASS" endtime="20171005 19:31:28.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:31:28.172" status="PASS" endtime="20171005 19:31:28.173"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.173">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:31:28.173" status="PASS" endtime="20171005 19:31:28.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.174">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:31:28.174" status="PASS" endtime="20171005 19:31:28.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:31:28.175" status="PASS" endtime="20171005 19:31:28.385"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:28.385">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:31:28.385">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:28.174" status="PASS" endtime="20171005 19:31:28.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:28.385" status="PASS" endtime="20171005 19:31:28.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:28.386" status="PASS" endtime="20171005 19:31:28.387"></status>
</kw>
<status starttime="20171005 19:31:28.170" status="PASS" endtime="20171005 19:31:28.387"></status>
</kw>
<status starttime="20171005 19:31:28.170" status="PASS" endtime="20171005 19:31:28.387"></status>
</kw>
<status starttime="20171005 19:31:28.169" status="PASS" endtime="20171005 19:31:28.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.387">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:31:28.387" status="PASS" endtime="20171005 19:31:28.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.390">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:28.389" status="PASS" endtime="20171005 19:31:28.390"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.391">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:28.390" status="PASS" endtime="20171005 19:31:28.391"></status>
</kw>
<status starttime="20171005 19:31:28.390" status="PASS" endtime="20171005 19:31:28.391"></status>
</kw>
<status starttime="20171005 19:31:28.388" status="PASS" endtime="20171005 19:31:28.391"></status>
</kw>
<status starttime="20171005 19:31:28.388" status="PASS" endtime="20171005 19:31:28.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.494">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:31:28.494">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:28.391" status="PASS" endtime="20171005 19:31:28.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.496">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:28.495" status="PASS" endtime="20171005 19:31:28.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.497">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:28.496" status="PASS" endtime="20171005 19:31:28.497"></status>
</kw>
<status starttime="20171005 19:31:28.496" status="PASS" endtime="20171005 19:31:28.497"></status>
</kw>
<status starttime="20171005 19:31:28.495" status="PASS" endtime="20171005 19:31:28.497"></status>
</kw>
<status starttime="20171005 19:31:28.494" status="PASS" endtime="20171005 19:31:28.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:31:28.498">Delete All Sessions</msg>
<status starttime="20171005 19:31:28.497" status="PASS" endtime="20171005 19:31:28.498"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:28.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:28.169" status="PASS" endtime="20171005 19:31:28.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:28.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:28.498" status="PASS" endtime="20171005 19:31:28.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:28.499">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:31:28.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:31:28.499">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:31:28.499" status="PASS" endtime="20171005 19:31:28.499"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:28.500">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:31:28.168" status="PASS" endtime="20171005 19:31:28.500"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:28.500">${power_state} = Off</msg>
<status starttime="20171005 19:31:28.167" status="PASS" endtime="20171005 19:31:28.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:31:28.501">On != Off</msg>
<status starttime="20171005 19:31:28.500" status="FAIL" endtime="20171005 19:31:28.501"></status>
</kw>
<status starttime="20171005 19:31:28.167" status="FAIL" endtime="20171005 19:31:28.501"></status>
</kw>
<status starttime="20171005 19:31:28.166" status="FAIL" endtime="20171005 19:31:28.501"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.507">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:31:38.506" status="PASS" endtime="20171005 19:31:38.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.508">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:31:38.507" status="PASS" endtime="20171005 19:31:38.508"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.508">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:31:38.508" status="PASS" endtime="20171005 19:31:38.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:31:38.509" status="PASS" endtime="20171005 19:31:38.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.688">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:31:38.510" status="PASS" endtime="20171005 19:31:38.688"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:38.688">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:31:38.688">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:38.509" status="PASS" endtime="20171005 19:31:38.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.689">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:38.689" status="PASS" endtime="20171005 19:31:38.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:38.690" status="PASS" endtime="20171005 19:31:38.690"></status>
</kw>
<status starttime="20171005 19:31:38.505" status="PASS" endtime="20171005 19:31:38.690"></status>
</kw>
<status starttime="20171005 19:31:38.505" status="PASS" endtime="20171005 19:31:38.690"></status>
</kw>
<status starttime="20171005 19:31:38.504" status="PASS" endtime="20171005 19:31:38.690"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.691">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:31:38.691" status="PASS" endtime="20171005 19:31:38.691"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.693">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:38.693" status="PASS" endtime="20171005 19:31:38.693"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.694">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:38.694" status="PASS" endtime="20171005 19:31:38.694"></status>
</kw>
<status starttime="20171005 19:31:38.693" status="PASS" endtime="20171005 19:31:38.694"></status>
</kw>
<status starttime="20171005 19:31:38.692" status="PASS" endtime="20171005 19:31:38.695"></status>
</kw>
<status starttime="20171005 19:31:38.691" status="PASS" endtime="20171005 19:31:38.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.772">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:31:38.772">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:38.695" status="PASS" endtime="20171005 19:31:38.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.774">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:38.774" status="PASS" endtime="20171005 19:31:38.775"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.776">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:38.775" status="PASS" endtime="20171005 19:31:38.776"></status>
</kw>
<status starttime="20171005 19:31:38.775" status="PASS" endtime="20171005 19:31:38.776"></status>
</kw>
<status starttime="20171005 19:31:38.773" status="PASS" endtime="20171005 19:31:38.776"></status>
</kw>
<status starttime="20171005 19:31:38.773" status="PASS" endtime="20171005 19:31:38.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:31:38.777">Delete All Sessions</msg>
<status starttime="20171005 19:31:38.776" status="PASS" endtime="20171005 19:31:38.777"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:38.777">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:38.504" status="PASS" endtime="20171005 19:31:38.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:38.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:38.777" status="PASS" endtime="20171005 19:31:38.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:38.778">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:31:38.778">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:31:38.779">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:31:38.778" status="PASS" endtime="20171005 19:31:38.779"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:38.779">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:31:38.503" status="PASS" endtime="20171005 19:31:38.779"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:38.779">${power_state} = Off</msg>
<status starttime="20171005 19:31:38.503" status="PASS" endtime="20171005 19:31:38.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:31:38.781">On != Off</msg>
<status starttime="20171005 19:31:38.780" status="FAIL" endtime="20171005 19:31:38.781"></status>
</kw>
<status starttime="20171005 19:31:38.502" status="FAIL" endtime="20171005 19:31:38.781"></status>
</kw>
<status starttime="20171005 19:31:38.502" status="FAIL" endtime="20171005 19:31:38.781"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:48.786">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:31:48.786" status="PASS" endtime="20171005 19:31:48.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:48.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:31:48.787" status="PASS" endtime="20171005 19:31:48.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:48.788">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:31:48.788" status="PASS" endtime="20171005 19:31:48.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:48.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:31:48.788" status="PASS" endtime="20171005 19:31:48.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:48.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:31:48.789" status="PASS" endtime="20171005 19:31:48.973"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:48.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:31:48.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:48.789" status="PASS" endtime="20171005 19:31:48.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:48.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:48.974" status="PASS" endtime="20171005 19:31:48.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:48.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:48.975" status="PASS" endtime="20171005 19:31:48.975"></status>
</kw>
<status starttime="20171005 19:31:48.785" status="PASS" endtime="20171005 19:31:48.975"></status>
</kw>
<status starttime="20171005 19:31:48.785" status="PASS" endtime="20171005 19:31:48.975"></status>
</kw>
<status starttime="20171005 19:31:48.784" status="PASS" endtime="20171005 19:31:48.975"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:48.976">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:31:48.976" status="PASS" endtime="20171005 19:31:48.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:48.978">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:48.977" status="PASS" endtime="20171005 19:31:48.978"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:48.979">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:48.979" status="PASS" endtime="20171005 19:31:48.979"></status>
</kw>
<status starttime="20171005 19:31:48.978" status="PASS" endtime="20171005 19:31:48.980"></status>
</kw>
<status starttime="20171005 19:31:48.977" status="PASS" endtime="20171005 19:31:48.980"></status>
</kw>
<status starttime="20171005 19:31:48.976" status="PASS" endtime="20171005 19:31:48.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:49.048">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:31:49.048">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:48.980" status="PASS" endtime="20171005 19:31:49.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:49.051">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:49.050" status="PASS" endtime="20171005 19:31:49.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:49.052">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:49.052" status="PASS" endtime="20171005 19:31:49.052"></status>
</kw>
<status starttime="20171005 19:31:49.051" status="PASS" endtime="20171005 19:31:49.052"></status>
</kw>
<status starttime="20171005 19:31:49.050" status="PASS" endtime="20171005 19:31:49.052"></status>
</kw>
<status starttime="20171005 19:31:49.049" status="PASS" endtime="20171005 19:31:49.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:31:49.053">Delete All Sessions</msg>
<status starttime="20171005 19:31:49.053" status="PASS" endtime="20171005 19:31:49.053"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:49.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:48.783" status="PASS" endtime="20171005 19:31:49.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:49.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:49.053" status="PASS" endtime="20171005 19:31:49.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:49.054">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:31:49.054">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:31:49.054">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:31:49.054" status="PASS" endtime="20171005 19:31:49.054"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:49.055">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:31:48.783" status="PASS" endtime="20171005 19:31:49.055"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:49.055">${power_state} = Off</msg>
<status starttime="20171005 19:31:48.783" status="PASS" endtime="20171005 19:31:49.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:31:49.056">On != Off</msg>
<status starttime="20171005 19:31:49.055" status="FAIL" endtime="20171005 19:31:49.056"></status>
</kw>
<status starttime="20171005 19:31:48.782" status="FAIL" endtime="20171005 19:31:49.056"></status>
</kw>
<status starttime="20171005 19:31:48.782" status="FAIL" endtime="20171005 19:31:49.056"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.062">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:31:59.062" status="PASS" endtime="20171005 19:31:59.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:31:59.063" status="PASS" endtime="20171005 19:31:59.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:31:59.064" status="PASS" endtime="20171005 19:31:59.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:31:59.065" status="PASS" endtime="20171005 19:31:59.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:31:59.066" status="PASS" endtime="20171005 19:31:59.363"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:59.363">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:31:59.363">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:59.066" status="PASS" endtime="20171005 19:31:59.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.364">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:59.363" status="PASS" endtime="20171005 19:31:59.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:59.364" status="PASS" endtime="20171005 19:31:59.364"></status>
</kw>
<status starttime="20171005 19:31:59.061" status="PASS" endtime="20171005 19:31:59.365"></status>
</kw>
<status starttime="20171005 19:31:59.060" status="PASS" endtime="20171005 19:31:59.365"></status>
</kw>
<status starttime="20171005 19:31:59.059" status="PASS" endtime="20171005 19:31:59.365"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.365">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:31:59.365" status="PASS" endtime="20171005 19:31:59.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.368">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:59.367" status="PASS" endtime="20171005 19:31:59.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.369">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:31:59.369" status="PASS" endtime="20171005 19:31:59.369"></status>
</kw>
<status starttime="20171005 19:31:59.368" status="PASS" endtime="20171005 19:31:59.369"></status>
</kw>
<status starttime="20171005 19:31:59.366" status="PASS" endtime="20171005 19:31:59.370"></status>
</kw>
<status starttime="20171005 19:31:59.366" status="PASS" endtime="20171005 19:31:59.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:31:59.444">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:59.370" status="PASS" endtime="20171005 19:31:59.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.446">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:59.445" status="PASS" endtime="20171005 19:31:59.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.447">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:31:59.446" status="PASS" endtime="20171005 19:31:59.447"></status>
</kw>
<status starttime="20171005 19:31:59.446" status="PASS" endtime="20171005 19:31:59.447"></status>
</kw>
<status starttime="20171005 19:31:59.445" status="PASS" endtime="20171005 19:31:59.447"></status>
</kw>
<status starttime="20171005 19:31:59.444" status="PASS" endtime="20171005 19:31:59.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:31:59.448">Delete All Sessions</msg>
<status starttime="20171005 19:31:59.448" status="PASS" endtime="20171005 19:31:59.448"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:59.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:31:59.059" status="PASS" endtime="20171005 19:31:59.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:31:59.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:31:59.448" status="PASS" endtime="20171005 19:31:59.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:31:59.449">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:31:59.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:31:59.450">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:31:59.449" status="PASS" endtime="20171005 19:31:59.450"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:59.450">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:31:59.058" status="PASS" endtime="20171005 19:31:59.450"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:31:59.450">${power_state} = Off</msg>
<status starttime="20171005 19:31:59.058" status="PASS" endtime="20171005 19:31:59.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:31:59.451">On != Off</msg>
<status starttime="20171005 19:31:59.451" status="FAIL" endtime="20171005 19:31:59.451"></status>
</kw>
<status starttime="20171005 19:31:59.057" status="FAIL" endtime="20171005 19:31:59.451"></status>
</kw>
<status starttime="20171005 19:31:59.057" status="FAIL" endtime="20171005 19:31:59.451"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.457">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:32:09.456" status="PASS" endtime="20171005 19:32:09.457"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.458">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:32:09.457" status="PASS" endtime="20171005 19:32:09.458"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.458">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:32:09.458" status="PASS" endtime="20171005 19:32:09.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.459">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:32:09.459" status="PASS" endtime="20171005 19:32:09.459"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:32:09.460" status="PASS" endtime="20171005 19:32:09.674"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:09.674">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:32:09.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:09.459" status="PASS" endtime="20171005 19:32:09.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.675">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:09.675" status="PASS" endtime="20171005 19:32:09.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:09.675" status="PASS" endtime="20171005 19:32:09.676"></status>
</kw>
<status starttime="20171005 19:32:09.456" status="PASS" endtime="20171005 19:32:09.676"></status>
</kw>
<status starttime="20171005 19:32:09.455" status="PASS" endtime="20171005 19:32:09.676"></status>
</kw>
<status starttime="20171005 19:32:09.455" status="PASS" endtime="20171005 19:32:09.676"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.677">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:32:09.676" status="PASS" endtime="20171005 19:32:09.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.679">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:09.678" status="PASS" endtime="20171005 19:32:09.679"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.680">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:09.680" status="PASS" endtime="20171005 19:32:09.680"></status>
</kw>
<status starttime="20171005 19:32:09.679" status="PASS" endtime="20171005 19:32:09.680"></status>
</kw>
<status starttime="20171005 19:32:09.678" status="PASS" endtime="20171005 19:32:09.681"></status>
</kw>
<status starttime="20171005 19:32:09.677" status="PASS" endtime="20171005 19:32:09.681"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.746">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:32:09.747">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:09.681" status="PASS" endtime="20171005 19:32:09.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.749">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:09.748" status="PASS" endtime="20171005 19:32:09.749"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.750">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:09.749" status="PASS" endtime="20171005 19:32:09.750"></status>
</kw>
<status starttime="20171005 19:32:09.749" status="PASS" endtime="20171005 19:32:09.750"></status>
</kw>
<status starttime="20171005 19:32:09.748" status="PASS" endtime="20171005 19:32:09.750"></status>
</kw>
<status starttime="20171005 19:32:09.747" status="PASS" endtime="20171005 19:32:09.750"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:32:09.750">Delete All Sessions</msg>
<status starttime="20171005 19:32:09.750" status="PASS" endtime="20171005 19:32:09.751"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:09.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:09.454" status="PASS" endtime="20171005 19:32:09.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:09.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:09.751" status="PASS" endtime="20171005 19:32:09.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:09.752">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:32:09.752">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:32:09.752">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:32:09.752" status="PASS" endtime="20171005 19:32:09.752"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:09.752">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:32:09.453" status="PASS" endtime="20171005 19:32:09.753"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:09.753">${power_state} = Off</msg>
<status starttime="20171005 19:32:09.453" status="PASS" endtime="20171005 19:32:09.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:32:09.753">On != Off</msg>
<status starttime="20171005 19:32:09.753" status="FAIL" endtime="20171005 19:32:09.754"></status>
</kw>
<status starttime="20171005 19:32:09.453" status="FAIL" endtime="20171005 19:32:09.754"></status>
</kw>
<status starttime="20171005 19:32:09.452" status="FAIL" endtime="20171005 19:32:09.754"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:19.759">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:32:19.759" status="PASS" endtime="20171005 19:32:19.760"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:19.760">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:32:19.760" status="PASS" endtime="20171005 19:32:19.760"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:19.761">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:32:19.761" status="PASS" endtime="20171005 19:32:19.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:19.762">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:32:19.761" status="PASS" endtime="20171005 19:32:19.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:19.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:32:19.763" status="PASS" endtime="20171005 19:32:19.964"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:19.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:32:19.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:19.762" status="PASS" endtime="20171005 19:32:19.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:19.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:19.964" status="PASS" endtime="20171005 19:32:19.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:19.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:19.965" status="PASS" endtime="20171005 19:32:19.966"></status>
</kw>
<status starttime="20171005 19:32:19.758" status="PASS" endtime="20171005 19:32:19.966"></status>
</kw>
<status starttime="20171005 19:32:19.758" status="PASS" endtime="20171005 19:32:19.966"></status>
</kw>
<status starttime="20171005 19:32:19.757" status="PASS" endtime="20171005 19:32:19.966"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:19.967">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:32:19.966" status="PASS" endtime="20171005 19:32:19.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:19.969">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:19.968" status="PASS" endtime="20171005 19:32:19.969"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:19.970">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:19.970" status="PASS" endtime="20171005 19:32:19.970"></status>
</kw>
<status starttime="20171005 19:32:19.969" status="PASS" endtime="20171005 19:32:19.970"></status>
</kw>
<status starttime="20171005 19:32:19.967" status="PASS" endtime="20171005 19:32:19.970"></status>
</kw>
<status starttime="20171005 19:32:19.967" status="PASS" endtime="20171005 19:32:19.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:20.032">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:32:20.032">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:19.971" status="PASS" endtime="20171005 19:32:20.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:20.035">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:20.034" status="PASS" endtime="20171005 19:32:20.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:20.039">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:20.036" status="PASS" endtime="20171005 19:32:20.040"></status>
</kw>
<status starttime="20171005 19:32:20.035" status="PASS" endtime="20171005 19:32:20.040"></status>
</kw>
<status starttime="20171005 19:32:20.033" status="PASS" endtime="20171005 19:32:20.040"></status>
</kw>
<status starttime="20171005 19:32:20.033" status="PASS" endtime="20171005 19:32:20.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:32:20.040">Delete All Sessions</msg>
<status starttime="20171005 19:32:20.040" status="PASS" endtime="20171005 19:32:20.040"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:20.041">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:19.756" status="PASS" endtime="20171005 19:32:20.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:20.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:20.041" status="PASS" endtime="20171005 19:32:20.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:20.042">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:32:20.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:32:20.042">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:32:20.042" status="PASS" endtime="20171005 19:32:20.042"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:20.043">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:32:19.756" status="PASS" endtime="20171005 19:32:20.043"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:20.043">${power_state} = Off</msg>
<status starttime="20171005 19:32:19.755" status="PASS" endtime="20171005 19:32:20.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:32:20.044">On != Off</msg>
<status starttime="20171005 19:32:20.043" status="FAIL" endtime="20171005 19:32:20.044"></status>
</kw>
<status starttime="20171005 19:32:19.755" status="FAIL" endtime="20171005 19:32:20.044"></status>
</kw>
<status starttime="20171005 19:32:19.754" status="FAIL" endtime="20171005 19:32:20.044"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.049">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:32:30.049" status="PASS" endtime="20171005 19:32:30.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.050">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:32:30.050" status="PASS" endtime="20171005 19:32:30.050"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.051">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:32:30.050" status="PASS" endtime="20171005 19:32:30.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:32:30.051" status="PASS" endtime="20171005 19:32:30.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.234">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:32:30.052" status="PASS" endtime="20171005 19:32:30.234"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:30.234">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:32:30.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:30.052" status="PASS" endtime="20171005 19:32:30.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.235">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:30.235" status="PASS" endtime="20171005 19:32:30.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:30.235" status="PASS" endtime="20171005 19:32:30.236"></status>
</kw>
<status starttime="20171005 19:32:30.048" status="PASS" endtime="20171005 19:32:30.236"></status>
</kw>
<status starttime="20171005 19:32:30.048" status="PASS" endtime="20171005 19:32:30.236"></status>
</kw>
<status starttime="20171005 19:32:30.047" status="PASS" endtime="20171005 19:32:30.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.237">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:32:30.236" status="PASS" endtime="20171005 19:32:30.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.239">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:30.238" status="PASS" endtime="20171005 19:32:30.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.240">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:30.240" status="PASS" endtime="20171005 19:32:30.240"></status>
</kw>
<status starttime="20171005 19:32:30.239" status="PASS" endtime="20171005 19:32:30.240"></status>
</kw>
<status starttime="20171005 19:32:30.238" status="PASS" endtime="20171005 19:32:30.240"></status>
</kw>
<status starttime="20171005 19:32:30.237" status="PASS" endtime="20171005 19:32:30.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.310">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:32:30.311">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:30.241" status="PASS" endtime="20171005 19:32:30.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.312">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:30.312" status="PASS" endtime="20171005 19:32:30.312"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.313">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:30.313" status="PASS" endtime="20171005 19:32:30.313"></status>
</kw>
<status starttime="20171005 19:32:30.313" status="PASS" endtime="20171005 19:32:30.313"></status>
</kw>
<status starttime="20171005 19:32:30.311" status="PASS" endtime="20171005 19:32:30.314"></status>
</kw>
<status starttime="20171005 19:32:30.311" status="PASS" endtime="20171005 19:32:30.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:32:30.314">Delete All Sessions</msg>
<status starttime="20171005 19:32:30.314" status="PASS" endtime="20171005 19:32:30.314"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:30.314">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:30.046" status="PASS" endtime="20171005 19:32:30.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:30.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:30.315" status="PASS" endtime="20171005 19:32:30.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:30.316">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:32:30.316">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:32:30.316">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:32:30.315" status="PASS" endtime="20171005 19:32:30.316"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:30.316">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:32:30.046" status="PASS" endtime="20171005 19:32:30.316"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:30.316">${power_state} = Off</msg>
<status starttime="20171005 19:32:30.045" status="PASS" endtime="20171005 19:32:30.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:32:30.317">On != Off</msg>
<status starttime="20171005 19:32:30.317" status="FAIL" endtime="20171005 19:32:30.317"></status>
</kw>
<status starttime="20171005 19:32:30.045" status="FAIL" endtime="20171005 19:32:30.317"></status>
</kw>
<status starttime="20171005 19:32:30.044" status="FAIL" endtime="20171005 19:32:30.318"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.324">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:32:40.323" status="PASS" endtime="20171005 19:32:40.324"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:32:40.324" status="PASS" endtime="20171005 19:32:40.325"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.325">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:32:40.325" status="PASS" endtime="20171005 19:32:40.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:32:40.326" status="PASS" endtime="20171005 19:32:40.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.516">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:32:40.327" status="PASS" endtime="20171005 19:32:40.516"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:40.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:32:40.516">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:40.326" status="PASS" endtime="20171005 19:32:40.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.517">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:40.517" status="PASS" endtime="20171005 19:32:40.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.518">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:40.517" status="PASS" endtime="20171005 19:32:40.518"></status>
</kw>
<status starttime="20171005 19:32:40.322" status="PASS" endtime="20171005 19:32:40.518"></status>
</kw>
<status starttime="20171005 19:32:40.321" status="PASS" endtime="20171005 19:32:40.518"></status>
</kw>
<status starttime="20171005 19:32:40.321" status="PASS" endtime="20171005 19:32:40.518"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.519">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:32:40.518" status="PASS" endtime="20171005 19:32:40.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.521">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:40.520" status="PASS" endtime="20171005 19:32:40.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.522">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:40.522" status="PASS" endtime="20171005 19:32:40.522"></status>
</kw>
<status starttime="20171005 19:32:40.521" status="PASS" endtime="20171005 19:32:40.522"></status>
</kw>
<status starttime="20171005 19:32:40.520" status="PASS" endtime="20171005 19:32:40.522"></status>
</kw>
<status starttime="20171005 19:32:40.519" status="PASS" endtime="20171005 19:32:40.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.597">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:32:40.597">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:40.523" status="PASS" endtime="20171005 19:32:40.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.599">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:40.598" status="PASS" endtime="20171005 19:32:40.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.600">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:40.600" status="PASS" endtime="20171005 19:32:40.601"></status>
</kw>
<status starttime="20171005 19:32:40.599" status="PASS" endtime="20171005 19:32:40.601"></status>
</kw>
<status starttime="20171005 19:32:40.598" status="PASS" endtime="20171005 19:32:40.601"></status>
</kw>
<status starttime="20171005 19:32:40.597" status="PASS" endtime="20171005 19:32:40.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:32:40.601">Delete All Sessions</msg>
<status starttime="20171005 19:32:40.601" status="PASS" endtime="20171005 19:32:40.601"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:40.601">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:40.320" status="PASS" endtime="20171005 19:32:40.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:40.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:40.602" status="PASS" endtime="20171005 19:32:40.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:40.603">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:32:40.603">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:32:40.603">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:32:40.602" status="PASS" endtime="20171005 19:32:40.603"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:40.603">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:32:40.319" status="PASS" endtime="20171005 19:32:40.603"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:40.604">${power_state} = Off</msg>
<status starttime="20171005 19:32:40.319" status="PASS" endtime="20171005 19:32:40.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:32:40.604">On != Off</msg>
<status starttime="20171005 19:32:40.604" status="FAIL" endtime="20171005 19:32:40.604"></status>
</kw>
<status starttime="20171005 19:32:40.319" status="FAIL" endtime="20171005 19:32:40.604"></status>
</kw>
<status starttime="20171005 19:32:40.318" status="FAIL" endtime="20171005 19:32:40.605"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.610">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:32:50.609" status="PASS" endtime="20171005 19:32:50.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:32:50.610" status="PASS" endtime="20171005 19:32:50.611"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.611">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:32:50.611" status="PASS" endtime="20171005 19:32:50.611"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:32:50.612" status="PASS" endtime="20171005 19:32:50.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:32:50.613" status="PASS" endtime="20171005 19:32:50.802"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:50.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:32:50.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:50.612" status="PASS" endtime="20171005 19:32:50.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.803">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:50.803" status="PASS" endtime="20171005 19:32:50.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:50.803" status="PASS" endtime="20171005 19:32:50.804"></status>
</kw>
<status starttime="20171005 19:32:50.609" status="PASS" endtime="20171005 19:32:50.804"></status>
</kw>
<status starttime="20171005 19:32:50.608" status="PASS" endtime="20171005 19:32:50.804"></status>
</kw>
<status starttime="20171005 19:32:50.608" status="PASS" endtime="20171005 19:32:50.804"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.805">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:32:50.804" status="PASS" endtime="20171005 19:32:50.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.807">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:50.806" status="PASS" endtime="20171005 19:32:50.807"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.808">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:32:50.808" status="PASS" endtime="20171005 19:32:50.808"></status>
</kw>
<status starttime="20171005 19:32:50.807" status="PASS" endtime="20171005 19:32:50.808"></status>
</kw>
<status starttime="20171005 19:32:50.806" status="PASS" endtime="20171005 19:32:50.808"></status>
</kw>
<status starttime="20171005 19:32:50.805" status="PASS" endtime="20171005 19:32:50.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.881">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:32:50.882">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:50.809" status="PASS" endtime="20171005 19:32:50.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.883">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:50.883" status="PASS" endtime="20171005 19:32:50.883"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.884">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:32:50.884" status="PASS" endtime="20171005 19:32:50.884"></status>
</kw>
<status starttime="20171005 19:32:50.884" status="PASS" endtime="20171005 19:32:50.885"></status>
</kw>
<status starttime="20171005 19:32:50.882" status="PASS" endtime="20171005 19:32:50.885"></status>
</kw>
<status starttime="20171005 19:32:50.882" status="PASS" endtime="20171005 19:32:50.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:32:50.885">Delete All Sessions</msg>
<status starttime="20171005 19:32:50.885" status="PASS" endtime="20171005 19:32:50.885"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:50.885">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:32:50.607" status="PASS" endtime="20171005 19:32:50.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:32:50.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:32:50.886" status="PASS" endtime="20171005 19:32:50.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:32:50.887">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:32:50.887">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:32:50.887">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:32:50.886" status="PASS" endtime="20171005 19:32:50.887"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:50.887">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:32:50.606" status="PASS" endtime="20171005 19:32:50.887"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:32:50.888">${power_state} = Off</msg>
<status starttime="20171005 19:32:50.606" status="PASS" endtime="20171005 19:32:50.888"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:32:50.888">On != Off</msg>
<status starttime="20171005 19:32:50.888" status="FAIL" endtime="20171005 19:32:50.888"></status>
</kw>
<status starttime="20171005 19:32:50.606" status="FAIL" endtime="20171005 19:32:50.888"></status>
</kw>
<status starttime="20171005 19:32:50.605" status="FAIL" endtime="20171005 19:32:50.889"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:00.895">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:33:00.894" status="PASS" endtime="20171005 19:33:00.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:00.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:33:00.896" status="PASS" endtime="20171005 19:33:00.896"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:00.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:33:00.897" status="PASS" endtime="20171005 19:33:00.897"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:00.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:33:00.898" status="PASS" endtime="20171005 19:33:00.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:01.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:33:00.899" status="PASS" endtime="20171005 19:33:01.138"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:01.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:33:01.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:00.899" status="PASS" endtime="20171005 19:33:01.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:01.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:01.139" status="PASS" endtime="20171005 19:33:01.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:01.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:01.140" status="PASS" endtime="20171005 19:33:01.140"></status>
</kw>
<status starttime="20171005 19:33:00.893" status="PASS" endtime="20171005 19:33:01.141"></status>
</kw>
<status starttime="20171005 19:33:00.892" status="PASS" endtime="20171005 19:33:01.141"></status>
</kw>
<status starttime="20171005 19:33:00.892" status="PASS" endtime="20171005 19:33:01.141"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:01.141">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:33:01.141" status="PASS" endtime="20171005 19:33:01.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:01.143">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:01.143" status="PASS" endtime="20171005 19:33:01.144"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:01.144">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:01.144" status="PASS" endtime="20171005 19:33:01.145"></status>
</kw>
<status starttime="20171005 19:33:01.144" status="PASS" endtime="20171005 19:33:01.145"></status>
</kw>
<status starttime="20171005 19:33:01.142" status="PASS" endtime="20171005 19:33:01.145"></status>
</kw>
<status starttime="20171005 19:33:01.142" status="PASS" endtime="20171005 19:33:01.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:01.230">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:33:01.230">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:01.145" status="PASS" endtime="20171005 19:33:01.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:01.232">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:01.231" status="PASS" endtime="20171005 19:33:01.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:01.233">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:01.233" status="PASS" endtime="20171005 19:33:01.233"></status>
</kw>
<status starttime="20171005 19:33:01.232" status="PASS" endtime="20171005 19:33:01.233"></status>
</kw>
<status starttime="20171005 19:33:01.231" status="PASS" endtime="20171005 19:33:01.233"></status>
</kw>
<status starttime="20171005 19:33:01.230" status="PASS" endtime="20171005 19:33:01.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:33:01.234">Delete All Sessions</msg>
<status starttime="20171005 19:33:01.234" status="PASS" endtime="20171005 19:33:01.234"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:01.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:00.891" status="PASS" endtime="20171005 19:33:01.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:01.235">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:01.235" status="PASS" endtime="20171005 19:33:01.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:01.235">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:33:01.236">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:33:01.236">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:33:01.235" status="PASS" endtime="20171005 19:33:01.236"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:01.236">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:33:00.890" status="PASS" endtime="20171005 19:33:01.236"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:01.236">${power_state} = Off</msg>
<status starttime="20171005 19:33:00.890" status="PASS" endtime="20171005 19:33:01.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:33:01.237">On != Off</msg>
<status starttime="20171005 19:33:01.237" status="FAIL" endtime="20171005 19:33:01.237"></status>
</kw>
<status starttime="20171005 19:33:00.890" status="FAIL" endtime="20171005 19:33:01.237"></status>
</kw>
<status starttime="20171005 19:33:00.889" status="FAIL" endtime="20171005 19:33:01.237"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.243">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:33:11.242" status="PASS" endtime="20171005 19:33:11.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.243">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:33:11.243" status="PASS" endtime="20171005 19:33:11.244"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.244">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:33:11.244" status="PASS" endtime="20171005 19:33:11.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.245">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:33:11.244" status="PASS" endtime="20171005 19:33:11.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.448">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:33:11.246" status="PASS" endtime="20171005 19:33:11.448"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:11.448">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:33:11.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:11.245" status="PASS" endtime="20171005 19:33:11.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.449">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:11.448" status="PASS" endtime="20171005 19:33:11.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:11.449" status="PASS" endtime="20171005 19:33:11.450"></status>
</kw>
<status starttime="20171005 19:33:11.242" status="PASS" endtime="20171005 19:33:11.450"></status>
</kw>
<status starttime="20171005 19:33:11.241" status="PASS" endtime="20171005 19:33:11.450"></status>
</kw>
<status starttime="20171005 19:33:11.240" status="PASS" endtime="20171005 19:33:11.450"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.451">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:33:11.450" status="PASS" endtime="20171005 19:33:11.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.453">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:11.452" status="PASS" endtime="20171005 19:33:11.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.454">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:11.453" status="PASS" endtime="20171005 19:33:11.454"></status>
</kw>
<status starttime="20171005 19:33:11.453" status="PASS" endtime="20171005 19:33:11.454"></status>
</kw>
<status starttime="20171005 19:33:11.451" status="PASS" endtime="20171005 19:33:11.454"></status>
</kw>
<status starttime="20171005 19:33:11.451" status="PASS" endtime="20171005 19:33:11.454"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:33:11.517">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:11.454" status="PASS" endtime="20171005 19:33:11.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.519">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:11.518" status="PASS" endtime="20171005 19:33:11.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.520">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:11.519" status="PASS" endtime="20171005 19:33:11.520"></status>
</kw>
<status starttime="20171005 19:33:11.519" status="PASS" endtime="20171005 19:33:11.520"></status>
</kw>
<status starttime="20171005 19:33:11.518" status="PASS" endtime="20171005 19:33:11.520"></status>
</kw>
<status starttime="20171005 19:33:11.517" status="PASS" endtime="20171005 19:33:11.520"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:33:11.521">Delete All Sessions</msg>
<status starttime="20171005 19:33:11.520" status="PASS" endtime="20171005 19:33:11.521"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:11.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:11.240" status="PASS" endtime="20171005 19:33:11.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:11.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:11.521" status="PASS" endtime="20171005 19:33:11.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:11.522">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:33:11.522">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:33:11.522">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:33:11.522" status="PASS" endtime="20171005 19:33:11.522"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:11.523">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:33:11.239" status="PASS" endtime="20171005 19:33:11.523"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:11.523">${power_state} = Off</msg>
<status starttime="20171005 19:33:11.239" status="PASS" endtime="20171005 19:33:11.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:33:11.524">On != Off</msg>
<status starttime="20171005 19:33:11.523" status="FAIL" endtime="20171005 19:33:11.524"></status>
</kw>
<status starttime="20171005 19:33:11.238" status="FAIL" endtime="20171005 19:33:11.524"></status>
</kw>
<status starttime="20171005 19:33:11.238" status="FAIL" endtime="20171005 19:33:11.524"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.531">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:33:21.530" status="PASS" endtime="20171005 19:33:21.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:33:21.532" status="PASS" endtime="20171005 19:33:21.532"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.533">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:33:21.533" status="PASS" endtime="20171005 19:33:21.533"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.534">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:33:21.534" status="PASS" endtime="20171005 19:33:21.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:33:21.535" status="PASS" endtime="20171005 19:33:21.747"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:21.748">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:33:21.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:21.535" status="PASS" endtime="20171005 19:33:21.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:21.748" status="PASS" endtime="20171005 19:33:21.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:21.749" status="PASS" endtime="20171005 19:33:21.749"></status>
</kw>
<status starttime="20171005 19:33:21.529" status="PASS" endtime="20171005 19:33:21.749"></status>
</kw>
<status starttime="20171005 19:33:21.528" status="PASS" endtime="20171005 19:33:21.749"></status>
</kw>
<status starttime="20171005 19:33:21.527" status="PASS" endtime="20171005 19:33:21.750"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.750">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:33:21.750" status="PASS" endtime="20171005 19:33:21.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.752">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:21.752" status="PASS" endtime="20171005 19:33:21.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.753">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:21.753" status="PASS" endtime="20171005 19:33:21.753"></status>
</kw>
<status starttime="20171005 19:33:21.753" status="PASS" endtime="20171005 19:33:21.754"></status>
</kw>
<status starttime="20171005 19:33:21.751" status="PASS" endtime="20171005 19:33:21.754"></status>
</kw>
<status starttime="20171005 19:33:21.751" status="PASS" endtime="20171005 19:33:21.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:33:21.817">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:21.754" status="PASS" endtime="20171005 19:33:21.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:21.818" status="PASS" endtime="20171005 19:33:21.819"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:21.819" status="PASS" endtime="20171005 19:33:21.820"></status>
</kw>
<status starttime="20171005 19:33:21.819" status="PASS" endtime="20171005 19:33:21.820"></status>
</kw>
<status starttime="20171005 19:33:21.818" status="PASS" endtime="20171005 19:33:21.820"></status>
</kw>
<status starttime="20171005 19:33:21.817" status="PASS" endtime="20171005 19:33:21.820"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:33:21.821">Delete All Sessions</msg>
<status starttime="20171005 19:33:21.821" status="PASS" endtime="20171005 19:33:21.821"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:21.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:21.527" status="PASS" endtime="20171005 19:33:21.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:21.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:21.821" status="PASS" endtime="20171005 19:33:21.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:21.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:33:21.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:33:21.822">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:33:21.822" status="PASS" endtime="20171005 19:33:21.822"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:21.823">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:33:21.526" status="PASS" endtime="20171005 19:33:21.823"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:21.823">${power_state} = Off</msg>
<status starttime="20171005 19:33:21.525" status="PASS" endtime="20171005 19:33:21.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:33:21.824">On != Off</msg>
<status starttime="20171005 19:33:21.824" status="FAIL" endtime="20171005 19:33:21.824"></status>
</kw>
<status starttime="20171005 19:33:21.525" status="FAIL" endtime="20171005 19:33:21.824"></status>
</kw>
<status starttime="20171005 19:33:21.525" status="FAIL" endtime="20171005 19:33:21.824"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:31.831">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:33:31.831" status="PASS" endtime="20171005 19:33:31.831"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:31.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:33:31.832" status="PASS" endtime="20171005 19:33:31.832"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:31.833">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:33:31.832" status="PASS" endtime="20171005 19:33:31.833"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:31.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:33:31.833" status="PASS" endtime="20171005 19:33:31.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:32.017">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:33:31.834" status="PASS" endtime="20171005 19:33:32.017"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:32.017">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:33:32.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:31.834" status="PASS" endtime="20171005 19:33:32.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:32.018">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:32.017" status="PASS" endtime="20171005 19:33:32.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:32.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:32.018" status="PASS" endtime="20171005 19:33:32.018"></status>
</kw>
<status starttime="20171005 19:33:31.830" status="PASS" endtime="20171005 19:33:32.018"></status>
</kw>
<status starttime="20171005 19:33:31.830" status="PASS" endtime="20171005 19:33:32.019"></status>
</kw>
<status starttime="20171005 19:33:31.829" status="PASS" endtime="20171005 19:33:32.019"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:32.019">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:33:32.019" status="PASS" endtime="20171005 19:33:32.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:32.021">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:32.021" status="PASS" endtime="20171005 19:33:32.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:32.022">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:32.022" status="PASS" endtime="20171005 19:33:32.022"></status>
</kw>
<status starttime="20171005 19:33:32.022" status="PASS" endtime="20171005 19:33:32.023"></status>
</kw>
<status starttime="20171005 19:33:32.020" status="PASS" endtime="20171005 19:33:32.023"></status>
</kw>
<status starttime="20171005 19:33:32.020" status="PASS" endtime="20171005 19:33:32.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:32.100">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:33:32.101">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:32.023" status="PASS" endtime="20171005 19:33:32.101"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:32.103">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:32.102" status="PASS" endtime="20171005 19:33:32.103"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:32.104">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:32.103" status="PASS" endtime="20171005 19:33:32.104"></status>
</kw>
<status starttime="20171005 19:33:32.103" status="PASS" endtime="20171005 19:33:32.104"></status>
</kw>
<status starttime="20171005 19:33:32.102" status="PASS" endtime="20171005 19:33:32.104"></status>
</kw>
<status starttime="20171005 19:33:32.101" status="PASS" endtime="20171005 19:33:32.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:33:32.104">Delete All Sessions</msg>
<status starttime="20171005 19:33:32.104" status="PASS" endtime="20171005 19:33:32.105"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:32.105">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:31.828" status="PASS" endtime="20171005 19:33:32.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:32.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:32.105" status="PASS" endtime="20171005 19:33:32.105"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:32.106">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:33:32.106">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:33:32.106">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:33:32.106" status="PASS" endtime="20171005 19:33:32.106"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:32.106">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:33:31.828" status="PASS" endtime="20171005 19:33:32.107"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:32.107">${power_state} = Off</msg>
<status starttime="20171005 19:33:31.827" status="PASS" endtime="20171005 19:33:32.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:33:32.107">On != Off</msg>
<status starttime="20171005 19:33:32.107" status="FAIL" endtime="20171005 19:33:32.108"></status>
</kw>
<status starttime="20171005 19:33:31.827" status="FAIL" endtime="20171005 19:33:32.108"></status>
</kw>
<status starttime="20171005 19:33:31.826" status="FAIL" endtime="20171005 19:33:32.108"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.115">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:33:42.115" status="PASS" endtime="20171005 19:33:42.115"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.116">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:33:42.116" status="PASS" endtime="20171005 19:33:42.116"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.117">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:33:42.116" status="PASS" endtime="20171005 19:33:42.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.117">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:33:42.117" status="PASS" endtime="20171005 19:33:42.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.317">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:33:42.118" status="PASS" endtime="20171005 19:33:42.317"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:42.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:33:42.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:42.117" status="PASS" endtime="20171005 19:33:42.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.318">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:42.318" status="PASS" endtime="20171005 19:33:42.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:42.319" status="PASS" endtime="20171005 19:33:42.319"></status>
</kw>
<status starttime="20171005 19:33:42.113" status="PASS" endtime="20171005 19:33:42.319"></status>
</kw>
<status starttime="20171005 19:33:42.113" status="PASS" endtime="20171005 19:33:42.319"></status>
</kw>
<status starttime="20171005 19:33:42.112" status="PASS" endtime="20171005 19:33:42.319"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.320">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:33:42.320" status="PASS" endtime="20171005 19:33:42.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.322">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:42.322" status="PASS" endtime="20171005 19:33:42.322"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.323">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:42.323" status="PASS" endtime="20171005 19:33:42.323"></status>
</kw>
<status starttime="20171005 19:33:42.323" status="PASS" endtime="20171005 19:33:42.324"></status>
</kw>
<status starttime="20171005 19:33:42.321" status="PASS" endtime="20171005 19:33:42.324"></status>
</kw>
<status starttime="20171005 19:33:42.320" status="PASS" endtime="20171005 19:33:42.324"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:33:42.398">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:42.324" status="PASS" endtime="20171005 19:33:42.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.400">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:42.399" status="PASS" endtime="20171005 19:33:42.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.404">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:42.401" status="PASS" endtime="20171005 19:33:42.405"></status>
</kw>
<status starttime="20171005 19:33:42.400" status="PASS" endtime="20171005 19:33:42.405"></status>
</kw>
<status starttime="20171005 19:33:42.399" status="PASS" endtime="20171005 19:33:42.405"></status>
</kw>
<status starttime="20171005 19:33:42.398" status="PASS" endtime="20171005 19:33:42.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:33:42.406">Delete All Sessions</msg>
<status starttime="20171005 19:33:42.405" status="PASS" endtime="20171005 19:33:42.406"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:42.406">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:42.111" status="PASS" endtime="20171005 19:33:42.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:42.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:42.406" status="PASS" endtime="20171005 19:33:42.407"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:42.407">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:33:42.407">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:33:42.407">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:33:42.407" status="PASS" endtime="20171005 19:33:42.407"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:42.408">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:33:42.110" status="PASS" endtime="20171005 19:33:42.408"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:42.408">${power_state} = Off</msg>
<status starttime="20171005 19:33:42.110" status="PASS" endtime="20171005 19:33:42.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:33:42.409">On != Off</msg>
<status starttime="20171005 19:33:42.409" status="FAIL" endtime="20171005 19:33:42.409"></status>
</kw>
<status starttime="20171005 19:33:42.109" status="FAIL" endtime="20171005 19:33:42.409"></status>
</kw>
<status starttime="20171005 19:33:42.108" status="FAIL" endtime="20171005 19:33:42.409"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.416">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:33:52.416" status="PASS" endtime="20171005 19:33:52.416"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.417">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:33:52.417" status="PASS" endtime="20171005 19:33:52.417"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.418">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:33:52.417" status="PASS" endtime="20171005 19:33:52.418"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.419">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:33:52.418" status="PASS" endtime="20171005 19:33:52.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.610">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:33:52.420" status="PASS" endtime="20171005 19:33:52.610"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:52.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:33:52.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:52.419" status="PASS" endtime="20171005 19:33:52.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:52.611" status="PASS" endtime="20171005 19:33:52.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:52.612" status="PASS" endtime="20171005 19:33:52.612"></status>
</kw>
<status starttime="20171005 19:33:52.415" status="PASS" endtime="20171005 19:33:52.612"></status>
</kw>
<status starttime="20171005 19:33:52.415" status="PASS" endtime="20171005 19:33:52.612"></status>
</kw>
<status starttime="20171005 19:33:52.414" status="PASS" endtime="20171005 19:33:52.612"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.613">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:33:52.613" status="PASS" endtime="20171005 19:33:52.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.615">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:52.614" status="PASS" endtime="20171005 19:33:52.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.616">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:33:52.616" status="PASS" endtime="20171005 19:33:52.616"></status>
</kw>
<status starttime="20171005 19:33:52.615" status="PASS" endtime="20171005 19:33:52.616"></status>
</kw>
<status starttime="20171005 19:33:52.614" status="PASS" endtime="20171005 19:33:52.616"></status>
</kw>
<status starttime="20171005 19:33:52.613" status="PASS" endtime="20171005 19:33:52.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.701">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:33:52.701">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:52.617" status="PASS" endtime="20171005 19:33:52.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.703">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:52.703" status="PASS" endtime="20171005 19:33:52.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.704">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:33:52.704" status="PASS" endtime="20171005 19:33:52.704"></status>
</kw>
<status starttime="20171005 19:33:52.703" status="PASS" endtime="20171005 19:33:52.704"></status>
</kw>
<status starttime="20171005 19:33:52.702" status="PASS" endtime="20171005 19:33:52.704"></status>
</kw>
<status starttime="20171005 19:33:52.701" status="PASS" endtime="20171005 19:33:52.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:33:52.705">Delete All Sessions</msg>
<status starttime="20171005 19:33:52.705" status="PASS" endtime="20171005 19:33:52.705"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:52.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:33:52.413" status="PASS" endtime="20171005 19:33:52.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:33:52.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:33:52.705" status="PASS" endtime="20171005 19:33:52.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:33:52.706">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:33:52.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:33:52.706">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:33:52.706" status="PASS" endtime="20171005 19:33:52.707"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:52.707">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:33:52.412" status="PASS" endtime="20171005 19:33:52.707"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:33:52.707">${power_state} = Off</msg>
<status starttime="20171005 19:33:52.412" status="PASS" endtime="20171005 19:33:52.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:33:52.708">On != Off</msg>
<status starttime="20171005 19:33:52.707" status="FAIL" endtime="20171005 19:33:52.708"></status>
</kw>
<status starttime="20171005 19:33:52.411" status="FAIL" endtime="20171005 19:33:52.708"></status>
</kw>
<status starttime="20171005 19:33:52.410" status="FAIL" endtime="20171005 19:33:52.708"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:02.714">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:34:02.713" status="PASS" endtime="20171005 19:34:02.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.715">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:34:02.714" status="PASS" endtime="20171005 19:34:02.715"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.715">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:34:02.715" status="PASS" endtime="20171005 19:34:02.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.716">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:34:02.716" status="PASS" endtime="20171005 19:34:02.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:02.915">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:34:02.717" status="PASS" endtime="20171005 19:34:02.916"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:02.916">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:34:02.916">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:02.716" status="PASS" endtime="20171005 19:34:02.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:02.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:02.916" status="PASS" endtime="20171005 19:34:02.917"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:02.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:02.917" status="PASS" endtime="20171005 19:34:02.917"></status>
</kw>
<status starttime="20171005 19:34:02.712" status="PASS" endtime="20171005 19:34:02.917"></status>
</kw>
<status starttime="20171005 19:34:02.712" status="PASS" endtime="20171005 19:34:02.917"></status>
</kw>
<status starttime="20171005 19:34:02.711" status="PASS" endtime="20171005 19:34:02.918"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.918">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:34:02.918" status="PASS" endtime="20171005 19:34:02.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.920">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:02.920" status="PASS" endtime="20171005 19:34:02.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:02.921">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:02.921" status="PASS" endtime="20171005 19:34:02.921"></status>
</kw>
<status starttime="20171005 19:34:02.920" status="PASS" endtime="20171005 19:34:02.922"></status>
</kw>
<status starttime="20171005 19:34:02.919" status="PASS" endtime="20171005 19:34:02.922"></status>
</kw>
<status starttime="20171005 19:34:02.918" status="PASS" endtime="20171005 19:34:02.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.995">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:34:02.996">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:02.922" status="PASS" endtime="20171005 19:34:02.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:02.998">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:02.997" status="PASS" endtime="20171005 19:34:02.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:02.999">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:02.998" status="PASS" endtime="20171005 19:34:02.999"></status>
</kw>
<status starttime="20171005 19:34:02.998" status="PASS" endtime="20171005 19:34:02.999"></status>
</kw>
<status starttime="20171005 19:34:02.997" status="PASS" endtime="20171005 19:34:02.999"></status>
</kw>
<status starttime="20171005 19:34:02.996" status="PASS" endtime="20171005 19:34:02.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:34:03.000">Delete All Sessions</msg>
<status starttime="20171005 19:34:02.999" status="PASS" endtime="20171005 19:34:03.000"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:03.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:02.710" status="PASS" endtime="20171005 19:34:03.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:03.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:03.000" status="PASS" endtime="20171005 19:34:03.001"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:03.001">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:34:03.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:34:03.002">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:34:03.001" status="PASS" endtime="20171005 19:34:03.002"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:03.002">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:34:02.710" status="PASS" endtime="20171005 19:34:03.002"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:03.002">${power_state} = Off</msg>
<status starttime="20171005 19:34:02.710" status="PASS" endtime="20171005 19:34:03.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:34:03.003">On != Off</msg>
<status starttime="20171005 19:34:03.003" status="FAIL" endtime="20171005 19:34:03.003"></status>
</kw>
<status starttime="20171005 19:34:02.709" status="FAIL" endtime="20171005 19:34:03.003"></status>
</kw>
<status starttime="20171005 19:34:02.709" status="FAIL" endtime="20171005 19:34:03.003"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.008">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:34:13.008" status="PASS" endtime="20171005 19:34:13.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.009">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:34:13.009" status="PASS" endtime="20171005 19:34:13.009"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:34:13.010" status="PASS" endtime="20171005 19:34:13.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:34:13.010" status="PASS" endtime="20171005 19:34:13.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.247">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:34:13.012" status="PASS" endtime="20171005 19:34:13.248"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:13.248">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:34:13.248">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:13.011" status="PASS" endtime="20171005 19:34:13.248"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.249">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:13.248" status="PASS" endtime="20171005 19:34:13.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:13.249" status="PASS" endtime="20171005 19:34:13.250"></status>
</kw>
<status starttime="20171005 19:34:13.007" status="PASS" endtime="20171005 19:34:13.250"></status>
</kw>
<status starttime="20171005 19:34:13.007" status="PASS" endtime="20171005 19:34:13.250"></status>
</kw>
<status starttime="20171005 19:34:13.006" status="PASS" endtime="20171005 19:34:13.250"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.251">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:34:13.251" status="PASS" endtime="20171005 19:34:13.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.254">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:13.253" status="PASS" endtime="20171005 19:34:13.254"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.255">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:13.255" status="PASS" endtime="20171005 19:34:13.256"></status>
</kw>
<status starttime="20171005 19:34:13.255" status="PASS" endtime="20171005 19:34:13.256"></status>
</kw>
<status starttime="20171005 19:34:13.252" status="PASS" endtime="20171005 19:34:13.256"></status>
</kw>
<status starttime="20171005 19:34:13.252" status="PASS" endtime="20171005 19:34:13.256"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.330">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:34:13.330">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:13.256" status="PASS" endtime="20171005 19:34:13.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.332">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:13.332" status="PASS" endtime="20171005 19:34:13.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.333">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:13.333" status="PASS" endtime="20171005 19:34:13.333"></status>
</kw>
<status starttime="20171005 19:34:13.332" status="PASS" endtime="20171005 19:34:13.333"></status>
</kw>
<status starttime="20171005 19:34:13.331" status="PASS" endtime="20171005 19:34:13.333"></status>
</kw>
<status starttime="20171005 19:34:13.331" status="PASS" endtime="20171005 19:34:13.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:34:13.334">Delete All Sessions</msg>
<status starttime="20171005 19:34:13.334" status="PASS" endtime="20171005 19:34:13.334"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:13.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:13.006" status="PASS" endtime="20171005 19:34:13.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:13.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:13.335" status="PASS" endtime="20171005 19:34:13.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:13.335">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:34:13.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:34:13.336">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:34:13.335" status="PASS" endtime="20171005 19:34:13.336"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:13.336">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:34:13.005" status="PASS" endtime="20171005 19:34:13.336"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:13.336">${power_state} = Off</msg>
<status starttime="20171005 19:34:13.005" status="PASS" endtime="20171005 19:34:13.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:34:13.337">On != Off</msg>
<status starttime="20171005 19:34:13.337" status="FAIL" endtime="20171005 19:34:13.337"></status>
</kw>
<status starttime="20171005 19:34:13.004" status="FAIL" endtime="20171005 19:34:13.337"></status>
</kw>
<status starttime="20171005 19:34:13.004" status="FAIL" endtime="20171005 19:34:13.337"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.343">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:34:23.343" status="PASS" endtime="20171005 19:34:23.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.344">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:34:23.344" status="PASS" endtime="20171005 19:34:23.344"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.345">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:34:23.344" status="PASS" endtime="20171005 19:34:23.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.345">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:34:23.345" status="PASS" endtime="20171005 19:34:23.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:34:23.346" status="PASS" endtime="20171005 19:34:23.552"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:23.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:34:23.552">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:23.346" status="PASS" endtime="20171005 19:34:23.552"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:23.553" status="PASS" endtime="20171005 19:34:23.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:23.553" status="PASS" endtime="20171005 19:34:23.554"></status>
</kw>
<status starttime="20171005 19:34:23.342" status="PASS" endtime="20171005 19:34:23.554"></status>
</kw>
<status starttime="20171005 19:34:23.341" status="PASS" endtime="20171005 19:34:23.554"></status>
</kw>
<status starttime="20171005 19:34:23.341" status="PASS" endtime="20171005 19:34:23.554"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.555">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:34:23.554" status="PASS" endtime="20171005 19:34:23.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.557">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:23.556" status="PASS" endtime="20171005 19:34:23.557"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.558">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:23.558" status="PASS" endtime="20171005 19:34:23.558"></status>
</kw>
<status starttime="20171005 19:34:23.557" status="PASS" endtime="20171005 19:34:23.558"></status>
</kw>
<status starttime="20171005 19:34:23.555" status="PASS" endtime="20171005 19:34:23.558"></status>
</kw>
<status starttime="20171005 19:34:23.555" status="PASS" endtime="20171005 19:34:23.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.659">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:34:23.659">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:23.559" status="PASS" endtime="20171005 19:34:23.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.661">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:23.660" status="PASS" endtime="20171005 19:34:23.661"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.662">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:23.662" status="PASS" endtime="20171005 19:34:23.662"></status>
</kw>
<status starttime="20171005 19:34:23.661" status="PASS" endtime="20171005 19:34:23.662"></status>
</kw>
<status starttime="20171005 19:34:23.660" status="PASS" endtime="20171005 19:34:23.663"></status>
</kw>
<status starttime="20171005 19:34:23.659" status="PASS" endtime="20171005 19:34:23.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:34:23.663">Delete All Sessions</msg>
<status starttime="20171005 19:34:23.663" status="PASS" endtime="20171005 19:34:23.663"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:23.663">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:23.340" status="PASS" endtime="20171005 19:34:23.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:23.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:23.664" status="PASS" endtime="20171005 19:34:23.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:23.665">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:34:23.665">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:34:23.665">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:34:23.664" status="PASS" endtime="20171005 19:34:23.665"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:23.665">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:34:23.339" status="PASS" endtime="20171005 19:34:23.665"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:23.665">${power_state} = Off</msg>
<status starttime="20171005 19:34:23.339" status="PASS" endtime="20171005 19:34:23.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:34:23.666">On != Off</msg>
<status starttime="20171005 19:34:23.666" status="FAIL" endtime="20171005 19:34:23.666"></status>
</kw>
<status starttime="20171005 19:34:23.338" status="FAIL" endtime="20171005 19:34:23.666"></status>
</kw>
<status starttime="20171005 19:34:23.338" status="FAIL" endtime="20171005 19:34:23.667"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.672">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:34:33.671" status="PASS" endtime="20171005 19:34:33.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:34:33.673" status="PASS" endtime="20171005 19:34:33.673"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.674">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:34:33.673" status="PASS" endtime="20171005 19:34:33.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:34:33.674" status="PASS" endtime="20171005 19:34:33.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.879">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:34:33.675" status="PASS" endtime="20171005 19:34:33.880"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:33.880">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:34:33.880">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:33.675" status="PASS" endtime="20171005 19:34:33.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.880">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:33.880" status="PASS" endtime="20171005 19:34:33.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:33.881" status="PASS" endtime="20171005 19:34:33.881"></status>
</kw>
<status starttime="20171005 19:34:33.671" status="PASS" endtime="20171005 19:34:33.881"></status>
</kw>
<status starttime="20171005 19:34:33.670" status="PASS" endtime="20171005 19:34:33.881"></status>
</kw>
<status starttime="20171005 19:34:33.670" status="PASS" endtime="20171005 19:34:33.882"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.882">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:34:33.882" status="PASS" endtime="20171005 19:34:33.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.886">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:33.885" status="PASS" endtime="20171005 19:34:33.886"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.887">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:33.887" status="PASS" endtime="20171005 19:34:33.887"></status>
</kw>
<status starttime="20171005 19:34:33.886" status="PASS" endtime="20171005 19:34:33.887"></status>
</kw>
<status starttime="20171005 19:34:33.884" status="PASS" endtime="20171005 19:34:33.887"></status>
</kw>
<status starttime="20171005 19:34:33.883" status="PASS" endtime="20171005 19:34:33.887"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:34:33.963">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:33.888" status="PASS" endtime="20171005 19:34:33.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:33.964" status="PASS" endtime="20171005 19:34:33.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:33.965" status="PASS" endtime="20171005 19:34:33.966"></status>
</kw>
<status starttime="20171005 19:34:33.965" status="PASS" endtime="20171005 19:34:33.966"></status>
</kw>
<status starttime="20171005 19:34:33.964" status="PASS" endtime="20171005 19:34:33.966"></status>
</kw>
<status starttime="20171005 19:34:33.963" status="PASS" endtime="20171005 19:34:33.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:34:33.966">Delete All Sessions</msg>
<status starttime="20171005 19:34:33.966" status="PASS" endtime="20171005 19:34:33.967"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:33.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:33.669" status="PASS" endtime="20171005 19:34:33.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:33.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:33.967" status="PASS" endtime="20171005 19:34:33.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:33.968">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:34:33.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:34:33.968">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:34:33.968" status="PASS" endtime="20171005 19:34:33.968"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:33.968">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:34:33.669" status="PASS" endtime="20171005 19:34:33.969"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:33.969">${power_state} = Off</msg>
<status starttime="20171005 19:34:33.668" status="PASS" endtime="20171005 19:34:33.969"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:34:33.969">On != Off</msg>
<status starttime="20171005 19:34:33.969" status="FAIL" endtime="20171005 19:34:33.970"></status>
</kw>
<status starttime="20171005 19:34:33.668" status="FAIL" endtime="20171005 19:34:33.970"></status>
</kw>
<status starttime="20171005 19:34:33.667" status="FAIL" endtime="20171005 19:34:33.970"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:43.976">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:34:43.975" status="PASS" endtime="20171005 19:34:43.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:43.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:34:43.976" status="PASS" endtime="20171005 19:34:43.977"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:43.977">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:34:43.977" status="PASS" endtime="20171005 19:34:43.977"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:43.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:34:43.978" status="PASS" endtime="20171005 19:34:43.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:44.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:34:43.979" status="PASS" endtime="20171005 19:34:44.179"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:44.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:34:44.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:43.978" status="PASS" endtime="20171005 19:34:44.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:44.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:44.179" status="PASS" endtime="20171005 19:34:44.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:44.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:44.180" status="PASS" endtime="20171005 19:34:44.181"></status>
</kw>
<status starttime="20171005 19:34:43.974" status="PASS" endtime="20171005 19:34:44.181"></status>
</kw>
<status starttime="20171005 19:34:43.974" status="PASS" endtime="20171005 19:34:44.181"></status>
</kw>
<status starttime="20171005 19:34:43.973" status="PASS" endtime="20171005 19:34:44.181"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:44.181">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:34:44.181" status="PASS" endtime="20171005 19:34:44.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:44.184">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:44.183" status="PASS" endtime="20171005 19:34:44.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:44.185">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:44.184" status="PASS" endtime="20171005 19:34:44.185"></status>
</kw>
<status starttime="20171005 19:34:44.184" status="PASS" endtime="20171005 19:34:44.185"></status>
</kw>
<status starttime="20171005 19:34:44.182" status="PASS" endtime="20171005 19:34:44.185"></status>
</kw>
<status starttime="20171005 19:34:44.182" status="PASS" endtime="20171005 19:34:44.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:44.247">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:34:44.247">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:44.185" status="PASS" endtime="20171005 19:34:44.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:44.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:44.248" status="PASS" endtime="20171005 19:34:44.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:44.251">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:44.250" status="PASS" endtime="20171005 19:34:44.251"></status>
</kw>
<status starttime="20171005 19:34:44.249" status="PASS" endtime="20171005 19:34:44.251"></status>
</kw>
<status starttime="20171005 19:34:44.248" status="PASS" endtime="20171005 19:34:44.251"></status>
</kw>
<status starttime="20171005 19:34:44.247" status="PASS" endtime="20171005 19:34:44.251"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:34:44.251">Delete All Sessions</msg>
<status starttime="20171005 19:34:44.251" status="PASS" endtime="20171005 19:34:44.251"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:44.252">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:43.972" status="PASS" endtime="20171005 19:34:44.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:44.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:44.252" status="PASS" endtime="20171005 19:34:44.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:44.253">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:34:44.253">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:34:44.253">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:34:44.253" status="PASS" endtime="20171005 19:34:44.253"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:44.254">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:34:43.972" status="PASS" endtime="20171005 19:34:44.254"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:44.254">${power_state} = Off</msg>
<status starttime="20171005 19:34:43.971" status="PASS" endtime="20171005 19:34:44.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:34:44.254">On != Off</msg>
<status starttime="20171005 19:34:44.254" status="FAIL" endtime="20171005 19:34:44.255"></status>
</kw>
<status starttime="20171005 19:34:43.971" status="FAIL" endtime="20171005 19:34:44.255"></status>
</kw>
<status starttime="20171005 19:34:43.970" status="FAIL" endtime="20171005 19:34:44.255"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.260">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:34:54.260" status="PASS" endtime="20171005 19:34:54.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.261">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:34:54.261" status="PASS" endtime="20171005 19:34:54.261"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.262">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:34:54.261" status="PASS" endtime="20171005 19:34:54.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.262">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:34:54.262" status="PASS" endtime="20171005 19:34:54.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.472">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:34:54.263" status="PASS" endtime="20171005 19:34:54.472"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:54.472">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:34:54.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:54.263" status="PASS" endtime="20171005 19:34:54.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.473">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:54.473" status="PASS" endtime="20171005 19:34:54.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:54.473" status="PASS" endtime="20171005 19:34:54.474"></status>
</kw>
<status starttime="20171005 19:34:54.259" status="PASS" endtime="20171005 19:34:54.474"></status>
</kw>
<status starttime="20171005 19:34:54.259" status="PASS" endtime="20171005 19:34:54.474"></status>
</kw>
<status starttime="20171005 19:34:54.258" status="PASS" endtime="20171005 19:34:54.474"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.475">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:34:54.474" status="PASS" endtime="20171005 19:34:54.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.477">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:54.476" status="PASS" endtime="20171005 19:34:54.477"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.478">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:34:54.477" status="PASS" endtime="20171005 19:34:54.478"></status>
</kw>
<status starttime="20171005 19:34:54.477" status="PASS" endtime="20171005 19:34:54.478"></status>
</kw>
<status starttime="20171005 19:34:54.475" status="PASS" endtime="20171005 19:34:54.478"></status>
</kw>
<status starttime="20171005 19:34:54.475" status="PASS" endtime="20171005 19:34:54.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:34:54.540">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:54.478" status="PASS" endtime="20171005 19:34:54.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.542">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:54.541" status="PASS" endtime="20171005 19:34:54.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.543">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:34:54.543" status="PASS" endtime="20171005 19:34:54.543"></status>
</kw>
<status starttime="20171005 19:34:54.542" status="PASS" endtime="20171005 19:34:54.543"></status>
</kw>
<status starttime="20171005 19:34:54.541" status="PASS" endtime="20171005 19:34:54.543"></status>
</kw>
<status starttime="20171005 19:34:54.540" status="PASS" endtime="20171005 19:34:54.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:34:54.544">Delete All Sessions</msg>
<status starttime="20171005 19:34:54.544" status="PASS" endtime="20171005 19:34:54.544"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:54.544">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:34:54.257" status="PASS" endtime="20171005 19:34:54.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:34:54.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:34:54.544" status="PASS" endtime="20171005 19:34:54.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:34:54.545">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:34:54.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:34:54.545">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:34:54.545" status="PASS" endtime="20171005 19:34:54.546"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:54.546">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:34:54.257" status="PASS" endtime="20171005 19:34:54.546"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:34:54.546">${power_state} = Off</msg>
<status starttime="20171005 19:34:54.256" status="PASS" endtime="20171005 19:34:54.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:34:54.547">On != Off</msg>
<status starttime="20171005 19:34:54.546" status="FAIL" endtime="20171005 19:34:54.547"></status>
</kw>
<status starttime="20171005 19:34:54.256" status="FAIL" endtime="20171005 19:34:54.547"></status>
</kw>
<status starttime="20171005 19:34:54.255" status="FAIL" endtime="20171005 19:34:54.547"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:35:04.553" status="PASS" endtime="20171005 19:35:04.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:35:04.554" status="PASS" endtime="20171005 19:35:04.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.555">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:35:04.554" status="PASS" endtime="20171005 19:35:04.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:35:04.555" status="PASS" endtime="20171005 19:35:04.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.740">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:35:04.556" status="PASS" endtime="20171005 19:35:04.740"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:04.740">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:35:04.740">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:04.556" status="PASS" endtime="20171005 19:35:04.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.741">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:04.740" status="PASS" endtime="20171005 19:35:04.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:04.741" status="PASS" endtime="20171005 19:35:04.741"></status>
</kw>
<status starttime="20171005 19:35:04.551" status="PASS" endtime="20171005 19:35:04.742"></status>
</kw>
<status starttime="20171005 19:35:04.551" status="PASS" endtime="20171005 19:35:04.742"></status>
</kw>
<status starttime="20171005 19:35:04.550" status="PASS" endtime="20171005 19:35:04.742"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.742">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:35:04.742" status="PASS" endtime="20171005 19:35:04.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.745">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:04.744" status="PASS" endtime="20171005 19:35:04.745"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.745">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:04.745" status="PASS" endtime="20171005 19:35:04.746"></status>
</kw>
<status starttime="20171005 19:35:04.745" status="PASS" endtime="20171005 19:35:04.746"></status>
</kw>
<status starttime="20171005 19:35:04.743" status="PASS" endtime="20171005 19:35:04.746"></status>
</kw>
<status starttime="20171005 19:35:04.743" status="PASS" endtime="20171005 19:35:04.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.808">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:35:04.809">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:04.746" status="PASS" endtime="20171005 19:35:04.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.810">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:04.810" status="PASS" endtime="20171005 19:35:04.811"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.815">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:04.811" status="PASS" endtime="20171005 19:35:04.815"></status>
</kw>
<status starttime="20171005 19:35:04.811" status="PASS" endtime="20171005 19:35:04.815"></status>
</kw>
<status starttime="20171005 19:35:04.809" status="PASS" endtime="20171005 19:35:04.815"></status>
</kw>
<status starttime="20171005 19:35:04.809" status="PASS" endtime="20171005 19:35:04.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:35:04.816">Delete All Sessions</msg>
<status starttime="20171005 19:35:04.816" status="PASS" endtime="20171005 19:35:04.816"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:04.816">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:04.550" status="PASS" endtime="20171005 19:35:04.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:04.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:04.816" status="PASS" endtime="20171005 19:35:04.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:04.817">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:35:04.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:35:04.818">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:35:04.817" status="PASS" endtime="20171005 19:35:04.818"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:04.818">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:35:04.549" status="PASS" endtime="20171005 19:35:04.818"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:04.818">${power_state} = Off</msg>
<status starttime="20171005 19:35:04.549" status="PASS" endtime="20171005 19:35:04.818"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:35:04.819">On != Off</msg>
<status starttime="20171005 19:35:04.819" status="FAIL" endtime="20171005 19:35:04.819"></status>
</kw>
<status starttime="20171005 19:35:04.548" status="FAIL" endtime="20171005 19:35:04.819"></status>
</kw>
<status starttime="20171005 19:35:04.548" status="FAIL" endtime="20171005 19:35:04.819"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:14.825">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:35:14.824" status="PASS" endtime="20171005 19:35:14.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:14.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:35:14.825" status="PASS" endtime="20171005 19:35:14.826"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:14.826">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:35:14.826" status="PASS" endtime="20171005 19:35:14.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:14.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:35:14.827" status="PASS" endtime="20171005 19:35:14.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:15.035">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:35:14.828" status="PASS" endtime="20171005 19:35:15.035"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:15.035">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:35:15.035">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:14.827" status="PASS" endtime="20171005 19:35:15.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:15.036">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:15.035" status="PASS" endtime="20171005 19:35:15.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:15.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:15.036" status="PASS" endtime="20171005 19:35:15.036"></status>
</kw>
<status starttime="20171005 19:35:14.824" status="PASS" endtime="20171005 19:35:15.036"></status>
</kw>
<status starttime="20171005 19:35:14.823" status="PASS" endtime="20171005 19:35:15.037"></status>
</kw>
<status starttime="20171005 19:35:14.823" status="PASS" endtime="20171005 19:35:15.037"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:15.037">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:35:15.037" status="PASS" endtime="20171005 19:35:15.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:15.039">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:15.039" status="PASS" endtime="20171005 19:35:15.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:15.040">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:15.040" status="PASS" endtime="20171005 19:35:15.040"></status>
</kw>
<status starttime="20171005 19:35:15.040" status="PASS" endtime="20171005 19:35:15.040"></status>
</kw>
<status starttime="20171005 19:35:15.038" status="PASS" endtime="20171005 19:35:15.041"></status>
</kw>
<status starttime="20171005 19:35:15.038" status="PASS" endtime="20171005 19:35:15.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:15.103">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:35:15.103">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:15.041" status="PASS" endtime="20171005 19:35:15.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:15.105">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:15.105" status="PASS" endtime="20171005 19:35:15.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:15.106">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:15.106" status="PASS" endtime="20171005 19:35:15.106"></status>
</kw>
<status starttime="20171005 19:35:15.105" status="PASS" endtime="20171005 19:35:15.106"></status>
</kw>
<status starttime="20171005 19:35:15.104" status="PASS" endtime="20171005 19:35:15.107"></status>
</kw>
<status starttime="20171005 19:35:15.104" status="PASS" endtime="20171005 19:35:15.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:35:15.107">Delete All Sessions</msg>
<status starttime="20171005 19:35:15.107" status="PASS" endtime="20171005 19:35:15.107"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:15.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:14.822" status="PASS" endtime="20171005 19:35:15.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:15.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:15.108" status="PASS" endtime="20171005 19:35:15.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:15.109">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:35:15.109">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:35:15.109">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:35:15.108" status="PASS" endtime="20171005 19:35:15.109"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:15.109">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:35:14.821" status="PASS" endtime="20171005 19:35:15.109"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:15.109">${power_state} = Off</msg>
<status starttime="20171005 19:35:14.821" status="PASS" endtime="20171005 19:35:15.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:35:15.110">On != Off</msg>
<status starttime="20171005 19:35:15.110" status="FAIL" endtime="20171005 19:35:15.110"></status>
</kw>
<status starttime="20171005 19:35:14.821" status="FAIL" endtime="20171005 19:35:15.110"></status>
</kw>
<status starttime="20171005 19:35:14.820" status="FAIL" endtime="20171005 19:35:15.111"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.116">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:35:25.116" status="PASS" endtime="20171005 19:35:25.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:35:25.117" status="PASS" endtime="20171005 19:35:25.117"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.118">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:35:25.118" status="PASS" endtime="20171005 19:35:25.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.119">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:35:25.118" status="PASS" endtime="20171005 19:35:25.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:35:25.119" status="PASS" endtime="20171005 19:35:25.296"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:25.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:35:25.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:25.119" status="PASS" endtime="20171005 19:35:25.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:25.296" status="PASS" endtime="20171005 19:35:25.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:25.297" status="PASS" endtime="20171005 19:35:25.297"></status>
</kw>
<status starttime="20171005 19:35:25.115" status="PASS" endtime="20171005 19:35:25.297"></status>
</kw>
<status starttime="20171005 19:35:25.114" status="PASS" endtime="20171005 19:35:25.298"></status>
</kw>
<status starttime="20171005 19:35:25.114" status="PASS" endtime="20171005 19:35:25.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.298">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:35:25.298" status="PASS" endtime="20171005 19:35:25.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.300">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:25.300" status="PASS" endtime="20171005 19:35:25.301"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.301">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:25.301" status="PASS" endtime="20171005 19:35:25.302"></status>
</kw>
<status starttime="20171005 19:35:25.301" status="PASS" endtime="20171005 19:35:25.302"></status>
</kw>
<status starttime="20171005 19:35:25.299" status="PASS" endtime="20171005 19:35:25.302"></status>
</kw>
<status starttime="20171005 19:35:25.299" status="PASS" endtime="20171005 19:35:25.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.364">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:35:25.364">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:25.302" status="PASS" endtime="20171005 19:35:25.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.366">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:25.365" status="PASS" endtime="20171005 19:35:25.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.367">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:25.367" status="PASS" endtime="20171005 19:35:25.367"></status>
</kw>
<status starttime="20171005 19:35:25.366" status="PASS" endtime="20171005 19:35:25.368"></status>
</kw>
<status starttime="20171005 19:35:25.365" status="PASS" endtime="20171005 19:35:25.368"></status>
</kw>
<status starttime="20171005 19:35:25.364" status="PASS" endtime="20171005 19:35:25.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:35:25.368">Delete All Sessions</msg>
<status starttime="20171005 19:35:25.368" status="PASS" endtime="20171005 19:35:25.368"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:25.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:25.113" status="PASS" endtime="20171005 19:35:25.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:25.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:25.369" status="PASS" endtime="20171005 19:35:25.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:25.370">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:35:25.370">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:35:25.370">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:35:25.369" status="PASS" endtime="20171005 19:35:25.370"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:25.370">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:35:25.112" status="PASS" endtime="20171005 19:35:25.370"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:25.370">${power_state} = Off</msg>
<status starttime="20171005 19:35:25.112" status="PASS" endtime="20171005 19:35:25.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:35:25.371">On != Off</msg>
<status starttime="20171005 19:35:25.371" status="FAIL" endtime="20171005 19:35:25.371"></status>
</kw>
<status starttime="20171005 19:35:25.112" status="FAIL" endtime="20171005 19:35:25.371"></status>
</kw>
<status starttime="20171005 19:35:25.111" status="FAIL" endtime="20171005 19:35:25.371"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.377">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:35:35.376" status="PASS" endtime="20171005 19:35:35.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:35:35.378" status="PASS" endtime="20171005 19:35:35.378"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.378">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:35:35.378" status="PASS" endtime="20171005 19:35:35.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.379">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:35:35.379" status="PASS" endtime="20171005 19:35:35.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.561">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:35:35.380" status="PASS" endtime="20171005 19:35:35.561"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:35.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:35:35.561">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:35.379" status="PASS" endtime="20171005 19:35:35.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:35.561" status="PASS" endtime="20171005 19:35:35.562"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:35.562" status="PASS" endtime="20171005 19:35:35.563"></status>
</kw>
<status starttime="20171005 19:35:35.376" status="PASS" endtime="20171005 19:35:35.563"></status>
</kw>
<status starttime="20171005 19:35:35.375" status="PASS" endtime="20171005 19:35:35.563"></status>
</kw>
<status starttime="20171005 19:35:35.375" status="PASS" endtime="20171005 19:35:35.563"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.564">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:35:35.563" status="PASS" endtime="20171005 19:35:35.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.566">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:35.565" status="PASS" endtime="20171005 19:35:35.566"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.567">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:35.567" status="PASS" endtime="20171005 19:35:35.567"></status>
</kw>
<status starttime="20171005 19:35:35.566" status="PASS" endtime="20171005 19:35:35.567"></status>
</kw>
<status starttime="20171005 19:35:35.565" status="PASS" endtime="20171005 19:35:35.567"></status>
</kw>
<status starttime="20171005 19:35:35.564" status="PASS" endtime="20171005 19:35:35.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.641">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:35:35.641">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:35.567" status="PASS" endtime="20171005 19:35:35.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.643">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:35.643" status="PASS" endtime="20171005 19:35:35.643"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.644">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:35.644" status="PASS" endtime="20171005 19:35:35.644"></status>
</kw>
<status starttime="20171005 19:35:35.643" status="PASS" endtime="20171005 19:35:35.644"></status>
</kw>
<status starttime="20171005 19:35:35.642" status="PASS" endtime="20171005 19:35:35.645"></status>
</kw>
<status starttime="20171005 19:35:35.642" status="PASS" endtime="20171005 19:35:35.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:35:35.645">Delete All Sessions</msg>
<status starttime="20171005 19:35:35.645" status="PASS" endtime="20171005 19:35:35.645"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:35.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:35.374" status="PASS" endtime="20171005 19:35:35.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:35.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:35.646" status="PASS" endtime="20171005 19:35:35.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:35.647">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:35:35.647">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:35:35.647">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:35:35.646" status="PASS" endtime="20171005 19:35:35.647"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:35.647">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:35:35.373" status="PASS" endtime="20171005 19:35:35.647"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:35.647">${power_state} = Off</msg>
<status starttime="20171005 19:35:35.373" status="PASS" endtime="20171005 19:35:35.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:35:35.648">On != Off</msg>
<status starttime="20171005 19:35:35.648" status="FAIL" endtime="20171005 19:35:35.648"></status>
</kw>
<status starttime="20171005 19:35:35.373" status="FAIL" endtime="20171005 19:35:35.649"></status>
</kw>
<status starttime="20171005 19:35:35.372" status="FAIL" endtime="20171005 19:35:35.649"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.655">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:35:45.654" status="PASS" endtime="20171005 19:35:45.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.656">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:35:45.655" status="PASS" endtime="20171005 19:35:45.656"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.656">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:35:45.656" status="PASS" endtime="20171005 19:35:45.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.657">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:35:45.657" status="PASS" endtime="20171005 19:35:45.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:35:45.658" status="PASS" endtime="20171005 19:35:45.844"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:45.844">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:35:45.844">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:45.657" status="PASS" endtime="20171005 19:35:45.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:45.845" status="PASS" endtime="20171005 19:35:45.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:45.846" status="PASS" endtime="20171005 19:35:45.846"></status>
</kw>
<status starttime="20171005 19:35:45.653" status="PASS" endtime="20171005 19:35:45.846"></status>
</kw>
<status starttime="20171005 19:35:45.653" status="PASS" endtime="20171005 19:35:45.846"></status>
</kw>
<status starttime="20171005 19:35:45.652" status="PASS" endtime="20171005 19:35:45.846"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.847">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:35:45.847" status="PASS" endtime="20171005 19:35:45.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.849">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:45.848" status="PASS" endtime="20171005 19:35:45.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.850">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:45.850" status="PASS" endtime="20171005 19:35:45.850"></status>
</kw>
<status starttime="20171005 19:35:45.849" status="PASS" endtime="20171005 19:35:45.850"></status>
</kw>
<status starttime="20171005 19:35:45.848" status="PASS" endtime="20171005 19:35:45.850"></status>
</kw>
<status starttime="20171005 19:35:45.847" status="PASS" endtime="20171005 19:35:45.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.914">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:35:45.914">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:45.851" status="PASS" endtime="20171005 19:35:45.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.916">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:45.915" status="PASS" endtime="20171005 19:35:45.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.917">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:45.917" status="PASS" endtime="20171005 19:35:45.917"></status>
</kw>
<status starttime="20171005 19:35:45.916" status="PASS" endtime="20171005 19:35:45.918"></status>
</kw>
<status starttime="20171005 19:35:45.915" status="PASS" endtime="20171005 19:35:45.918"></status>
</kw>
<status starttime="20171005 19:35:45.914" status="PASS" endtime="20171005 19:35:45.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:35:45.918">Delete All Sessions</msg>
<status starttime="20171005 19:35:45.918" status="PASS" endtime="20171005 19:35:45.918"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:45.918">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:45.651" status="PASS" endtime="20171005 19:35:45.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:45.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:45.919" status="PASS" endtime="20171005 19:35:45.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:45.920">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:35:45.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:35:45.920">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:35:45.919" status="PASS" endtime="20171005 19:35:45.920"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:45.920">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:35:45.651" status="PASS" endtime="20171005 19:35:45.920"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:45.921">${power_state} = Off</msg>
<status starttime="20171005 19:35:45.650" status="PASS" endtime="20171005 19:35:45.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:35:45.922">On != Off</msg>
<status starttime="20171005 19:35:45.921" status="FAIL" endtime="20171005 19:35:45.922"></status>
</kw>
<status starttime="20171005 19:35:45.650" status="FAIL" endtime="20171005 19:35:45.922"></status>
</kw>
<status starttime="20171005 19:35:45.649" status="FAIL" endtime="20171005 19:35:45.922"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:55.927">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:35:55.927" status="PASS" endtime="20171005 19:35:55.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:55.928">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:35:55.928" status="PASS" endtime="20171005 19:35:55.928"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:55.929">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:35:55.928" status="PASS" endtime="20171005 19:35:55.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:55.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:35:55.929" status="PASS" endtime="20171005 19:35:55.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:56.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:35:55.930" status="PASS" endtime="20171005 19:35:56.127"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:56.127">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:35:56.127">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:55.930" status="PASS" endtime="20171005 19:35:56.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:56.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:56.127" status="PASS" endtime="20171005 19:35:56.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:56.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:56.128" status="PASS" endtime="20171005 19:35:56.128"></status>
</kw>
<status starttime="20171005 19:35:55.926" status="PASS" endtime="20171005 19:35:56.128"></status>
</kw>
<status starttime="20171005 19:35:55.926" status="PASS" endtime="20171005 19:35:56.128"></status>
</kw>
<status starttime="20171005 19:35:55.925" status="PASS" endtime="20171005 19:35:56.129"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:56.129">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:35:56.129" status="PASS" endtime="20171005 19:35:56.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:56.131">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:56.131" status="PASS" endtime="20171005 19:35:56.131"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:56.132">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:35:56.132" status="PASS" endtime="20171005 19:35:56.132"></status>
</kw>
<status starttime="20171005 19:35:56.131" status="PASS" endtime="20171005 19:35:56.132"></status>
</kw>
<status starttime="20171005 19:35:56.130" status="PASS" endtime="20171005 19:35:56.133"></status>
</kw>
<status starttime="20171005 19:35:56.129" status="PASS" endtime="20171005 19:35:56.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:56.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:35:56.195">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:56.133" status="PASS" endtime="20171005 19:35:56.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:56.198">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:56.197" status="PASS" endtime="20171005 19:35:56.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:56.199">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:35:56.199" status="PASS" endtime="20171005 19:35:56.199"></status>
</kw>
<status starttime="20171005 19:35:56.198" status="PASS" endtime="20171005 19:35:56.200"></status>
</kw>
<status starttime="20171005 19:35:56.196" status="PASS" endtime="20171005 19:35:56.200"></status>
</kw>
<status starttime="20171005 19:35:56.196" status="PASS" endtime="20171005 19:35:56.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:35:56.200">Delete All Sessions</msg>
<status starttime="20171005 19:35:56.200" status="PASS" endtime="20171005 19:35:56.200"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:56.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:35:55.925" status="PASS" endtime="20171005 19:35:56.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:35:56.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:35:56.201" status="PASS" endtime="20171005 19:35:56.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:35:56.202">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:35:56.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:35:56.202">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:35:56.201" status="PASS" endtime="20171005 19:35:56.202"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:56.202">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:35:55.924" status="PASS" endtime="20171005 19:35:56.202"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:35:56.203">${power_state} = Off</msg>
<status starttime="20171005 19:35:55.924" status="PASS" endtime="20171005 19:35:56.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:35:56.203">On != Off</msg>
<status starttime="20171005 19:35:56.203" status="FAIL" endtime="20171005 19:35:56.203"></status>
</kw>
<status starttime="20171005 19:35:55.923" status="FAIL" endtime="20171005 19:35:56.204"></status>
</kw>
<status starttime="20171005 19:35:55.923" status="FAIL" endtime="20171005 19:35:56.204"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:06.210" status="PASS" endtime="20171005 19:36:06.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:06.211" status="PASS" endtime="20171005 19:36:06.211"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.212">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:06.212" status="PASS" endtime="20171005 19:36:06.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:06.213" status="PASS" endtime="20171005 19:36:06.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:06.215" status="PASS" endtime="20171005 19:36:06.452"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:06.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:06.452">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:06.214" status="PASS" endtime="20171005 19:36:06.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:06.453" status="PASS" endtime="20171005 19:36:06.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:06.453" status="PASS" endtime="20171005 19:36:06.454"></status>
</kw>
<status starttime="20171005 19:36:06.208" status="PASS" endtime="20171005 19:36:06.454"></status>
</kw>
<status starttime="20171005 19:36:06.208" status="PASS" endtime="20171005 19:36:06.454"></status>
</kw>
<status starttime="20171005 19:36:06.207" status="PASS" endtime="20171005 19:36:06.454"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.455">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:36:06.454" status="PASS" endtime="20171005 19:36:06.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.457">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:36:06.456" status="PASS" endtime="20171005 19:36:06.457"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.458">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:36:06.458" status="PASS" endtime="20171005 19:36:06.458"></status>
</kw>
<status starttime="20171005 19:36:06.457" status="PASS" endtime="20171005 19:36:06.458"></status>
</kw>
<status starttime="20171005 19:36:06.456" status="PASS" endtime="20171005 19:36:06.458"></status>
</kw>
<status starttime="20171005 19:36:06.455" status="PASS" endtime="20171005 19:36:06.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.526">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:06.526">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:06.458" status="PASS" endtime="20171005 19:36:06.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.528">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:06.527" status="PASS" endtime="20171005 19:36:06.528"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.529">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:06.528" status="PASS" endtime="20171005 19:36:06.529"></status>
</kw>
<status starttime="20171005 19:36:06.528" status="PASS" endtime="20171005 19:36:06.529"></status>
</kw>
<status starttime="20171005 19:36:06.527" status="PASS" endtime="20171005 19:36:06.530"></status>
</kw>
<status starttime="20171005 19:36:06.526" status="PASS" endtime="20171005 19:36:06.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:06.530">Delete All Sessions</msg>
<status starttime="20171005 19:36:06.530" status="PASS" endtime="20171005 19:36:06.530"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:06.530">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:06.206" status="PASS" endtime="20171005 19:36:06.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:06.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:06.531" status="PASS" endtime="20171005 19:36:06.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:06.532">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:06.532">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:36:06.532">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:36:06.531" status="PASS" endtime="20171005 19:36:06.532"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:06.532">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:36:06.206" status="PASS" endtime="20171005 19:36:06.532"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:06.532">${power_state} = Off</msg>
<status starttime="20171005 19:36:06.205" status="PASS" endtime="20171005 19:36:06.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:36:06.533">On != Off</msg>
<status starttime="20171005 19:36:06.533" status="FAIL" endtime="20171005 19:36:06.533"></status>
</kw>
<status starttime="20171005 19:36:06.205" status="FAIL" endtime="20171005 19:36:06.533"></status>
</kw>
<status starttime="20171005 19:36:06.204" status="FAIL" endtime="20171005 19:36:06.534"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.539">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:16.539" status="PASS" endtime="20171005 19:36:16.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:16.541" status="PASS" endtime="20171005 19:36:16.541"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.542">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:16.541" status="PASS" endtime="20171005 19:36:16.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:16.542" status="PASS" endtime="20171005 19:36:16.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.735">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:16.543" status="PASS" endtime="20171005 19:36:16.736"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:16.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:16.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:16.543" status="PASS" endtime="20171005 19:36:16.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:16.736" status="PASS" endtime="20171005 19:36:16.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:16.737" status="PASS" endtime="20171005 19:36:16.737"></status>
</kw>
<status starttime="20171005 19:36:16.538" status="PASS" endtime="20171005 19:36:16.737"></status>
</kw>
<status starttime="20171005 19:36:16.538" status="PASS" endtime="20171005 19:36:16.737"></status>
</kw>
<status starttime="20171005 19:36:16.537" status="PASS" endtime="20171005 19:36:16.737"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.738">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171005 19:36:16.738" status="PASS" endtime="20171005 19:36:16.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.740">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:36:16.739" status="PASS" endtime="20171005 19:36:16.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.741">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171005 19:36:16.741" status="PASS" endtime="20171005 19:36:16.741"></status>
</kw>
<status starttime="20171005 19:36:16.740" status="PASS" endtime="20171005 19:36:16.741"></status>
</kw>
<status starttime="20171005 19:36:16.739" status="PASS" endtime="20171005 19:36:16.742"></status>
</kw>
<status starttime="20171005 19:36:16.738" status="PASS" endtime="20171005 19:36:16.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.824">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:16.824">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:16.742" status="PASS" endtime="20171005 19:36:16.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.826">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:16.825" status="PASS" endtime="20171005 19:36:16.826"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.827">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:16.827" status="PASS" endtime="20171005 19:36:16.827"></status>
</kw>
<status starttime="20171005 19:36:16.826" status="PASS" endtime="20171005 19:36:16.827"></status>
</kw>
<status starttime="20171005 19:36:16.825" status="PASS" endtime="20171005 19:36:16.827"></status>
</kw>
<status starttime="20171005 19:36:16.825" status="PASS" endtime="20171005 19:36:16.827"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:16.828">Delete All Sessions</msg>
<status starttime="20171005 19:36:16.827" status="PASS" endtime="20171005 19:36:16.828"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:16.828">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:16.536" status="PASS" endtime="20171005 19:36:16.828"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:16.828" status="PASS" endtime="20171005 19:36:16.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.830">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:16.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:36:16.830">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:36:16.829" status="PASS" endtime="20171005 19:36:16.830"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:16.830">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171005 19:36:16.536" status="PASS" endtime="20171005 19:36:16.830"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:16.831">${power_state} = Off</msg>
<status starttime="20171005 19:36:16.535" status="PASS" endtime="20171005 19:36:16.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:36:16.832">On != Off</msg>
<status starttime="20171005 19:36:16.831" status="FAIL" endtime="20171005 19:36:16.832"></status>
</kw>
<status starttime="20171005 19:36:16.535" status="FAIL" endtime="20171005 19:36:16.832"></status>
</kw>
<status starttime="20171005 19:36:16.534" status="FAIL" endtime="20171005 19:36:16.832"></status>
</kw>
<msg level="FAIL" timestamp="20171005 19:36:16.832">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status starttime="20171005 19:26:10.071" status="FAIL" endtime="20171005 19:36:16.833"></status>
</kw>
<status starttime="20171005 19:26:09.503" status="FAIL" endtime="20171005 19:36:16.833"></status>
</kw>
<status starttime="20171005 19:26:07.216" status="FAIL" endtime="20171005 19:36:16.833"></status>
</kw>
<status starttime="20171005 19:26:07.215" status="FAIL" endtime="20171005 19:36:16.833"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:16.857">Length is 10</msg>
<status starttime="20171005 19:36:16.857" status="PASS" endtime="20171005 19:36:16.858"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:16.862">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:36:19.872">${RC} = 0</msg>
<msg level="INFO" timestamp="20171005 19:36:19.872">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.57 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.654 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status starttime="20171005 19:36:16.858" status="PASS" endtime="20171005 19:36:19.872"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:19.875">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.57 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.654 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.596 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.607 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.596/0.857/1.574/0.415 ms</msg>
<status starttime="20171005 19:36:19.874" status="PASS" endtime="20171005 19:36:19.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171005 19:36:19.875" status="PASS" endtime="20171005 19:36:19.876"></status>
</kw>
<status starttime="20171005 19:36:16.857" status="PASS" endtime="20171005 19:36:19.876"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:19.908">${cur_time} = 2017-10-05 19:36:19:907582</msg>
<status starttime="20171005 19:36:19.907" status="PASS" endtime="20171005 19:36:19.908"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:19.908">${cur_time} = 20171005193619907582</msg>
<status starttime="20171005 19:36:19.908" status="PASS" endtime="20171005 19:36:19.908"></status>
</kw>
<status starttime="20171005 19:36:19.907" status="PASS" endtime="20171005 19:36:19.909"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:19.909">${FFDC_TIME} = 20171005193619907582</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:19.920">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20171005 19:36:19.920" status="PASS" endtime="20171005 19:36:19.920"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:19.921">${suite_name} = 20171005193619907582_TestsTestBasicPoweron</msg>
<status starttime="20171005 19:36:19.920" status="PASS" endtime="20171005 19:36:19.921"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:19.921">${test_name} = PowerOnTest</msg>
<status starttime="20171005 19:36:19.921" status="PASS" endtime="20171005 19:36:19.921"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:19.922">${test_name} = 20171005193619907582_PowerOnTest</msg>
<status starttime="20171005 19:36:19.921" status="PASS" endtime="20171005 19:36:19.922"></status>
</kw>
<status starttime="20171005 19:36:19.919" status="PASS" endtime="20171005 19:36:19.922"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:19.922">${FFDC_DIR_PATH} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/</msg>
<msg level="INFO" timestamp="20171005 19:36:19.923">${FFDC_PREFIX} = 20171005193619907582_</msg>
<msg level="INFO" timestamp="20171005 19:36:19.946">${LOG_PREFIX} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.948">Created directory '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.947" status="PASS" endtime="20171005 19:36:19.948"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:19.953">${FFDC_FILE_PATH} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.975">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.974" status="PASS" endtime="20171005 19:36:19.975"></status>
</kw>
<status starttime="20171005 19:36:19.974" status="PASS" endtime="20171005 19:36:19.975"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.976">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.976" status="PASS" endtime="20171005 19:36:19.976"></status>
</kw>
<status starttime="20171005 19:36:19.975" status="PASS" endtime="20171005 19:36:19.976"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.977">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.977" status="PASS" endtime="20171005 19:36:19.978"></status>
</kw>
<status starttime="20171005 19:36:19.976" status="PASS" endtime="20171005 19:36:19.978"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.979">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.978" status="PASS" endtime="20171005 19:36:19.979"></status>
</kw>
<status starttime="20171005 19:36:19.978" status="PASS" endtime="20171005 19:36:19.979"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.980">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.980" status="PASS" endtime="20171005 19:36:19.980"></status>
</kw>
<status starttime="20171005 19:36:19.979" status="PASS" endtime="20171005 19:36:19.980"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.982">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.981" status="PASS" endtime="20171005 19:36:19.982"></status>
</kw>
<status starttime="20171005 19:36:19.981" status="PASS" endtime="20171005 19:36:19.982"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.983">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.983" status="PASS" endtime="20171005 19:36:19.983"></status>
</kw>
<status starttime="20171005 19:36:19.982" status="PASS" endtime="20171005 19:36:19.983"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.985">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.984" status="PASS" endtime="20171005 19:36:19.985"></status>
</kw>
<status starttime="20171005 19:36:19.984" status="PASS" endtime="20171005 19:36:19.985"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.986">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.986" status="PASS" endtime="20171005 19:36:19.986"></status>
</kw>
<status starttime="20171005 19:36:19.985" status="PASS" endtime="20171005 19:36:19.986"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.988">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.987" status="PASS" endtime="20171005 19:36:19.988"></status>
</kw>
<status starttime="20171005 19:36:19.987" status="PASS" endtime="20171005 19:36:19.988"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.989">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.989" status="PASS" endtime="20171005 19:36:19.989"></status>
</kw>
<status starttime="20171005 19:36:19.988" status="PASS" endtime="20171005 19:36:19.989"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.990">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.990" status="PASS" endtime="20171005 19:36:19.991"></status>
</kw>
<status starttime="20171005 19:36:19.989" status="PASS" endtime="20171005 19:36:19.991"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:19.992">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:19.991" status="PASS" endtime="20171005 19:36:19.992"></status>
</kw>
<status starttime="20171005 19:36:19.991" status="PASS" endtime="20171005 19:36:19.992"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.021">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:20.022">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171005 19:36:20.089">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171005 19:36:20.098">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171005 19:36:20.098">${stderr} = </msg>
<msg level="INFO" timestamp="20171005 19:36:20.098">${rc} = 0</msg>
<status starttime="20171005 19:36:19.993" status="PASS" endtime="20171005 19:36:20.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.099">Length is 0</msg>
<status starttime="20171005 19:36:20.099" status="PASS" endtime="20171005 19:36:20.099"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.100">Length is 11</msg>
<status starttime="20171005 19:36:20.099" status="PASS" endtime="20171005 19:36:20.100"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.100">${model_name} = Witherspoon</msg>
<status starttime="20171005 19:36:19.992" status="PASS" endtime="20171005 19:36:20.100"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.101">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.101" status="PASS" endtime="20171005 19:36:20.101"></status>
</kw>
<status starttime="20171005 19:36:20.100" status="PASS" endtime="20171005 19:36:20.101"></status>
</kw>
<status starttime="20171005 19:36:19.987" status="PASS" endtime="20171005 19:36:20.102"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.103">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.102" status="PASS" endtime="20171005 19:36:20.103"></status>
</kw>
<status starttime="20171005 19:36:20.102" status="PASS" endtime="20171005 19:36:20.103"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.103">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20171005 19:36:20.103" status="PASS" endtime="20171005 19:36:20.103"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.105">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.105" status="PASS" endtime="20171005 19:36:20.105"></status>
</kw>
<status starttime="20171005 19:36:20.104" status="PASS" endtime="20171005 19:36:20.105"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.106">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.106" status="PASS" endtime="20171005 19:36:20.106"></status>
</kw>
<status starttime="20171005 19:36:20.105" status="PASS" endtime="20171005 19:36:20.106"></status>
</kw>
<status starttime="20171005 19:36:20.104" status="PASS" endtime="20171005 19:36:20.106"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.108">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.107" status="PASS" endtime="20171005 19:36:20.108"></status>
</kw>
<status starttime="20171005 19:36:20.107" status="PASS" endtime="20171005 19:36:20.108"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.109">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.109" status="PASS" endtime="20171005 19:36:20.109"></status>
</kw>
<status starttime="20171005 19:36:20.108" status="PASS" endtime="20171005 19:36:20.109"></status>
</kw>
<status starttime="20171005 19:36:20.107" status="PASS" endtime="20171005 19:36:20.109"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.110">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.110" status="PASS" endtime="20171005 19:36:20.111"></status>
</kw>
<status starttime="20171005 19:36:20.109" status="PASS" endtime="20171005 19:36:20.111"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.112">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.111" status="PASS" endtime="20171005 19:36:20.112"></status>
</kw>
<status starttime="20171005 19:36:20.111" status="PASS" endtime="20171005 19:36:20.112"></status>
</kw>
<status starttime="20171005 19:36:20.109" status="PASS" endtime="20171005 19:36:20.112"></status>
</kw>
<status starttime="20171005 19:36:20.104" status="PASS" endtime="20171005 19:36:20.112"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.114">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.113" status="PASS" endtime="20171005 19:36:20.114"></status>
</kw>
<status starttime="20171005 19:36:20.112" status="PASS" endtime="20171005 19:36:20.114"></status>
</kw>
<status starttime="20171005 19:36:19.973" status="PASS" endtime="20171005 19:36:20.114"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.120">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20171005 19:36:20.120" status="PASS" endtime="20171005 19:36:20.120"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.122">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect eSEL Log') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') |...</msg>
<status starttime="20171005 19:36:20.122" status="PASS" endtime="20171005 19:36:20.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20171005 19:36:20.123" status="PASS" endtime="20171005 19:36:20.123"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.124">@{ffdc_function_list} = [ Get Request FFDC | Core Files | SEL Log | FFDC Generic Report | OS FFDC | Sys Inventory Files | BMC Specific Files ]</msg>
<status starttime="20171005 19:36:20.123" status="PASS" endtime="20171005 19:36:20.124"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:20.125" status="PASS" endtime="20171005 19:36:20.126"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.126">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:20.126">${ret_values} = None</msg>
<status starttime="20171005 19:36:20.125" status="PASS" endtime="20171005 19:36:20.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:20.126" status="PASS" endtime="20171005 19:36:20.126"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.154">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20171005 19:36:20.154" status="PASS" endtime="20171005 19:36:20.154"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.155">@{cmd_list} = [ ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_inventory', '/xyz/openbm...</msg>
<status starttime="20171005 19:36:20.155" status="PASS" endtime="20171005 19:36:20.155"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.156">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_FIRMWARE_list.txt</msg>
<status starttime="20171005 19:36:20.156" status="PASS" endtime="20171005 19:36:20.156"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.159">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:20.159" status="PASS" endtime="20171005 19:36:20.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:20.160" status="PASS" endtime="20171005 19:36:20.160"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.161">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:20.160" status="PASS" endtime="20171005 19:36:20.161"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:20.161" status="PASS" endtime="20171005 19:36:20.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:20.162" status="PASS" endtime="20171005 19:36:20.397"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:20.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:20.162" status="PASS" endtime="20171005 19:36:20.397"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.398">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:20.397" status="PASS" endtime="20171005 19:36:20.398"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:20.398" status="PASS" endtime="20171005 19:36:20.398"></status>
</kw>
<status starttime="20171005 19:36:20.158" status="PASS" endtime="20171005 19:36:20.398"></status>
</kw>
<status starttime="20171005 19:36:20.158" status="PASS" endtime="20171005 19:36:20.399"></status>
</kw>
<status starttime="20171005 19:36:20.157" status="PASS" endtime="20171005 19:36:20.399"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.399">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status starttime="20171005 19:36:20.399" status="PASS" endtime="20171005 19:36:20.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:20.400" status="PASS" endtime="20171005 19:36:20.400"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.745">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:20.745">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:20.400" status="PASS" endtime="20171005 19:36:20.745"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:20.745" status="PASS" endtime="20171005 19:36:20.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:20.746">Delete All Sessions</msg>
<status starttime="20171005 19:36:20.746" status="PASS" endtime="20171005 19:36:20.746"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.746">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:20.156" status="PASS" endtime="20171005 19:36:20.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:20.747" status="PASS" endtime="20171005 19:36:20.748"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.748">${status} = True</msg>
<status starttime="20171005 19:36:20.747" status="PASS" endtime="20171005 19:36:20.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:20.748" status="PASS" endtime="20171005 19:36:20.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.750">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/2b498149": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-111-g7e54531", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/2b498149/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/2b498149/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/58493a9a": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-112-ge7fe258", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/58493a9a/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/58493a9a/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/58493a9a", 
        "/xyz/openbmc_project/software/2b498149", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/58493a9a", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:20.750">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:20.750">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/2b498149": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status starttime="20171005 19:36:20.749" status="PASS" endtime="20171005 19:36:20.750"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:20.752">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_FIRMWARE_list.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:20.751" status="PASS" endtime="20171005 19:36:20.752"></status>
</kw>
<status starttime="20171005 19:36:20.750" status="PASS" endtime="20171005 19:36:20.752"></status>
</kw>
<status starttime="20171005 19:36:20.155" status="PASS" endtime="20171005 19:36:20.752"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.753">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_led.txt</msg>
<status starttime="20171005 19:36:20.752" status="PASS" endtime="20171005 19:36:20.753"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.756">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:20.756" status="PASS" endtime="20171005 19:36:20.756"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:20.757" status="PASS" endtime="20171005 19:36:20.757"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.758">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:20.757" status="PASS" endtime="20171005 19:36:20.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:20.758" status="PASS" endtime="20171005 19:36:20.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:20.759" status="PASS" endtime="20171005 19:36:20.943"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:20.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:20.943">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:20.759" status="PASS" endtime="20171005 19:36:20.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.944">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:20.943" status="PASS" endtime="20171005 19:36:20.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:20.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:20.944" status="PASS" endtime="20171005 19:36:20.945"></status>
</kw>
<status starttime="20171005 19:36:20.755" status="PASS" endtime="20171005 19:36:20.945"></status>
</kw>
<status starttime="20171005 19:36:20.754" status="PASS" endtime="20171005 19:36:20.945"></status>
</kw>
<status starttime="20171005 19:36:20.754" status="PASS" endtime="20171005 19:36:20.945"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:20.945">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status starttime="20171005 19:36:20.945" status="PASS" endtime="20171005 19:36:20.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:20.946" status="PASS" endtime="20171005 19:36:20.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.689">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:22.690">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:20.946" status="PASS" endtime="20171005 19:36:22.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:22.690" status="PASS" endtime="20171005 19:36:22.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:22.691">Delete All Sessions</msg>
<status starttime="20171005 19:36:22.691" status="PASS" endtime="20171005 19:36:22.691"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:22.692">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:20.753" status="PASS" endtime="20171005 19:36:22.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:22.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:22.693" status="PASS" endtime="20171005 19:36:22.693"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:22.694">${status} = True</msg>
<status starttime="20171005 19:36:22.692" status="PASS" endtime="20171005 19:36:22.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:22.694" status="PASS" endtime="20171005 19:36:22.694"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.698">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:22.698">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:22.698">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status starttime="20171005 19:36:22.695" status="PASS" endtime="20171005 19:36:22.698"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:22.700">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_led.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:22.699" status="PASS" endtime="20171005 19:36:22.700"></status>
</kw>
<status starttime="20171005 19:36:22.698" status="PASS" endtime="20171005 19:36:22.700"></status>
</kw>
<status starttime="20171005 19:36:20.752" status="PASS" endtime="20171005 19:36:22.700"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.701">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_OCC_state.txt</msg>
<status starttime="20171005 19:36:22.700" status="PASS" endtime="20171005 19:36:22.701"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:22.704">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:22.704" status="PASS" endtime="20171005 19:36:22.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:22.704" status="PASS" endtime="20171005 19:36:22.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.705">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:22.705" status="PASS" endtime="20171005 19:36:22.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:22.706" status="PASS" endtime="20171005 19:36:22.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:22.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:22.707" status="PASS" endtime="20171005 19:36:22.925"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:22.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:22.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:22.706" status="PASS" endtime="20171005 19:36:22.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:22.926">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:22.925" status="PASS" endtime="20171005 19:36:22.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:22.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:22.926" status="PASS" endtime="20171005 19:36:22.926"></status>
</kw>
<status starttime="20171005 19:36:22.703" status="PASS" endtime="20171005 19:36:22.927"></status>
</kw>
<status starttime="20171005 19:36:22.702" status="PASS" endtime="20171005 19:36:22.927"></status>
</kw>
<status starttime="20171005 19:36:22.702" status="PASS" endtime="20171005 19:36:22.927"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:22.927">${base_uri} = /org/open_power/control/enumerate</msg>
<status starttime="20171005 19:36:22.927" status="PASS" endtime="20171005 19:36:22.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:22.928" status="PASS" endtime="20171005 19:36:22.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.081">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:23.081">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:22.928" status="PASS" endtime="20171005 19:36:23.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:23.082" status="PASS" endtime="20171005 19:36:23.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:23.083">Delete All Sessions</msg>
<status starttime="20171005 19:36:23.082" status="PASS" endtime="20171005 19:36:23.083"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:23.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:22.701" status="PASS" endtime="20171005 19:36:23.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:23.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:23.084" status="PASS" endtime="20171005 19:36:23.084"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:23.084">${status} = True</msg>
<status starttime="20171005 19:36:23.083" status="PASS" endtime="20171005 19:36:23.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:23.085" status="PASS" endtime="20171005 19:36:23.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.085">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:23.086">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:23.086">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status starttime="20171005 19:36:23.085" status="PASS" endtime="20171005 19:36:23.086"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:23.087">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_OCC_state.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_OCC_state.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:23.087" status="PASS" endtime="20171005 19:36:23.087"></status>
</kw>
<status starttime="20171005 19:36:23.086" status="PASS" endtime="20171005 19:36:23.087"></status>
</kw>
<status starttime="20171005 19:36:22.700" status="PASS" endtime="20171005 19:36:23.087"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.088">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_inventory.txt</msg>
<status starttime="20171005 19:36:23.088" status="PASS" endtime="20171005 19:36:23.088"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:23.091">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:23.091" status="PASS" endtime="20171005 19:36:23.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.092">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:23.092" status="PASS" endtime="20171005 19:36:23.092"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.093">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:23.092" status="PASS" endtime="20171005 19:36:23.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:23.093" status="PASS" endtime="20171005 19:36:23.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:23.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:23.094" status="PASS" endtime="20171005 19:36:23.311"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:23.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:23.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:23.094" status="PASS" endtime="20171005 19:36:23.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:23.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:23.311" status="PASS" endtime="20171005 19:36:23.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:23.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:23.312" status="PASS" endtime="20171005 19:36:23.313"></status>
</kw>
<status starttime="20171005 19:36:23.090" status="PASS" endtime="20171005 19:36:23.313"></status>
</kw>
<status starttime="20171005 19:36:23.090" status="PASS" endtime="20171005 19:36:23.313"></status>
</kw>
<status starttime="20171005 19:36:23.089" status="PASS" endtime="20171005 19:36:23.313"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:23.314">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20171005 19:36:23.313" status="PASS" endtime="20171005 19:36:23.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:23.314" status="PASS" endtime="20171005 19:36:23.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.591">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:25.591">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:23.315" status="PASS" endtime="20171005 19:36:25.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:25.592" status="PASS" endtime="20171005 19:36:25.592"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:25.593">Delete All Sessions</msg>
<status starttime="20171005 19:36:25.593" status="PASS" endtime="20171005 19:36:25.593"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:25.593">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:23.088" status="PASS" endtime="20171005 19:36:25.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:25.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:25.594" status="PASS" endtime="20171005 19:36:25.594"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:25.594">${status} = True</msg>
<status starttime="20171005 19:36:25.593" status="PASS" endtime="20171005 19:36:25.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:25.595" status="PASS" endtime="20171005 19:36:25.595"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.598">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/58493a9a", 
        "/xyz/openbmc_project/software/2b498149"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:25.598">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:25.599">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status starttime="20171005 19:36:25.595" status="PASS" endtime="20171005 19:36:25.599"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:25.601">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_inventory.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:25.600" status="PASS" endtime="20171005 19:36:25.601"></status>
</kw>
<status starttime="20171005 19:36:25.599" status="PASS" endtime="20171005 19:36:25.601"></status>
</kw>
<status starttime="20171005 19:36:23.087" status="PASS" endtime="20171005 19:36:25.601"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.602">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_control_list.txt</msg>
<status starttime="20171005 19:36:25.601" status="PASS" endtime="20171005 19:36:25.602"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:25.606">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:25.605" status="PASS" endtime="20171005 19:36:25.606"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:25.607" status="PASS" endtime="20171005 19:36:25.607"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.608">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:25.608" status="PASS" endtime="20171005 19:36:25.608"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:25.609" status="PASS" endtime="20171005 19:36:25.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:25.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:25.610" status="PASS" endtime="20171005 19:36:25.804"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:25.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:25.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:25.610" status="PASS" endtime="20171005 19:36:25.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:25.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:25.805" status="PASS" endtime="20171005 19:36:25.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:25.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:25.805" status="PASS" endtime="20171005 19:36:25.806"></status>
</kw>
<status starttime="20171005 19:36:25.605" status="PASS" endtime="20171005 19:36:25.806"></status>
</kw>
<status starttime="20171005 19:36:25.604" status="PASS" endtime="20171005 19:36:25.806"></status>
</kw>
<status starttime="20171005 19:36:25.603" status="PASS" endtime="20171005 19:36:25.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:25.807">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20171005 19:36:25.806" status="PASS" endtime="20171005 19:36:25.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:25.807" status="PASS" endtime="20171005 19:36:25.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.038">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:26.038">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:25.808" status="PASS" endtime="20171005 19:36:26.038"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:26.038" status="PASS" endtime="20171005 19:36:26.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:26.039">Delete All Sessions</msg>
<status starttime="20171005 19:36:26.039" status="PASS" endtime="20171005 19:36:26.039"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:26.040">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:25.602" status="PASS" endtime="20171005 19:36:26.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:26.040" status="PASS" endtime="20171005 19:36:26.041"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:26.041">${status} = True</msg>
<status starttime="20171005 19:36:26.040" status="PASS" endtime="20171005 19:36:26.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:26.041" status="PASS" endtime="20171005 19:36:26.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.043">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:26.043">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:26.043">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20171005 19:36:26.042" status="PASS" endtime="20171005 19:36:26.043"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:26.044">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_control_list.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:26.044" status="PASS" endtime="20171005 19:36:26.044"></status>
</kw>
<status starttime="20171005 19:36:26.043" status="PASS" endtime="20171005 19:36:26.045"></status>
</kw>
<status starttime="20171005 19:36:25.601" status="PASS" endtime="20171005 19:36:26.045"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.045">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_elog.txt</msg>
<status starttime="20171005 19:36:26.045" status="PASS" endtime="20171005 19:36:26.045"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.048">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:26.048" status="PASS" endtime="20171005 19:36:26.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:26.049" status="PASS" endtime="20171005 19:36:26.049"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.051">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:26.050" status="PASS" endtime="20171005 19:36:26.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:26.051" status="PASS" endtime="20171005 19:36:26.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.267">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:26.052" status="PASS" endtime="20171005 19:36:26.268"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:26.268">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:26.268">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:26.052" status="PASS" endtime="20171005 19:36:26.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.268">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:26.268" status="PASS" endtime="20171005 19:36:26.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:26.269" status="PASS" endtime="20171005 19:36:26.269"></status>
</kw>
<status starttime="20171005 19:36:26.047" status="PASS" endtime="20171005 19:36:26.269"></status>
</kw>
<status starttime="20171005 19:36:26.047" status="PASS" endtime="20171005 19:36:26.269"></status>
</kw>
<status starttime="20171005 19:36:26.046" status="PASS" endtime="20171005 19:36:26.270"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.270">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20171005 19:36:26.270" status="PASS" endtime="20171005 19:36:26.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:26.270" status="PASS" endtime="20171005 19:36:26.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:26.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:26.271" status="PASS" endtime="20171005 19:36:26.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:26.441" status="PASS" endtime="20171005 19:36:26.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:26.442">Delete All Sessions</msg>
<status starttime="20171005 19:36:26.442" status="PASS" endtime="20171005 19:36:26.442"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:26.443">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:26.046" status="PASS" endtime="20171005 19:36:26.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:26.444" status="PASS" endtime="20171005 19:36:26.444"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:26.444">${status} = True</msg>
<status starttime="20171005 19:36:26.443" status="PASS" endtime="20171005 19:36:26.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:26.444" status="PASS" endtime="20171005 19:36:26.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.445">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507231606113, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507231608549, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:26.446">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:26.446">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [
                "_PID=1333"
            ],
            "Id": 2,
            "Message": "xyz.openbmc_pr...</msg>
<status starttime="20171005 19:36:26.445" status="PASS" endtime="20171005 19:36:26.446"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:26.447">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_elog.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:26.447" status="PASS" endtime="20171005 19:36:26.447"></status>
</kw>
<status starttime="20171005 19:36:26.446" status="PASS" endtime="20171005 19:36:26.447"></status>
</kw>
<status starttime="20171005 19:36:26.045" status="PASS" endtime="20171005 19:36:26.447"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.448">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_sensor_list.txt</msg>
<status starttime="20171005 19:36:26.448" status="PASS" endtime="20171005 19:36:26.448"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.451">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:26.451" status="PASS" endtime="20171005 19:36:26.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:26.452" status="PASS" endtime="20171005 19:36:26.453"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:26.453" status="PASS" endtime="20171005 19:36:26.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:26.454" status="PASS" endtime="20171005 19:36:26.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.661">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:26.456" status="PASS" endtime="20171005 19:36:26.661"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:26.662">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:26.662">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:26.455" status="PASS" endtime="20171005 19:36:26.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.662">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:26.662" status="PASS" endtime="20171005 19:36:26.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:26.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:26.663" status="PASS" endtime="20171005 19:36:26.664"></status>
</kw>
<status starttime="20171005 19:36:26.450" status="PASS" endtime="20171005 19:36:26.664"></status>
</kw>
<status starttime="20171005 19:36:26.450" status="PASS" endtime="20171005 19:36:26.664"></status>
</kw>
<status starttime="20171005 19:36:26.449" status="PASS" endtime="20171005 19:36:26.664"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:26.665">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20171005 19:36:26.664" status="PASS" endtime="20171005 19:36:26.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:26.665" status="PASS" endtime="20171005 19:36:26.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:27.199">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:27.199">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:26.665" status="PASS" endtime="20171005 19:36:27.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:27.200" status="PASS" endtime="20171005 19:36:27.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:27.200">Delete All Sessions</msg>
<status starttime="20171005 19:36:27.200" status="PASS" endtime="20171005 19:36:27.201"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:27.201">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:26.448" status="PASS" endtime="20171005 19:36:27.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:27.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:27.202" status="PASS" endtime="20171005 19:36:27.202"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:27.202">${status} = True</msg>
<status starttime="20171005 19:36:27.201" status="PASS" endtime="20171005 19:36:27.202"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171005 19:36:27.202" status="PASS" endtime="20171005 19:36:27.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:27.204">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 8000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25990
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:27.204">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171005 19:36:27.204">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status starttime="20171005 19:36:27.203" status="PASS" endtime="20171005 19:36:27.204"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:27.206">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_sensor_list.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:27.205" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:27.205" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:26.448" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:20.155" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:20.154" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:20.154" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:20.154" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:20.153" status="PASS" endtime="20171005 19:36:27.206"></status>
</kw>
<status starttime="20171005 19:36:20.127" status="PASS" endtime="20171005 19:36:27.207"></status>
</kw>
<status starttime="20171005 19:36:20.124" status="PASS" endtime="20171005 19:36:27.207"></status>
</kw>
<status starttime="20171005 19:36:20.124" status="PASS" endtime="20171005 19:36:27.207"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:27.208" status="PASS" endtime="20171005 19:36:27.209"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:27.209">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:27.209">${ret_values} = None</msg>
<status starttime="20171005 19:36:27.208" status="PASS" endtime="20171005 19:36:27.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:27.209" status="PASS" endtime="20171005 19:36:27.209"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:27.278">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:27.278">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20171005 19:36:27.335">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20171005 19:36:27.347">${core_files} = None</msg>
<msg level="INFO" timestamp="20171005 19:36:27.347">${stderr} = None</msg>
<msg level="INFO" timestamp="20171005 19:36:27.347">${rc} = None</msg>
<msg level="FAIL" timestamp="20171005 19:36:27.347">#(UTC) 2017/10/05 19:36:27.345795 -    0.068481 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20171005 19:36:27.236" status="FAIL" endtime="20171005 19:36:27.347"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:27.348">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20171005 19:36:27.348">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20171005 19:36:27.347" status="FAIL" endtime="20171005 19:36:27.348"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20171005 19:36:27.358" status="PASS" endtime="20171005 19:36:27.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20171005 19:36:27.380" status="PASS" endtime="20171005 19:36:28.336"></status>
</kw>
<status starttime="20171005 19:36:27.379" status="PASS" endtime="20171005 19:36:28.336"></status>
</kw>
<status starttime="20171005 19:36:27.378" status="PASS" endtime="20171005 19:36:28.336"></status>
</kw>
<status starttime="20171005 19:36:27.358" status="PASS" endtime="20171005 19:36:28.337"></status>
</kw>
<status starttime="20171005 19:36:27.348" status="PASS" endtime="20171005 19:36:28.337"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20171005 19:36:28.337" status="PASS" endtime="20171005 19:36:28.337"></status>
</kw>
<status starttime="20171005 19:36:27.236" status="FAIL" endtime="20171005 19:36:28.337"></status>
</kw>
<status starttime="20171005 19:36:27.210" status="PASS" endtime="20171005 19:36:28.337"></status>
</kw>
<status starttime="20171005 19:36:27.207" status="PASS" endtime="20171005 19:36:28.337"></status>
</kw>
<status starttime="20171005 19:36:27.207" status="PASS" endtime="20171005 19:36:28.337"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:28.339" status="PASS" endtime="20171005 19:36:28.339"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.340">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:28.340">${ret_values} = None</msg>
<status starttime="20171005 19:36:28.339" status="PASS" endtime="20171005 19:36:28.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:28.340" status="PASS" endtime="20171005 19:36:28.340"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.370">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:28.370" status="PASS" endtime="20171005 19:36:28.371"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.372">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:28.371" status="PASS" endtime="20171005 19:36:28.372"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.372">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:28.372" status="PASS" endtime="20171005 19:36:28.372"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.373">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:28.373" status="PASS" endtime="20171005 19:36:28.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:28.374" status="PASS" endtime="20171005 19:36:28.563"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.563">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:28.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.374" status="PASS" endtime="20171005 19:36:28.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:28.563" status="PASS" endtime="20171005 19:36:28.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:28.564" status="PASS" endtime="20171005 19:36:28.565"></status>
</kw>
<status starttime="20171005 19:36:28.369" status="PASS" endtime="20171005 19:36:28.565"></status>
</kw>
<status starttime="20171005 19:36:28.369" status="PASS" endtime="20171005 19:36:28.565"></status>
</kw>
<status starttime="20171005 19:36:28.368" status="PASS" endtime="20171005 19:36:28.565"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.566">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20171005 19:36:28.565" status="PASS" endtime="20171005 19:36:28.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:28.566" status="PASS" endtime="20171005 19:36:28.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.702">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:28.702">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.567" status="PASS" endtime="20171005 19:36:28.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:28.702" status="PASS" endtime="20171005 19:36:28.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:28.703">Delete All Sessions</msg>
<status starttime="20171005 19:36:28.703" status="PASS" endtime="20171005 19:36:28.703"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.368" status="PASS" endtime="20171005 19:36:28.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:28.704" status="PASS" endtime="20171005 19:36:28.705"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.705">${status} = True</msg>
<status starttime="20171005 19:36:28.704" status="PASS" endtime="20171005 19:36:28.705"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20171005 19:36:28.705" status="PASS" endtime="20171005 19:36:28.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.706">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507231606113, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507231608549, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:28.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:36:28.706">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Id': 3, u'Resolved': 0, u'Message': u'xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn', u'Severity': u'xyz.openbmc_project.Logging.En...</msg>
<status starttime="20171005 19:36:28.706" status="PASS" endtime="20171005 19:36:28.706"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.707">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status starttime="20171005 19:36:28.706" status="PASS" endtime="20171005 19:36:28.707"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.707">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_esel</msg>
<status starttime="20171005 19:36:28.707" status="PASS" endtime="20171005 19:36:28.707"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:28.708">Created file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_esel"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_esel&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:28.708" status="PASS" endtime="20171005 19:36:28.708"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171005 19:36:28.709" status="PASS" endtime="20171005 19:36:28.709"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.713">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:28.713" status="PASS" endtime="20171005 19:36:28.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:28.714" status="PASS" endtime="20171005 19:36:28.714"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.715">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:28.714" status="PASS" endtime="20171005 19:36:28.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.715">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:28.715" status="PASS" endtime="20171005 19:36:28.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:28.717" status="PASS" endtime="20171005 19:36:28.895"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:28.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.716" status="PASS" endtime="20171005 19:36:28.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.896">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:28.896" status="PASS" endtime="20171005 19:36:28.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:28.897" status="PASS" endtime="20171005 19:36:28.897"></status>
</kw>
<status starttime="20171005 19:36:28.712" status="PASS" endtime="20171005 19:36:28.897"></status>
</kw>
<status starttime="20171005 19:36:28.711" status="PASS" endtime="20171005 19:36:28.897"></status>
</kw>
<status starttime="20171005 19:36:28.711" status="PASS" endtime="20171005 19:36:28.897"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.898">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20171005 19:36:28.898" status="PASS" endtime="20171005 19:36:28.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:28.898" status="PASS" endtime="20171005 19:36:28.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.987">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:28.988">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.899" status="PASS" endtime="20171005 19:36:28.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:28.988" status="PASS" endtime="20171005 19:36:28.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:28.989">Delete All Sessions</msg>
<status starttime="20171005 19:36:28.989" status="PASS" endtime="20171005 19:36:28.989"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.710" status="PASS" endtime="20171005 19:36:28.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:28.989" status="PASS" endtime="20171005 19:36:28.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.990">To JSON using : content={
  "data": [
    "_PID=1333"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:28.990">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:36:28.990">${content} = {u'data': [u'_PID=1333'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:36:28.990" status="PASS" endtime="20171005 19:36:28.991"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.991">${esel_data} = [u'_PID=1333']</msg>
<status starttime="20171005 19:36:28.709" status="PASS" endtime="20171005 19:36:28.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:36:28.992">[ _PID=1333 ] does not contain match for pattern 'ESEL*'.</msg>
<status starttime="20171005 19:36:28.992" status="FAIL" endtime="20171005 19:36:28.992"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:28.992">${status} = False</msg>
<status starttime="20171005 19:36:28.991" status="PASS" endtime="20171005 19:36:28.992"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.993">Continuing for loop from the next iteration.</msg>
<status starttime="20171005 19:36:28.993" status="PASS" endtime="20171005 19:36:28.993"></status>
</kw>
<status starttime="20171005 19:36:28.708" status="PASS" endtime="20171005 19:36:28.993"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171005 19:36:28.993" status="PASS" endtime="20171005 19:36:28.994"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:28.998">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:28.998" status="PASS" endtime="20171005 19:36:28.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.999">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:28.998" status="PASS" endtime="20171005 19:36:28.999"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:28.999">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:28.999" status="PASS" endtime="20171005 19:36:28.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:29.000" status="PASS" endtime="20171005 19:36:29.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:29.001" status="PASS" endtime="20171005 19:36:29.259"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:29.260">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:29.260">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:29.001" status="PASS" endtime="20171005 19:36:29.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:29.260" status="PASS" endtime="20171005 19:36:29.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:29.261" status="PASS" endtime="20171005 19:36:29.261"></status>
</kw>
<status starttime="20171005 19:36:28.997" status="PASS" endtime="20171005 19:36:29.261"></status>
</kw>
<status starttime="20171005 19:36:28.996" status="PASS" endtime="20171005 19:36:29.261"></status>
</kw>
<status starttime="20171005 19:36:28.995" status="PASS" endtime="20171005 19:36:29.261"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.262">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20171005 19:36:29.262" status="PASS" endtime="20171005 19:36:29.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:29.262" status="PASS" endtime="20171005 19:36:29.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.377">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:29.377">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:29.263" status="PASS" endtime="20171005 19:36:29.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:29.378" status="PASS" endtime="20171005 19:36:29.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:29.378">Delete All Sessions</msg>
<status starttime="20171005 19:36:29.378" status="PASS" endtime="20171005 19:36:29.378"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:29.379">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:28.995" status="PASS" endtime="20171005 19:36:29.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:29.379" status="PASS" endtime="20171005 19:36:29.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.380">To JSON using : content={
  "data": [
    "_PID=1333"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:29.380">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:36:29.380">${content} = {u'data': [u'_PID=1333'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:36:29.380" status="PASS" endtime="20171005 19:36:29.380"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:29.380">${esel_data} = [u'_PID=1333']</msg>
<status starttime="20171005 19:36:28.994" status="PASS" endtime="20171005 19:36:29.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:36:29.382">[ _PID=1333 ] does not contain match for pattern 'ESEL*'.</msg>
<status starttime="20171005 19:36:29.381" status="FAIL" endtime="20171005 19:36:29.382"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:29.382">${status} = False</msg>
<status starttime="20171005 19:36:29.381" status="PASS" endtime="20171005 19:36:29.382"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.382">Continuing for loop from the next iteration.</msg>
<status starttime="20171005 19:36:29.382" status="PASS" endtime="20171005 19:36:29.383"></status>
</kw>
<status starttime="20171005 19:36:28.993" status="PASS" endtime="20171005 19:36:29.383"></status>
</kw>
<status starttime="20171005 19:36:28.708" status="PASS" endtime="20171005 19:36:29.383"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.387">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:36:29.390">${out} = </msg>
<status starttime="20171005 19:36:29.383" status="PASS" endtime="20171005 19:36:29.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20171005 19:36:29.394">'' does not contain 'eSEL.pl'</msg>
<status starttime="20171005 19:36:29.394" status="FAIL" endtime="20171005 19:36:29.395"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:29.395">${status} = False</msg>
<status starttime="20171005 19:36:29.393" status="PASS" endtime="20171005 19:36:29.395"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.396">Returning from the enclosing user keyword.</msg>
<status starttime="20171005 19:36:29.395" status="PASS" endtime="20171005 19:36:29.396"></status>
</kw>
<status starttime="20171005 19:36:28.367" status="PASS" endtime="20171005 19:36:29.396"></status>
</kw>
<status starttime="20171005 19:36:28.341" status="PASS" endtime="20171005 19:36:29.396"></status>
</kw>
<status starttime="20171005 19:36:28.338" status="PASS" endtime="20171005 19:36:29.397"></status>
</kw>
<status starttime="20171005 19:36:28.338" status="PASS" endtime="20171005 19:36:29.397"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:29.399" status="PASS" endtime="20171005 19:36:29.399"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:29.400">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:29.400">${ret_values} = None</msg>
<status starttime="20171005 19:36:29.399" status="PASS" endtime="20171005 19:36:29.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:29.400" status="PASS" endtime="20171005 19:36:29.400"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.432">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20171005 19:36:29.432" status="PASS" endtime="20171005 19:36:29.432"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.434">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20171005 19:36:29.433" status="PASS" endtime="20171005 19:36:29.434"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.439">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20171005 19:36:29.434" status="PASS" endtime="20171005 19:36:29.440"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:29.443">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:29.442" status="PASS" endtime="20171005 19:36:29.443"></status>
</kw>
<status starttime="20171005 19:36:29.442" status="PASS" endtime="20171005 19:36:29.443"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:29.444">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:29.444" status="PASS" endtime="20171005 19:36:29.444"></status>
</kw>
<status starttime="20171005 19:36:29.443" status="PASS" endtime="20171005 19:36:29.445"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:29.446">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:29.445" status="PASS" endtime="20171005 19:36:29.446"></status>
</kw>
<status starttime="20171005 19:36:29.445" status="PASS" endtime="20171005 19:36:29.446"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:29.447">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:29.447" status="PASS" endtime="20171005 19:36:29.447"></status>
</kw>
<status starttime="20171005 19:36:29.446" status="PASS" endtime="20171005 19:36:29.447"></status>
</kw>
<status starttime="20171005 19:36:29.441" status="PASS" endtime="20171005 19:36:29.447"></status>
</kw>
<status starttime="20171005 19:36:29.441" status="PASS" endtime="20171005 19:36:29.447"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:29.448">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20171005 19:36:29.448" status="PASS" endtime="20171005 19:36:29.448"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:29.519">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:29.519">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20171005 19:36:30.867">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:29.480" status="PASS" endtime="20171005 19:36:30.867"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:30.867">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:30.867">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status starttime="20171005 19:36:29.448" status="PASS" endtime="20171005 19:36:30.867"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:30.868">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20171005 19:36:30.868" status="PASS" endtime="20171005 19:36:30.868"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:30.869">${stderr} = </msg>
<status starttime="20171005 19:36:30.868" status="PASS" endtime="20171005 19:36:30.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:30.877">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:30.876" status="PASS" endtime="20171005 19:36:30.877"></status>
</kw>
<status starttime="20171005 19:36:30.875" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<status starttime="20171005 19:36:30.869" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<status starttime="20171005 19:36:29.440" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<status starttime="20171005 19:36:29.440" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<status starttime="20171005 19:36:29.440" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<status starttime="20171005 19:36:29.433" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<status starttime="20171005 19:36:29.433" status="PASS" endtime="20171005 19:36:30.878"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:30.879">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status starttime="20171005 19:36:30.879" status="PASS" endtime="20171005 19:36:30.879"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:30.880">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20171005 19:36:30.879" status="PASS" endtime="20171005 19:36:30.880"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:30.883">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:30.883" status="PASS" endtime="20171005 19:36:30.883"></status>
</kw>
<status starttime="20171005 19:36:30.882" status="PASS" endtime="20171005 19:36:30.883"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:30.885">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:30.884" status="PASS" endtime="20171005 19:36:30.885"></status>
</kw>
<status starttime="20171005 19:36:30.883" status="PASS" endtime="20171005 19:36:30.885"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:30.886">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:30.886" status="PASS" endtime="20171005 19:36:30.886"></status>
</kw>
<status starttime="20171005 19:36:30.885" status="PASS" endtime="20171005 19:36:30.886"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:30.887">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:30.887" status="PASS" endtime="20171005 19:36:30.887"></status>
</kw>
<status starttime="20171005 19:36:30.886" status="PASS" endtime="20171005 19:36:30.888"></status>
</kw>
<status starttime="20171005 19:36:30.882" status="PASS" endtime="20171005 19:36:30.888"></status>
</kw>
<status starttime="20171005 19:36:30.881" status="PASS" endtime="20171005 19:36:30.888"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:30.888">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20171005 19:36:30.888" status="PASS" endtime="20171005 19:36:30.888"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:30.959">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:30.960">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20171005 19:36:31.006">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:30.921" status="PASS" endtime="20171005 19:36:31.007"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.007">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.007">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-112"\nVERSION_ID="v1.99.10-112-ge7fe258"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status starttime="20171005 19:36:30.889" status="PASS" endtime="20171005 19:36:31.007"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.008">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-112"
VERSION_ID="v1.99.10-112-ge7fe258"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status starttime="20171005 19:36:31.007" status="PASS" endtime="20171005 19:36:31.008"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.008">${stderr} = </msg>
<status starttime="20171005 19:36:31.008" status="PASS" endtime="20171005 19:36:31.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.015">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.015" status="PASS" endtime="20171005 19:36:31.016"></status>
</kw>
<status starttime="20171005 19:36:31.014" status="PASS" endtime="20171005 19:36:31.016"></status>
</kw>
<status starttime="20171005 19:36:31.009" status="PASS" endtime="20171005 19:36:31.016"></status>
</kw>
<status starttime="20171005 19:36:30.880" status="PASS" endtime="20171005 19:36:31.016"></status>
</kw>
<status starttime="20171005 19:36:30.880" status="PASS" endtime="20171005 19:36:31.016"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.019">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.018" status="PASS" endtime="20171005 19:36:31.019"></status>
</kw>
<status starttime="20171005 19:36:31.018" status="PASS" endtime="20171005 19:36:31.019"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.020">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.020" status="PASS" endtime="20171005 19:36:31.020"></status>
</kw>
<status starttime="20171005 19:36:31.019" status="PASS" endtime="20171005 19:36:31.020"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.021">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.021" status="PASS" endtime="20171005 19:36:31.022"></status>
</kw>
<status starttime="20171005 19:36:31.021" status="PASS" endtime="20171005 19:36:31.022"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.023">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.023" status="PASS" endtime="20171005 19:36:31.023"></status>
</kw>
<status starttime="20171005 19:36:31.022" status="PASS" endtime="20171005 19:36:31.023"></status>
</kw>
<status starttime="20171005 19:36:31.017" status="PASS" endtime="20171005 19:36:31.024"></status>
</kw>
<status starttime="20171005 19:36:31.017" status="PASS" endtime="20171005 19:36:31.024"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.025">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status starttime="20171005 19:36:31.024" status="PASS" endtime="20171005 19:36:31.025"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.098">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:31.099">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20171005 19:36:31.155">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:31.057" status="PASS" endtime="20171005 19:36:31.155"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.155">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.156">${ret_values} = (u'20171005185104', u'', 0)</msg>
<status starttime="20171005 19:36:31.025" status="PASS" endtime="20171005 19:36:31.156"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.156">${stdout} = 20171005185104</msg>
<status starttime="20171005 19:36:31.156" status="PASS" endtime="20171005 19:36:31.156"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.157">${stderr} = </msg>
<status starttime="20171005 19:36:31.157" status="PASS" endtime="20171005 19:36:31.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.164">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.163" status="PASS" endtime="20171005 19:36:31.164"></status>
</kw>
<status starttime="20171005 19:36:31.163" status="PASS" endtime="20171005 19:36:31.164"></status>
</kw>
<status starttime="20171005 19:36:31.157" status="PASS" endtime="20171005 19:36:31.164"></status>
</kw>
<status starttime="20171005 19:36:31.016" status="PASS" endtime="20171005 19:36:31.164"></status>
</kw>
<status starttime="20171005 19:36:31.016" status="PASS" endtime="20171005 19:36:31.164"></status>
</kw>
<status starttime="20171005 19:36:30.880" status="PASS" endtime="20171005 19:36:31.165"></status>
</kw>
<status starttime="20171005 19:36:30.878" status="PASS" endtime="20171005 19:36:31.165"></status>
</kw>
<status starttime="20171005 19:36:30.878" status="PASS" endtime="20171005 19:36:31.165"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.166">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20171005 19:36:31.165" status="PASS" endtime="20171005 19:36:31.166"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.166">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20171005 19:36:31.166" status="PASS" endtime="20171005 19:36:31.167"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.170">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.169" status="PASS" endtime="20171005 19:36:31.170"></status>
</kw>
<status starttime="20171005 19:36:31.169" status="PASS" endtime="20171005 19:36:31.170"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.171">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.171" status="PASS" endtime="20171005 19:36:31.171"></status>
</kw>
<status starttime="20171005 19:36:31.170" status="PASS" endtime="20171005 19:36:31.171"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.172">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.172" status="PASS" endtime="20171005 19:36:31.173"></status>
</kw>
<status starttime="20171005 19:36:31.171" status="PASS" endtime="20171005 19:36:31.173"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.174">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.173" status="PASS" endtime="20171005 19:36:31.174"></status>
</kw>
<status starttime="20171005 19:36:31.173" status="PASS" endtime="20171005 19:36:31.174"></status>
</kw>
<status starttime="20171005 19:36:31.168" status="PASS" endtime="20171005 19:36:31.174"></status>
</kw>
<status starttime="20171005 19:36:31.168" status="PASS" endtime="20171005 19:36:31.174"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.175">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20171005 19:36:31.174" status="PASS" endtime="20171005 19:36:31.175"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.255">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:31.256">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20171005 19:36:31.312">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:31.211" status="PASS" endtime="20171005 19:36:31.312"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.313">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.313">${ret_values} = (u' 19:36:46 up 15 min,  load average: 0.56, 0.62, 0.76', u'', 0)</msg>
<status starttime="20171005 19:36:31.175" status="PASS" endtime="20171005 19:36:31.313"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.313">${stdout} =  19:36:46 up 15 min,  load average: 0.56, 0.62, 0.76</msg>
<status starttime="20171005 19:36:31.313" status="PASS" endtime="20171005 19:36:31.313"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.314">${stderr} = </msg>
<status starttime="20171005 19:36:31.314" status="PASS" endtime="20171005 19:36:31.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.321">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.321" status="PASS" endtime="20171005 19:36:31.321"></status>
</kw>
<status starttime="20171005 19:36:31.320" status="PASS" endtime="20171005 19:36:31.321"></status>
</kw>
<status starttime="20171005 19:36:31.314" status="PASS" endtime="20171005 19:36:31.321"></status>
</kw>
<status starttime="20171005 19:36:31.167" status="PASS" endtime="20171005 19:36:31.321"></status>
</kw>
<status starttime="20171005 19:36:31.167" status="PASS" endtime="20171005 19:36:31.322"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.325">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.324" status="PASS" endtime="20171005 19:36:31.325"></status>
</kw>
<status starttime="20171005 19:36:31.324" status="PASS" endtime="20171005 19:36:31.325"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.326">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.326" status="PASS" endtime="20171005 19:36:31.327"></status>
</kw>
<status starttime="20171005 19:36:31.325" status="PASS" endtime="20171005 19:36:31.327"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.328">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.327" status="PASS" endtime="20171005 19:36:31.328"></status>
</kw>
<status starttime="20171005 19:36:31.327" status="PASS" endtime="20171005 19:36:31.328"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.329">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.329" status="PASS" endtime="20171005 19:36:31.329"></status>
</kw>
<status starttime="20171005 19:36:31.328" status="PASS" endtime="20171005 19:36:31.329"></status>
</kw>
<status starttime="20171005 19:36:31.323" status="PASS" endtime="20171005 19:36:31.329"></status>
</kw>
<status starttime="20171005 19:36:31.323" status="PASS" endtime="20171005 19:36:31.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.330">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20171005 19:36:31.330" status="PASS" endtime="20171005 19:36:31.330"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.403">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:31.404">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20171005 19:36:31.461">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:31.366" status="PASS" endtime="20171005 19:36:31.461"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.461">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status starttime="20171005 19:36:31.331" status="PASS" endtime="20171005 19:36:31.461"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.462">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status starttime="20171005 19:36:31.462" status="PASS" endtime="20171005 19:36:31.462"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.463">${stderr} = </msg>
<status starttime="20171005 19:36:31.462" status="PASS" endtime="20171005 19:36:31.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.472">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.471" status="PASS" endtime="20171005 19:36:31.472"></status>
</kw>
<status starttime="20171005 19:36:31.470" status="PASS" endtime="20171005 19:36:31.472"></status>
</kw>
<status starttime="20171005 19:36:31.463" status="PASS" endtime="20171005 19:36:31.472"></status>
</kw>
<status starttime="20171005 19:36:31.322" status="PASS" endtime="20171005 19:36:31.472"></status>
</kw>
<status starttime="20171005 19:36:31.322" status="PASS" endtime="20171005 19:36:31.472"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.475">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.475" status="PASS" endtime="20171005 19:36:31.475"></status>
</kw>
<status starttime="20171005 19:36:31.474" status="PASS" endtime="20171005 19:36:31.475"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.477">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.476" status="PASS" endtime="20171005 19:36:31.477"></status>
</kw>
<status starttime="20171005 19:36:31.475" status="PASS" endtime="20171005 19:36:31.477"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.478">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.478" status="PASS" endtime="20171005 19:36:31.478"></status>
</kw>
<status starttime="20171005 19:36:31.477" status="PASS" endtime="20171005 19:36:31.478"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.479">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.479" status="PASS" endtime="20171005 19:36:31.479"></status>
</kw>
<status starttime="20171005 19:36:31.478" status="PASS" endtime="20171005 19:36:31.480"></status>
</kw>
<status starttime="20171005 19:36:31.474" status="PASS" endtime="20171005 19:36:31.480"></status>
</kw>
<status starttime="20171005 19:36:31.473" status="PASS" endtime="20171005 19:36:31.480"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.480">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20171005 19:36:31.480" status="PASS" endtime="20171005 19:36:31.480"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.556">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:31.557">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20171005 19:36:31.614">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:31.518" status="PASS" endtime="20171005 19:36:31.615"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.615">${ret_values} = (u'Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20171005 19:36:31.481" status="PASS" endtime="20171005 19:36:31.615"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.615">${stdout} = Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20171005 19:36:31.615" status="PASS" endtime="20171005 19:36:31.615"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.616">${stderr} = </msg>
<status starttime="20171005 19:36:31.616" status="PASS" endtime="20171005 19:36:31.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.625">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:31.624" status="PASS" endtime="20171005 19:36:31.625"></status>
</kw>
<status starttime="20171005 19:36:31.623" status="PASS" endtime="20171005 19:36:31.625"></status>
</kw>
<status starttime="20171005 19:36:31.616" status="PASS" endtime="20171005 19:36:31.625"></status>
</kw>
<status starttime="20171005 19:36:31.472" status="PASS" endtime="20171005 19:36:31.625"></status>
</kw>
<status starttime="20171005 19:36:31.472" status="PASS" endtime="20171005 19:36:31.625"></status>
</kw>
<status starttime="20171005 19:36:31.167" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:31.165" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:31.165" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:29.433" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:29.432" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:29.401" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:29.397" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<status starttime="20171005 19:36:29.397" status="PASS" endtime="20171005 19:36:31.626"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:31.628" status="PASS" endtime="20171005 19:36:31.629"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.629">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.629">${ret_values} = None</msg>
<status starttime="20171005 19:36:31.627" status="PASS" endtime="20171005 19:36:31.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:31.629" status="PASS" endtime="20171005 19:36:31.630"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.657">Returning from the enclosing user keyword.</msg>
<status starttime="20171005 19:36:31.657" status="PASS" endtime="20171005 19:36:31.658"></status>
</kw>
<status starttime="20171005 19:36:31.656" status="PASS" endtime="20171005 19:36:31.658"></status>
</kw>
<status starttime="20171005 19:36:31.630" status="PASS" endtime="20171005 19:36:31.658"></status>
</kw>
<status starttime="20171005 19:36:31.626" status="PASS" endtime="20171005 19:36:31.658"></status>
</kw>
<status starttime="20171005 19:36:31.626" status="PASS" endtime="20171005 19:36:31.658"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:31.659" status="PASS" endtime="20171005 19:36:31.660"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.660">${ret_values} = None</msg>
<status starttime="20171005 19:36:31.659" status="PASS" endtime="20171005 19:36:31.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:31.660" status="PASS" endtime="20171005 19:36:31.660"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status starttime="20171005 19:36:31.687" status="PASS" endtime="20171005 19:36:31.688"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:31.689">File '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/7497/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status starttime="20171005 19:36:31.688" status="PASS" endtime="20171005 19:36:31.689"></status>
</kw>
<status starttime="20171005 19:36:31.686" status="PASS" endtime="20171005 19:36:31.689"></status>
</kw>
<status starttime="20171005 19:36:31.661" status="PASS" endtime="20171005 19:36:31.689"></status>
</kw>
<status starttime="20171005 19:36:31.658" status="PASS" endtime="20171005 19:36:31.689"></status>
</kw>
<status starttime="20171005 19:36:31.658" status="PASS" endtime="20171005 19:36:31.689"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171005 19:36:31.691" status="PASS" endtime="20171005 19:36:31.691"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:31.691">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:31.691">${ret_values} = None</msg>
<status starttime="20171005 19:36:31.690" status="PASS" endtime="20171005 19:36:31.691"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171005 19:36:31.691" status="PASS" endtime="20171005 19:36:31.692"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.722">@{entries} = [ BMC FILES ]</msg>
<status starttime="20171005 19:36:31.722" status="PASS" endtime="20171005 19:36:31.723"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.724">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_dmesg', 'dmesg') | ('BMC_proc...</msg>
<status starttime="20171005 19:36:31.724" status="PASS" endtime="20171005 19:36:31.724"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.725">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_proc_fd_active_list.txt</msg>
<status starttime="20171005 19:36:31.724" status="PASS" endtime="20171005 19:36:31.725"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:31.726" status="PASS" endtime="20171005 19:36:31.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:31.728">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20171005 19:36:31.727" status="PASS" endtime="20171005 19:36:31.728"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:31.797">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:31.798">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20171005 19:36:32.359">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:31.760" status="PASS" endtime="20171005 19:36:32.360"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:32.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:32.361">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  5 19:24 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  5 19:24 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20171005 19:36:31.728" status="PASS" endtime="20171005 19:36:32.361"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:32.362">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  5 19:24 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  5 19:24 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20171005 19:36:32.361" status="PASS" endtime="20171005 19:36:32.362"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:32.362">${stderr} = ls: /proc/1844/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20171005 19:36:32.362" status="PASS" endtime="20171005 19:36:32.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:32.370">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:32.370" status="PASS" endtime="20171005 19:36:32.370"></status>
</kw>
<status starttime="20171005 19:36:32.369" status="PASS" endtime="20171005 19:36:32.371"></status>
</kw>
<status starttime="20171005 19:36:32.363" status="PASS" endtime="20171005 19:36:32.371"></status>
</kw>
<status starttime="20171005 19:36:31.725" status="PASS" endtime="20171005 19:36:32.371"></status>
</kw>
<status starttime="20171005 19:36:31.724" status="PASS" endtime="20171005 19:36:32.371"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:32.372">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_journalctl_nopager.txt</msg>
<status starttime="20171005 19:36:32.371" status="PASS" endtime="20171005 19:36:32.372"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:32.373" status="PASS" endtime="20171005 19:36:32.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:32.379">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20171005 19:36:32.373" status="PASS" endtime="20171005 19:36:32.379"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:32.450">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:32.450">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20171005 19:36:34.002">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:32.413" status="PASS" endtime="20171005 19:36:34.002"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:34.002">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:34.005">${ret_values} = (u'-- Logs begin at Thu 2017-10-05 19:22:03 UTC, end at Thu 2017-10-05 19:36:45 UTC. --\nOct 05 19:22:03 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 05 19:22:03 witherspoon kernel: Linu...</msg>
<status starttime="20171005 19:36:32.380" status="PASS" endtime="20171005 19:36:34.005"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:34.006">${stdout} = -- Logs begin at Thu 2017-10-05 19:22:03 UTC, end at Thu 2017-10-05 19:36:45 UTC. --
Oct 05 19:22:03 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 05 19:22:03 witherspoon kernel: Linux ver...</msg>
<status starttime="20171005 19:36:34.005" status="PASS" endtime="20171005 19:36:34.006"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:34.007">${stderr} = </msg>
<status starttime="20171005 19:36:34.007" status="PASS" endtime="20171005 19:36:34.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:34.015">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:34.014" status="PASS" endtime="20171005 19:36:34.016"></status>
</kw>
<status starttime="20171005 19:36:34.013" status="PASS" endtime="20171005 19:36:34.016"></status>
</kw>
<status starttime="20171005 19:36:34.007" status="PASS" endtime="20171005 19:36:34.016"></status>
</kw>
<status starttime="20171005 19:36:32.372" status="PASS" endtime="20171005 19:36:34.016"></status>
</kw>
<status starttime="20171005 19:36:32.371" status="PASS" endtime="20171005 19:36:34.016"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:34.017">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_journalctl_pretty.txt</msg>
<status starttime="20171005 19:36:34.016" status="PASS" endtime="20171005 19:36:34.017"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:34.018" status="PASS" endtime="20171005 19:36:34.018"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:34.019">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status starttime="20171005 19:36:34.018" status="PASS" endtime="20171005 19:36:34.019"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:34.092">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:34.093">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20171005 19:36:38.528">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:34.052" status="PASS" endtime="20171005 19:36:38.532"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:38.532">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:38.559">${ret_values} = (u'{\n\t"__CURSOR" : "s=4931f0d76cb544b583f6b46698559e7f;i=1;b=715646fea5e9471db5669bb27e1c2f98;m=156aa6e;t=55ad1a3a57e30;x=efdff5c1189fcd98",\n\t"__REALTIME_TIMESTAMP" : "1507231323749936",\n\t"__MON...</msg>
<status starttime="20171005 19:36:34.019" status="PASS" endtime="20171005 19:36:38.559"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.566">${stdout} = {
	"__CURSOR" : "s=4931f0d76cb544b583f6b46698559e7f;i=1;b=715646fea5e9471db5669bb27e1c2f98;m=156aa6e;t=55ad1a3a57e30;x=efdff5c1189fcd98",
	"__REALTIME_TIMESTAMP" : "1507231323749936",
	"__MONOTONIC_TI...</msg>
<status starttime="20171005 19:36:38.560" status="PASS" endtime="20171005 19:36:38.566"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.566">${stderr} = </msg>
<status starttime="20171005 19:36:38.566" status="PASS" endtime="20171005 19:36:38.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:38.584">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:38.579" status="PASS" endtime="20171005 19:36:38.585"></status>
</kw>
<status starttime="20171005 19:36:38.572" status="PASS" endtime="20171005 19:36:38.585"></status>
</kw>
<status starttime="20171005 19:36:38.567" status="PASS" endtime="20171005 19:36:38.585"></status>
</kw>
<status starttime="20171005 19:36:34.017" status="PASS" endtime="20171005 19:36:38.585"></status>
</kw>
<status starttime="20171005 19:36:34.016" status="PASS" endtime="20171005 19:36:38.585"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.586">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_dmesg.txt</msg>
<status starttime="20171005 19:36:38.585" status="PASS" endtime="20171005 19:36:38.586"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:38.587" status="PASS" endtime="20171005 19:36:38.587"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.588">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20171005 19:36:38.587" status="PASS" endtime="20171005 19:36:38.588"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:38.667">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:38.667">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20171005 19:36:38.734">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:38.627" status="PASS" endtime="20171005 19:36:38.734"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:38.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:38.734">${ret_values} = (u'[    0.300000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550A\n[    0.700000] console [ttyS4] enabled\n[    0.740000] timeriomem_rng 1e6e2078.hwrng: 32bits fr...</msg>
<status starttime="20171005 19:36:38.588" status="PASS" endtime="20171005 19:36:38.734"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.735">${stdout} = [    0.300000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550A
[    0.700000] console [ttyS4] enabled
[    0.740000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0x...</msg>
<status starttime="20171005 19:36:38.735" status="PASS" endtime="20171005 19:36:38.735"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.736">${stderr} = </msg>
<status starttime="20171005 19:36:38.735" status="PASS" endtime="20171005 19:36:38.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:38.743">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_dmesg.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:38.742" status="PASS" endtime="20171005 19:36:38.743"></status>
</kw>
<status starttime="20171005 19:36:38.741" status="PASS" endtime="20171005 19:36:38.743"></status>
</kw>
<status starttime="20171005 19:36:38.736" status="PASS" endtime="20171005 19:36:38.743"></status>
</kw>
<status starttime="20171005 19:36:38.586" status="PASS" endtime="20171005 19:36:38.743"></status>
</kw>
<status starttime="20171005 19:36:38.585" status="PASS" endtime="20171005 19:36:38.743"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.744">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_proc_list.txt</msg>
<status starttime="20171005 19:36:38.743" status="PASS" endtime="20171005 19:36:38.744"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:38.745" status="PASS" endtime="20171005 19:36:38.745"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:38.746">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20171005 19:36:38.746" status="PASS" endtime="20171005 19:36:38.746"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:38.823">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:38.823">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20171005 19:36:39.111">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:38.785" status="PASS" endtime="20171005 19:36:39.111"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.111">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:39.112">${ret_values} = (u'Mem: 156276K used, 275976K free, 8912K shrd, 12044K buff, 44224K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.71 0.65 0.77 1/166 1848\n  PID  PPID U...</msg>
<status starttime="20171005 19:36:38.746" status="PASS" endtime="20171005 19:36:39.112"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.112">${stdout} = Mem: 156276K used, 275976K free, 8912K shrd, 12044K buff, 44224K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.71 0.65 0.77 1/166 1848
  PID  PPID USER   ...</msg>
<status starttime="20171005 19:36:39.112" status="PASS" endtime="20171005 19:36:39.112"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.113">${stderr} = </msg>
<status starttime="20171005 19:36:39.113" status="PASS" endtime="20171005 19:36:39.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:39.120">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_proc_list.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:39.120" status="PASS" endtime="20171005 19:36:39.120"></status>
</kw>
<status starttime="20171005 19:36:39.119" status="PASS" endtime="20171005 19:36:39.120"></status>
</kw>
<status starttime="20171005 19:36:39.113" status="PASS" endtime="20171005 19:36:39.120"></status>
</kw>
<status starttime="20171005 19:36:38.744" status="PASS" endtime="20171005 19:36:39.120"></status>
</kw>
<status starttime="20171005 19:36:38.743" status="PASS" endtime="20171005 19:36:39.121"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.121">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_procinfo.txt</msg>
<status starttime="20171005 19:36:39.121" status="PASS" endtime="20171005 19:36:39.121"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:39.122" status="PASS" endtime="20171005 19:36:39.123"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.123">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20171005 19:36:39.123" status="PASS" endtime="20171005 19:36:39.123"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.198">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:39.198">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20171005 19:36:39.255">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:39.156" status="PASS" endtime="20171005 19:36:39.255"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:39.255">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20171005 19:36:39.124" status="PASS" endtime="20171005 19:36:39.255"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.256">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20171005 19:36:39.255" status="PASS" endtime="20171005 19:36:39.256"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.256">${stderr} = </msg>
<status starttime="20171005 19:36:39.256" status="PASS" endtime="20171005 19:36:39.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:39.263">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_procinfo.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:39.263" status="PASS" endtime="20171005 19:36:39.263"></status>
</kw>
<status starttime="20171005 19:36:39.262" status="PASS" endtime="20171005 19:36:39.263"></status>
</kw>
<status starttime="20171005 19:36:39.256" status="PASS" endtime="20171005 19:36:39.263"></status>
</kw>
<status starttime="20171005 19:36:39.121" status="PASS" endtime="20171005 19:36:39.264"></status>
</kw>
<status starttime="20171005 19:36:39.121" status="PASS" endtime="20171005 19:36:39.264"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.264">${logpath} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_meminfo.txt</msg>
<status starttime="20171005 19:36:39.264" status="PASS" endtime="20171005 19:36:39.264"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171005 19:36:39.265" status="PASS" endtime="20171005 19:36:39.266"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.266">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20171005 19:36:39.266" status="PASS" endtime="20171005 19:36:39.266"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.335">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
prompt=# 
index=1
port=22
term_type=vt100
width=80
host=9.3.86.161
path_separator=/
height=24</msg>
<msg level="INFO" timestamp="20171005 19:36:39.336">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20171005 19:36:39.402">Command exited with return code 0.</msg>
<status starttime="20171005 19:36:39.298" status="PASS" endtime="20171005 19:36:39.402"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.402">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:39.403">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          275976 kB\nMemAvailable:     320808 kB\nBuffers:           12044 kB\nCached:            44224 kB\nSwapCached:            0 kB\nActive:           10290...</msg>
<status starttime="20171005 19:36:39.267" status="PASS" endtime="20171005 19:36:39.403"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.403">${stdout} = MemTotal:         432252 kB
MemFree:          275976 kB
MemAvailable:     320808 kB
Buffers:           12044 kB
Cached:            44224 kB
SwapCached:            0 kB
Active:           102900 kB
Inac...</msg>
<status starttime="20171005 19:36:39.403" status="PASS" endtime="20171005 19:36:39.403"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.404">${stderr} = </msg>
<status starttime="20171005 19:36:39.403" status="PASS" endtime="20171005 19:36:39.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:39.411">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_meminfo.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/20171005193619907582_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:39.410" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:39.410" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:39.404" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:39.265" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:39.264" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:31.724" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:31.723" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:31.723" status="PASS" endtime="20171005 19:36:39.411"></status>
</kw>
<status starttime="20171005 19:36:31.723" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:31.722" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:31.692" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:31.689" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:31.689" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:20.124" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:20.121" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:20.121" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<status starttime="20171005 19:36:20.121" status="PASS" endtime="20171005 19:36:39.412"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20171005 19:36:39.419" status="PASS" endtime="20171005 19:36:39.419"></status>
</kw>
<status starttime="20171005 19:36:39.412" status="PASS" endtime="20171005 19:36:39.419"></status>
</kw>
<status starttime="20171005 19:36:20.120" status="PASS" endtime="20171005 19:36:39.419"></status>
</kw>
<status starttime="20171005 19:36:16.836" status="PASS" endtime="20171005 19:36:39.420"></status>
</kw>
<status starttime="20171005 19:36:16.835" status="PASS" endtime="20171005 19:36:39.420"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.431">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171005 19:36:39.420" status="PASS" endtime="20171005 19:36:39.431"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.432">${FFDC_DIR_PATH} = /tmp/fspcibld/7497/obmc-robot/logs/20171005193619907582_TestsTestBasicPoweron/20171005193619907582_PowerOnTest/</msg>
<status starttime="20171005 19:36:39.431" status="PASS" endtime="20171005 19:36:39.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20171005 19:36:39.432" status="PASS" endtime="20171005 19:36:39.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171005 19:36:39.432" status="PASS" endtime="20171005 19:36:39.433"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:39.433">Directory '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs"&gt;/tmp/fspcibld/7497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20171005 19:36:39.433" status="PASS" endtime="20171005 19:36:39.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:39.434">File '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20171005 19:36:39.434" status="PASS" endtime="20171005 19:36:39.434"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.435">${exist} = True</msg>
<status starttime="20171005 19:36:39.434" status="PASS" endtime="20171005 19:36:39.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20171005 19:36:39.435" status="PASS" endtime="20171005 19:36:39.435"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171005 19:36:39.435" status="PASS" endtime="20171005 19:36:39.436"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.437">${cur_time} = 2017-10-05 19:36:39:436540</msg>
<status starttime="20171005 19:36:39.436" status="PASS" endtime="20171005 19:36:39.437"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.437">${cur_time} = 20171005193639436540</msg>
<status starttime="20171005 19:36:39.437" status="PASS" endtime="20171005 19:36:39.437"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.438">${cur_time} = 20171005193639436540</msg>
<status starttime="20171005 19:36:39.436" status="PASS" endtime="20171005 19:36:39.438"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:39.438">Appended to file '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:39.438" status="PASS" endtime="20171005 19:36:39.438"></status>
</kw>
<status starttime="20171005 19:36:39.420" status="PASS" endtime="20171005 19:36:39.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="utils" name="Delete Error Logs">
<doc>Delete error logs.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.443">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:39.443" status="PASS" endtime="20171005 19:36:39.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.444">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:39.444" status="PASS" endtime="20171005 19:36:39.444"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.445">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:39.444" status="PASS" endtime="20171005 19:36:39.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.445">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:39.445" status="PASS" endtime="20171005 19:36:39.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:39.446" status="PASS" endtime="20171005 19:36:39.625"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.625">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:39.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.446" status="PASS" endtime="20171005 19:36:39.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:39.625" status="PASS" endtime="20171005 19:36:39.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:39.626" status="PASS" endtime="20171005 19:36:39.626"></status>
</kw>
<status starttime="20171005 19:36:39.442" status="PASS" endtime="20171005 19:36:39.626"></status>
</kw>
<status starttime="20171005 19:36:39.442" status="PASS" endtime="20171005 19:36:39.626"></status>
</kw>
<status starttime="20171005 19:36:39.441" status="PASS" endtime="20171005 19:36:39.627"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.627">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status starttime="20171005 19:36:39.627" status="PASS" endtime="20171005 19:36:39.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:39.628" status="PASS" endtime="20171005 19:36:39.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.683">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:39.683">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.628" status="PASS" endtime="20171005 19:36:39.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:39.684" status="PASS" endtime="20171005 19:36:39.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:39.684">Delete All Sessions</msg>
<status starttime="20171005 19:36:39.684" status="PASS" endtime="20171005 19:36:39.685"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.440" status="PASS" endtime="20171005 19:36:39.685"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status starttime="20171005 19:36:39.685" status="PASS" endtime="20171005 19:36:39.685"></status>
</kw>
<kw library="utils" name="Get URL List">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.690">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:39.689" status="PASS" endtime="20171005 19:36:39.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:39.690" status="PASS" endtime="20171005 19:36:39.691"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.691">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:39.691" status="PASS" endtime="20171005 19:36:39.691"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:39.692" status="PASS" endtime="20171005 19:36:39.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.906">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:39.693" status="PASS" endtime="20171005 19:36:39.907"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:39.907">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.692" status="PASS" endtime="20171005 19:36:39.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:39.907" status="PASS" endtime="20171005 19:36:39.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:39.908" status="PASS" endtime="20171005 19:36:39.908"></status>
</kw>
<status starttime="20171005 19:36:39.689" status="PASS" endtime="20171005 19:36:39.908"></status>
</kw>
<status starttime="20171005 19:36:39.688" status="PASS" endtime="20171005 19:36:39.909"></status>
</kw>
<status starttime="20171005 19:36:39.688" status="PASS" endtime="20171005 19:36:39.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.909">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status starttime="20171005 19:36:39.909" status="PASS" endtime="20171005 19:36:39.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:39.910" status="PASS" endtime="20171005 19:36:39.910"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.966">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:39.966">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.910" status="PASS" endtime="20171005 19:36:39.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:39.966" status="PASS" endtime="20171005 19:36:39.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:39.967">Delete All Sessions</msg>
<status starttime="20171005 19:36:39.967" status="PASS" endtime="20171005 19:36:39.967"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.687" status="PASS" endtime="20171005 19:36:39.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:39.968" status="PASS" endtime="20171005 19:36:39.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.969">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171005 19:36:39.969">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171005 19:36:39.969">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171005 19:36:39.969" status="PASS" endtime="20171005 19:36:39.969"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.969">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status starttime="20171005 19:36:39.686" status="PASS" endtime="20171005 19:36:39.969"></status>
</kw>
<kw library="Collections" name="Sort List">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status starttime="20171005 19:36:39.970" status="PASS" endtime="20171005 19:36:39.970"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:39.970">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status starttime="20171005 19:36:39.686" status="PASS" endtime="20171005 19:36:39.970"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171005 19:36:39.971" status="PASS" endtime="20171005 19:36:39.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.972">${data} = {u'data': []}</msg>
<status starttime="20171005 19:36:39.972" status="PASS" endtime="20171005 19:36:39.972"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:39.975">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:39.975" status="PASS" endtime="20171005 19:36:39.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:39.976" status="PASS" endtime="20171005 19:36:39.976"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.977">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:39.976" status="PASS" endtime="20171005 19:36:39.977"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:39.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:39.977" status="PASS" endtime="20171005 19:36:39.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.159">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:39.978" status="PASS" endtime="20171005 19:36:40.159"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.160">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:40.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.978" status="PASS" endtime="20171005 19:36:40.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.160">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.160" status="PASS" endtime="20171005 19:36:40.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.161" status="PASS" endtime="20171005 19:36:40.161"></status>
</kw>
<status starttime="20171005 19:36:39.974" status="PASS" endtime="20171005 19:36:40.162"></status>
</kw>
<status starttime="20171005 19:36:39.974" status="PASS" endtime="20171005 19:36:40.162"></status>
</kw>
<status starttime="20171005 19:36:39.973" status="PASS" endtime="20171005 19:36:40.162"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.162">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status starttime="20171005 19:36:40.162" status="PASS" endtime="20171005 19:36:40.162"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.164">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171005 19:36:40.163" status="PASS" endtime="20171005 19:36:40.164"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.165">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171005 19:36:40.165" status="PASS" endtime="20171005 19:36:40.165"></status>
</kw>
<status starttime="20171005 19:36:40.164" status="PASS" endtime="20171005 19:36:40.165"></status>
</kw>
<status starttime="20171005 19:36:40.163" status="PASS" endtime="20171005 19:36:40.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.281">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171005 19:36:40.281">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:40.166" status="PASS" endtime="20171005 19:36:40.281"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.282">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:40.282" status="PASS" endtime="20171005 19:36:40.282"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.284">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:40.283" status="PASS" endtime="20171005 19:36:40.284"></status>
</kw>
<status starttime="20171005 19:36:40.282" status="PASS" endtime="20171005 19:36:40.284"></status>
</kw>
<status starttime="20171005 19:36:40.281" status="PASS" endtime="20171005 19:36:40.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:40.284">Delete All Sessions</msg>
<status starttime="20171005 19:36:40.284" status="PASS" endtime="20171005 19:36:40.284"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.285">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:39.972" status="PASS" endtime="20171005 19:36:40.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.285" status="PASS" endtime="20171005 19:36:40.285"></status>
</kw>
<status starttime="20171005 19:36:39.970" status="PASS" endtime="20171005 19:36:40.286"></status>
</kw>
<status starttime="20171005 19:36:39.970" status="PASS" endtime="20171005 19:36:40.286"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171005 19:36:40.286" status="PASS" endtime="20171005 19:36:40.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.287">${data} = {u'data': []}</msg>
<status starttime="20171005 19:36:40.287" status="PASS" endtime="20171005 19:36:40.287"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.290">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:40.290" status="PASS" endtime="20171005 19:36:40.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:40.291" status="PASS" endtime="20171005 19:36:40.291"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.292">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:40.291" status="PASS" endtime="20171005 19:36:40.292"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.292">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:40.292" status="PASS" endtime="20171005 19:36:40.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:40.293" status="PASS" endtime="20171005 19:36:40.500"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:40.500">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:40.293" status="PASS" endtime="20171005 19:36:40.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.500" status="PASS" endtime="20171005 19:36:40.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.501" status="PASS" endtime="20171005 19:36:40.502"></status>
</kw>
<status starttime="20171005 19:36:40.289" status="PASS" endtime="20171005 19:36:40.502"></status>
</kw>
<status starttime="20171005 19:36:40.289" status="PASS" endtime="20171005 19:36:40.502"></status>
</kw>
<status starttime="20171005 19:36:40.288" status="PASS" endtime="20171005 19:36:40.503"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.503">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status starttime="20171005 19:36:40.503" status="PASS" endtime="20171005 19:36:40.504"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.506">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171005 19:36:40.505" status="PASS" endtime="20171005 19:36:40.506"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.508">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171005 19:36:40.507" status="PASS" endtime="20171005 19:36:40.508"></status>
</kw>
<status starttime="20171005 19:36:40.506" status="PASS" endtime="20171005 19:36:40.508"></status>
</kw>
<status starttime="20171005 19:36:40.504" status="PASS" endtime="20171005 19:36:40.508"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.622">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171005 19:36:40.622">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:40.508" status="PASS" endtime="20171005 19:36:40.622"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.623">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:40.623" status="PASS" endtime="20171005 19:36:40.623"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.624">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171005 19:36:40.624" status="PASS" endtime="20171005 19:36:40.624"></status>
</kw>
<status starttime="20171005 19:36:40.623" status="PASS" endtime="20171005 19:36:40.624"></status>
</kw>
<status starttime="20171005 19:36:40.622" status="PASS" endtime="20171005 19:36:40.625"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:40.625">Delete All Sessions</msg>
<status starttime="20171005 19:36:40.625" status="PASS" endtime="20171005 19:36:40.625"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:40.288" status="PASS" endtime="20171005 19:36:40.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.626" status="PASS" endtime="20171005 19:36:40.626"></status>
</kw>
<status starttime="20171005 19:36:40.286" status="PASS" endtime="20171005 19:36:40.626"></status>
</kw>
<status starttime="20171005 19:36:40.286" status="PASS" endtime="20171005 19:36:40.626"></status>
</kw>
<status starttime="20171005 19:36:39.970" status="PASS" endtime="20171005 19:36:40.626"></status>
</kw>
<status starttime="20171005 19:36:39.440" status="PASS" endtime="20171005 19:36:40.626"></status>
</kw>
<kw library="dump_utils" name="Delete All Dumps">
<doc>Delete all dumps.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.629">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171005 19:36:40.629" status="PASS" endtime="20171005 19:36:40.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.630">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171005 19:36:40.630" status="PASS" endtime="20171005 19:36:40.630"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.631">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171005 19:36:40.631" status="PASS" endtime="20171005 19:36:40.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.632">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171005 19:36:40.631" status="PASS" endtime="20171005 19:36:40.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.872">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171005 19:36:40.632" status="PASS" endtime="20171005 19:36:40.872"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.872">${status} = PASS</msg>
<msg level="INFO" timestamp="20171005 19:36:40.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171005 19:36:40.632" status="PASS" endtime="20171005 19:36:40.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.873">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.873" status="PASS" endtime="20171005 19:36:40.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171005 19:36:40.874" status="PASS" endtime="20171005 19:36:40.874"></status>
</kw>
<status starttime="20171005 19:36:40.629" status="PASS" endtime="20171005 19:36:40.874"></status>
</kw>
<status starttime="20171005 19:36:40.628" status="PASS" endtime="20171005 19:36:40.874"></status>
</kw>
<status starttime="20171005 19:36:40.628" status="PASS" endtime="20171005 19:36:40.874"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.875">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status starttime="20171005 19:36:40.875" status="PASS" endtime="20171005 19:36:40.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171005 19:36:40.875" status="PASS" endtime="20171005 19:36:40.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.920">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171005 19:36:40.921">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171005 19:36:40.876" status="PASS" endtime="20171005 19:36:40.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171005 19:36:40.921" status="PASS" endtime="20171005 19:36:40.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171005 19:36:40.922">Delete All Sessions</msg>
<status starttime="20171005 19:36:40.922" status="PASS" endtime="20171005 19:36:40.922"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.922">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171005 19:36:40.627" status="PASS" endtime="20171005 19:36:40.922"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.923">Returning from the enclosing user keyword.</msg>
<status starttime="20171005 19:36:40.922" status="PASS" endtime="20171005 19:36:40.923"></status>
</kw>
<status starttime="20171005 19:36:40.627" status="PASS" endtime="20171005 19:36:40.923"></status>
</kw>
<status starttime="20171005 19:36:39.439" status="PASS" endtime="20171005 19:36:40.923"></status>
</kw>
<status starttime="20171005 19:36:39.439" status="PASS" endtime="20171005 19:36:40.923"></status>
</kw>
<status starttime="20171005 19:36:16.834" status="PASS" endtime="20171005 19:36:40.923"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.925">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:36:40.925" status="PASS" endtime="20171005 19:36:40.925"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.926">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:36:40.925" status="PASS" endtime="20171005 19:36:40.926"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.926">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status starttime="20171005 19:36:40.924" status="PASS" endtime="20171005 19:36:40.926"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.927">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20171005 19:36:40.927" status="PASS" endtime="20171005 19:36:40.927"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:36:40.928" status="PASS" endtime="20171005 19:36:40.928"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.932">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:36:40.935">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:36:40.935">${output} = /tmp/fspcibld/7497/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171005 19:36:40.928" status="PASS" endtime="20171005 19:36:40.935"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171005 19:36:40.938" status="PASS" endtime="20171005 19:36:40.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status starttime="20171005 19:36:40.941" status="PASS" endtime="20171005 19:36:40.941"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.941">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20171005 19:36:40.940" status="PASS" endtime="20171005 19:36:40.941"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.942">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:36:40.941" status="PASS" endtime="20171005 19:36:40.942"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.943">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20171005 19:36:40.927" status="PASS" endtime="20171005 19:36:40.943"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.943">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status starttime="20171005 19:36:40.943" status="PASS" endtime="20171005 19:36:40.944"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.944">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171005 19:36:40.944" status="PASS" endtime="20171005 19:36:40.944"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:36:40.944" status="PASS" endtime="20171005 19:36:40.945"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.948">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171005 19:36:40.962">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:36:40.963">${os_con_pid} = 202</msg>
<status starttime="20171005 19:36:40.945" status="PASS" endtime="20171005 19:36:40.963"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171005 19:36:40.966" status="PASS" endtime="20171005 19:36:40.967"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.967">${os_con_pid} = 202</msg>
<status starttime="20171005 19:36:40.926" status="PASS" endtime="20171005 19:36:40.968"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.968">${cmd_buf} = kill -9 202</msg>
<status starttime="20171005 19:36:40.968" status="PASS" endtime="20171005 19:36:40.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171005 19:36:40.970" status="PASS" endtime="20171005 19:36:40.970"></status>
</kw>
<status starttime="20171005 19:36:40.969" status="PASS" endtime="20171005 19:36:40.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:40.975">Running command 'kill -9 202 2&gt;&amp;1'.</msg>
<status starttime="20171005 19:36:40.972" status="PASS" endtime="20171005 19:36:40.978"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:40.979">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:36:40.979">${output} = </msg>
<status starttime="20171005 19:36:40.971" status="PASS" endtime="20171005 19:36:40.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171005 19:36:40.984" status="PASS" endtime="20171005 19:36:40.984"></status>
</kw>
<status starttime="20171005 19:36:40.983" status="PASS" endtime="20171005 19:36:40.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20171005 19:36:40.988">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/7497/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/7497/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171005 19:36:40.986" status="PASS" endtime="20171005 19:36:40.988"></status>
</kw>
<status starttime="20171005 19:36:40.986" status="PASS" endtime="20171005 19:36:40.988"></status>
</kw>
<status starttime="20171005 19:36:40.985" status="PASS" endtime="20171005 19:36:40.989"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.989">${output} = </msg>
<status starttime="20171005 19:36:40.989" status="PASS" endtime="20171005 19:36:40.989"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171005 19:36:40.991">${loc_quiet} = 1</msg>
<status starttime="20171005 19:36:40.990" status="PASS" endtime="20171005 19:36:40.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20171005 19:36:40.992" status="PASS" endtime="20171005 19:36:41.047"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:41.048">${rc} = 0</msg>
<msg level="INFO" timestamp="20171005 19:36:41.048">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20171005 19:36:40.992" status="PASS" endtime="20171005 19:36:41.048"></status>
</kw>
<msg level="INFO" timestamp="20171005 19:36:41.049">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20171005 19:36:40.924" status="PASS" endtime="20171005 19:36:41.049"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171005 19:36:41.052">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status starttime="20171005 19:36:41.051" status="PASS" endtime="20171005 19:36:41.052"></status>
</kw>
<status starttime="20171005 19:36:16.833" status="PASS" endtime="20171005 19:36:41.052"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20171005 19:26:05.983" status="FAIL" endtime="20171005 19:36:41.052" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20171005 19:26:05.946" status="FAIL" endtime="20171005 19:36:41.053"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20171005 19:25:57.036" status="FAIL" endtime="20171005 19:36:41.056"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" pass="1" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20171005 19:26:21.949">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
