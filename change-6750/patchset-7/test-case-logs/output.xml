<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171005 18:45:17.273" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/6989/obmc-robot/tests" id="s1" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw library="connection_client" name="Clear System Entry From Knownhosts">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171005 18:45:18.255" level="INFO">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status status="PASS" starttime="20171005 18:45:18.254" endtime="20171005 18:45:18.255"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:18.259" level="INFO">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:45:18.262" level="INFO">${rc} = 2</msg>
<msg timestamp="20171005 18:45:18.262" level="INFO">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status status="PASS" starttime="20171005 18:45:18.255" endtime="20171005 18:45:18.262"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.254" endtime="20171005 18:45:18.263"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.254" endtime="20171005 18:45:18.263"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 18:45:18.267" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171005 18:45:18.266" endtime="20171005 18:45:18.267"></status>
</kw>
<msg timestamp="20171005 18:45:18.267" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171005 18:45:18.266" endtime="20171005 18:45:18.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:18.268" endtime="20171005 18:45:18.269"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.267" endtime="20171005 18:45:18.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171005 18:45:18.270" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171005 18:45:18.270" endtime="20171005 18:45:18.271"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171005 18:45:18.271" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171005 18:45:18.271" endtime="20171005 18:45:18.271"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171005 18:45:18.272" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171005 18:45:18.271" endtime="20171005 18:45:18.272"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171005 18:45:18.273" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171005 18:45:18.272" endtime="20171005 18:45:18.273"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.270" endtime="20171005 18:45:18.273"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.269" endtime="20171005 18:45:18.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 18:45:18.274" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171005 18:45:18.274" endtime="20171005 18:45:18.274"></status>
</kw>
<msg timestamp="20171005 18:45:18.274" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171005 18:45:18.273" endtime="20171005 18:45:18.274"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:18.276" endtime="20171005 18:45:18.276"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:18.277" endtime="20171005 18:45:18.277"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.275" endtime="20171005 18:45:18.277"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.274" endtime="20171005 18:45:18.277"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 18:45:18.278" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 18:45:19.954" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171005 18:45:18.278" endtime="20171005 18:45:19.955"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.264" endtime="20171005 18:45:19.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:45:19.956" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20171005 18:45:20.023" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 18:45:20.023" level="INFO">${output} = VERSION_ID="v1.99.10-111-gca5a12f"</msg>
<msg timestamp="20171005 18:45:20.023" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:45:19.956" endtime="20171005 18:45:20.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.024" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 18:45:20.024" endtime="20171005 18:45:20.024"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.025" level="INFO">VERSION_ID="v1.99.10-111-gca5a12f"</msg>
<status status="PASS" starttime="20171005 18:45:20.024" endtime="20171005 18:45:20.025"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:19.955" endtime="20171005 18:45:20.025"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:19.955" endtime="20171005 18:45:20.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg timestamp="20171005 18:45:20.026" level="INFO">${software} = []</msg>
<status status="PASS" starttime="20171005 18:45:20.026" endtime="20171005 18:45:20.026"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20171005 18:45:20.027" level="INFO">${host_list} = []</msg>
<status status="PASS" starttime="20171005 18:45:20.027" endtime="20171005 18:45:20.027"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:20.031" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:20.031" endtime="20171005 18:45:20.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:20.032" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:20.032" endtime="20171005 18:45:20.032"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:20.033" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:20.033" endtime="20171005 18:45:20.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:20.034" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:20.033" endtime="20171005 18:45:20.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:20.035" endtime="20171005 18:45:20.234"></status>
</kw>
<msg timestamp="20171005 18:45:20.234" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:20.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.034" endtime="20171005 18:45:20.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.235" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.234" endtime="20171005 18:45:20.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.235" endtime="20171005 18:45:20.236"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.030" endtime="20171005 18:45:20.236"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.030" endtime="20171005 18:45:20.236"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.029" endtime="20171005 18:45:20.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:20.237" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" starttime="20171005 18:45:20.236" endtime="20171005 18:45:20.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:20.239" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:20.238" endtime="20171005 18:45:20.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:20.240" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:20.239" endtime="20171005 18:45:20.240"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.239" endtime="20171005 18:45:20.240"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.237" endtime="20171005 18:45:20.240"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.237" endtime="20171005 18:45:20.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:20.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20171005 18:45:20.312" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.241" endtime="20171005 18:45:20.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:20.314" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/270096c5", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/30a69178", 
    "/xyz/openbmc_pr...</msg>
<status status="PASS" starttime="20171005 18:45:20.313" endtime="20171005 18:45:20.314"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:20.315" level="INFO">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/270096c5", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/30a69178", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:20.315" endtime="20171005 18:45:20.315"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.314" endtime="20171005 18:45:20.315"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.313" endtime="20171005 18:45:20.315"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.312" endtime="20171005 18:45:20.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:20.316" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:20.315" endtime="20171005 18:45:20.316"></status>
</kw>
<msg timestamp="20171005 18:45:20.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.028" endtime="20171005 18:45:20.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.316" endtime="20171005 18:45:20.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:20.317" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/270096c5", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/30a69178", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:20.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:20.317" level="INFO">${content} = {u'data': [u'/xyz/openbmc_project/software/270096c5', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/30a69178', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_proj...</msg>
<status status="PASS" starttime="20171005 18:45:20.317" endtime="20171005 18:45:20.317"></status>
</kw>
<msg timestamp="20171005 18:45:20.318" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/270096c5', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/30a69178', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/softwa...</msg>
<status status="PASS" starttime="20171005 18:45:20.028" endtime="20171005 18:45:20.318"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/270096c5">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:20.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:20.321" endtime="20171005 18:45:20.322"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:20.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:20.322" endtime="20171005 18:45:20.322"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:20.323" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:20.323" endtime="20171005 18:45:20.323"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:20.324" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:20.324" endtime="20171005 18:45:20.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:20.326" endtime="20171005 18:45:20.563"></status>
</kw>
<msg timestamp="20171005 18:45:20.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:20.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.325" endtime="20171005 18:45:20.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.563" endtime="20171005 18:45:20.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.564" endtime="20171005 18:45:20.565"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.321" endtime="20171005 18:45:20.565"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.320" endtime="20171005 18:45:20.565"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.319" endtime="20171005 18:45:20.565"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:20.566" level="INFO">${base_uri} = /xyz/openbmc_project/software/270096c5/attr/Purpose</msg>
<status status="PASS" starttime="20171005 18:45:20.565" endtime="20171005 18:45:20.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:20.566" endtime="20171005 18:45:20.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:20.710" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/270096c5/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 18:45:20.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.567" endtime="20171005 18:45:20.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:20.710" endtime="20171005 18:45:20.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:20.711" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:20.711" endtime="20171005 18:45:20.711"></status>
</kw>
<msg timestamp="20171005 18:45:20.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.319" endtime="20171005 18:45:20.711"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:20.712" endtime="20171005 18:45:20.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:20.713" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:20.714" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:20.714" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:20.712" endtime="20171005 18:45:20.714"></status>
</kw>
<msg timestamp="20171005 18:45:20.714" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" starttime="20171005 18:45:20.319" endtime="20171005 18:45:20.714"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 18:45:20.715" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:45:20.714" endtime="20171005 18:45:20.715"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.318" endtime="20171005 18:45:20.715"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:20.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:20.718" endtime="20171005 18:45:20.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:20.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:20.719" endtime="20171005 18:45:20.720"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:20.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:20.720" endtime="20171005 18:45:20.720"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:20.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:20.721" endtime="20171005 18:45:20.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:20.722" endtime="20171005 18:45:20.902"></status>
</kw>
<msg timestamp="20171005 18:45:20.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:20.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.721" endtime="20171005 18:45:20.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.903" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.903" endtime="20171005 18:45:20.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.904" endtime="20171005 18:45:20.904"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.717" endtime="20171005 18:45:20.904"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.717" endtime="20171005 18:45:20.904"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.716" endtime="20171005 18:45:20.904"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:20.905" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" starttime="20171005 18:45:20.905" endtime="20171005 18:45:20.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:20.905" endtime="20171005 18:45:20.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:20.971" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 18:45:20.971" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.906" endtime="20171005 18:45:20.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:20.971" endtime="20171005 18:45:20.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:20.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:20.972" endtime="20171005 18:45:20.972"></status>
</kw>
<msg timestamp="20171005 18:45:20.973" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.715" endtime="20171005 18:45:20.973"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:20.973" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 18:45:20.973" endtime="20171005 18:45:20.973"></status>
</kw>
<msg timestamp="20171005 18:45:20.974" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" starttime="20171005 18:45:20.715" endtime="20171005 18:45:20.974"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 18:45:20.974" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:45:20.974" endtime="20171005 18:45:20.974"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.715" endtime="20171005 18:45:20.974"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/30a69178">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:20.978" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:20.977" endtime="20171005 18:45:20.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:20.979" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:20.978" endtime="20171005 18:45:20.979"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:20.979" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:20.979" endtime="20171005 18:45:20.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:20.980" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:20.980" endtime="20171005 18:45:20.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.177" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:20.981" endtime="20171005 18:45:21.177"></status>
</kw>
<msg timestamp="20171005 18:45:21.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:21.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.980" endtime="20171005 18:45:21.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.178" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.178" endtime="20171005 18:45:21.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.178" endtime="20171005 18:45:21.179"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.977" endtime="20171005 18:45:21.179"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.976" endtime="20171005 18:45:21.179"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.976" endtime="20171005 18:45:21.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:21.180" level="INFO">${base_uri} = /xyz/openbmc_project/software/30a69178/attr/Purpose</msg>
<status status="PASS" starttime="20171005 18:45:21.179" endtime="20171005 18:45:21.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.180" endtime="20171005 18:45:21.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:21.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/30a69178/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 18:45:21.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.181" endtime="20171005 18:45:21.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.298" endtime="20171005 18:45:21.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:21.299" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:21.299" endtime="20171005 18:45:21.299"></status>
</kw>
<msg timestamp="20171005 18:45:21.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:20.975" endtime="20171005 18:45:21.299"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.299" endtime="20171005 18:45:21.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:21.300" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:21.300" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:21.301" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:21.300" endtime="20171005 18:45:21.301"></status>
</kw>
<msg timestamp="20171005 18:45:21.301" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" starttime="20171005 18:45:20.975" endtime="20171005 18:45:21.301"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 18:45:21.302" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:45:21.301" endtime="20171005 18:45:21.302"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.974" endtime="20171005 18:45:21.302"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:21.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:21.306" endtime="20171005 18:45:21.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:21.308" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:21.307" endtime="20171005 18:45:21.308"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:21.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:21.308" endtime="20171005 18:45:21.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:21.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:21.309" endtime="20171005 18:45:21.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:21.310" endtime="20171005 18:45:21.492"></status>
</kw>
<msg timestamp="20171005 18:45:21.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:21.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.309" endtime="20171005 18:45:21.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.493" endtime="20171005 18:45:21.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.494" endtime="20171005 18:45:21.494"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.306" endtime="20171005 18:45:21.494"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.305" endtime="20171005 18:45:21.494"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.305" endtime="20171005 18:45:21.495"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:21.495" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status status="PASS" starttime="20171005 18:45:21.495" endtime="20171005 18:45:21.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.496" endtime="20171005 18:45:21.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:21.619" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 18:45:21.620" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.496" endtime="20171005 18:45:21.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.620" endtime="20171005 18:45:21.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:21.621" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:21.621" endtime="20171005 18:45:21.621"></status>
</kw>
<msg timestamp="20171005 18:45:21.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.303" endtime="20171005 18:45:21.621"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.622" endtime="20171005 18:45:21.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:21.623" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:21.623" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:21.623" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:21.622" endtime="20171005 18:45:21.623"></status>
</kw>
<msg timestamp="20171005 18:45:21.623" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20171005 18:45:21.302" endtime="20171005 18:45:21.623"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.623" endtime="20171005 18:45:21.624"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.624" endtime="20171005 18:45:21.624"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.302" endtime="20171005 18:45:21.624"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:21.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:21.627" endtime="20171005 18:45:21.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:21.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:21.628" endtime="20171005 18:45:21.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:21.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:21.629" endtime="20171005 18:45:21.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:21.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:21.630" endtime="20171005 18:45:21.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:21.632" endtime="20171005 18:45:21.862"></status>
</kw>
<msg timestamp="20171005 18:45:21.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:21.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.631" endtime="20171005 18:45:21.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.863" endtime="20171005 18:45:21.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:21.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.863" endtime="20171005 18:45:21.864"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.627" endtime="20171005 18:45:21.864"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.626" endtime="20171005 18:45:21.864"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.626" endtime="20171005 18:45:21.864"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:21.865" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" starttime="20171005 18:45:21.864" endtime="20171005 18:45:21.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.865" endtime="20171005 18:45:21.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:21.997" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 18:45:21.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.866" endtime="20171005 18:45:21.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.997" endtime="20171005 18:45:21.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:21.998" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:21.998" endtime="20171005 18:45:21.998"></status>
</kw>
<msg timestamp="20171005 18:45:21.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:21.625" endtime="20171005 18:45:21.999"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:21.999" endtime="20171005 18:45:21.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:22.000" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:22.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:22.000" level="INFO">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:22.000" endtime="20171005 18:45:22.000"></status>
</kw>
<msg timestamp="20171005 18:45:22.000" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20171005 18:45:21.625" endtime="20171005 18:45:22.000"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.001" endtime="20171005 18:45:22.001"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.001" endtime="20171005 18:45:22.002"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:21.625" endtime="20171005 18:45:22.002"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:22.005" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:22.005" endtime="20171005 18:45:22.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:22.006" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:22.006" endtime="20171005 18:45:22.006"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:22.007" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:22.007" endtime="20171005 18:45:22.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:22.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:22.007" endtime="20171005 18:45:22.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.212" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:22.009" endtime="20171005 18:45:22.212"></status>
</kw>
<msg timestamp="20171005 18:45:22.212" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:22.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.008" endtime="20171005 18:45:22.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.213" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.213" endtime="20171005 18:45:22.213"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.213" endtime="20171005 18:45:22.214"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.004" endtime="20171005 18:45:22.214"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.004" endtime="20171005 18:45:22.214"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.003" endtime="20171005 18:45:22.214"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:22.215" level="INFO">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status status="PASS" starttime="20171005 18:45:22.214" endtime="20171005 18:45:22.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.215" endtime="20171005 18:45:22.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:22.280" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171005 18:45:22.280" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.216" endtime="20171005 18:45:22.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.281" endtime="20171005 18:45:22.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:22.281" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:22.281" endtime="20171005 18:45:22.282"></status>
</kw>
<msg timestamp="20171005 18:45:22.282" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.002" endtime="20171005 18:45:22.282"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.282" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 18:45:22.282" endtime="20171005 18:45:22.283"></status>
</kw>
<msg timestamp="20171005 18:45:22.283" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" starttime="20171005 18:45:22.002" endtime="20171005 18:45:22.283"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171005 18:45:22.283" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:45:22.283" endtime="20171005 18:45:22.283"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.002" endtime="20171005 18:45:22.284"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.318" endtime="20171005 18:45:22.284"></status>
</kw>
<msg timestamp="20171005 18:45:22.284" level="INFO">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" starttime="20171005 18:45:20.027" endtime="20171005 18:45:22.284"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:22.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:22.286" endtime="20171005 18:45:22.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:22.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:22.287" endtime="20171005 18:45:22.288"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:22.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:22.288" endtime="20171005 18:45:22.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:22.289" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:22.289" endtime="20171005 18:45:22.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.477" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:22.290" endtime="20171005 18:45:22.477"></status>
</kw>
<msg timestamp="20171005 18:45:22.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:22.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.289" endtime="20171005 18:45:22.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.478" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.477" endtime="20171005 18:45:22.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.478" endtime="20171005 18:45:22.479"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.286" endtime="20171005 18:45:22.479"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.285" endtime="20171005 18:45:22.479"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.285" endtime="20171005 18:45:22.479"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:22.479" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status status="PASS" starttime="20171005 18:45:22.479" endtime="20171005 18:45:22.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.480" endtime="20171005 18:45:22.480"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:22.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg timestamp="20171005 18:45:22.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.480" endtime="20171005 18:45:22.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.636" endtime="20171005 18:45:22.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:22.637" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:22.636" endtime="20171005 18:45:22.637"></status>
</kw>
<msg timestamp="20171005 18:45:22.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.284" endtime="20171005 18:45:22.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 18:45:22.638" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:22.638" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:22.638" level="INFO">${json} = {u'data': {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis...</msg>
<status status="PASS" starttime="20171005 18:45:22.637" endtime="20171005 18:45:22.638"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.638" endtime="20171005 18:45:22.638"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.284" endtime="20171005 18:45:22.639"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:22.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:22.641" endtime="20171005 18:45:22.642"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:22.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:22.642" endtime="20171005 18:45:22.642"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:22.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:22.643" endtime="20171005 18:45:22.643"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:22.644" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:22.643" endtime="20171005 18:45:22.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:22.646" endtime="20171005 18:45:22.840"></status>
</kw>
<msg timestamp="20171005 18:45:22.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:22.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.644" endtime="20171005 18:45:22.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.841" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.840" endtime="20171005 18:45:22.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:22.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.841" endtime="20171005 18:45:22.842"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.640" endtime="20171005 18:45:22.842"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.640" endtime="20171005 18:45:22.842"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.639" endtime="20171005 18:45:22.842"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:22.842" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" starttime="20171005 18:45:22.842" endtime="20171005 18:45:22.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:22.843" endtime="20171005 18:45:22.843"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:23.000" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20171005 18:45:23.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.843" endtime="20171005 18:45:23.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:23.001" endtime="20171005 18:45:23.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:23.002" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:23.002" endtime="20171005 18:45:23.002"></status>
</kw>
<msg timestamp="20171005 18:45:23.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:22.639" endtime="20171005 18:45:23.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 18:45:23.003" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:23.003" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:23.003" level="INFO">${json} = {u'data': {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis...</msg>
<status status="PASS" starttime="20171005 18:45:23.003" endtime="20171005 18:45:23.003"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:23.004" endtime="20171005 18:45:23.004"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.639" endtime="20171005 18:45:23.004"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:22.284" endtime="20171005 18:45:23.004"></status>
</kw>
<msg timestamp="20171005 18:45:23.004" level="INFO">${software} = [{u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Pa...</msg>
<status status="PASS" starttime="20171005 18:45:20.026" endtime="20171005 18:45:23.004"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg timestamp="20171005 18:45:23.005" level="INFO">[{u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2', u'Priority': 1, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35'}, {u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Path': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Priority': 0, u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54'}]</msg>
<status status="PASS" starttime="20171005 18:45:23.005" endtime="20171005 18:45:23.005"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.025" endtime="20171005 18:45:23.005"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:20.025" endtime="20171005 18:45:23.005"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 18:45:23.025" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:45:23.025" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 18:45:23.810" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171005 18:45:23.810" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171005 18:45:23.897" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 18:45:23.905" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171005 18:45:23.905" level="INFO">${stderr} = </msg>
<msg timestamp="20171005 18:45:23.905" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20171005 18:45:23.007" endtime="20171005 18:45:23.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 18:45:23.906" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 18:45:23.906" endtime="20171005 18:45:23.906"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 18:45:23.906" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20171005 18:45:23.906" endtime="20171005 18:45:23.907"></status>
</kw>
<msg timestamp="20171005 18:45:23.907" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20171005 18:45:23.006" endtime="20171005 18:45:23.907"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 18:45:23.907" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20171005 18:45:23.907" endtime="20171005 18:45:23.907"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.006" endtime="20171005 18:45:23.907"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.005" endtime="20171005 18:45:23.908"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171005 18:45:23.910" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20171005 18:45:23.910" endtime="20171005 18:45:23.910"></status>
</kw>
<msg timestamp="20171005 18:45:23.910" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20171005 18:45:23.909" endtime="20171005 18:45:23.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:23.911" endtime="20171005 18:45:23.911"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.911" endtime="20171005 18:45:23.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171005 18:45:23.914" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20171005 18:45:23.913" endtime="20171005 18:45:23.914"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171005 18:45:23.914" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20171005 18:45:23.914" endtime="20171005 18:45:23.914"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171005 18:45:23.915" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20171005 18:45:23.915" endtime="20171005 18:45:23.915"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171005 18:45:23.916" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20171005 18:45:23.916" endtime="20171005 18:45:23.916"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.912" endtime="20171005 18:45:23.916"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.912" endtime="20171005 18:45:23.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171005 18:45:23.917" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20171005 18:45:23.917" endtime="20171005 18:45:23.918"></status>
</kw>
<msg timestamp="20171005 18:45:23.918" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20171005 18:45:23.917" endtime="20171005 18:45:23.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:23.919" endtime="20171005 18:45:23.920"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:23.920" endtime="20171005 18:45:23.920"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.919" endtime="20171005 18:45:23.920"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.918" endtime="20171005 18:45:23.920"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171005 18:45:23.921" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171005 18:45:25.636" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20171005 18:45:23.921" endtime="20171005 18:45:25.636"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.909" endtime="20171005 18:45:25.636"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:45:25.637" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20171005 18:45:25.724" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 18:45:25.724" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20171005 18:45:25.724" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:45:25.637" endtime="20171005 18:45:25.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 18:45:25.725" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 18:45:25.725" endtime="20171005 18:45:25.725"></status>
</kw>
<msg timestamp="20171005 18:45:25.725" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20171005 18:45:25.636" endtime="20171005 18:45:25.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:25.726" endtime="20171005 18:45:25.726"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.908" endtime="20171005 18:45:25.726"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:23.908" endtime="20171005 18:45:25.726"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:18.253" endtime="20171005 18:45:25.726"></status>
</kw>
<suite source="/tmp/fspcibld/6989/obmc-robot/tests/security" id="s1-s1" name="Security">
<suite source="/tmp/fspcibld/6989/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:25.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:25.767" endtime="20171005 18:45:25.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:25.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:25.768" endtime="20171005 18:45:25.768"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:25.769" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:25.769" endtime="20171005 18:45:25.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:25.770" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:25.769" endtime="20171005 18:45:25.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:25.949" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:25.770" endtime="20171005 18:45:25.949"></status>
</kw>
<msg timestamp="20171005 18:45:25.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:25.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:25.770" endtime="20171005 18:45:25.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:25.950" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:25.950" endtime="20171005 18:45:25.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:25.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:25.950" endtime="20171005 18:45:25.951"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.766" endtime="20171005 18:45:25.951"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.766" endtime="20171005 18:45:25.951"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.765" endtime="20171005 18:45:25.951"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:25.952" endtime="20171005 18:45:25.952"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171005 18:45:25.964" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171005 18:45:25.953" endtime="20171005 18:45:25.964"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171005 18:45:25.974" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20171005 18:45:25.965" endtime="20171005 18:45:25.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:45:25.976" level="INFO">${cur_time} = 2017-10-05 18:45:25:976031</msg>
<status status="PASS" starttime="20171005 18:45:25.976" endtime="20171005 18:45:25.976"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:45:25.977" level="INFO">${cur_time} = 20171005184525976031</msg>
<status status="PASS" starttime="20171005 18:45:25.977" endtime="20171005 18:45:25.977"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.975" endtime="20171005 18:45:25.977"></status>
</kw>
<msg timestamp="20171005 18:45:25.982" level="INFO">${FFDC_TIME} = 20171005184525976031</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 18:45:25.983" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20171005 18:45:25.983" endtime="20171005 18:45:25.983"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 18:45:25.984" level="INFO">${suite_name} = 20171005184525976031_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20171005 18:45:25.983" endtime="20171005 18:45:25.984"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 18:45:25.984" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20171005 18:45:25.984" endtime="20171005 18:45:25.984"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 18:45:25.985" level="INFO">${test_name} = 20171005184525976031_TestSSLConnection</msg>
<status status="PASS" starttime="20171005 18:45:25.984" endtime="20171005 18:45:25.985"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.982" endtime="20171005 18:45:25.985"></status>
</kw>
<msg timestamp="20171005 18:45:25.985" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/6989/obmc-robot/logs/20171005184525976031_TestsSecurityTestSsl/20171005184525976031_TestSSLConnection/</msg>
<msg timestamp="20171005 18:45:25.991" level="INFO">${FFDC_PREFIX} = 20171005184525976031_</msg>
<status status="PASS" starttime="20171005 18:45:25.975" endtime="20171005 18:45:25.992"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.975" endtime="20171005 18:45:25.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:25.992" endtime="20171005 18:45:25.993"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:45:25.994" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs"&gt;/tmp/fspcibld/6989/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:45:25.993" endtime="20171005 18:45:25.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171005 18:45:25.995" level="FAIL">File '/tmp/fspcibld/6989/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20171005 18:45:25.994" endtime="20171005 18:45:25.995"></status>
</kw>
<msg timestamp="20171005 18:45:25.995" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20171005 18:45:25.994" endtime="20171005 18:45:25.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:45:25.996" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:45:25.996" endtime="20171005 18:45:25.996"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.995" endtime="20171005 18:45:25.996"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:25.997" endtime="20171005 18:45:25.997"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:45:25.998" level="INFO">${cur_time} = 2017-10-05 18:45:25:997709</msg>
<status status="PASS" starttime="20171005 18:45:25.997" endtime="20171005 18:45:25.998"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:45:25.999" level="INFO">${cur_time} = 20171005184525997709</msg>
<status status="PASS" starttime="20171005 18:45:25.998" endtime="20171005 18:45:25.999"></status>
</kw>
<msg timestamp="20171005 18:45:25.999" level="INFO">${cur_time} = 20171005184525997709</msg>
<status status="PASS" starttime="20171005 18:45:25.997" endtime="20171005 18:45:25.999"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:45:26.000" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:45:25.999" endtime="20171005 18:45:26.000"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.952" endtime="20171005 18:45:26.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.000" endtime="20171005 18:45:26.000"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:25.951" endtime="20171005 18:45:26.001"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20171005 18:45:25.765" critical="yes" endtime="20171005 18:45:26.001"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:26.002" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:26.001" endtime="20171005 18:45:26.002"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20171005 18:45:25.730" endtime="20171005 18:45:26.002"></status>
</suite>
<status status="PASS" starttime="20171005 18:45:25.726" endtime="20171005 18:45:26.004"></status>
</suite>
<suite source="/tmp/fspcibld/6989/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171005 18:45:26.047" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:45:26.047" endtime="20171005 18:45:26.047"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171005 18:45:26.048" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:45:26.047" endtime="20171005 18:45:26.048"></status>
</kw>
<msg timestamp="20171005 18:45:26.048" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:45:26.046" endtime="20171005 18:45:26.048"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171005 18:45:26.050" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:45:26.050" endtime="20171005 18:45:26.050"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171005 18:45:26.051" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:45:26.050" endtime="20171005 18:45:26.051"></status>
</kw>
<msg timestamp="20171005 18:45:26.051" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:45:26.049" endtime="20171005 18:45:26.051"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.052" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 18:45:26.052" endtime="20171005 18:45:26.052"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.052" endtime="20171005 18:45:26.052"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:26.057" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:45:26.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:45:26.060" level="INFO">${output} = /tmp/fspcibld/6989/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 18:45:26.053" endtime="20171005 18:45:26.060"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.062" endtime="20171005 18:45:26.063"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.064" endtime="20171005 18:45:26.064"></status>
</kw>
<msg timestamp="20171005 18:45:26.064" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 18:45:26.063" endtime="20171005 18:45:26.064"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.065" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:26.065" endtime="20171005 18:45:26.065"></status>
</kw>
<msg timestamp="20171005 18:45:26.066" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:26.051" endtime="20171005 18:45:26.066"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171005 18:45:26.066" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:26.066" endtime="20171005 18:45:26.066"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.067" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171005 18:45:26.067" endtime="20171005 18:45:26.067"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.067" endtime="20171005 18:45:26.101"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171005 18:45:26.106" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:45:26.113" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:45:26.113" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171005 18:45:26.102" endtime="20171005 18:45:26.114"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.116" endtime="20171005 18:45:26.118"></status>
</kw>
<msg timestamp="20171005 18:45:26.119" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20171005 18:45:26.051" endtime="20171005 18:45:26.119"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.120" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20171005 18:45:26.119" endtime="20171005 18:45:26.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.120" endtime="20171005 18:45:26.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:26.122" level="INFO">${rc} = None</msg>
<msg timestamp="20171005 18:45:26.122" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20171005 18:45:26.121" endtime="20171005 18:45:26.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.122" endtime="20171005 18:45:26.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171005 18:45:26.125" level="FAIL">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status status="FAIL" starttime="20171005 18:45:26.124" endtime="20171005 18:45:26.125"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:26.124" endtime="20171005 18:45:26.125"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:26.123" endtime="20171005 18:45:26.125"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:26.126" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 18:45:26.126" endtime="20171005 18:45:26.126"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171005 18:45:26.127" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171005 18:45:26.127" endtime="20171005 18:45:26.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.128" endtime="20171005 18:45:26.181"></status>
</kw>
<msg timestamp="20171005 18:45:26.181" level="INFO">${rc} = 1</msg>
<msg timestamp="20171005 18:45:26.181" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" starttime="20171005 18:45:26.127" endtime="20171005 18:45:26.181"></status>
</kw>
<msg timestamp="20171005 18:45:26.182" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status status="PASS" starttime="20171005 18:45:26.048" endtime="20171005 18:45:26.182"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:45:26.184" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:45:26.183" endtime="20171005 18:45:26.184"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.185" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 18:45:26.185" endtime="20171005 18:45:26.185"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.185" endtime="20171005 18:45:26.186"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:26.189" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:45:26.192" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:45:26.192" level="INFO">${output} = /tmp/fspcibld/6989/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 18:45:26.186" endtime="20171005 18:45:26.192"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.195" endtime="20171005 18:45:26.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.197" endtime="20171005 18:45:26.197"></status>
</kw>
<msg timestamp="20171005 18:45:26.198" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 18:45:26.196" endtime="20171005 18:45:26.198"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.199" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:26.198" endtime="20171005 18:45:26.199"></status>
</kw>
<msg timestamp="20171005 18:45:26.199" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:26.184" endtime="20171005 18:45:26.199"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:26.200" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20171005 18:45:26.200" endtime="20171005 18:45:26.200"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.201" endtime="20171005 18:45:26.201"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:26.205" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20171005 18:45:26.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:45:26.209" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 18:45:26.201" endtime="20171005 18:45:26.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:26.211" endtime="20171005 18:45:26.214"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171005 18:45:27.215" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20171005 18:45:26.214" endtime="20171005 18:45:27.215"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:27.217" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 18:45:27.217" endtime="20171005 18:45:27.217"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.217" endtime="20171005 18:45:27.218"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:45:27.221" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:45:27.227" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:45:27.228" level="INFO">${output} = /tmp/fspcibld/6989/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 18:45:27.218" endtime="20171005 18:45:27.228"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.230" endtime="20171005 18:45:27.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.234" endtime="20171005 18:45:27.234"></status>
</kw>
<msg timestamp="20171005 18:45:27.234" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 18:45:27.232" endtime="20171005 18:45:27.234"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:27.235" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:27.234" endtime="20171005 18:45:27.235"></status>
</kw>
<msg timestamp="20171005 18:45:27.236" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:27.216" endtime="20171005 18:45:27.236"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171005 18:45:27.236" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:45:27.236" endtime="20171005 18:45:27.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:45:27.237" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171005 18:45:27.237" endtime="20171005 18:45:27.237"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.237" endtime="20171005 18:45:27.238"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171005 18:45:27.248" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:45:27.254" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:45:27.254" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 18:45:27.238" endtime="20171005 18:45:27.255"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.257" endtime="20171005 18:45:27.258"></status>
</kw>
<msg timestamp="20171005 18:45:27.259" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 18:45:27.215" endtime="20171005 18:45:27.259"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20171005 18:45:27.260" level="INFO">Length is 3</msg>
<status status="PASS" starttime="20171005 18:45:27.260" endtime="20171005 18:45:27.260"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:26.046" endtime="20171005 18:45:27.260"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20171005 18:45:27.261" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171005 18:45:27.263" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20171005 18:45:27.263" endtime="20171005 18:45:27.263"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:27.265" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171005 18:45:27.265" endtime="20171005 18:45:27.265"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:27.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:27.269" endtime="20171005 18:45:27.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:27.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:27.271" endtime="20171005 18:45:27.271"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:27.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:27.271" endtime="20171005 18:45:27.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:27.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:27.272" endtime="20171005 18:45:27.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:27.475" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:27.273" endtime="20171005 18:45:27.475"></status>
</kw>
<msg timestamp="20171005 18:45:27.475" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:27.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.273" endtime="20171005 18:45:27.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:27.476" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.476" endtime="20171005 18:45:27.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:27.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.476" endtime="20171005 18:45:27.477"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.269" endtime="20171005 18:45:27.477"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.268" endtime="20171005 18:45:27.477"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.267" endtime="20171005 18:45:27.477"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:27.478" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171005 18:45:27.477" endtime="20171005 18:45:27.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:27.478" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:27.478" endtime="20171005 18:45:27.478"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.479" endtime="20171005 18:45:27.479"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:27.481" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20171005 18:45:27.480" endtime="20171005 18:45:27.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:27.482" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171005 18:45:27.482" endtime="20171005 18:45:27.482"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.481" endtime="20171005 18:45:27.482"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.479" endtime="20171005 18:45:27.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:27.749" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 18:45:27.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.482" endtime="20171005 18:45:27.749"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:27.750" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:27.750" endtime="20171005 18:45:27.750"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:27.751" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:27.751" endtime="20171005 18:45:27.751"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.750" endtime="20171005 18:45:27.751"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.749" endtime="20171005 18:45:27.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:27.752" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:27.752" endtime="20171005 18:45:27.752"></status>
</kw>
<msg timestamp="20171005 18:45:27.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.266" endtime="20171005 18:45:27.752"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:27.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.753" endtime="20171005 18:45:27.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 18:45:27.754" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:27.754" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:27.754" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:27.753" endtime="20171005 18:45:27.754"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.264" endtime="20171005 18:45:27.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:27.754" endtime="20171005 18:45:27.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:27.761" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:27.760" endtime="20171005 18:45:27.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:27.762" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:27.761" endtime="20171005 18:45:27.762"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:27.762" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:27.762" endtime="20171005 18:45:27.762"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:27.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:27.763" endtime="20171005 18:45:27.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:28.489" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:27.764" endtime="20171005 18:45:28.489"></status>
</kw>
<msg timestamp="20171005 18:45:28.489" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:28.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.763" endtime="20171005 18:45:28.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:28.490" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:28.490" endtime="20171005 18:45:28.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:28.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:28.490" endtime="20171005 18:45:28.491"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.760" endtime="20171005 18:45:28.491"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.759" endtime="20171005 18:45:28.491"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.759" endtime="20171005 18:45:28.491"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:28.492" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:45:28.491" endtime="20171005 18:45:28.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:28.494" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:28.493" endtime="20171005 18:45:28.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:28.495" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:28.495" endtime="20171005 18:45:28.495"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.494" endtime="20171005 18:45:28.495"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.493" endtime="20171005 18:45:28.495"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.492" endtime="20171005 18:45:28.495"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:28.697" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:45:28.697" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:28.496" endtime="20171005 18:45:28.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:28.700" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:28.699" endtime="20171005 18:45:28.700"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:28.701" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:28.700" endtime="20171005 18:45:28.701"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.700" endtime="20171005 18:45:28.701"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.698" endtime="20171005 18:45:28.701"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.698" endtime="20171005 18:45:28.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:28.701" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:28.701" endtime="20171005 18:45:28.701"></status>
</kw>
<msg timestamp="20171005 18:45:28.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:27.758" endtime="20171005 18:45:28.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:28.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:28.702" endtime="20171005 18:45:28.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:28.703" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:28.703" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:28.703" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:28.703" endtime="20171005 18:45:28.703"></status>
</kw>
<msg timestamp="20171005 18:45:28.703" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:45:27.757" endtime="20171005 18:45:28.703"></status>
</kw>
<msg timestamp="20171005 18:45:28.704" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:45:27.757" endtime="20171005 18:45:28.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:28.704" endtime="20171005 18:45:28.704"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.757" endtime="20171005 18:45:28.704"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:28.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:28.709" endtime="20171005 18:45:28.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:28.711" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:28.710" endtime="20171005 18:45:28.711"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:28.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:28.711" endtime="20171005 18:45:28.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:28.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:28.712" endtime="20171005 18:45:28.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:28.714" endtime="20171005 18:45:29.017"></status>
</kw>
<msg timestamp="20171005 18:45:29.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:29.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:28.713" endtime="20171005 18:45:29.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.018" endtime="20171005 18:45:29.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.018" endtime="20171005 18:45:29.019"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.708" endtime="20171005 18:45:29.019"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.708" endtime="20171005 18:45:29.019"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:28.707" endtime="20171005 18:45:29.019"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:29.020" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20171005 18:45:29.019" endtime="20171005 18:45:29.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:29.022" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:29.021" endtime="20171005 18:45:29.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:29.023" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:29.023" endtime="20171005 18:45:29.023"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.022" endtime="20171005 18:45:29.023"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.021" endtime="20171005 18:45:29.023"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.020" endtime="20171005 18:45:29.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:29.272" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171005 18:45:29.273" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.024" endtime="20171005 18:45:29.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:29.274" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:29.274" endtime="20171005 18:45:29.275"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:29.276" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:29.275" endtime="20171005 18:45:29.276"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.275" endtime="20171005 18:45:29.276"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.273" endtime="20171005 18:45:29.276"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.273" endtime="20171005 18:45:29.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:29.276" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:29.276" endtime="20171005 18:45:29.277"></status>
</kw>
<msg timestamp="20171005 18:45:29.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:28.706" endtime="20171005 18:45:29.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.277" endtime="20171005 18:45:29.277"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:29.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:29.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:29.278" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:29.278" endtime="20171005 18:45:29.278"></status>
</kw>
<msg timestamp="20171005 18:45:29.279" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20171005 18:45:28.705" endtime="20171005 18:45:29.279"></status>
</kw>
<msg timestamp="20171005 18:45:29.279" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20171005 18:45:28.705" endtime="20171005 18:45:29.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:29.279" endtime="20171005 18:45:29.279"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.756" endtime="20171005 18:45:29.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.756" endtime="20171005 18:45:29.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.755" endtime="20171005 18:45:29.280"></status>
</kw>
<msg timestamp="20171005 18:45:29.280" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:45:27.755" endtime="20171005 18:45:29.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:29.280" endtime="20171005 18:45:29.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:27.262" endtime="20171005 18:45:29.281"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171005 18:45:29.282" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20171005 18:45:29.281" endtime="20171005 18:45:29.282"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:29.283" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20171005 18:45:29.283" endtime="20171005 18:45:29.283"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:29.286" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:29.285" endtime="20171005 18:45:29.286"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:29.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:29.286" endtime="20171005 18:45:29.287"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:29.287" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:29.287" endtime="20171005 18:45:29.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:29.288" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:29.287" endtime="20171005 18:45:29.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:29.289" endtime="20171005 18:45:29.705"></status>
</kw>
<msg timestamp="20171005 18:45:29.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:29.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.288" endtime="20171005 18:45:29.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.706" endtime="20171005 18:45:29.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:29.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.707" endtime="20171005 18:45:29.707"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.285" endtime="20171005 18:45:29.707"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.284" endtime="20171005 18:45:29.707"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.284" endtime="20171005 18:45:29.707"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:29.708" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20171005 18:45:29.708" endtime="20171005 18:45:29.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:29.709" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:29.708" endtime="20171005 18:45:29.709"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:29.709" endtime="20171005 18:45:29.709"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:29.711" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20171005 18:45:29.710" endtime="20171005 18:45:29.711"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:29.712" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20171005 18:45:29.712" endtime="20171005 18:45:29.712"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.711" endtime="20171005 18:45:29.712"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.709" endtime="20171005 18:45:29.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:30.312" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171005 18:45:30.313" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.712" endtime="20171005 18:45:30.313"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:30.314" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:30.313" endtime="20171005 18:45:30.314"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:30.315" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:30.315" endtime="20171005 18:45:30.315"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:30.314" endtime="20171005 18:45:30.315"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:30.313" endtime="20171005 18:45:30.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:30.316" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:30.315" endtime="20171005 18:45:30.316"></status>
</kw>
<msg timestamp="20171005 18:45:30.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:29.283" endtime="20171005 18:45:30.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:30.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:30.316" endtime="20171005 18:45:30.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171005 18:45:30.317" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:30.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:30.318" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:30.317" endtime="20171005 18:45:30.318"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:29.282" endtime="20171005 18:45:30.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:45:30.318" endtime="20171005 18:45:30.319"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:30.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:30.326" endtime="20171005 18:45:30.326"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:30.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:30.327" endtime="20171005 18:45:30.327"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:30.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:30.328" endtime="20171005 18:45:30.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:30.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:30.329" endtime="20171005 18:45:30.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:32.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:30.330" endtime="20171005 18:45:32.465"></status>
</kw>
<msg timestamp="20171005 18:45:32.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:32.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:30.330" endtime="20171005 18:45:32.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:32.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:32.465" endtime="20171005 18:45:32.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:32.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:32.466" endtime="20171005 18:45:32.466"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:30.325" endtime="20171005 18:45:32.467"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:30.324" endtime="20171005 18:45:32.467"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:30.323" endtime="20171005 18:45:32.467"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:32.467" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:45:32.467" endtime="20171005 18:45:32.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:32.470" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:32.469" endtime="20171005 18:45:32.470"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:32.471" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:32.470" endtime="20171005 18:45:32.471"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:32.470" endtime="20171005 18:45:32.471"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:32.468" endtime="20171005 18:45:32.471"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:32.468" endtime="20171005 18:45:32.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:42.481" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg timestamp="20171005 18:45:46.554" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:45:46.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:32.471" endtime="20171005 18:45:46.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:46.557" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:46.557" endtime="20171005 18:45:46.557"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:46.558" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:46.558" endtime="20171005 18:45:46.558"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:46.557" endtime="20171005 18:45:46.558"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:46.556" endtime="20171005 18:45:46.558"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:46.555" endtime="20171005 18:45:46.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:46.559" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:46.559" endtime="20171005 18:45:46.559"></status>
</kw>
<msg timestamp="20171005 18:45:46.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:30.322" endtime="20171005 18:45:46.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:46.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:46.560" endtime="20171005 18:45:46.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:46.561" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:46.561" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:46.561" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:46.560" endtime="20171005 18:45:46.561"></status>
</kw>
<msg timestamp="20171005 18:45:46.561" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:45:30.321" endtime="20171005 18:45:46.561"></status>
</kw>
<msg timestamp="20171005 18:45:46.561" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:45:30.321" endtime="20171005 18:45:46.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:45:46.562" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:45:46.562" endtime="20171005 18:45:46.562"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:30.320" endtime="20171005 18:45:46.562"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:30.320" endtime="20171005 18:45:46.562"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:45:56.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:45:56.568" endtime="20171005 18:45:56.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:45:56.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:45:56.569" endtime="20171005 18:45:56.570"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:45:56.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:45:56.570" endtime="20171005 18:45:56.571"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:45:56.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:45:56.571" endtime="20171005 18:45:56.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:45:57.335" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:45:56.573" endtime="20171005 18:45:57.335"></status>
</kw>
<msg timestamp="20171005 18:45:57.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:45:57.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:56.572" endtime="20171005 18:45:57.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:45:57.336" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:57.336" endtime="20171005 18:45:57.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:57.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:57.337" endtime="20171005 18:45:57.337"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:56.567" endtime="20171005 18:45:57.337"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:56.566" endtime="20171005 18:45:57.337"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:56.565" endtime="20171005 18:45:57.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:45:57.338" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:45:57.338" endtime="20171005 18:45:57.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:57.340" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:57.340" endtime="20171005 18:45:57.340"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:57.341" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:45:57.341" endtime="20171005 18:45:57.341"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:57.340" endtime="20171005 18:45:57.341"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:57.339" endtime="20171005 18:45:57.342"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:57.338" endtime="20171005 18:45:57.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:45:57.765" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:45:57.766" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:57.342" endtime="20171005 18:45:57.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:45:57.767" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:57.767" endtime="20171005 18:45:57.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:45:57.768" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:45:57.768" endtime="20171005 18:45:57.768"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:57.768" endtime="20171005 18:45:57.769"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:57.766" endtime="20171005 18:45:57.769"></status>
</kw>
<status status="PASS" starttime="20171005 18:45:57.766" endtime="20171005 18:45:57.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:45:57.769" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:45:57.769" endtime="20171005 18:45:57.769"></status>
</kw>
<msg timestamp="20171005 18:45:57.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:45:56.565" endtime="20171005 18:45:57.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:45:57.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:45:57.770" endtime="20171005 18:45:57.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:45:57.771" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:45:57.771" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:45:57.771" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:45:57.771" endtime="20171005 18:45:57.771"></status>
</kw>
<msg timestamp="20171005 18:45:57.771" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:45:56.564" endtime="20171005 18:45:57.771"></status>
</kw>
<msg timestamp="20171005 18:45:57.772" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:45:56.564" endtime="20171005 18:45:57.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:45:57.772" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:45:57.772" endtime="20171005 18:45:57.772"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:56.563" endtime="20171005 18:45:57.773"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:56.563" endtime="20171005 18:45:57.773"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:46:07.778" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:46:07.778" endtime="20171005 18:46:07.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:46:07.779" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:46:07.779" endtime="20171005 18:46:07.780"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:46:07.780" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:46:07.780" endtime="20171005 18:46:07.780"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:46:07.781" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:46:07.780" endtime="20171005 18:46:07.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:46:08.003" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:46:07.782" endtime="20171005 18:46:08.004"></status>
</kw>
<msg timestamp="20171005 18:46:08.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:46:08.004" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:07.781" endtime="20171005 18:46:08.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:46:08.004" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:08.004" endtime="20171005 18:46:08.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:08.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:08.005" endtime="20171005 18:46:08.005"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:07.778" endtime="20171005 18:46:08.005"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:07.777" endtime="20171005 18:46:08.005"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:07.776" endtime="20171005 18:46:08.006"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:46:08.006" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:46:08.006" endtime="20171005 18:46:08.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:08.008" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:08.008" endtime="20171005 18:46:08.008"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:08.010" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:08.009" endtime="20171005 18:46:08.010"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:08.008" endtime="20171005 18:46:08.010"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:08.007" endtime="20171005 18:46:08.010"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:08.006" endtime="20171005 18:46:08.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:46:08.077" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:46:08.077" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:08.011" endtime="20171005 18:46:08.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:08.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:08.078" endtime="20171005 18:46:08.082"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:08.083" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:08.082" endtime="20171005 18:46:08.083"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:08.082" endtime="20171005 18:46:08.083"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:08.078" endtime="20171005 18:46:08.083"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:08.077" endtime="20171005 18:46:08.083"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:46:08.083" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:46:08.083" endtime="20171005 18:46:08.084"></status>
</kw>
<msg timestamp="20171005 18:46:08.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:07.775" endtime="20171005 18:46:08.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:08.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:08.084" endtime="20171005 18:46:08.084"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:46:08.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:46:08.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:46:08.085" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:46:08.085" endtime="20171005 18:46:08.085"></status>
</kw>
<msg timestamp="20171005 18:46:08.086" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:46:07.775" endtime="20171005 18:46:08.086"></status>
</kw>
<msg timestamp="20171005 18:46:08.086" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:46:07.774" endtime="20171005 18:46:08.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:46:08.087" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:46:08.086" endtime="20171005 18:46:08.087"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:07.774" endtime="20171005 18:46:08.087"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:07.773" endtime="20171005 18:46:08.087"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:46:18.093" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:46:18.092" endtime="20171005 18:46:18.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:46:18.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:46:18.093" endtime="20171005 18:46:18.094"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:46:18.094" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:46:18.094" endtime="20171005 18:46:18.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:46:18.095" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:46:18.095" endtime="20171005 18:46:18.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:46:18.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:46:18.096" endtime="20171005 18:46:18.575"></status>
</kw>
<msg timestamp="20171005 18:46:18.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:46:18.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:18.095" endtime="20171005 18:46:18.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:46:18.576" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:18.576" endtime="20171005 18:46:18.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:18.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:18.577" endtime="20171005 18:46:18.577"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:18.092" endtime="20171005 18:46:18.577"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:18.091" endtime="20171005 18:46:18.577"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:18.091" endtime="20171005 18:46:18.577"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:46:18.578" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:46:18.578" endtime="20171005 18:46:18.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:18.580" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:18.579" endtime="20171005 18:46:18.580"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:18.581" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:18.581" endtime="20171005 18:46:18.581"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:18.580" endtime="20171005 18:46:18.581"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:18.579" endtime="20171005 18:46:18.581"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:18.578" endtime="20171005 18:46:18.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:46:19.699" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:46:19.699" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:18.582" endtime="20171005 18:46:19.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:19.701" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:19.701" endtime="20171005 18:46:19.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:19.702" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:19.702" endtime="20171005 18:46:19.702"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:19.701" endtime="20171005 18:46:19.702"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:19.700" endtime="20171005 18:46:19.702"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:19.700" endtime="20171005 18:46:19.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:46:19.703" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:46:19.703" endtime="20171005 18:46:19.703"></status>
</kw>
<msg timestamp="20171005 18:46:19.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:18.090" endtime="20171005 18:46:19.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:19.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:19.703" endtime="20171005 18:46:19.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:46:19.704" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:46:19.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:46:19.705" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:46:19.704" endtime="20171005 18:46:19.705"></status>
</kw>
<msg timestamp="20171005 18:46:19.705" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:46:18.089" endtime="20171005 18:46:19.705"></status>
</kw>
<msg timestamp="20171005 18:46:19.705" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:46:18.089" endtime="20171005 18:46:19.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:46:19.706" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:46:19.706" endtime="20171005 18:46:19.706"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:18.088" endtime="20171005 18:46:19.706"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:18.088" endtime="20171005 18:46:19.707"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:46:29.713" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:46:29.712" endtime="20171005 18:46:29.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:46:29.714" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:46:29.713" endtime="20171005 18:46:29.714"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:46:29.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:46:29.714" endtime="20171005 18:46:29.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:46:29.715" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:46:29.715" endtime="20171005 18:46:29.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:46:29.934" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:46:29.716" endtime="20171005 18:46:29.934"></status>
</kw>
<msg timestamp="20171005 18:46:29.934" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:46:29.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:29.715" endtime="20171005 18:46:29.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:46:29.935" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:29.934" endtime="20171005 18:46:29.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:29.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:29.935" endtime="20171005 18:46:29.936"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:29.711" endtime="20171005 18:46:29.936"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:29.711" endtime="20171005 18:46:29.936"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:29.710" endtime="20171005 18:46:29.936"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:46:29.937" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:46:29.936" endtime="20171005 18:46:29.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:29.939" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:29.938" endtime="20171005 18:46:29.940"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:29.941" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:29.940" endtime="20171005 18:46:29.941"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:29.940" endtime="20171005 18:46:29.941"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:29.937" endtime="20171005 18:46:29.941"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:29.937" endtime="20171005 18:46:29.941"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:46:30.025" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:46:30.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:29.941" endtime="20171005 18:46:30.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:30.027" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:30.027" endtime="20171005 18:46:30.027"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:30.029" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:30.028" endtime="20171005 18:46:30.029"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:30.027" endtime="20171005 18:46:30.029"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:30.026" endtime="20171005 18:46:30.029"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:30.026" endtime="20171005 18:46:30.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:46:30.029" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:46:30.029" endtime="20171005 18:46:30.030"></status>
</kw>
<msg timestamp="20171005 18:46:30.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:29.709" endtime="20171005 18:46:30.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:30.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:30.030" endtime="20171005 18:46:30.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:46:30.031" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:46:30.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:46:30.031" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:46:30.031" endtime="20171005 18:46:30.031"></status>
</kw>
<msg timestamp="20171005 18:46:30.032" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:46:29.709" endtime="20171005 18:46:30.032"></status>
</kw>
<msg timestamp="20171005 18:46:30.032" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:46:29.708" endtime="20171005 18:46:30.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:46:30.033" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:46:30.032" endtime="20171005 18:46:30.033"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:29.708" endtime="20171005 18:46:30.033"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:29.707" endtime="20171005 18:46:30.033"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:46:40.039" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:46:40.039" endtime="20171005 18:46:40.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:46:40.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:46:40.040" endtime="20171005 18:46:40.041"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:46:40.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:46:40.041" endtime="20171005 18:46:40.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:46:40.043" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:46:40.042" endtime="20171005 18:46:40.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:46:40.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:46:40.044" endtime="20171005 18:46:40.239"></status>
</kw>
<msg timestamp="20171005 18:46:40.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:46:40.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:40.043" endtime="20171005 18:46:40.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:46:40.240" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:40.239" endtime="20171005 18:46:40.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:40.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:40.241" endtime="20171005 18:46:40.241"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.038" endtime="20171005 18:46:40.241"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.037" endtime="20171005 18:46:40.242"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.036" endtime="20171005 18:46:40.242"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:46:40.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:46:40.242" endtime="20171005 18:46:40.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:40.246" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:40.245" endtime="20171005 18:46:40.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:40.248" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:40.248" endtime="20171005 18:46:40.248"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.247" endtime="20171005 18:46:40.248"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.244" endtime="20171005 18:46:40.248"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.243" endtime="20171005 18:46:40.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:46:40.331" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:46:40.331" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:40.249" endtime="20171005 18:46:40.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:40.333" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:40.333" endtime="20171005 18:46:40.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:40.334" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:40.334" endtime="20171005 18:46:40.334"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.333" endtime="20171005 18:46:40.334"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.332" endtime="20171005 18:46:40.334"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:40.332" endtime="20171005 18:46:40.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:46:40.335" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:46:40.335" endtime="20171005 18:46:40.335"></status>
</kw>
<msg timestamp="20171005 18:46:40.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:40.035" endtime="20171005 18:46:40.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:40.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:40.335" endtime="20171005 18:46:40.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:46:40.336" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:46:40.337" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:46:40.337" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:46:40.336" endtime="20171005 18:46:40.337"></status>
</kw>
<msg timestamp="20171005 18:46:40.337" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:46:40.035" endtime="20171005 18:46:40.337"></status>
</kw>
<msg timestamp="20171005 18:46:40.337" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:46:40.034" endtime="20171005 18:46:40.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:46:40.338" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:46:40.338" endtime="20171005 18:46:40.338"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:40.034" endtime="20171005 18:46:40.338"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:40.033" endtime="20171005 18:46:40.338"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:46:50.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:46:50.344" endtime="20171005 18:46:50.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:46:50.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:46:50.345" endtime="20171005 18:46:50.345"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:46:50.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:46:50.345" endtime="20171005 18:46:50.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:46:50.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:46:50.346" endtime="20171005 18:46:50.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:46:50.524" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:46:50.347" endtime="20171005 18:46:50.524"></status>
</kw>
<msg timestamp="20171005 18:46:50.524" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:46:50.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:50.347" endtime="20171005 18:46:50.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:46:50.525" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:50.525" endtime="20171005 18:46:50.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:50.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:50.525" endtime="20171005 18:46:50.526"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.343" endtime="20171005 18:46:50.526"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.342" endtime="20171005 18:46:50.526"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.342" endtime="20171005 18:46:50.526"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:46:50.527" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:46:50.526" endtime="20171005 18:46:50.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:50.529" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:50.528" endtime="20171005 18:46:50.529"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:50.530" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:46:50.530" endtime="20171005 18:46:50.530"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.529" endtime="20171005 18:46:50.530"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.527" endtime="20171005 18:46:50.530"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.527" endtime="20171005 18:46:50.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:46:50.601" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:46:50.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:50.531" endtime="20171005 18:46:50.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:46:50.603" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:50.603" endtime="20171005 18:46:50.603"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:46:50.604" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:46:50.604" endtime="20171005 18:46:50.605"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.603" endtime="20171005 18:46:50.605"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.602" endtime="20171005 18:46:50.605"></status>
</kw>
<status status="PASS" starttime="20171005 18:46:50.602" endtime="20171005 18:46:50.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:46:50.605" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:46:50.605" endtime="20171005 18:46:50.605"></status>
</kw>
<msg timestamp="20171005 18:46:50.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:46:50.341" endtime="20171005 18:46:50.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:46:50.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:46:50.606" endtime="20171005 18:46:50.606"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:46:50.607" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:46:50.607" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:46:50.607" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:46:50.607" endtime="20171005 18:46:50.607"></status>
</kw>
<msg timestamp="20171005 18:46:50.607" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:46:50.340" endtime="20171005 18:46:50.607"></status>
</kw>
<msg timestamp="20171005 18:46:50.608" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:46:50.340" endtime="20171005 18:46:50.608"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:46:50.608" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:46:50.608" endtime="20171005 18:46:50.608"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:50.340" endtime="20171005 18:46:50.609"></status>
</kw>
<status status="FAIL" starttime="20171005 18:46:50.339" endtime="20171005 18:46:50.609"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:47:00.614" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:47:00.614" endtime="20171005 18:47:00.614"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:47:00.615" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:47:00.615" endtime="20171005 18:47:00.615"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:47:00.616" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:47:00.615" endtime="20171005 18:47:00.616"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:47:00.616" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:47:00.616" endtime="20171005 18:47:00.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:47:00.809" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:47:00.617" endtime="20171005 18:47:00.809"></status>
</kw>
<msg timestamp="20171005 18:47:00.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:47:00.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:00.617" endtime="20171005 18:47:00.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:47:00.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:00.810" endtime="20171005 18:47:00.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:00.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:00.811" endtime="20171005 18:47:00.811"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.613" endtime="20171005 18:47:00.811"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.613" endtime="20171005 18:47:00.811"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.612" endtime="20171005 18:47:00.811"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:47:00.812" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:47:00.812" endtime="20171005 18:47:00.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:00.814" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:00.813" endtime="20171005 18:47:00.814"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:00.815" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:00.815" endtime="20171005 18:47:00.815"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.814" endtime="20171005 18:47:00.815"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.813" endtime="20171005 18:47:00.815"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.812" endtime="20171005 18:47:00.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:47:00.878" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:47:00.878" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:00.816" endtime="20171005 18:47:00.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:00.881" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:00.880" endtime="20171005 18:47:00.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:00.882" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:00.882" endtime="20171005 18:47:00.882"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.881" endtime="20171005 18:47:00.882"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.880" endtime="20171005 18:47:00.882"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:00.879" endtime="20171005 18:47:00.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:47:00.883" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:47:00.883" endtime="20171005 18:47:00.883"></status>
</kw>
<msg timestamp="20171005 18:47:00.883" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:00.611" endtime="20171005 18:47:00.883"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:00.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:00.884" endtime="20171005 18:47:00.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:47:00.885" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:47:00.886" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:47:00.886" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:47:00.885" endtime="20171005 18:47:00.886"></status>
</kw>
<msg timestamp="20171005 18:47:00.886" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:47:00.611" endtime="20171005 18:47:00.886"></status>
</kw>
<msg timestamp="20171005 18:47:00.887" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:47:00.610" endtime="20171005 18:47:00.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:47:00.888" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:47:00.887" endtime="20171005 18:47:00.888"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:00.610" endtime="20171005 18:47:00.888"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:00.609" endtime="20171005 18:47:00.888"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:47:10.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:47:10.894" endtime="20171005 18:47:10.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:47:10.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:47:10.895" endtime="20171005 18:47:10.896"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:47:10.896" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:47:10.896" endtime="20171005 18:47:10.896"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:47:10.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:47:10.897" endtime="20171005 18:47:10.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:47:11.087" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:47:10.898" endtime="20171005 18:47:11.088"></status>
</kw>
<msg timestamp="20171005 18:47:11.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:47:11.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:10.897" endtime="20171005 18:47:11.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:47:11.089" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:11.088" endtime="20171005 18:47:11.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:11.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:11.089" endtime="20171005 18:47:11.089"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:10.893" endtime="20171005 18:47:11.090"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:10.892" endtime="20171005 18:47:11.090"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:10.891" endtime="20171005 18:47:11.090"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:47:11.090" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:47:11.090" endtime="20171005 18:47:11.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:11.093" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:11.092" endtime="20171005 18:47:11.093"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:11.094" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:11.094" endtime="20171005 18:47:11.094"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:11.093" endtime="20171005 18:47:11.094"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:11.091" endtime="20171005 18:47:11.094"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:11.091" endtime="20171005 18:47:11.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:47:11.182" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:47:11.182" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:11.095" endtime="20171005 18:47:11.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:11.184" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:11.183" endtime="20171005 18:47:11.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:11.185" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:11.185" endtime="20171005 18:47:11.185"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:11.184" endtime="20171005 18:47:11.185"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:11.183" endtime="20171005 18:47:11.185"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:11.182" endtime="20171005 18:47:11.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:47:11.187" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:47:11.186" endtime="20171005 18:47:11.187"></status>
</kw>
<msg timestamp="20171005 18:47:11.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:10.891" endtime="20171005 18:47:11.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:11.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:11.187" endtime="20171005 18:47:11.188"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:47:11.188" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:47:11.188" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:47:11.188" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:47:11.188" endtime="20171005 18:47:11.188"></status>
</kw>
<msg timestamp="20171005 18:47:11.189" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:47:10.890" endtime="20171005 18:47:11.189"></status>
</kw>
<msg timestamp="20171005 18:47:11.189" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:47:10.890" endtime="20171005 18:47:11.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:47:11.190" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:47:11.189" endtime="20171005 18:47:11.190"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:10.889" endtime="20171005 18:47:11.190"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:10.889" endtime="20171005 18:47:11.190"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:47:21.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:47:21.195" endtime="20171005 18:47:21.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:47:21.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:47:21.196" endtime="20171005 18:47:21.196"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:47:21.197" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:47:21.197" endtime="20171005 18:47:21.197"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:47:21.198" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:47:21.197" endtime="20171005 18:47:21.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:47:21.405" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:47:21.199" endtime="20171005 18:47:21.405"></status>
</kw>
<msg timestamp="20171005 18:47:21.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:47:21.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:21.198" endtime="20171005 18:47:21.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:47:21.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:21.406" endtime="20171005 18:47:21.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:21.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:21.406" endtime="20171005 18:47:21.407"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.195" endtime="20171005 18:47:21.407"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.194" endtime="20171005 18:47:21.407"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.193" endtime="20171005 18:47:21.407"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:47:21.408" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:47:21.408" endtime="20171005 18:47:21.408"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:21.410" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:21.409" endtime="20171005 18:47:21.410"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:21.411" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:21.411" endtime="20171005 18:47:21.411"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.410" endtime="20171005 18:47:21.411"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.409" endtime="20171005 18:47:21.411"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.408" endtime="20171005 18:47:21.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:47:21.487" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:47:21.487" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:21.412" endtime="20171005 18:47:21.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:21.489" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:21.488" endtime="20171005 18:47:21.489"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:21.490" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:21.489" endtime="20171005 18:47:21.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.489" endtime="20171005 18:47:21.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.488" endtime="20171005 18:47:21.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:21.487" endtime="20171005 18:47:21.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:47:21.491" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:47:21.490" endtime="20171005 18:47:21.491"></status>
</kw>
<msg timestamp="20171005 18:47:21.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:21.193" endtime="20171005 18:47:21.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:21.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:21.491" endtime="20171005 18:47:21.492"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:47:21.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:47:21.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:47:21.492" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:47:21.492" endtime="20171005 18:47:21.492"></status>
</kw>
<msg timestamp="20171005 18:47:21.493" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:47:21.192" endtime="20171005 18:47:21.493"></status>
</kw>
<msg timestamp="20171005 18:47:21.493" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:47:21.192" endtime="20171005 18:47:21.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:47:21.494" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:47:21.493" endtime="20171005 18:47:21.494"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:21.191" endtime="20171005 18:47:21.494"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:21.191" endtime="20171005 18:47:21.494"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:47:31.500" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:47:31.500" endtime="20171005 18:47:31.500"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:47:31.501" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:47:31.501" endtime="20171005 18:47:31.501"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:47:31.502" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:47:31.501" endtime="20171005 18:47:31.502"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:47:31.502" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:47:31.502" endtime="20171005 18:47:31.502"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:47:31.722" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:47:31.503" endtime="20171005 18:47:31.722"></status>
</kw>
<msg timestamp="20171005 18:47:31.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:47:31.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:31.503" endtime="20171005 18:47:31.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:47:31.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:31.723" endtime="20171005 18:47:31.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:31.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:31.723" endtime="20171005 18:47:31.724"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.499" endtime="20171005 18:47:31.724"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.498" endtime="20171005 18:47:31.724"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.498" endtime="20171005 18:47:31.724"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:47:31.725" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:47:31.724" endtime="20171005 18:47:31.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:31.728" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:31.727" endtime="20171005 18:47:31.728"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:31.729" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:31.729" endtime="20171005 18:47:31.730"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.728" endtime="20171005 18:47:31.730"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.726" endtime="20171005 18:47:31.730"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.725" endtime="20171005 18:47:31.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:47:31.802" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:47:31.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:31.730" endtime="20171005 18:47:31.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:31.804" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:31.804" endtime="20171005 18:47:31.804"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:31.809" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:31.808" endtime="20171005 18:47:31.809"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.805" endtime="20171005 18:47:31.809"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.803" endtime="20171005 18:47:31.809"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:31.803" endtime="20171005 18:47:31.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:47:31.809" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:47:31.809" endtime="20171005 18:47:31.809"></status>
</kw>
<msg timestamp="20171005 18:47:31.810" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:31.497" endtime="20171005 18:47:31.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:31.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:31.810" endtime="20171005 18:47:31.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:47:31.811" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:47:31.811" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:47:31.811" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:47:31.811" endtime="20171005 18:47:31.811"></status>
</kw>
<msg timestamp="20171005 18:47:31.812" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:47:31.496" endtime="20171005 18:47:31.812"></status>
</kw>
<msg timestamp="20171005 18:47:31.812" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:47:31.496" endtime="20171005 18:47:31.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:47:31.813" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:47:31.812" endtime="20171005 18:47:31.813"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:31.495" endtime="20171005 18:47:31.813"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:31.495" endtime="20171005 18:47:31.813"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:47:41.818" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:47:41.818" endtime="20171005 18:47:41.819"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:47:41.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:47:41.819" endtime="20171005 18:47:41.819"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:47:41.820" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:47:41.819" endtime="20171005 18:47:41.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:47:41.820" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:47:41.820" endtime="20171005 18:47:41.821"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:47:42.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:47:41.821" endtime="20171005 18:47:42.059"></status>
</kw>
<msg timestamp="20171005 18:47:42.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:47:42.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:41.821" endtime="20171005 18:47:42.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:47:42.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:42.059" endtime="20171005 18:47:42.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:42.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:42.060" endtime="20171005 18:47:42.061"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:41.817" endtime="20171005 18:47:42.061"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:41.817" endtime="20171005 18:47:42.061"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:41.816" endtime="20171005 18:47:42.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:47:42.062" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:47:42.061" endtime="20171005 18:47:42.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:42.064" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:42.063" endtime="20171005 18:47:42.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:42.065" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:42.064" endtime="20171005 18:47:42.065"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:42.064" endtime="20171005 18:47:42.065"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:42.062" endtime="20171005 18:47:42.065"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:42.062" endtime="20171005 18:47:42.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:47:42.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:47:42.128" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:42.065" endtime="20171005 18:47:42.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:42.130" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:42.130" endtime="20171005 18:47:42.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:42.131" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:42.131" endtime="20171005 18:47:42.131"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:42.130" endtime="20171005 18:47:42.132"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:42.129" endtime="20171005 18:47:42.132"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:42.129" endtime="20171005 18:47:42.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:47:42.132" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:47:42.132" endtime="20171005 18:47:42.132"></status>
</kw>
<msg timestamp="20171005 18:47:42.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:41.816" endtime="20171005 18:47:42.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:42.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:42.133" endtime="20171005 18:47:42.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:47:42.134" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:47:42.134" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:47:42.134" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:47:42.134" endtime="20171005 18:47:42.134"></status>
</kw>
<msg timestamp="20171005 18:47:42.134" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:47:41.815" endtime="20171005 18:47:42.134"></status>
</kw>
<msg timestamp="20171005 18:47:42.135" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:47:41.815" endtime="20171005 18:47:42.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:47:42.135" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:47:42.135" endtime="20171005 18:47:42.135"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:41.814" endtime="20171005 18:47:42.136"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:41.814" endtime="20171005 18:47:42.136"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:47:52.141" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:47:52.140" endtime="20171005 18:47:52.141"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:47:52.142" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:47:52.141" endtime="20171005 18:47:52.142"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:47:52.143" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:47:52.142" endtime="20171005 18:47:52.143"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:47:52.143" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:47:52.143" endtime="20171005 18:47:52.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:47:52.384" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:47:52.144" endtime="20171005 18:47:52.384"></status>
</kw>
<msg timestamp="20171005 18:47:52.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:47:52.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:52.144" endtime="20171005 18:47:52.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:47:52.385" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:52.384" endtime="20171005 18:47:52.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:52.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:52.385" endtime="20171005 18:47:52.385"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.139" endtime="20171005 18:47:52.386"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.139" endtime="20171005 18:47:52.386"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.138" endtime="20171005 18:47:52.386"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:47:52.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:47:52.386" endtime="20171005 18:47:52.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:52.388" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:52.388" endtime="20171005 18:47:52.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:52.389" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:47:52.389" endtime="20171005 18:47:52.389"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.389" endtime="20171005 18:47:52.390"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.387" endtime="20171005 18:47:52.390"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.387" endtime="20171005 18:47:52.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:47:52.453" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:47:52.453" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:52.390" endtime="20171005 18:47:52.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:47:52.455" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:52.455" endtime="20171005 18:47:52.455"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:47:52.456" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:47:52.456" endtime="20171005 18:47:52.456"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.455" endtime="20171005 18:47:52.457"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.454" endtime="20171005 18:47:52.457"></status>
</kw>
<status status="PASS" starttime="20171005 18:47:52.454" endtime="20171005 18:47:52.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:47:52.457" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:47:52.457" endtime="20171005 18:47:52.457"></status>
</kw>
<msg timestamp="20171005 18:47:52.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:47:52.138" endtime="20171005 18:47:52.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:47:52.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:47:52.458" endtime="20171005 18:47:52.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:47:52.459" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:47:52.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:47:52.460" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:47:52.459" endtime="20171005 18:47:52.460"></status>
</kw>
<msg timestamp="20171005 18:47:52.460" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:47:52.137" endtime="20171005 18:47:52.460"></status>
</kw>
<msg timestamp="20171005 18:47:52.461" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:47:52.137" endtime="20171005 18:47:52.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:47:52.462" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:47:52.461" endtime="20171005 18:47:52.462"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:52.137" endtime="20171005 18:47:52.462"></status>
</kw>
<status status="FAIL" starttime="20171005 18:47:52.136" endtime="20171005 18:47:52.462"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:48:02.467" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:48:02.467" endtime="20171005 18:48:02.467"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:48:02.468" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:48:02.468" endtime="20171005 18:48:02.468"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:48:02.469" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:48:02.468" endtime="20171005 18:48:02.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:48:02.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:48:02.469" endtime="20171005 18:48:02.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:48:02.701" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:48:02.470" endtime="20171005 18:48:02.702"></status>
</kw>
<msg timestamp="20171005 18:48:02.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:48:02.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:02.470" endtime="20171005 18:48:02.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:48:02.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:02.702" endtime="20171005 18:48:02.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:02.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:02.703" endtime="20171005 18:48:02.703"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.466" endtime="20171005 18:48:02.703"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.466" endtime="20171005 18:48:02.704"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.465" endtime="20171005 18:48:02.704"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:48:02.704" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:48:02.704" endtime="20171005 18:48:02.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:02.706" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:02.706" endtime="20171005 18:48:02.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:02.707" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:02.707" endtime="20171005 18:48:02.707"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.707" endtime="20171005 18:48:02.708"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.705" endtime="20171005 18:48:02.708"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.705" endtime="20171005 18:48:02.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:48:02.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:48:02.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:02.708" endtime="20171005 18:48:02.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:02.773" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:02.772" endtime="20171005 18:48:02.773"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:02.774" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:02.774" endtime="20171005 18:48:02.774"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.773" endtime="20171005 18:48:02.774"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.772" endtime="20171005 18:48:02.774"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:02.771" endtime="20171005 18:48:02.774"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:48:02.775" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:48:02.775" endtime="20171005 18:48:02.775"></status>
</kw>
<msg timestamp="20171005 18:48:02.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:02.464" endtime="20171005 18:48:02.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:02.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:02.775" endtime="20171005 18:48:02.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:48:02.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:48:02.777" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:48:02.777" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:48:02.776" endtime="20171005 18:48:02.777"></status>
</kw>
<msg timestamp="20171005 18:48:02.777" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:48:02.464" endtime="20171005 18:48:02.777"></status>
</kw>
<msg timestamp="20171005 18:48:02.778" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:48:02.464" endtime="20171005 18:48:02.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:48:02.779" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:48:02.778" endtime="20171005 18:48:02.779"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:02.463" endtime="20171005 18:48:02.779"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:02.463" endtime="20171005 18:48:02.779"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:48:12.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:48:12.785" endtime="20171005 18:48:12.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:48:12.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:48:12.786" endtime="20171005 18:48:12.786"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:48:12.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:48:12.786" endtime="20171005 18:48:12.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:48:12.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:48:12.787" endtime="20171005 18:48:12.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:48:12.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:48:12.788" endtime="20171005 18:48:12.991"></status>
</kw>
<msg timestamp="20171005 18:48:12.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:48:12.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:12.788" endtime="20171005 18:48:12.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:48:12.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:12.992" endtime="20171005 18:48:12.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:12.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:12.993" endtime="20171005 18:48:12.993"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:12.784" endtime="20171005 18:48:12.993"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:12.783" endtime="20171005 18:48:12.993"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:12.782" endtime="20171005 18:48:12.994"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:48:12.994" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:48:12.994" endtime="20171005 18:48:12.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:12.998" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:12.997" endtime="20171005 18:48:12.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:12.999" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:12.999" endtime="20171005 18:48:12.999"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:12.998" endtime="20171005 18:48:12.999"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:12.996" endtime="20171005 18:48:12.999"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:12.995" endtime="20171005 18:48:12.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:48:13.075" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:48:13.075" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:13.000" endtime="20171005 18:48:13.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:13.077" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:13.076" endtime="20171005 18:48:13.077"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:13.078" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:13.077" endtime="20171005 18:48:13.078"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:13.077" endtime="20171005 18:48:13.078"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:13.076" endtime="20171005 18:48:13.078"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:13.075" endtime="20171005 18:48:13.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:48:13.079" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:48:13.079" endtime="20171005 18:48:13.079"></status>
</kw>
<msg timestamp="20171005 18:48:13.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:12.782" endtime="20171005 18:48:13.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:13.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:13.079" endtime="20171005 18:48:13.080"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:48:13.080" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:48:13.080" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:48:13.080" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:48:13.080" endtime="20171005 18:48:13.081"></status>
</kw>
<msg timestamp="20171005 18:48:13.081" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:48:12.781" endtime="20171005 18:48:13.081"></status>
</kw>
<msg timestamp="20171005 18:48:13.081" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:48:12.781" endtime="20171005 18:48:13.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:48:13.082" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:48:13.081" endtime="20171005 18:48:13.082"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:12.780" endtime="20171005 18:48:13.082"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:12.780" endtime="20171005 18:48:13.083"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:48:23.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:48:23.087" endtime="20171005 18:48:23.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:48:23.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:48:23.089" endtime="20171005 18:48:23.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:48:23.090" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:48:23.090" endtime="20171005 18:48:23.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:48:23.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:48:23.090" endtime="20171005 18:48:23.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:48:23.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:48:23.091" endtime="20171005 18:48:23.292"></status>
</kw>
<msg timestamp="20171005 18:48:23.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:48:23.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:23.091" endtime="20171005 18:48:23.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:48:23.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:23.293" endtime="20171005 18:48:23.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:23.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:23.294" endtime="20171005 18:48:23.294"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.087" endtime="20171005 18:48:23.294"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.086" endtime="20171005 18:48:23.294"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.086" endtime="20171005 18:48:23.294"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:48:23.295" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:48:23.295" endtime="20171005 18:48:23.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:23.297" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:23.296" endtime="20171005 18:48:23.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:23.298" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:23.298" endtime="20171005 18:48:23.298"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.297" endtime="20171005 18:48:23.298"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.296" endtime="20171005 18:48:23.298"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.295" endtime="20171005 18:48:23.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:48:23.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:48:23.365" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:23.299" endtime="20171005 18:48:23.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:23.367" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:23.367" endtime="20171005 18:48:23.367"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:23.368" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:23.368" endtime="20171005 18:48:23.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.367" endtime="20171005 18:48:23.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.366" endtime="20171005 18:48:23.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:23.366" endtime="20171005 18:48:23.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:48:23.369" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:48:23.369" endtime="20171005 18:48:23.369"></status>
</kw>
<msg timestamp="20171005 18:48:23.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:23.085" endtime="20171005 18:48:23.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:23.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:23.370" endtime="20171005 18:48:23.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:48:23.370" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:48:23.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:48:23.371" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:48:23.370" endtime="20171005 18:48:23.371"></status>
</kw>
<msg timestamp="20171005 18:48:23.371" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:48:23.085" endtime="20171005 18:48:23.371"></status>
</kw>
<msg timestamp="20171005 18:48:23.371" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:48:23.084" endtime="20171005 18:48:23.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:48:23.373" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:48:23.372" endtime="20171005 18:48:23.373"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:23.084" endtime="20171005 18:48:23.373"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:23.083" endtime="20171005 18:48:23.373"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:48:33.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:48:33.378" endtime="20171005 18:48:33.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:48:33.379" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:48:33.379" endtime="20171005 18:48:33.379"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:48:33.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:48:33.380" endtime="20171005 18:48:33.380"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:48:33.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:48:33.380" endtime="20171005 18:48:33.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:48:33.568" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:48:33.381" endtime="20171005 18:48:33.568"></status>
</kw>
<msg timestamp="20171005 18:48:33.568" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:48:33.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:33.381" endtime="20171005 18:48:33.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:48:33.569" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:33.568" endtime="20171005 18:48:33.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:33.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:33.569" endtime="20171005 18:48:33.570"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.377" endtime="20171005 18:48:33.570"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.377" endtime="20171005 18:48:33.570"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.376" endtime="20171005 18:48:33.570"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:48:33.570" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:48:33.570" endtime="20171005 18:48:33.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:33.573" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:33.572" endtime="20171005 18:48:33.573"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:33.574" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:33.573" endtime="20171005 18:48:33.574"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.573" endtime="20171005 18:48:33.574"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.571" endtime="20171005 18:48:33.574"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.571" endtime="20171005 18:48:33.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:48:33.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:48:33.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:33.574" endtime="20171005 18:48:33.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:33.641" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:33.640" endtime="20171005 18:48:33.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:33.642" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:33.641" endtime="20171005 18:48:33.642"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.641" endtime="20171005 18:48:33.642"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.640" endtime="20171005 18:48:33.642"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:33.639" endtime="20171005 18:48:33.642"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:48:33.643" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:48:33.643" endtime="20171005 18:48:33.643"></status>
</kw>
<msg timestamp="20171005 18:48:33.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:33.375" endtime="20171005 18:48:33.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:33.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:33.643" endtime="20171005 18:48:33.644"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:48:33.644" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:48:33.644" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:48:33.644" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:48:33.644" endtime="20171005 18:48:33.645"></status>
</kw>
<msg timestamp="20171005 18:48:33.645" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:48:33.375" endtime="20171005 18:48:33.645"></status>
</kw>
<msg timestamp="20171005 18:48:33.645" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:48:33.374" endtime="20171005 18:48:33.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:48:33.646" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:48:33.645" endtime="20171005 18:48:33.646"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:33.374" endtime="20171005 18:48:33.646"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:33.373" endtime="20171005 18:48:33.646"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:48:43.651" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:48:43.651" endtime="20171005 18:48:43.651"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:48:43.652" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:48:43.652" endtime="20171005 18:48:43.652"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:48:43.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:48:43.652" endtime="20171005 18:48:43.653"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:48:43.653" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:48:43.653" endtime="20171005 18:48:43.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:48:43.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:48:43.654" endtime="20171005 18:48:43.830"></status>
</kw>
<msg timestamp="20171005 18:48:43.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:48:43.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:43.654" endtime="20171005 18:48:43.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:48:43.831" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:43.830" endtime="20171005 18:48:43.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:43.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:43.831" endtime="20171005 18:48:43.832"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.650" endtime="20171005 18:48:43.832"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.650" endtime="20171005 18:48:43.832"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.649" endtime="20171005 18:48:43.832"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:48:43.832" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:48:43.832" endtime="20171005 18:48:43.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:43.835" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:43.834" endtime="20171005 18:48:43.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:43.835" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:43.835" endtime="20171005 18:48:43.836"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.835" endtime="20171005 18:48:43.836"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.833" endtime="20171005 18:48:43.836"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.833" endtime="20171005 18:48:43.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:48:43.899" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:48:43.899" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:43.836" endtime="20171005 18:48:43.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:43.901" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:43.900" endtime="20171005 18:48:43.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:43.902" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:43.902" endtime="20171005 18:48:43.902"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.901" endtime="20171005 18:48:43.902"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.900" endtime="20171005 18:48:43.902"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:43.900" endtime="20171005 18:48:43.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:48:43.903" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:48:43.903" endtime="20171005 18:48:43.903"></status>
</kw>
<msg timestamp="20171005 18:48:43.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:43.648" endtime="20171005 18:48:43.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:43.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:43.903" endtime="20171005 18:48:43.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:48:43.904" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:48:43.904" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:48:43.905" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:48:43.904" endtime="20171005 18:48:43.905"></status>
</kw>
<msg timestamp="20171005 18:48:43.905" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:48:43.648" endtime="20171005 18:48:43.905"></status>
</kw>
<msg timestamp="20171005 18:48:43.905" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:48:43.647" endtime="20171005 18:48:43.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:48:43.906" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:48:43.905" endtime="20171005 18:48:43.906"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:43.647" endtime="20171005 18:48:43.906"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:43.647" endtime="20171005 18:48:43.906"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:48:53.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:48:53.911" endtime="20171005 18:48:53.912"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:48:53.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:48:53.912" endtime="20171005 18:48:53.913"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:48:53.913" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:48:53.913" endtime="20171005 18:48:53.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:48:53.914" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:48:53.914" endtime="20171005 18:48:53.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:48:54.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:48:53.915" endtime="20171005 18:48:54.091"></status>
</kw>
<msg timestamp="20171005 18:48:54.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:48:54.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:53.914" endtime="20171005 18:48:54.091"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:48:54.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:54.091" endtime="20171005 18:48:54.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:54.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:54.092" endtime="20171005 18:48:54.092"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:53.910" endtime="20171005 18:48:54.093"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:53.910" endtime="20171005 18:48:54.093"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:53.909" endtime="20171005 18:48:54.093"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:48:54.093" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:48:54.093" endtime="20171005 18:48:54.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:54.096" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:54.095" endtime="20171005 18:48:54.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:54.097" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:48:54.096" endtime="20171005 18:48:54.097"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:54.096" endtime="20171005 18:48:54.097"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:54.094" endtime="20171005 18:48:54.097"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:54.094" endtime="20171005 18:48:54.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:48:54.161" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:48:54.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:54.097" endtime="20171005 18:48:54.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:48:54.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:54.162" endtime="20171005 18:48:54.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:48:54.167" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:48:54.166" endtime="20171005 18:48:54.167"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:54.163" endtime="20171005 18:48:54.167"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:54.162" endtime="20171005 18:48:54.167"></status>
</kw>
<status status="PASS" starttime="20171005 18:48:54.161" endtime="20171005 18:48:54.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:48:54.167" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:48:54.167" endtime="20171005 18:48:54.167"></status>
</kw>
<msg timestamp="20171005 18:48:54.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:48:53.909" endtime="20171005 18:48:54.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:48:54.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:48:54.168" endtime="20171005 18:48:54.168"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:48:54.169" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:48:54.169" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:48:54.169" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:48:54.169" endtime="20171005 18:48:54.169"></status>
</kw>
<msg timestamp="20171005 18:48:54.169" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:48:53.908" endtime="20171005 18:48:54.170"></status>
</kw>
<msg timestamp="20171005 18:48:54.170" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:48:53.908" endtime="20171005 18:48:54.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:48:54.170" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:48:54.170" endtime="20171005 18:48:54.171"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:53.907" endtime="20171005 18:48:54.171"></status>
</kw>
<status status="FAIL" starttime="20171005 18:48:53.907" endtime="20171005 18:48:54.171"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:49:04.176" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:49:04.176" endtime="20171005 18:49:04.177"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:49:04.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:49:04.177" endtime="20171005 18:49:04.177"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:49:04.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:49:04.177" endtime="20171005 18:49:04.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:49:04.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:49:04.178" endtime="20171005 18:49:04.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:49:04.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:49:04.179" endtime="20171005 18:49:04.359"></status>
</kw>
<msg timestamp="20171005 18:49:04.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:49:04.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:04.179" endtime="20171005 18:49:04.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:49:04.360" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:04.360" endtime="20171005 18:49:04.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:04.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:04.360" endtime="20171005 18:49:04.361"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.175" endtime="20171005 18:49:04.361"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.175" endtime="20171005 18:49:04.361"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.174" endtime="20171005 18:49:04.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:49:04.362" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:49:04.361" endtime="20171005 18:49:04.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:04.364" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:04.363" endtime="20171005 18:49:04.364"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:04.365" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:04.364" endtime="20171005 18:49:04.365"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.364" endtime="20171005 18:49:04.365"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.362" endtime="20171005 18:49:04.365"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.362" endtime="20171005 18:49:04.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:49:04.430" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:49:04.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:04.365" endtime="20171005 18:49:04.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:04.432" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:04.431" endtime="20171005 18:49:04.432"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:04.433" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:04.433" endtime="20171005 18:49:04.433"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.432" endtime="20171005 18:49:04.433"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.431" endtime="20171005 18:49:04.433"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:04.430" endtime="20171005 18:49:04.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:49:04.434" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:49:04.434" endtime="20171005 18:49:04.434"></status>
</kw>
<msg timestamp="20171005 18:49:04.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:04.173" endtime="20171005 18:49:04.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:04.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:04.434" endtime="20171005 18:49:04.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:49:04.435" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:49:04.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:49:04.435" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:49:04.435" endtime="20171005 18:49:04.435"></status>
</kw>
<msg timestamp="20171005 18:49:04.436" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:49:04.173" endtime="20171005 18:49:04.436"></status>
</kw>
<msg timestamp="20171005 18:49:04.436" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:49:04.172" endtime="20171005 18:49:04.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:49:04.437" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:49:04.436" endtime="20171005 18:49:04.437"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:04.172" endtime="20171005 18:49:04.437"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:04.171" endtime="20171005 18:49:04.437"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:49:14.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:49:14.442" endtime="20171005 18:49:14.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:49:14.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:49:14.443" endtime="20171005 18:49:14.444"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:49:14.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:49:14.444" endtime="20171005 18:49:14.444"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:49:14.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:49:14.445" endtime="20171005 18:49:14.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:49:14.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:49:14.446" endtime="20171005 18:49:14.623"></status>
</kw>
<msg timestamp="20171005 18:49:14.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:49:14.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:14.445" endtime="20171005 18:49:14.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:49:14.624" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:14.624" endtime="20171005 18:49:14.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:14.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:14.625" endtime="20171005 18:49:14.625"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.441" endtime="20171005 18:49:14.625"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.441" endtime="20171005 18:49:14.625"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.440" endtime="20171005 18:49:14.625"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:49:14.626" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:49:14.626" endtime="20171005 18:49:14.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:14.628" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:14.627" endtime="20171005 18:49:14.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:14.629" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:14.629" endtime="20171005 18:49:14.629"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.628" endtime="20171005 18:49:14.629"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.627" endtime="20171005 18:49:14.629"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.626" endtime="20171005 18:49:14.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:49:14.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:49:14.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:14.630" endtime="20171005 18:49:14.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:14.695" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:14.695" endtime="20171005 18:49:14.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:14.697" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:14.696" endtime="20171005 18:49:14.697"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.696" endtime="20171005 18:49:14.697"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.694" endtime="20171005 18:49:14.697"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:14.694" endtime="20171005 18:49:14.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:49:14.698" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:49:14.697" endtime="20171005 18:49:14.698"></status>
</kw>
<msg timestamp="20171005 18:49:14.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:14.439" endtime="20171005 18:49:14.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:14.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:14.698" endtime="20171005 18:49:14.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:49:14.699" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:49:14.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:49:14.699" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:49:14.699" endtime="20171005 18:49:14.699"></status>
</kw>
<msg timestamp="20171005 18:49:14.700" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:49:14.439" endtime="20171005 18:49:14.700"></status>
</kw>
<msg timestamp="20171005 18:49:14.700" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:49:14.438" endtime="20171005 18:49:14.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:49:14.701" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:49:14.700" endtime="20171005 18:49:14.701"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:14.438" endtime="20171005 18:49:14.701"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:14.438" endtime="20171005 18:49:14.701"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:49:24.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:49:24.706" endtime="20171005 18:49:24.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:49:24.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:49:24.707" endtime="20171005 18:49:24.707"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:49:24.707" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:49:24.707" endtime="20171005 18:49:24.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:49:24.708" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:49:24.708" endtime="20171005 18:49:24.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:49:24.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:49:24.709" endtime="20171005 18:49:24.941"></status>
</kw>
<msg timestamp="20171005 18:49:24.942" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:49:24.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:24.708" endtime="20171005 18:49:24.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:49:24.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:24.942" endtime="20171005 18:49:24.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:24.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:24.943" endtime="20171005 18:49:24.943"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:24.705" endtime="20171005 18:49:24.943"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:24.705" endtime="20171005 18:49:24.943"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:24.704" endtime="20171005 18:49:24.943"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:49:24.944" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:49:24.944" endtime="20171005 18:49:24.944"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:24.946" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:24.945" endtime="20171005 18:49:24.946"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:24.947" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:24.947" endtime="20171005 18:49:24.947"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:24.946" endtime="20171005 18:49:24.947"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:24.945" endtime="20171005 18:49:24.947"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:24.944" endtime="20171005 18:49:24.947"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:49:25.026" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:49:25.026" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:24.948" endtime="20171005 18:49:25.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:25.028" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:25.028" endtime="20171005 18:49:25.028"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:25.029" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:25.029" endtime="20171005 18:49:25.029"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:25.028" endtime="20171005 18:49:25.029"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:25.027" endtime="20171005 18:49:25.029"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:25.027" endtime="20171005 18:49:25.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:49:25.030" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:49:25.030" endtime="20171005 18:49:25.030"></status>
</kw>
<msg timestamp="20171005 18:49:25.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:24.703" endtime="20171005 18:49:25.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:25.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:25.030" endtime="20171005 18:49:25.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:49:25.031" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:49:25.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:49:25.031" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:49:25.031" endtime="20171005 18:49:25.032"></status>
</kw>
<msg timestamp="20171005 18:49:25.032" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:49:24.703" endtime="20171005 18:49:25.032"></status>
</kw>
<msg timestamp="20171005 18:49:25.032" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:49:24.702" endtime="20171005 18:49:25.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:49:25.033" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:49:25.032" endtime="20171005 18:49:25.033"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:24.702" endtime="20171005 18:49:25.033"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:24.701" endtime="20171005 18:49:25.033"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:49:35.038" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:49:35.038" endtime="20171005 18:49:35.039"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:49:35.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:49:35.039" endtime="20171005 18:49:35.039"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:49:35.040" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:49:35.040" endtime="20171005 18:49:35.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:49:35.041" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:49:35.040" endtime="20171005 18:49:35.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:49:35.223" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:49:35.042" endtime="20171005 18:49:35.223"></status>
</kw>
<msg timestamp="20171005 18:49:35.223" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:49:35.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:35.041" endtime="20171005 18:49:35.223"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:49:35.224" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:35.224" endtime="20171005 18:49:35.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:35.225" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:35.224" endtime="20171005 18:49:35.225"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.037" endtime="20171005 18:49:35.225"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.037" endtime="20171005 18:49:35.225"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.036" endtime="20171005 18:49:35.225"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:49:35.226" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:49:35.225" endtime="20171005 18:49:35.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:35.228" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:35.227" endtime="20171005 18:49:35.228"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:35.229" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:35.228" endtime="20171005 18:49:35.229"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.228" endtime="20171005 18:49:35.229"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.226" endtime="20171005 18:49:35.229"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.226" endtime="20171005 18:49:35.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:49:35.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:49:35.293" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:35.229" endtime="20171005 18:49:35.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:35.294" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:35.294" endtime="20171005 18:49:35.294"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:35.296" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:35.295" endtime="20171005 18:49:35.296"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.295" endtime="20171005 18:49:35.296"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.293" endtime="20171005 18:49:35.296"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:35.293" endtime="20171005 18:49:35.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:49:35.296" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:49:35.296" endtime="20171005 18:49:35.297"></status>
</kw>
<msg timestamp="20171005 18:49:35.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:35.035" endtime="20171005 18:49:35.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:35.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:35.297" endtime="20171005 18:49:35.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:49:35.298" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:49:35.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:49:35.298" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:49:35.298" endtime="20171005 18:49:35.298"></status>
</kw>
<msg timestamp="20171005 18:49:35.299" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:49:35.035" endtime="20171005 18:49:35.299"></status>
</kw>
<msg timestamp="20171005 18:49:35.299" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:49:35.034" endtime="20171005 18:49:35.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:49:35.300" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:49:35.299" endtime="20171005 18:49:35.300"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:35.034" endtime="20171005 18:49:35.300"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:35.034" endtime="20171005 18:49:35.300"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:49:45.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:49:45.304" endtime="20171005 18:49:45.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:49:45.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:49:45.305" endtime="20171005 18:49:45.306"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:49:45.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:49:45.306" endtime="20171005 18:49:45.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:49:45.307" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:49:45.307" endtime="20171005 18:49:45.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:49:45.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:49:45.308" endtime="20171005 18:49:45.488"></status>
</kw>
<msg timestamp="20171005 18:49:45.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:49:45.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:45.307" endtime="20171005 18:49:45.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:49:45.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:45.488" endtime="20171005 18:49:45.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:45.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:45.489" endtime="20171005 18:49:45.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.304" endtime="20171005 18:49:45.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.303" endtime="20171005 18:49:45.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.303" endtime="20171005 18:49:45.490"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:49:45.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:49:45.490" endtime="20171005 18:49:45.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:45.493" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:45.492" endtime="20171005 18:49:45.493"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:45.494" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:45.493" endtime="20171005 18:49:45.494"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.493" endtime="20171005 18:49:45.494"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.491" endtime="20171005 18:49:45.494"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.491" endtime="20171005 18:49:45.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:49:45.560" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:49:45.560" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:45.494" endtime="20171005 18:49:45.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:45.561" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:45.561" endtime="20171005 18:49:45.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:45.562" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:45.562" endtime="20171005 18:49:45.562"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.562" endtime="20171005 18:49:45.563"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.560" endtime="20171005 18:49:45.563"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:45.560" endtime="20171005 18:49:45.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:49:45.563" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:49:45.563" endtime="20171005 18:49:45.563"></status>
</kw>
<msg timestamp="20171005 18:49:45.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:45.302" endtime="20171005 18:49:45.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:45.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:45.564" endtime="20171005 18:49:45.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:49:45.565" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:49:45.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:49:45.565" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:49:45.564" endtime="20171005 18:49:45.565"></status>
</kw>
<msg timestamp="20171005 18:49:45.565" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:49:45.302" endtime="20171005 18:49:45.565"></status>
</kw>
<msg timestamp="20171005 18:49:45.565" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:49:45.301" endtime="20171005 18:49:45.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:49:45.566" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:49:45.566" endtime="20171005 18:49:45.566"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:45.301" endtime="20171005 18:49:45.566"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:45.300" endtime="20171005 18:49:45.566"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:49:55.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:49:55.573" endtime="20171005 18:49:55.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:49:55.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:49:55.574" endtime="20171005 18:49:55.574"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:49:55.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:49:55.574" endtime="20171005 18:49:55.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:49:55.575" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:49:55.575" endtime="20171005 18:49:55.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:49:55.774" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:49:55.576" endtime="20171005 18:49:55.775"></status>
</kw>
<msg timestamp="20171005 18:49:55.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:49:55.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:55.576" endtime="20171005 18:49:55.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:49:55.775" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:55.775" endtime="20171005 18:49:55.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:55.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:55.776" endtime="20171005 18:49:55.776"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.571" endtime="20171005 18:49:55.776"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.570" endtime="20171005 18:49:55.776"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.570" endtime="20171005 18:49:55.777"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:49:55.777" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:49:55.777" endtime="20171005 18:49:55.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:55.779" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:55.779" endtime="20171005 18:49:55.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:55.780" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:49:55.780" endtime="20171005 18:49:55.780"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.779" endtime="20171005 18:49:55.780"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.778" endtime="20171005 18:49:55.781"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.778" endtime="20171005 18:49:55.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:49:55.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:49:55.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:55.781" endtime="20171005 18:49:55.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:49:55.854" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:55.853" endtime="20171005 18:49:55.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:49:55.855" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:49:55.854" endtime="20171005 18:49:55.855"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.854" endtime="20171005 18:49:55.855"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.853" endtime="20171005 18:49:55.855"></status>
</kw>
<status status="PASS" starttime="20171005 18:49:55.852" endtime="20171005 18:49:55.856"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:49:55.856" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:49:55.856" endtime="20171005 18:49:55.856"></status>
</kw>
<msg timestamp="20171005 18:49:55.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:49:55.569" endtime="20171005 18:49:55.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:49:55.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:49:55.857" endtime="20171005 18:49:55.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:49:55.857" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:49:55.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:49:55.858" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:49:55.857" endtime="20171005 18:49:55.858"></status>
</kw>
<msg timestamp="20171005 18:49:55.858" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:49:55.568" endtime="20171005 18:49:55.858"></status>
</kw>
<msg timestamp="20171005 18:49:55.858" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:49:55.568" endtime="20171005 18:49:55.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:49:55.859" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:49:55.859" endtime="20171005 18:49:55.859"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:55.568" endtime="20171005 18:49:55.859"></status>
</kw>
<status status="FAIL" starttime="20171005 18:49:55.567" endtime="20171005 18:49:55.859"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:50:05.864" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:50:05.864" endtime="20171005 18:50:05.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:50:05.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:50:05.865" endtime="20171005 18:50:05.866"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:50:05.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:50:05.866" endtime="20171005 18:50:05.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:50:05.867" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:50:05.866" endtime="20171005 18:50:05.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:50:06.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:50:05.867" endtime="20171005 18:50:06.050"></status>
</kw>
<msg timestamp="20171005 18:50:06.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:50:06.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:05.867" endtime="20171005 18:50:06.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:50:06.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:06.051" endtime="20171005 18:50:06.052"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:06.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:06.052" endtime="20171005 18:50:06.053"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:05.864" endtime="20171005 18:50:06.053"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:05.863" endtime="20171005 18:50:06.053"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:05.862" endtime="20171005 18:50:06.053"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:50:06.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:50:06.053" endtime="20171005 18:50:06.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:06.056" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:06.055" endtime="20171005 18:50:06.056"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:06.057" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:06.057" endtime="20171005 18:50:06.057"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:06.056" endtime="20171005 18:50:06.057"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:06.055" endtime="20171005 18:50:06.057"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:06.054" endtime="20171005 18:50:06.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:50:06.121" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:50:06.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:06.058" endtime="20171005 18:50:06.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:06.123" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:06.123" endtime="20171005 18:50:06.123"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:06.124" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:06.124" endtime="20171005 18:50:06.124"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:06.123" endtime="20171005 18:50:06.125"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:06.122" endtime="20171005 18:50:06.125"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:06.122" endtime="20171005 18:50:06.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:50:06.125" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:50:06.125" endtime="20171005 18:50:06.125"></status>
</kw>
<msg timestamp="20171005 18:50:06.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:05.862" endtime="20171005 18:50:06.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:06.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:06.126" endtime="20171005 18:50:06.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:50:06.127" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:50:06.127" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:50:06.127" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:50:06.126" endtime="20171005 18:50:06.127"></status>
</kw>
<msg timestamp="20171005 18:50:06.127" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:50:05.861" endtime="20171005 18:50:06.127"></status>
</kw>
<msg timestamp="20171005 18:50:06.128" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:50:05.861" endtime="20171005 18:50:06.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:50:06.128" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:50:06.128" endtime="20171005 18:50:06.128"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:05.861" endtime="20171005 18:50:06.129"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:05.860" endtime="20171005 18:50:06.129"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:50:16.134" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:50:16.134" endtime="20171005 18:50:16.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:50:16.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:50:16.135" endtime="20171005 18:50:16.135"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:50:16.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:50:16.136" endtime="20171005 18:50:16.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:50:16.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:50:16.136" endtime="20171005 18:50:16.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:50:16.319" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:50:16.137" endtime="20171005 18:50:16.319"></status>
</kw>
<msg timestamp="20171005 18:50:16.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:50:16.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:16.137" endtime="20171005 18:50:16.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:50:16.320" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:16.320" endtime="20171005 18:50:16.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:16.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:16.321" endtime="20171005 18:50:16.321"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.133" endtime="20171005 18:50:16.321"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.133" endtime="20171005 18:50:16.321"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.132" endtime="20171005 18:50:16.321"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:50:16.322" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:50:16.322" endtime="20171005 18:50:16.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:16.324" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:16.323" endtime="20171005 18:50:16.324"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:16.325" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:16.325" endtime="20171005 18:50:16.325"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.325" endtime="20171005 18:50:16.326"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.323" endtime="20171005 18:50:16.326"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.322" endtime="20171005 18:50:16.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:50:16.389" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:50:16.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:16.326" endtime="20171005 18:50:16.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:16.391" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:16.391" endtime="20171005 18:50:16.391"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:16.395" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:16.392" endtime="20171005 18:50:16.395"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.391" endtime="20171005 18:50:16.396"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.390" endtime="20171005 18:50:16.396"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:16.390" endtime="20171005 18:50:16.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:50:16.396" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:50:16.396" endtime="20171005 18:50:16.396"></status>
</kw>
<msg timestamp="20171005 18:50:16.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:16.131" endtime="20171005 18:50:16.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:16.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:16.397" endtime="20171005 18:50:16.397"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:50:16.398" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:50:16.398" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:50:16.398" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:50:16.397" endtime="20171005 18:50:16.398"></status>
</kw>
<msg timestamp="20171005 18:50:16.398" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:50:16.131" endtime="20171005 18:50:16.398"></status>
</kw>
<msg timestamp="20171005 18:50:16.398" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:50:16.130" endtime="20171005 18:50:16.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:50:16.399" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:50:16.399" endtime="20171005 18:50:16.399"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:16.130" endtime="20171005 18:50:16.400"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:16.129" endtime="20171005 18:50:16.400"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:50:26.405" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:50:26.404" endtime="20171005 18:50:26.405"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:50:26.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:50:26.406" endtime="20171005 18:50:26.406"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:50:26.407" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:50:26.406" endtime="20171005 18:50:26.407"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:50:26.407" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:50:26.407" endtime="20171005 18:50:26.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:50:26.616" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:50:26.408" endtime="20171005 18:50:26.616"></status>
</kw>
<msg timestamp="20171005 18:50:26.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:50:26.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:26.407" endtime="20171005 18:50:26.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:50:26.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:26.617" endtime="20171005 18:50:26.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:26.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:26.617" endtime="20171005 18:50:26.618"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.404" endtime="20171005 18:50:26.618"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.403" endtime="20171005 18:50:26.618"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.403" endtime="20171005 18:50:26.618"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:50:26.619" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:50:26.618" endtime="20171005 18:50:26.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:26.621" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:26.620" endtime="20171005 18:50:26.621"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:26.622" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:26.622" endtime="20171005 18:50:26.622"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.621" endtime="20171005 18:50:26.622"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.619" endtime="20171005 18:50:26.622"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.619" endtime="20171005 18:50:26.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:50:26.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:50:26.707" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:26.622" endtime="20171005 18:50:26.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:26.709" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:26.708" endtime="20171005 18:50:26.709"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:26.709" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:26.709" endtime="20171005 18:50:26.710"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.709" endtime="20171005 18:50:26.710"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.708" endtime="20171005 18:50:26.710"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:26.707" endtime="20171005 18:50:26.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:50:26.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:50:26.710" endtime="20171005 18:50:26.710"></status>
</kw>
<msg timestamp="20171005 18:50:26.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:26.402" endtime="20171005 18:50:26.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:26.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:26.711" endtime="20171005 18:50:26.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:50:26.712" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:50:26.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:50:26.712" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:50:26.712" endtime="20171005 18:50:26.712"></status>
</kw>
<msg timestamp="20171005 18:50:26.712" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:50:26.401" endtime="20171005 18:50:26.712"></status>
</kw>
<msg timestamp="20171005 18:50:26.713" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:50:26.401" endtime="20171005 18:50:26.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:50:26.713" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:50:26.713" endtime="20171005 18:50:26.713"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:26.401" endtime="20171005 18:50:26.714"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:26.400" endtime="20171005 18:50:26.714"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:50:36.720" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:50:36.720" endtime="20171005 18:50:36.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:50:36.721" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:50:36.721" endtime="20171005 18:50:36.721"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:50:36.722" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:50:36.722" endtime="20171005 18:50:36.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:50:36.723" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:50:36.722" endtime="20171005 18:50:36.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:50:37.004" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:50:36.723" endtime="20171005 18:50:37.004"></status>
</kw>
<msg timestamp="20171005 18:50:37.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:50:37.004" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:36.723" endtime="20171005 18:50:37.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:50:37.006" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:37.005" endtime="20171005 18:50:37.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:37.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:37.006" endtime="20171005 18:50:37.006"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:36.719" endtime="20171005 18:50:37.006"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:36.719" endtime="20171005 18:50:37.007"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:36.718" endtime="20171005 18:50:37.007"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:50:37.007" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:50:37.007" endtime="20171005 18:50:37.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:37.009" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:37.009" endtime="20171005 18:50:37.009"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:37.010" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:37.010" endtime="20171005 18:50:37.011"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:37.010" endtime="20171005 18:50:37.011"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:37.008" endtime="20171005 18:50:37.011"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:37.008" endtime="20171005 18:50:37.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:50:37.074" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:50:37.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:37.011" endtime="20171005 18:50:37.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:37.076" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:37.075" endtime="20171005 18:50:37.076"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:37.077" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:37.077" endtime="20171005 18:50:37.077"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:37.076" endtime="20171005 18:50:37.077"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:37.075" endtime="20171005 18:50:37.078"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:37.074" endtime="20171005 18:50:37.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:50:37.078" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:50:37.078" endtime="20171005 18:50:37.078"></status>
</kw>
<msg timestamp="20171005 18:50:37.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:36.717" endtime="20171005 18:50:37.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:37.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:37.079" endtime="20171005 18:50:37.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:50:37.080" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:50:37.080" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:50:37.080" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:50:37.079" endtime="20171005 18:50:37.080"></status>
</kw>
<msg timestamp="20171005 18:50:37.080" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:50:36.716" endtime="20171005 18:50:37.080"></status>
</kw>
<msg timestamp="20171005 18:50:37.080" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:50:36.716" endtime="20171005 18:50:37.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:50:37.081" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:50:37.081" endtime="20171005 18:50:37.081"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:36.716" endtime="20171005 18:50:37.081"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:36.714" endtime="20171005 18:50:37.081"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:50:47.087" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:50:47.086" endtime="20171005 18:50:47.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:50:47.088" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:50:47.087" endtime="20171005 18:50:47.088"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:50:47.088" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:50:47.088" endtime="20171005 18:50:47.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:50:47.089" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:50:47.089" endtime="20171005 18:50:47.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:50:47.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:50:47.090" endtime="20171005 18:50:47.286"></status>
</kw>
<msg timestamp="20171005 18:50:47.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:50:47.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:47.089" endtime="20171005 18:50:47.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:50:47.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:47.286" endtime="20171005 18:50:47.287"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:47.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:47.287" endtime="20171005 18:50:47.287"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.086" endtime="20171005 18:50:47.287"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.085" endtime="20171005 18:50:47.287"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.085" endtime="20171005 18:50:47.288"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:50:47.288" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:50:47.288" endtime="20171005 18:50:47.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:47.290" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:47.290" endtime="20171005 18:50:47.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:47.291" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:47.291" endtime="20171005 18:50:47.291"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.291" endtime="20171005 18:50:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.289" endtime="20171005 18:50:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.289" endtime="20171005 18:50:47.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:50:47.371" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:50:47.372" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:47.292" endtime="20171005 18:50:47.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:47.374" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:47.373" endtime="20171005 18:50:47.374"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:47.374" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:47.374" endtime="20171005 18:50:47.375"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.374" endtime="20171005 18:50:47.375"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.373" endtime="20171005 18:50:47.375"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:47.372" endtime="20171005 18:50:47.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:50:47.375" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:50:47.375" endtime="20171005 18:50:47.376"></status>
</kw>
<msg timestamp="20171005 18:50:47.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:47.084" endtime="20171005 18:50:47.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:47.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:47.376" endtime="20171005 18:50:47.376"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:50:47.377" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:50:47.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:50:47.377" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:50:47.377" endtime="20171005 18:50:47.377"></status>
</kw>
<msg timestamp="20171005 18:50:47.377" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:50:47.083" endtime="20171005 18:50:47.377"></status>
</kw>
<msg timestamp="20171005 18:50:47.378" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:50:47.083" endtime="20171005 18:50:47.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:50:47.378" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:50:47.378" endtime="20171005 18:50:47.378"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:47.082" endtime="20171005 18:50:47.379"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:47.082" endtime="20171005 18:50:47.379"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:50:57.386" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:50:57.386" endtime="20171005 18:50:57.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:50:57.387" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:50:57.387" endtime="20171005 18:50:57.387"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:50:57.388" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:50:57.388" endtime="20171005 18:50:57.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:50:57.389" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:50:57.388" endtime="20171005 18:50:57.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:50:57.622" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:50:57.389" endtime="20171005 18:50:57.622"></status>
</kw>
<msg timestamp="20171005 18:50:57.622" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:50:57.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:57.389" endtime="20171005 18:50:57.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:50:57.623" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:57.623" endtime="20171005 18:50:57.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:57.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:57.624" endtime="20171005 18:50:57.624"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.384" endtime="20171005 18:50:57.624"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.384" endtime="20171005 18:50:57.624"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.383" endtime="20171005 18:50:57.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:50:57.625" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:50:57.625" endtime="20171005 18:50:57.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:57.627" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:57.627" endtime="20171005 18:50:57.627"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:57.628" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:50:57.628" endtime="20171005 18:50:57.628"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.627" endtime="20171005 18:50:57.628"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.626" endtime="20171005 18:50:57.629"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.625" endtime="20171005 18:50:57.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:50:57.707" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:50:57.707" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:57.629" endtime="20171005 18:50:57.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:50:57.709" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:57.708" endtime="20171005 18:50:57.709"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:50:57.710" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:50:57.710" endtime="20171005 18:50:57.710"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.709" endtime="20171005 18:50:57.710"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.708" endtime="20171005 18:50:57.710"></status>
</kw>
<status status="PASS" starttime="20171005 18:50:57.707" endtime="20171005 18:50:57.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:50:57.711" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:50:57.711" endtime="20171005 18:50:57.711"></status>
</kw>
<msg timestamp="20171005 18:50:57.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:50:57.382" endtime="20171005 18:50:57.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:50:57.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:50:57.712" endtime="20171005 18:50:57.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:50:57.712" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:50:57.713" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:50:57.713" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:50:57.712" endtime="20171005 18:50:57.713"></status>
</kw>
<msg timestamp="20171005 18:50:57.713" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:50:57.381" endtime="20171005 18:50:57.713"></status>
</kw>
<msg timestamp="20171005 18:50:57.713" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:50:57.381" endtime="20171005 18:50:57.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:50:57.714" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:50:57.714" endtime="20171005 18:50:57.714"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:57.380" endtime="20171005 18:50:57.714"></status>
</kw>
<status status="FAIL" starttime="20171005 18:50:57.379" endtime="20171005 18:50:57.714"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:51:07.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:51:07.719" endtime="20171005 18:51:07.720"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:51:07.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:51:07.720" endtime="20171005 18:51:07.720"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:51:07.721" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:51:07.721" endtime="20171005 18:51:07.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:51:07.722" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:51:07.721" endtime="20171005 18:51:07.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:51:07.954" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:51:07.722" endtime="20171005 18:51:07.954"></status>
</kw>
<msg timestamp="20171005 18:51:07.955" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:51:07.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:07.722" endtime="20171005 18:51:07.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:51:07.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:07.955" endtime="20171005 18:51:07.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:07.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:07.956" endtime="20171005 18:51:07.956"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:07.719" endtime="20171005 18:51:07.956"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:07.718" endtime="20171005 18:51:07.956"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:07.717" endtime="20171005 18:51:07.956"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:51:07.957" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:51:07.957" endtime="20171005 18:51:07.957"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:07.959" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:07.958" endtime="20171005 18:51:07.959"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:07.960" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:07.960" endtime="20171005 18:51:07.960"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:07.959" endtime="20171005 18:51:07.960"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:07.958" endtime="20171005 18:51:07.960"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:07.957" endtime="20171005 18:51:07.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:51:08.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:51:08.032" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:07.961" endtime="20171005 18:51:08.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:08.034" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:08.033" endtime="20171005 18:51:08.034"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:08.035" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:08.034" endtime="20171005 18:51:08.035"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:08.034" endtime="20171005 18:51:08.035"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:08.032" endtime="20171005 18:51:08.035"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:08.032" endtime="20171005 18:51:08.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:51:08.035" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:51:08.035" endtime="20171005 18:51:08.035"></status>
</kw>
<msg timestamp="20171005 18:51:08.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:07.717" endtime="20171005 18:51:08.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:08.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:08.036" endtime="20171005 18:51:08.036"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:51:08.037" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:51:08.037" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:51:08.037" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:51:08.037" endtime="20171005 18:51:08.037"></status>
</kw>
<msg timestamp="20171005 18:51:08.037" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:51:07.716" endtime="20171005 18:51:08.038"></status>
</kw>
<msg timestamp="20171005 18:51:08.038" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:51:07.716" endtime="20171005 18:51:08.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:51:08.038" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:51:08.038" endtime="20171005 18:51:08.039"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:07.715" endtime="20171005 18:51:08.039"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:07.715" endtime="20171005 18:51:08.039"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:51:18.045" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:51:18.044" endtime="20171005 18:51:18.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:51:18.046" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:51:18.045" endtime="20171005 18:51:18.046"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:51:18.047" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:51:18.046" endtime="20171005 18:51:18.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:51:18.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:51:18.047" endtime="20171005 18:51:18.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:51:18.232" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:51:18.049" endtime="20171005 18:51:18.232"></status>
</kw>
<msg timestamp="20171005 18:51:18.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:51:18.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:18.048" endtime="20171005 18:51:18.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:51:18.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:18.233" endtime="20171005 18:51:18.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:18.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:18.233" endtime="20171005 18:51:18.234"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.043" endtime="20171005 18:51:18.234"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.043" endtime="20171005 18:51:18.234"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.042" endtime="20171005 18:51:18.234"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:51:18.235" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:51:18.234" endtime="20171005 18:51:18.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:18.237" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:18.236" endtime="20171005 18:51:18.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:18.238" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:18.238" endtime="20171005 18:51:18.238"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.237" endtime="20171005 18:51:18.238"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.235" endtime="20171005 18:51:18.238"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.235" endtime="20171005 18:51:18.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:51:18.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:51:18.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:18.238" endtime="20171005 18:51:18.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:18.304" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:18.304" endtime="20171005 18:51:18.304"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:18.305" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:18.305" endtime="20171005 18:51:18.305"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.304" endtime="20171005 18:51:18.306"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.303" endtime="20171005 18:51:18.306"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:18.303" endtime="20171005 18:51:18.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:51:18.306" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:51:18.306" endtime="20171005 18:51:18.306"></status>
</kw>
<msg timestamp="20171005 18:51:18.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:18.041" endtime="20171005 18:51:18.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:18.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:18.307" endtime="20171005 18:51:18.307"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:51:18.308" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:51:18.308" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:51:18.308" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:51:18.307" endtime="20171005 18:51:18.308"></status>
</kw>
<msg timestamp="20171005 18:51:18.308" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:51:18.041" endtime="20171005 18:51:18.308"></status>
</kw>
<msg timestamp="20171005 18:51:18.309" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:51:18.040" endtime="20171005 18:51:18.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:51:18.309" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:51:18.309" endtime="20171005 18:51:18.309"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:18.040" endtime="20171005 18:51:18.310"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:18.039" endtime="20171005 18:51:18.310"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:51:28.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:51:28.314" endtime="20171005 18:51:28.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:51:28.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:51:28.315" endtime="20171005 18:51:28.316"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:51:28.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:51:28.316" endtime="20171005 18:51:28.316"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:51:28.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:51:28.317" endtime="20171005 18:51:28.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:51:28.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:51:28.318" endtime="20171005 18:51:28.497"></status>
</kw>
<msg timestamp="20171005 18:51:28.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:51:28.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:28.317" endtime="20171005 18:51:28.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:51:28.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:28.498" endtime="20171005 18:51:28.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:28.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:28.499" endtime="20171005 18:51:28.499"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.314" endtime="20171005 18:51:28.499"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.313" endtime="20171005 18:51:28.499"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.313" endtime="20171005 18:51:28.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:51:28.500" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:51:28.500" endtime="20171005 18:51:28.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:28.502" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:28.501" endtime="20171005 18:51:28.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:28.503" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:28.503" endtime="20171005 18:51:28.503"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.502" endtime="20171005 18:51:28.503"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.501" endtime="20171005 18:51:28.503"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.500" endtime="20171005 18:51:28.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:51:28.567" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:51:28.567" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:28.504" endtime="20171005 18:51:28.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:28.569" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:28.569" endtime="20171005 18:51:28.569"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:28.570" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:28.570" endtime="20171005 18:51:28.570"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.569" endtime="20171005 18:51:28.570"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.568" endtime="20171005 18:51:28.570"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:28.568" endtime="20171005 18:51:28.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:51:28.571" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:51:28.571" endtime="20171005 18:51:28.571"></status>
</kw>
<msg timestamp="20171005 18:51:28.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:28.312" endtime="20171005 18:51:28.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:28.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:28.571" endtime="20171005 18:51:28.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:51:28.572" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:51:28.573" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:51:28.573" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:51:28.572" endtime="20171005 18:51:28.573"></status>
</kw>
<msg timestamp="20171005 18:51:28.573" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:51:28.311" endtime="20171005 18:51:28.573"></status>
</kw>
<msg timestamp="20171005 18:51:28.573" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:51:28.311" endtime="20171005 18:51:28.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:51:28.574" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:51:28.574" endtime="20171005 18:51:28.574"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:28.311" endtime="20171005 18:51:28.574"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:28.310" endtime="20171005 18:51:28.574"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:51:38.581" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:51:38.581" endtime="20171005 18:51:38.582"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:51:38.583" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:51:38.582" endtime="20171005 18:51:38.583"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:51:38.584" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:51:38.583" endtime="20171005 18:51:38.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:51:38.585" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:51:38.584" endtime="20171005 18:51:38.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:51:38.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:51:38.585" endtime="20171005 18:51:38.837"></status>
</kw>
<msg timestamp="20171005 18:51:38.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:51:38.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:38.585" endtime="20171005 18:51:38.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:51:38.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:38.838" endtime="20171005 18:51:38.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:38.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:38.839" endtime="20171005 18:51:38.839"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.579" endtime="20171005 18:51:38.839"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.579" endtime="20171005 18:51:38.839"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.578" endtime="20171005 18:51:38.839"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:51:38.840" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:51:38.840" endtime="20171005 18:51:38.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:38.842" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:38.841" endtime="20171005 18:51:38.842"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:38.843" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:38.843" endtime="20171005 18:51:38.843"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.842" endtime="20171005 18:51:38.843"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.841" endtime="20171005 18:51:38.843"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.840" endtime="20171005 18:51:38.843"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:51:38.916" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:51:38.916" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:38.844" endtime="20171005 18:51:38.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:38.918" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:38.917" endtime="20171005 18:51:38.918"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:38.922" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:38.918" endtime="20171005 18:51:38.922"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.918" endtime="20171005 18:51:38.922"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.917" endtime="20171005 18:51:38.922"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:38.916" endtime="20171005 18:51:38.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:51:38.923" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:51:38.923" endtime="20171005 18:51:38.923"></status>
</kw>
<msg timestamp="20171005 18:51:38.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:38.577" endtime="20171005 18:51:38.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:38.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:38.923" endtime="20171005 18:51:38.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:51:38.925" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:51:38.925" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:51:38.925" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:51:38.924" endtime="20171005 18:51:38.925"></status>
</kw>
<msg timestamp="20171005 18:51:38.925" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:51:38.576" endtime="20171005 18:51:38.925"></status>
</kw>
<msg timestamp="20171005 18:51:38.925" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:51:38.576" endtime="20171005 18:51:38.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:51:38.926" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:51:38.926" endtime="20171005 18:51:38.927"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:38.575" endtime="20171005 18:51:38.927"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:38.575" endtime="20171005 18:51:38.927"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:51:48.932" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:51:48.932" endtime="20171005 18:51:48.932"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:51:48.933" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:51:48.933" endtime="20171005 18:51:48.933"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:51:48.934" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:51:48.933" endtime="20171005 18:51:48.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:51:48.934" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:51:48.934" endtime="20171005 18:51:48.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:51:49.115" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:51:48.935" endtime="20171005 18:51:49.115"></status>
</kw>
<msg timestamp="20171005 18:51:49.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:51:49.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:48.934" endtime="20171005 18:51:49.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:51:49.116" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:49.116" endtime="20171005 18:51:49.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:49.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:49.117" endtime="20171005 18:51:49.117"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:48.931" endtime="20171005 18:51:49.117"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:48.931" endtime="20171005 18:51:49.117"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:48.930" endtime="20171005 18:51:49.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:51:49.118" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:51:49.118" endtime="20171005 18:51:49.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:49.120" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:49.120" endtime="20171005 18:51:49.120"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:49.121" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:49.121" endtime="20171005 18:51:49.121"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:49.121" endtime="20171005 18:51:49.122"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:49.119" endtime="20171005 18:51:49.122"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:49.118" endtime="20171005 18:51:49.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:51:49.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:51:49.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:49.122" endtime="20171005 18:51:49.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:49.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:49.197" endtime="20171005 18:51:49.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:49.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:49.199" endtime="20171005 18:51:49.199"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:49.198" endtime="20171005 18:51:49.199"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:49.197" endtime="20171005 18:51:49.199"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:49.196" endtime="20171005 18:51:49.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:51:49.200" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:51:49.200" endtime="20171005 18:51:49.200"></status>
</kw>
<msg timestamp="20171005 18:51:49.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:48.929" endtime="20171005 18:51:49.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:49.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:49.200" endtime="20171005 18:51:49.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:51:49.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:51:49.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:51:49.201" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:51:49.201" endtime="20171005 18:51:49.202"></status>
</kw>
<msg timestamp="20171005 18:51:49.202" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:51:48.929" endtime="20171005 18:51:49.202"></status>
</kw>
<msg timestamp="20171005 18:51:49.202" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:51:48.928" endtime="20171005 18:51:49.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:51:49.203" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:51:49.202" endtime="20171005 18:51:49.203"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:48.928" endtime="20171005 18:51:49.203"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:48.927" endtime="20171005 18:51:49.203"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:51:59.209" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:51:59.209" endtime="20171005 18:51:59.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:51:59.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:51:59.210" endtime="20171005 18:51:59.210"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:51:59.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:51:59.210" endtime="20171005 18:51:59.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:51:59.211" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:51:59.211" endtime="20171005 18:51:59.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:51:59.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:51:59.212" endtime="20171005 18:51:59.392"></status>
</kw>
<msg timestamp="20171005 18:51:59.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:51:59.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:59.212" endtime="20171005 18:51:59.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:51:59.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:59.392" endtime="20171005 18:51:59.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:59.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:59.393" endtime="20171005 18:51:59.393"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.208" endtime="20171005 18:51:59.393"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.207" endtime="20171005 18:51:59.394"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.206" endtime="20171005 18:51:59.394"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:51:59.394" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:51:59.394" endtime="20171005 18:51:59.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:59.396" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:59.396" endtime="20171005 18:51:59.396"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:59.397" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:51:59.397" endtime="20171005 18:51:59.397"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.397" endtime="20171005 18:51:59.398"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.395" endtime="20171005 18:51:59.398"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.395" endtime="20171005 18:51:59.398"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:51:59.461" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:51:59.461" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:59.398" endtime="20171005 18:51:59.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:51:59.463" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:59.463" endtime="20171005 18:51:59.463"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:51:59.465" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:51:59.464" endtime="20171005 18:51:59.465"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.463" endtime="20171005 18:51:59.465"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.462" endtime="20171005 18:51:59.465"></status>
</kw>
<status status="PASS" starttime="20171005 18:51:59.462" endtime="20171005 18:51:59.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:51:59.466" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:51:59.465" endtime="20171005 18:51:59.466"></status>
</kw>
<msg timestamp="20171005 18:51:59.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:51:59.206" endtime="20171005 18:51:59.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:51:59.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:51:59.466" endtime="20171005 18:51:59.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:51:59.467" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:51:59.467" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:51:59.468" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:51:59.467" endtime="20171005 18:51:59.468"></status>
</kw>
<msg timestamp="20171005 18:51:59.468" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:51:59.205" endtime="20171005 18:51:59.468"></status>
</kw>
<msg timestamp="20171005 18:51:59.468" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:51:59.205" endtime="20171005 18:51:59.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:51:59.469" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:51:59.468" endtime="20171005 18:51:59.469"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:59.204" endtime="20171005 18:51:59.469"></status>
</kw>
<status status="FAIL" starttime="20171005 18:51:59.204" endtime="20171005 18:51:59.469"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:52:09.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:52:09.474" endtime="20171005 18:52:09.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:52:09.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:52:09.475" endtime="20171005 18:52:09.476"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:52:09.476" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:52:09.476" endtime="20171005 18:52:09.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:52:09.477" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:52:09.477" endtime="20171005 18:52:09.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:52:09.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:52:09.478" endtime="20171005 18:52:09.692"></status>
</kw>
<msg timestamp="20171005 18:52:09.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:52:09.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:09.477" endtime="20171005 18:52:09.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:52:09.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:09.693" endtime="20171005 18:52:09.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:09.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:09.694" endtime="20171005 18:52:09.694"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.474" endtime="20171005 18:52:09.694"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.473" endtime="20171005 18:52:09.694"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.473" endtime="20171005 18:52:09.694"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:52:09.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:52:09.695" endtime="20171005 18:52:09.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:09.697" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:09.696" endtime="20171005 18:52:09.697"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:09.698" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:09.698" endtime="20171005 18:52:09.698"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.697" endtime="20171005 18:52:09.698"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.696" endtime="20171005 18:52:09.698"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.695" endtime="20171005 18:52:09.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:52:09.779" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:52:09.779" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:09.699" endtime="20171005 18:52:09.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:09.781" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:09.780" endtime="20171005 18:52:09.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:09.782" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:09.782" endtime="20171005 18:52:09.782"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.781" endtime="20171005 18:52:09.782"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.780" endtime="20171005 18:52:09.782"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:09.779" endtime="20171005 18:52:09.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:52:09.783" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:52:09.782" endtime="20171005 18:52:09.783"></status>
</kw>
<msg timestamp="20171005 18:52:09.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:09.472" endtime="20171005 18:52:09.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:09.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:09.783" endtime="20171005 18:52:09.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:52:09.784" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:52:09.784" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:52:09.784" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:52:09.784" endtime="20171005 18:52:09.784"></status>
</kw>
<msg timestamp="20171005 18:52:09.785" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:52:09.471" endtime="20171005 18:52:09.785"></status>
</kw>
<msg timestamp="20171005 18:52:09.785" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:52:09.471" endtime="20171005 18:52:09.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:52:09.786" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:52:09.785" endtime="20171005 18:52:09.786"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:09.470" endtime="20171005 18:52:09.786"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:09.470" endtime="20171005 18:52:09.786"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:52:19.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:52:19.791" endtime="20171005 18:52:19.792"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:52:19.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:52:19.792" endtime="20171005 18:52:19.793"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:52:19.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:52:19.793" endtime="20171005 18:52:19.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:52:19.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:52:19.793" endtime="20171005 18:52:19.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:52:19.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:52:19.795" endtime="20171005 18:52:19.970"></status>
</kw>
<msg timestamp="20171005 18:52:19.970" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:52:19.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:19.794" endtime="20171005 18:52:19.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:52:19.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:19.971" endtime="20171005 18:52:19.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:19.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:19.971" endtime="20171005 18:52:19.972"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:19.790" endtime="20171005 18:52:19.972"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:19.790" endtime="20171005 18:52:19.972"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:19.789" endtime="20171005 18:52:19.972"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:52:19.973" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:52:19.972" endtime="20171005 18:52:19.973"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:19.975" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:19.974" endtime="20171005 18:52:19.975"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:19.976" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:19.975" endtime="20171005 18:52:19.976"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:19.975" endtime="20171005 18:52:19.976"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:19.973" endtime="20171005 18:52:19.976"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:19.973" endtime="20171005 18:52:19.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:52:20.050" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:52:20.050" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:19.976" endtime="20171005 18:52:20.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:20.052" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:20.051" endtime="20171005 18:52:20.052"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:20.053" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:20.053" endtime="20171005 18:52:20.053"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:20.052" endtime="20171005 18:52:20.053"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:20.051" endtime="20171005 18:52:20.054"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:20.050" endtime="20171005 18:52:20.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:52:20.054" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:52:20.054" endtime="20171005 18:52:20.054"></status>
</kw>
<msg timestamp="20171005 18:52:20.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:19.789" endtime="20171005 18:52:20.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:20.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:20.055" endtime="20171005 18:52:20.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:52:20.056" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:52:20.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:52:20.056" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:52:20.055" endtime="20171005 18:52:20.056"></status>
</kw>
<msg timestamp="20171005 18:52:20.056" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:52:19.788" endtime="20171005 18:52:20.056"></status>
</kw>
<msg timestamp="20171005 18:52:20.056" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:52:19.788" endtime="20171005 18:52:20.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:52:20.057" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:52:20.057" endtime="20171005 18:52:20.057"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:19.787" endtime="20171005 18:52:20.057"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:19.787" endtime="20171005 18:52:20.058"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:52:30.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:52:30.062" endtime="20171005 18:52:30.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:52:30.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:52:30.063" endtime="20171005 18:52:30.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:52:30.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:52:30.064" endtime="20171005 18:52:30.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:52:30.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:52:30.064" endtime="20171005 18:52:30.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:52:30.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:52:30.066" endtime="20171005 18:52:30.248"></status>
</kw>
<msg timestamp="20171005 18:52:30.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:52:30.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:30.065" endtime="20171005 18:52:30.248"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:52:30.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:30.248" endtime="20171005 18:52:30.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:30.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:30.249" endtime="20171005 18:52:30.250"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.062" endtime="20171005 18:52:30.250"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.061" endtime="20171005 18:52:30.250"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.061" endtime="20171005 18:52:30.250"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:52:30.250" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:52:30.250" endtime="20171005 18:52:30.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:30.253" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:30.252" endtime="20171005 18:52:30.253"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:30.253" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:30.253" endtime="20171005 18:52:30.254"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.253" endtime="20171005 18:52:30.254"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.251" endtime="20171005 18:52:30.254"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.251" endtime="20171005 18:52:30.254"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:52:30.319" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:52:30.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:30.254" endtime="20171005 18:52:30.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:30.321" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:30.320" endtime="20171005 18:52:30.321"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:30.322" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:30.321" endtime="20171005 18:52:30.322"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.321" endtime="20171005 18:52:30.322"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.320" endtime="20171005 18:52:30.322"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:30.319" endtime="20171005 18:52:30.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:52:30.322" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:52:30.322" endtime="20171005 18:52:30.323"></status>
</kw>
<msg timestamp="20171005 18:52:30.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:30.060" endtime="20171005 18:52:30.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:30.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:30.323" endtime="20171005 18:52:30.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:52:30.324" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:52:30.324" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:52:30.324" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:52:30.324" endtime="20171005 18:52:30.324"></status>
</kw>
<msg timestamp="20171005 18:52:30.325" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:52:30.059" endtime="20171005 18:52:30.325"></status>
</kw>
<msg timestamp="20171005 18:52:30.325" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:52:30.059" endtime="20171005 18:52:30.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:52:30.325" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:52:30.325" endtime="20171005 18:52:30.326"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:30.059" endtime="20171005 18:52:30.326"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:30.058" endtime="20171005 18:52:30.326"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:52:40.332" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:52:40.332" endtime="20171005 18:52:40.332"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:52:40.333" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:52:40.333" endtime="20171005 18:52:40.333"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:52:40.334" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:52:40.333" endtime="20171005 18:52:40.334"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:52:40.334" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:52:40.334" endtime="20171005 18:52:40.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:52:40.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:52:40.335" endtime="20171005 18:52:40.528"></status>
</kw>
<msg timestamp="20171005 18:52:40.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:52:40.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:40.335" endtime="20171005 18:52:40.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:52:40.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:40.529" endtime="20171005 18:52:40.529"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:40.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:40.529" endtime="20171005 18:52:40.530"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.330" endtime="20171005 18:52:40.530"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.330" endtime="20171005 18:52:40.530"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.329" endtime="20171005 18:52:40.530"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:52:40.531" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:52:40.530" endtime="20171005 18:52:40.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:40.533" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:40.532" endtime="20171005 18:52:40.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:40.534" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:40.534" endtime="20171005 18:52:40.534"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.533" endtime="20171005 18:52:40.534"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.531" endtime="20171005 18:52:40.534"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.531" endtime="20171005 18:52:40.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:52:40.611" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:52:40.611" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:40.535" endtime="20171005 18:52:40.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:40.613" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:40.613" endtime="20171005 18:52:40.613"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:40.615" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:40.614" endtime="20171005 18:52:40.615"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.613" endtime="20171005 18:52:40.615"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.612" endtime="20171005 18:52:40.615"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:40.612" endtime="20171005 18:52:40.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:52:40.615" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:52:40.615" endtime="20171005 18:52:40.615"></status>
</kw>
<msg timestamp="20171005 18:52:40.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:40.328" endtime="20171005 18:52:40.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:40.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:40.616" endtime="20171005 18:52:40.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:52:40.617" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:52:40.617" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:52:40.617" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:52:40.617" endtime="20171005 18:52:40.617"></status>
</kw>
<msg timestamp="20171005 18:52:40.617" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:52:40.328" endtime="20171005 18:52:40.618"></status>
</kw>
<msg timestamp="20171005 18:52:40.618" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:52:40.327" endtime="20171005 18:52:40.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:52:40.618" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:52:40.618" endtime="20171005 18:52:40.619"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:40.327" endtime="20171005 18:52:40.619"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:40.326" endtime="20171005 18:52:40.619"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:52:50.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:52:50.624" endtime="20171005 18:52:50.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:52:50.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:52:50.625" endtime="20171005 18:52:50.625"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:52:50.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:52:50.625" endtime="20171005 18:52:50.626"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:52:50.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:52:50.626" endtime="20171005 18:52:50.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:52:50.849" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:52:50.627" endtime="20171005 18:52:50.850"></status>
</kw>
<msg timestamp="20171005 18:52:50.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:52:50.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:50.627" endtime="20171005 18:52:50.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:52:50.850" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:50.850" endtime="20171005 18:52:50.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:50.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:50.851" endtime="20171005 18:52:50.851"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.623" endtime="20171005 18:52:50.851"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.623" endtime="20171005 18:52:50.851"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.622" endtime="20171005 18:52:50.851"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:52:50.852" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:52:50.852" endtime="20171005 18:52:50.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:50.854" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:50.854" endtime="20171005 18:52:50.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:50.855" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:52:50.855" endtime="20171005 18:52:50.855"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.854" endtime="20171005 18:52:50.855"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.853" endtime="20171005 18:52:50.856"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.852" endtime="20171005 18:52:50.856"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:52:50.928" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:52:50.928" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:50.856" endtime="20171005 18:52:50.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:52:50.930" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:50.929" endtime="20171005 18:52:50.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:52:50.931" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:52:50.930" endtime="20171005 18:52:50.931"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.930" endtime="20171005 18:52:50.931"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.929" endtime="20171005 18:52:50.931"></status>
</kw>
<status status="PASS" starttime="20171005 18:52:50.928" endtime="20171005 18:52:50.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:52:50.932" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:52:50.931" endtime="20171005 18:52:50.932"></status>
</kw>
<msg timestamp="20171005 18:52:50.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:52:50.621" endtime="20171005 18:52:50.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:52:50.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:52:50.932" endtime="20171005 18:52:50.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:52:50.933" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:52:50.933" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:52:50.933" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:52:50.933" endtime="20171005 18:52:50.933"></status>
</kw>
<msg timestamp="20171005 18:52:50.934" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:52:50.621" endtime="20171005 18:52:50.934"></status>
</kw>
<msg timestamp="20171005 18:52:50.934" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:52:50.620" endtime="20171005 18:52:50.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:52:50.935" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:52:50.934" endtime="20171005 18:52:50.935"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:50.620" endtime="20171005 18:52:50.935"></status>
</kw>
<status status="FAIL" starttime="20171005 18:52:50.619" endtime="20171005 18:52:50.935"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:53:00.944" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:53:00.943" endtime="20171005 18:53:00.944"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:53:00.945" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:53:00.944" endtime="20171005 18:53:00.945"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:53:00.945" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:53:00.945" endtime="20171005 18:53:00.945"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:53:00.946" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:53:00.946" endtime="20171005 18:53:00.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:53:01.125" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:53:00.947" endtime="20171005 18:53:01.125"></status>
</kw>
<msg timestamp="20171005 18:53:01.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:53:01.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:00.946" endtime="20171005 18:53:01.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:53:01.126" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:01.125" endtime="20171005 18:53:01.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:01.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:01.126" endtime="20171005 18:53:01.126"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:00.942" endtime="20171005 18:53:01.127"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:00.942" endtime="20171005 18:53:01.127"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:00.941" endtime="20171005 18:53:01.127"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:53:01.128" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:53:01.127" endtime="20171005 18:53:01.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:01.130" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:01.129" endtime="20171005 18:53:01.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:01.131" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:01.130" endtime="20171005 18:53:01.131"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:01.130" endtime="20171005 18:53:01.131"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:01.128" endtime="20171005 18:53:01.131"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:01.128" endtime="20171005 18:53:01.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:53:01.235" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:53:01.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:01.131" endtime="20171005 18:53:01.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:01.237" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:01.237" endtime="20171005 18:53:01.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:01.242" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:01.238" endtime="20171005 18:53:01.242"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:01.237" endtime="20171005 18:53:01.242"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:01.236" endtime="20171005 18:53:01.243"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:01.236" endtime="20171005 18:53:01.243"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:53:01.243" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:53:01.243" endtime="20171005 18:53:01.243"></status>
</kw>
<msg timestamp="20171005 18:53:01.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:00.941" endtime="20171005 18:53:01.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:01.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:01.244" endtime="20171005 18:53:01.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:53:01.245" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:53:01.245" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:53:01.245" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:53:01.244" endtime="20171005 18:53:01.245"></status>
</kw>
<msg timestamp="20171005 18:53:01.245" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:53:00.940" endtime="20171005 18:53:01.245"></status>
</kw>
<msg timestamp="20171005 18:53:01.246" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:53:00.940" endtime="20171005 18:53:01.246"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:53:01.246" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:53:01.246" endtime="20171005 18:53:01.246"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:00.939" endtime="20171005 18:53:01.247"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:00.936" endtime="20171005 18:53:01.247"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:53:11.252" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:53:11.252" endtime="20171005 18:53:11.253"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:53:11.253" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:53:11.253" endtime="20171005 18:53:11.253"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:53:11.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:53:11.254" endtime="20171005 18:53:11.254"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:53:11.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:53:11.254" endtime="20171005 18:53:11.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:53:11.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:53:11.255" endtime="20171005 18:53:11.460"></status>
</kw>
<msg timestamp="20171005 18:53:11.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:53:11.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:11.255" endtime="20171005 18:53:11.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:53:11.461" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:11.461" endtime="20171005 18:53:11.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:11.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:11.462" endtime="20171005 18:53:11.462"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.251" endtime="20171005 18:53:11.462"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.251" endtime="20171005 18:53:11.462"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.250" endtime="20171005 18:53:11.462"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:53:11.463" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:53:11.463" endtime="20171005 18:53:11.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:11.465" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:11.464" endtime="20171005 18:53:11.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:11.466" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:11.466" endtime="20171005 18:53:11.466"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.465" endtime="20171005 18:53:11.466"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.464" endtime="20171005 18:53:11.466"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.463" endtime="20171005 18:53:11.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:53:11.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:53:11.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:11.467" endtime="20171005 18:53:11.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:11.543" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:11.543" endtime="20171005 18:53:11.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:11.544" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:11.544" endtime="20171005 18:53:11.544"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.543" endtime="20171005 18:53:11.544"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.542" endtime="20171005 18:53:11.545"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:11.542" endtime="20171005 18:53:11.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:53:11.545" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:53:11.545" endtime="20171005 18:53:11.545"></status>
</kw>
<msg timestamp="20171005 18:53:11.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:11.250" endtime="20171005 18:53:11.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:11.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:11.546" endtime="20171005 18:53:11.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:53:11.547" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:53:11.547" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:53:11.547" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:53:11.546" endtime="20171005 18:53:11.547"></status>
</kw>
<msg timestamp="20171005 18:53:11.547" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:53:11.249" endtime="20171005 18:53:11.547"></status>
</kw>
<msg timestamp="20171005 18:53:11.547" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:53:11.249" endtime="20171005 18:53:11.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:53:11.548" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:53:11.548" endtime="20171005 18:53:11.548"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:11.248" endtime="20171005 18:53:11.548"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:11.247" endtime="20171005 18:53:11.549"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:53:21.556" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:53:21.556" endtime="20171005 18:53:21.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:53:21.557" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:53:21.557" endtime="20171005 18:53:21.557"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:53:21.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:53:21.558" endtime="20171005 18:53:21.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:53:21.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:53:21.559" endtime="20171005 18:53:21.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:53:21.774" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:53:21.561" endtime="20171005 18:53:21.774"></status>
</kw>
<msg timestamp="20171005 18:53:21.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:53:21.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:21.560" endtime="20171005 18:53:21.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:53:21.775" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:21.775" endtime="20171005 18:53:21.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:21.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:21.776" endtime="20171005 18:53:21.776"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.554" endtime="20171005 18:53:21.776"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.554" endtime="20171005 18:53:21.776"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.553" endtime="20171005 18:53:21.777"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:53:21.777" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:53:21.777" endtime="20171005 18:53:21.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:21.780" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:21.779" endtime="20171005 18:53:21.780"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:21.780" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:21.780" endtime="20171005 18:53:21.781"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.780" endtime="20171005 18:53:21.781"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.778" endtime="20171005 18:53:21.781"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.777" endtime="20171005 18:53:21.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:53:21.877" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:53:21.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:21.781" endtime="20171005 18:53:21.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:21.879" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:21.879" endtime="20171005 18:53:21.879"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:21.881" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:21.880" endtime="20171005 18:53:21.881"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.879" endtime="20171005 18:53:21.881"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.878" endtime="20171005 18:53:21.881"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:21.878" endtime="20171005 18:53:21.881"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:53:21.881" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:53:21.881" endtime="20171005 18:53:21.881"></status>
</kw>
<msg timestamp="20171005 18:53:21.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:21.551" endtime="20171005 18:53:21.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:21.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:21.882" endtime="20171005 18:53:21.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:53:21.883" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:53:21.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:53:21.883" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:53:21.883" endtime="20171005 18:53:21.883"></status>
</kw>
<msg timestamp="20171005 18:53:21.883" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:53:21.551" endtime="20171005 18:53:21.884"></status>
</kw>
<msg timestamp="20171005 18:53:21.884" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:53:21.550" endtime="20171005 18:53:21.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:53:21.885" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:53:21.884" endtime="20171005 18:53:21.885"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:21.550" endtime="20171005 18:53:21.885"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:21.549" endtime="20171005 18:53:21.885"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:53:31.890" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:53:31.890" endtime="20171005 18:53:31.890"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:53:31.891" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:53:31.891" endtime="20171005 18:53:31.891"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:53:31.892" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:53:31.891" endtime="20171005 18:53:31.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:53:31.892" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:53:31.892" endtime="20171005 18:53:31.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:53:32.084" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:53:31.893" endtime="20171005 18:53:32.085"></status>
</kw>
<msg timestamp="20171005 18:53:32.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:53:32.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:31.893" endtime="20171005 18:53:32.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:53:32.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:32.085" endtime="20171005 18:53:32.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:32.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:32.086" endtime="20171005 18:53:32.086"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:31.889" endtime="20171005 18:53:32.086"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:31.889" endtime="20171005 18:53:32.087"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:31.888" endtime="20171005 18:53:32.087"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:53:32.087" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:53:32.087" endtime="20171005 18:53:32.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:32.089" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:32.089" endtime="20171005 18:53:32.089"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:32.090" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:32.090" endtime="20171005 18:53:32.091"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:32.090" endtime="20171005 18:53:32.091"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:32.088" endtime="20171005 18:53:32.091"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:32.088" endtime="20171005 18:53:32.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:53:32.166" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:53:32.166" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:32.091" endtime="20171005 18:53:32.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:32.168" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:32.168" endtime="20171005 18:53:32.168"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:32.169" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:32.169" endtime="20171005 18:53:32.169"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:32.168" endtime="20171005 18:53:32.169"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:32.167" endtime="20171005 18:53:32.169"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:32.167" endtime="20171005 18:53:32.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:53:32.170" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:53:32.170" endtime="20171005 18:53:32.170"></status>
</kw>
<msg timestamp="20171005 18:53:32.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:31.887" endtime="20171005 18:53:32.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:32.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:32.170" endtime="20171005 18:53:32.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:53:32.171" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:53:32.172" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:53:32.172" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:53:32.171" endtime="20171005 18:53:32.172"></status>
</kw>
<msg timestamp="20171005 18:53:32.172" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:53:31.887" endtime="20171005 18:53:32.172"></status>
</kw>
<msg timestamp="20171005 18:53:32.172" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:53:31.886" endtime="20171005 18:53:32.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:53:32.173" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:53:32.173" endtime="20171005 18:53:32.173"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:31.886" endtime="20171005 18:53:32.173"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:31.885" endtime="20171005 18:53:32.173"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:53:42.179" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:53:42.179" endtime="20171005 18:53:42.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:53:42.180" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:53:42.180" endtime="20171005 18:53:42.180"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:53:42.181" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:53:42.181" endtime="20171005 18:53:42.181"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:53:42.182" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:53:42.181" endtime="20171005 18:53:42.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:53:42.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:53:42.182" endtime="20171005 18:53:42.366"></status>
</kw>
<msg timestamp="20171005 18:53:42.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:53:42.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:42.182" endtime="20171005 18:53:42.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:53:42.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:42.366" endtime="20171005 18:53:42.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:42.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:42.367" endtime="20171005 18:53:42.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.178" endtime="20171005 18:53:42.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.177" endtime="20171005 18:53:42.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.177" endtime="20171005 18:53:42.368"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:53:42.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:53:42.368" endtime="20171005 18:53:42.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:42.371" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:42.370" endtime="20171005 18:53:42.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:42.372" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:42.371" endtime="20171005 18:53:42.372"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.371" endtime="20171005 18:53:42.372"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.369" endtime="20171005 18:53:42.372"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.369" endtime="20171005 18:53:42.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:53:42.446" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:53:42.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:42.372" endtime="20171005 18:53:42.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:42.448" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:42.447" endtime="20171005 18:53:42.448"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:42.449" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:42.449" endtime="20171005 18:53:42.449"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.448" endtime="20171005 18:53:42.450"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.447" endtime="20171005 18:53:42.450"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:42.446" endtime="20171005 18:53:42.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:53:42.450" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:53:42.450" endtime="20171005 18:53:42.450"></status>
</kw>
<msg timestamp="20171005 18:53:42.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:42.176" endtime="20171005 18:53:42.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:42.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:42.451" endtime="20171005 18:53:42.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:53:42.452" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:53:42.452" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:53:42.452" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:53:42.451" endtime="20171005 18:53:42.452"></status>
</kw>
<msg timestamp="20171005 18:53:42.452" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:53:42.175" endtime="20171005 18:53:42.452"></status>
</kw>
<msg timestamp="20171005 18:53:42.453" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:53:42.175" endtime="20171005 18:53:42.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:53:42.454" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:53:42.453" endtime="20171005 18:53:42.454"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:42.175" endtime="20171005 18:53:42.454"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:42.174" endtime="20171005 18:53:42.454"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:53:52.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:53:52.459" endtime="20171005 18:53:52.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:53:52.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:53:52.460" endtime="20171005 18:53:52.460"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:53:52.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:53:52.461" endtime="20171005 18:53:52.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:53:52.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:53:52.461" endtime="20171005 18:53:52.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:53:52.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:53:52.462" endtime="20171005 18:53:52.664"></status>
</kw>
<msg timestamp="20171005 18:53:52.664" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:53:52.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:52.462" endtime="20171005 18:53:52.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:53:52.665" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:52.664" endtime="20171005 18:53:52.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:52.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:52.665" endtime="20171005 18:53:52.665"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.458" endtime="20171005 18:53:52.665"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.458" endtime="20171005 18:53:52.666"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.457" endtime="20171005 18:53:52.666"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:53:52.666" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:53:52.666" endtime="20171005 18:53:52.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:52.669" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:52.668" endtime="20171005 18:53:52.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:52.670" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:53:52.670" endtime="20171005 18:53:52.671"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.669" endtime="20171005 18:53:52.671"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.667" endtime="20171005 18:53:52.671"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.667" endtime="20171005 18:53:52.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:53:52.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:53:52.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:52.671" endtime="20171005 18:53:52.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:53:52.738" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:52.737" endtime="20171005 18:53:52.738"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:53:52.739" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:53:52.739" endtime="20171005 18:53:52.739"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.738" endtime="20171005 18:53:52.739"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.737" endtime="20171005 18:53:52.739"></status>
</kw>
<status status="PASS" starttime="20171005 18:53:52.736" endtime="20171005 18:53:52.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:53:52.740" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:53:52.740" endtime="20171005 18:53:52.740"></status>
</kw>
<msg timestamp="20171005 18:53:52.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:53:52.457" endtime="20171005 18:53:52.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:53:52.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:53:52.740" endtime="20171005 18:53:52.741"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:53:52.741" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:53:52.741" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:53:52.741" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:53:52.741" endtime="20171005 18:53:52.742"></status>
</kw>
<msg timestamp="20171005 18:53:52.742" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:53:52.456" endtime="20171005 18:53:52.742"></status>
</kw>
<msg timestamp="20171005 18:53:52.742" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:53:52.455" endtime="20171005 18:53:52.742"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:53:52.743" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:53:52.742" endtime="20171005 18:53:52.743"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:52.455" endtime="20171005 18:53:52.743"></status>
</kw>
<status status="FAIL" starttime="20171005 18:53:52.455" endtime="20171005 18:53:52.743"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:54:02.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:54:02.749" endtime="20171005 18:54:02.749"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:54:02.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:54:02.750" endtime="20171005 18:54:02.750"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:54:02.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:54:02.750" endtime="20171005 18:54:02.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:54:02.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:54:02.751" endtime="20171005 18:54:02.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:54:02.960" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:54:02.752" endtime="20171005 18:54:02.960"></status>
</kw>
<msg timestamp="20171005 18:54:02.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:54:02.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:02.752" endtime="20171005 18:54:02.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:54:02.961" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:02.960" endtime="20171005 18:54:02.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:02.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:02.961" endtime="20171005 18:54:02.962"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:02.747" endtime="20171005 18:54:02.962"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:02.747" endtime="20171005 18:54:02.962"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:02.746" endtime="20171005 18:54:02.962"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:54:02.963" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:54:02.962" endtime="20171005 18:54:02.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:02.965" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:02.964" endtime="20171005 18:54:02.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:02.966" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:02.965" endtime="20171005 18:54:02.966"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:02.965" endtime="20171005 18:54:02.966"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:02.963" endtime="20171005 18:54:02.966"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:02.963" endtime="20171005 18:54:02.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:54:03.030" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:54:03.030" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:02.966" endtime="20171005 18:54:03.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:03.032" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:03.031" endtime="20171005 18:54:03.032"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:03.033" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:03.033" endtime="20171005 18:54:03.033"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:03.032" endtime="20171005 18:54:03.033"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:03.031" endtime="20171005 18:54:03.034"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:03.030" endtime="20171005 18:54:03.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:54:03.034" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:54:03.034" endtime="20171005 18:54:03.034"></status>
</kw>
<msg timestamp="20171005 18:54:03.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:02.746" endtime="20171005 18:54:03.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:03.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:03.035" endtime="20171005 18:54:03.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:54:03.036" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:54:03.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:54:03.036" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:54:03.035" endtime="20171005 18:54:03.036"></status>
</kw>
<msg timestamp="20171005 18:54:03.036" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:54:02.745" endtime="20171005 18:54:03.036"></status>
</kw>
<msg timestamp="20171005 18:54:03.037" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:54:02.745" endtime="20171005 18:54:03.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:54:03.038" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:54:03.037" endtime="20171005 18:54:03.038"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:02.744" endtime="20171005 18:54:03.038"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:02.744" endtime="20171005 18:54:03.038"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:54:13.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:54:13.043" endtime="20171005 18:54:13.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:54:13.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:54:13.044" endtime="20171005 18:54:13.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:54:13.045" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:54:13.044" endtime="20171005 18:54:13.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:54:13.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:54:13.045" endtime="20171005 18:54:13.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:54:13.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:54:13.046" endtime="20171005 18:54:13.253"></status>
</kw>
<msg timestamp="20171005 18:54:13.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:54:13.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:13.046" endtime="20171005 18:54:13.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:54:13.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:13.254" endtime="20171005 18:54:13.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:13.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:13.256" endtime="20171005 18:54:13.256"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.042" endtime="20171005 18:54:13.256"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.042" endtime="20171005 18:54:13.257"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.041" endtime="20171005 18:54:13.257"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:54:13.257" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:54:13.257" endtime="20171005 18:54:13.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:13.260" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:13.259" endtime="20171005 18:54:13.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:13.261" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:13.260" endtime="20171005 18:54:13.261"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.260" endtime="20171005 18:54:13.261"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.258" endtime="20171005 18:54:13.261"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.258" endtime="20171005 18:54:13.261"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:54:13.325" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:54:13.325" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:13.261" endtime="20171005 18:54:13.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:13.327" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:13.326" endtime="20171005 18:54:13.327"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:13.328" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:13.328" endtime="20171005 18:54:13.329"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.327" endtime="20171005 18:54:13.329"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.326" endtime="20171005 18:54:13.329"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:13.325" endtime="20171005 18:54:13.329"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:54:13.329" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:54:13.329" endtime="20171005 18:54:13.330"></status>
</kw>
<msg timestamp="20171005 18:54:13.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:13.040" endtime="20171005 18:54:13.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:13.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:13.330" endtime="20171005 18:54:13.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:54:13.331" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:54:13.331" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:54:13.331" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:54:13.331" endtime="20171005 18:54:13.331"></status>
</kw>
<msg timestamp="20171005 18:54:13.332" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:54:13.040" endtime="20171005 18:54:13.332"></status>
</kw>
<msg timestamp="20171005 18:54:13.332" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:54:13.040" endtime="20171005 18:54:13.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:54:13.333" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:54:13.332" endtime="20171005 18:54:13.333"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:13.039" endtime="20171005 18:54:13.333"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:13.038" endtime="20171005 18:54:13.333"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:54:23.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:54:23.338" endtime="20171005 18:54:23.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:54:23.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:54:23.339" endtime="20171005 18:54:23.340"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:54:23.340" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:54:23.340" endtime="20171005 18:54:23.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:54:23.341" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:54:23.341" endtime="20171005 18:54:23.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:54:23.535" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:54:23.342" endtime="20171005 18:54:23.535"></status>
</kw>
<msg timestamp="20171005 18:54:23.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:54:23.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:23.342" endtime="20171005 18:54:23.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:54:23.536" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:23.536" endtime="20171005 18:54:23.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:23.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:23.536" endtime="20171005 18:54:23.537"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.337" endtime="20171005 18:54:23.537"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.337" endtime="20171005 18:54:23.537"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.336" endtime="20171005 18:54:23.537"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:54:23.538" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:54:23.537" endtime="20171005 18:54:23.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:23.540" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:23.539" endtime="20171005 18:54:23.540"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:23.541" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:23.541" endtime="20171005 18:54:23.541"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.540" endtime="20171005 18:54:23.541"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.538" endtime="20171005 18:54:23.541"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.538" endtime="20171005 18:54:23.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:54:23.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:54:23.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:23.542" endtime="20171005 18:54:23.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:23.631" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:23.630" endtime="20171005 18:54:23.631"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:23.636" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:23.631" endtime="20171005 18:54:23.636"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.631" endtime="20171005 18:54:23.636"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.630" endtime="20171005 18:54:23.637"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:23.629" endtime="20171005 18:54:23.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:54:23.637" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:54:23.637" endtime="20171005 18:54:23.637"></status>
</kw>
<msg timestamp="20171005 18:54:23.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:23.336" endtime="20171005 18:54:23.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:23.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:23.638" endtime="20171005 18:54:23.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:54:23.639" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:54:23.639" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:54:23.639" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:54:23.638" endtime="20171005 18:54:23.639"></status>
</kw>
<msg timestamp="20171005 18:54:23.639" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:54:23.335" endtime="20171005 18:54:23.639"></status>
</kw>
<msg timestamp="20171005 18:54:23.640" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:54:23.334" endtime="20171005 18:54:23.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:54:23.640" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:54:23.640" endtime="20171005 18:54:23.640"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:23.334" endtime="20171005 18:54:23.641"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:23.333" endtime="20171005 18:54:23.641"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:54:33.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:54:33.645" endtime="20171005 18:54:33.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:54:33.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:54:33.646" endtime="20171005 18:54:33.647"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:54:33.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:54:33.647" endtime="20171005 18:54:33.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:54:33.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:54:33.648" endtime="20171005 18:54:33.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:54:33.874" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:54:33.649" endtime="20171005 18:54:33.874"></status>
</kw>
<msg timestamp="20171005 18:54:33.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:54:33.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:33.648" endtime="20171005 18:54:33.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:54:33.875" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:33.875" endtime="20171005 18:54:33.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:33.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:33.875" endtime="20171005 18:54:33.876"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.645" endtime="20171005 18:54:33.876"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.644" endtime="20171005 18:54:33.876"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.644" endtime="20171005 18:54:33.876"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:54:33.877" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:54:33.876" endtime="20171005 18:54:33.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:33.879" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:33.878" endtime="20171005 18:54:33.879"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:33.880" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:33.879" endtime="20171005 18:54:33.880"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.879" endtime="20171005 18:54:33.880"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.877" endtime="20171005 18:54:33.880"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.877" endtime="20171005 18:54:33.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:54:33.945" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:54:33.945" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:33.880" endtime="20171005 18:54:33.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:33.947" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:33.946" endtime="20171005 18:54:33.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:33.947" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:33.947" endtime="20171005 18:54:33.948"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.947" endtime="20171005 18:54:33.948"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.946" endtime="20171005 18:54:33.948"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:33.945" endtime="20171005 18:54:33.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:54:33.948" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:54:33.948" endtime="20171005 18:54:33.948"></status>
</kw>
<msg timestamp="20171005 18:54:33.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:33.643" endtime="20171005 18:54:33.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:33.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:33.949" endtime="20171005 18:54:33.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:54:33.950" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:54:33.950" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:54:33.950" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:54:33.950" endtime="20171005 18:54:33.950"></status>
</kw>
<msg timestamp="20171005 18:54:33.950" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:54:33.642" endtime="20171005 18:54:33.950"></status>
</kw>
<msg timestamp="20171005 18:54:33.951" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:54:33.642" endtime="20171005 18:54:33.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:54:33.951" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:54:33.951" endtime="20171005 18:54:33.952"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:33.642" endtime="20171005 18:54:33.952"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:33.641" endtime="20171005 18:54:33.952"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:54:43.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:54:43.957" endtime="20171005 18:54:43.958"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:54:43.958" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:54:43.958" endtime="20171005 18:54:43.958"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:54:43.959" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:54:43.959" endtime="20171005 18:54:43.959"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:54:43.960" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:54:43.959" endtime="20171005 18:54:43.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:54:44.180" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:54:43.960" endtime="20171005 18:54:44.180"></status>
</kw>
<msg timestamp="20171005 18:54:44.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:54:44.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:43.960" endtime="20171005 18:54:44.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:54:44.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:44.180" endtime="20171005 18:54:44.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:44.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:44.181" endtime="20171005 18:54:44.182"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:43.956" endtime="20171005 18:54:44.182"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:43.956" endtime="20171005 18:54:44.182"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:43.955" endtime="20171005 18:54:44.182"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:54:44.183" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:54:44.182" endtime="20171005 18:54:44.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:44.185" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:44.184" endtime="20171005 18:54:44.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:44.186" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:44.186" endtime="20171005 18:54:44.186"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:44.185" endtime="20171005 18:54:44.186"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:44.183" endtime="20171005 18:54:44.186"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:44.183" endtime="20171005 18:54:44.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:54:44.275" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:54:44.275" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:44.186" endtime="20171005 18:54:44.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:44.277" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:44.276" endtime="20171005 18:54:44.277"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:44.278" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:44.277" endtime="20171005 18:54:44.278"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:44.277" endtime="20171005 18:54:44.278"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:44.276" endtime="20171005 18:54:44.278"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:44.275" endtime="20171005 18:54:44.279"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:54:44.279" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:54:44.279" endtime="20171005 18:54:44.279"></status>
</kw>
<msg timestamp="20171005 18:54:44.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:43.954" endtime="20171005 18:54:44.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:44.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:44.279" endtime="20171005 18:54:44.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:54:44.281" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:54:44.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:54:44.281" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:54:44.280" endtime="20171005 18:54:44.281"></status>
</kw>
<msg timestamp="20171005 18:54:44.281" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:54:43.954" endtime="20171005 18:54:44.281"></status>
</kw>
<msg timestamp="20171005 18:54:44.281" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:54:43.953" endtime="20171005 18:54:44.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:54:44.282" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:54:44.282" endtime="20171005 18:54:44.282"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:43.953" endtime="20171005 18:54:44.282"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:43.952" endtime="20171005 18:54:44.282"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:54:54.290" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:54:54.289" endtime="20171005 18:54:54.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:54:54.291" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:54:54.291" endtime="20171005 18:54:54.291"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:54:54.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:54:54.291" endtime="20171005 18:54:54.292"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:54:54.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:54:54.292" endtime="20171005 18:54:54.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:54:54.505" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:54:54.293" endtime="20171005 18:54:54.505"></status>
</kw>
<msg timestamp="20171005 18:54:54.505" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:54:54.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:54.293" endtime="20171005 18:54:54.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:54:54.506" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:54.506" endtime="20171005 18:54:54.506"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:54.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:54.506" endtime="20171005 18:54:54.507"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.288" endtime="20171005 18:54:54.507"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.288" endtime="20171005 18:54:54.507"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.287" endtime="20171005 18:54:54.507"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:54:54.508" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:54:54.507" endtime="20171005 18:54:54.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:54.510" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:54.509" endtime="20171005 18:54:54.510"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:54.511" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:54:54.510" endtime="20171005 18:54:54.511"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.510" endtime="20171005 18:54:54.511"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.508" endtime="20171005 18:54:54.511"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.508" endtime="20171005 18:54:54.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:54:54.576" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:54:54.577" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:54.511" endtime="20171005 18:54:54.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:54:54.579" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:54.578" endtime="20171005 18:54:54.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:54:54.580" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:54:54.579" endtime="20171005 18:54:54.580"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.579" endtime="20171005 18:54:54.580"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.577" endtime="20171005 18:54:54.580"></status>
</kw>
<status status="PASS" starttime="20171005 18:54:54.577" endtime="20171005 18:54:54.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:54:54.580" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:54:54.580" endtime="20171005 18:54:54.581"></status>
</kw>
<msg timestamp="20171005 18:54:54.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:54:54.286" endtime="20171005 18:54:54.581"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:54:54.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:54:54.581" endtime="20171005 18:54:54.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:54:54.582" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:54:54.582" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:54:54.582" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:54:54.582" endtime="20171005 18:54:54.582"></status>
</kw>
<msg timestamp="20171005 18:54:54.582" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:54:54.285" endtime="20171005 18:54:54.583"></status>
</kw>
<msg timestamp="20171005 18:54:54.583" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:54:54.285" endtime="20171005 18:54:54.583"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:54:54.583" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:54:54.583" endtime="20171005 18:54:54.584"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:54.284" endtime="20171005 18:54:54.584"></status>
</kw>
<status status="FAIL" starttime="20171005 18:54:54.283" endtime="20171005 18:54:54.584"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:04.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:04.590" endtime="20171005 18:55:04.590"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:04.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:04.591" endtime="20171005 18:55:04.591"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:04.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:04.591" endtime="20171005 18:55:04.592"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:04.592" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:04.592" endtime="20171005 18:55:04.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:04.791" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:04.593" endtime="20171005 18:55:04.792"></status>
</kw>
<msg timestamp="20171005 18:55:04.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:04.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:04.593" endtime="20171005 18:55:04.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:04.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:04.792" endtime="20171005 18:55:04.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:04.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:04.793" endtime="20171005 18:55:04.794"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.588" endtime="20171005 18:55:04.794"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.588" endtime="20171005 18:55:04.794"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.587" endtime="20171005 18:55:04.794"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:04.795" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:55:04.794" endtime="20171005 18:55:04.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:04.797" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:04.796" endtime="20171005 18:55:04.797"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:04.798" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:04.798" endtime="20171005 18:55:04.798"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.797" endtime="20171005 18:55:04.798"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.795" endtime="20171005 18:55:04.798"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.795" endtime="20171005 18:55:04.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:04.870" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:55:04.871" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:04.799" endtime="20171005 18:55:04.871"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:04.872" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:04.872" endtime="20171005 18:55:04.872"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:04.874" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:04.873" endtime="20171005 18:55:04.874"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.873" endtime="20171005 18:55:04.874"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.871" endtime="20171005 18:55:04.874"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:04.871" endtime="20171005 18:55:04.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:04.875" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:04.874" endtime="20171005 18:55:04.875"></status>
</kw>
<msg timestamp="20171005 18:55:04.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:04.587" endtime="20171005 18:55:04.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:04.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:04.875" endtime="20171005 18:55:04.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:04.876" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:04.876" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:04.876" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:04.876" endtime="20171005 18:55:04.876"></status>
</kw>
<msg timestamp="20171005 18:55:04.877" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:55:04.586" endtime="20171005 18:55:04.877"></status>
</kw>
<msg timestamp="20171005 18:55:04.877" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:55:04.586" endtime="20171005 18:55:04.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:55:04.878" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:55:04.877" endtime="20171005 18:55:04.878"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:04.585" endtime="20171005 18:55:04.878"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:04.584" endtime="20171005 18:55:04.878"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:14.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:14.885" endtime="20171005 18:55:14.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:14.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:14.886" endtime="20171005 18:55:14.887"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:14.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:14.887" endtime="20171005 18:55:14.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:14.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:14.888" endtime="20171005 18:55:14.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:15.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:14.890" endtime="20171005 18:55:15.094"></status>
</kw>
<msg timestamp="20171005 18:55:15.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:15.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:14.889" endtime="20171005 18:55:15.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:15.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:15.094" endtime="20171005 18:55:15.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:15.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:15.095" endtime="20171005 18:55:15.096"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:14.884" endtime="20171005 18:55:15.096"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:14.883" endtime="20171005 18:55:15.096"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:14.882" endtime="20171005 18:55:15.096"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:15.097" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:55:15.096" endtime="20171005 18:55:15.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:15.099" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:15.098" endtime="20171005 18:55:15.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:15.100" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:15.100" endtime="20171005 18:55:15.100"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:15.099" endtime="20171005 18:55:15.100"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:15.098" endtime="20171005 18:55:15.101"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:15.097" endtime="20171005 18:55:15.101"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:15.164" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:55:15.164" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:15.101" endtime="20171005 18:55:15.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:15.166" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:15.166" endtime="20171005 18:55:15.166"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:15.167" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:15.167" endtime="20171005 18:55:15.167"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:15.167" endtime="20171005 18:55:15.168"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:15.165" endtime="20171005 18:55:15.168"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:15.165" endtime="20171005 18:55:15.168"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:15.168" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:15.168" endtime="20171005 18:55:15.168"></status>
</kw>
<msg timestamp="20171005 18:55:15.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:14.881" endtime="20171005 18:55:15.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:15.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:15.169" endtime="20171005 18:55:15.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:15.170" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:15.170" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:15.170" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:15.169" endtime="20171005 18:55:15.170"></status>
</kw>
<msg timestamp="20171005 18:55:15.170" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:55:14.880" endtime="20171005 18:55:15.170"></status>
</kw>
<msg timestamp="20171005 18:55:15.171" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:55:14.880" endtime="20171005 18:55:15.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:55:15.171" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:55:15.171" endtime="20171005 18:55:15.171"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:14.879" endtime="20171005 18:55:15.172"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:14.878" endtime="20171005 18:55:15.172"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:25.177" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:25.177" endtime="20171005 18:55:25.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:25.178" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:25.178" endtime="20171005 18:55:25.178"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:25.179" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:25.178" endtime="20171005 18:55:25.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:25.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:25.179" endtime="20171005 18:55:25.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:25.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:25.180" endtime="20171005 18:55:25.390"></status>
</kw>
<msg timestamp="20171005 18:55:25.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:25.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:25.180" endtime="20171005 18:55:25.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:25.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:25.390" endtime="20171005 18:55:25.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:25.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:25.391" endtime="20171005 18:55:25.392"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.176" endtime="20171005 18:55:25.392"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.175" endtime="20171005 18:55:25.392"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.175" endtime="20171005 18:55:25.392"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:25.393" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:55:25.392" endtime="20171005 18:55:25.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:25.395" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:25.394" endtime="20171005 18:55:25.395"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:25.396" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:25.395" endtime="20171005 18:55:25.396"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.395" endtime="20171005 18:55:25.396"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.393" endtime="20171005 18:55:25.396"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.393" endtime="20171005 18:55:25.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:25.460" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:55:25.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:25.396" endtime="20171005 18:55:25.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:25.462" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:25.461" endtime="20171005 18:55:25.462"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:25.463" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:25.463" endtime="20171005 18:55:25.463"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.462" endtime="20171005 18:55:25.463"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.461" endtime="20171005 18:55:25.463"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:25.460" endtime="20171005 18:55:25.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:25.464" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:25.464" endtime="20171005 18:55:25.464"></status>
</kw>
<msg timestamp="20171005 18:55:25.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:25.174" endtime="20171005 18:55:25.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:25.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:25.465" endtime="20171005 18:55:25.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:25.466" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:25.466" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:25.466" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:25.465" endtime="20171005 18:55:25.466"></status>
</kw>
<msg timestamp="20171005 18:55:25.466" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:55:25.174" endtime="20171005 18:55:25.466"></status>
</kw>
<msg timestamp="20171005 18:55:25.466" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:55:25.173" endtime="20171005 18:55:25.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:55:25.467" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:55:25.467" endtime="20171005 18:55:25.467"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:25.173" endtime="20171005 18:55:25.467"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:25.172" endtime="20171005 18:55:25.467"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:35.473" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:35.472" endtime="20171005 18:55:35.473"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:35.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:35.473" endtime="20171005 18:55:35.474"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:35.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:35.474" endtime="20171005 18:55:35.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:35.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:35.474" endtime="20171005 18:55:35.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:35.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:35.476" endtime="20171005 18:55:35.692"></status>
</kw>
<msg timestamp="20171005 18:55:35.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:35.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:35.475" endtime="20171005 18:55:35.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:35.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:35.693" endtime="20171005 18:55:35.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:35.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:35.693" endtime="20171005 18:55:35.694"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.472" endtime="20171005 18:55:35.694"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.471" endtime="20171005 18:55:35.694"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.471" endtime="20171005 18:55:35.694"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:35.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20171005 18:55:35.694" endtime="20171005 18:55:35.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:35.697" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:35.696" endtime="20171005 18:55:35.697"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:35.698" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20171005 18:55:35.698" endtime="20171005 18:55:35.698"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.697" endtime="20171005 18:55:35.698"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.696" endtime="20171005 18:55:35.698"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.695" endtime="20171005 18:55:35.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:35.762" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171005 18:55:35.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:35.699" endtime="20171005 18:55:35.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:55:35.764" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:35.763" endtime="20171005 18:55:35.764"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:55:35.765" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:55:35.765" endtime="20171005 18:55:35.765"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.764" endtime="20171005 18:55:35.765"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.763" endtime="20171005 18:55:35.765"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.762" endtime="20171005 18:55:35.765"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:35.766" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:35.765" endtime="20171005 18:55:35.766"></status>
</kw>
<msg timestamp="20171005 18:55:35.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:35.470" endtime="20171005 18:55:35.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:35.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:35.766" endtime="20171005 18:55:35.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:35.767" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:35.767" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:35.767" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:35.767" endtime="20171005 18:55:35.767"></status>
</kw>
<msg timestamp="20171005 18:55:35.768" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20171005 18:55:35.469" endtime="20171005 18:55:35.768"></status>
</kw>
<msg timestamp="20171005 18:55:35.768" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20171005 18:55:35.469" endtime="20171005 18:55:35.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171005 18:55:35.769" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20171005 18:55:35.768" endtime="20171005 18:55:35.769"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:35.469" endtime="20171005 18:55:35.769"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:35.468" endtime="20171005 18:55:35.769"></status>
</kw>
<msg timestamp="20171005 18:55:35.769" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status status="FAIL" starttime="20171005 18:45:30.319" endtime="20171005 18:55:35.769"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:29.281" endtime="20171005 18:55:35.769"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:27.261" endtime="20171005 18:55:35.770"></status>
</kw>
<status status="FAIL" starttime="20171005 18:45:27.261" endtime="20171005 18:55:35.770"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171005 18:55:35.804" level="INFO">Length is 10</msg>
<status status="PASS" starttime="20171005 18:55:35.804" endtime="20171005 18:55:35.804"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:55:35.815" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:55:38.830" level="INFO">${RC} = 0</msg>
<msg timestamp="20171005 18:55:38.831" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.797 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" starttime="20171005 18:55:35.805" endtime="20171005 18:55:38.831"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171005 18:55:38.843" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.797 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.729 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.699 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.624/0.712/0.797/0.064 ms</msg>
<status status="PASS" starttime="20171005 18:55:38.841" endtime="20171005 18:55:38.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:38.844" endtime="20171005 18:55:38.844"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.803" endtime="20171005 18:55:38.845"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:55:38.929" level="INFO">${cur_time} = 2017-10-05 18:55:38:928375</msg>
<status status="PASS" starttime="20171005 18:55:38.928" endtime="20171005 18:55:38.929"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:55:38.929" level="INFO">${cur_time} = 20171005185538928375</msg>
<status status="PASS" starttime="20171005 18:55:38.929" endtime="20171005 18:55:38.929"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.927" endtime="20171005 18:55:38.929"></status>
</kw>
<msg timestamp="20171005 18:55:38.930" level="INFO">${FFDC_TIME} = 20171005185538928375</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 18:55:38.941" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20171005 18:55:38.941" endtime="20171005 18:55:38.941"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171005 18:55:38.941" level="INFO">${suite_name} = 20171005185538928375_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20171005 18:55:38.941" endtime="20171005 18:55:38.942"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 18:55:38.942" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20171005 18:55:38.942" endtime="20171005 18:55:38.942"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171005 18:55:38.943" level="INFO">${test_name} = 20171005185538928375_PowerOnTest</msg>
<status status="PASS" starttime="20171005 18:55:38.942" endtime="20171005 18:55:38.943"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.940" endtime="20171005 18:55:38.943"></status>
</kw>
<msg timestamp="20171005 18:55:38.943" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/</msg>
<msg timestamp="20171005 18:55:38.943" level="INFO">${FFDC_PREFIX} = 20171005185538928375_</msg>
<msg timestamp="20171005 18:55:38.964" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:38.967" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:38.964" endtime="20171005 18:55:38.968"></status>
</kw>
<msg timestamp="20171005 18:55:38.973" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:38.995" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:38.994" endtime="20171005 18:55:38.995"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.993" endtime="20171005 18:55:38.995"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:38.996" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:38.996" endtime="20171005 18:55:38.997"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.995" endtime="20171005 18:55:38.997"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:38.998" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:38.997" endtime="20171005 18:55:38.998"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.997" endtime="20171005 18:55:38.998"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:38.999" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:38.999" endtime="20171005 18:55:38.999"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.998" endtime="20171005 18:55:38.999"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.001" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.000" endtime="20171005 18:55:39.001"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.000" endtime="20171005 18:55:39.001"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.002" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.002" endtime="20171005 18:55:39.003"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.001" endtime="20171005 18:55:39.003"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.004" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.003" endtime="20171005 18:55:39.004"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.003" endtime="20171005 18:55:39.004"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.005" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.005" endtime="20171005 18:55:39.005"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.004" endtime="20171005 18:55:39.005"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.006" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.006" endtime="20171005 18:55:39.007"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.006" endtime="20171005 18:55:39.007"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.008" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.008" endtime="20171005 18:55:39.008"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.007" endtime="20171005 18:55:39.008"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.009" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.009" endtime="20171005 18:55:39.009"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.008" endtime="20171005 18:55:39.010"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.011" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.010" endtime="20171005 18:55:39.011"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.010" endtime="20171005 18:55:39.011"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.012" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.012" endtime="20171005 18:55:39.012"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.011" endtime="20171005 18:55:39.012"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 18:55:39.042" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:39.042" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171005 18:55:39.110" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171005 18:55:39.119" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171005 18:55:39.119" level="INFO">${stderr} = </msg>
<msg timestamp="20171005 18:55:39.119" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20171005 18:55:39.013" endtime="20171005 18:55:39.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171005 18:55:39.120" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20171005 18:55:39.120" endtime="20171005 18:55:39.120"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171005 18:55:39.121" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20171005 18:55:39.120" endtime="20171005 18:55:39.121"></status>
</kw>
<msg timestamp="20171005 18:55:39.121" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20171005 18:55:39.012" endtime="20171005 18:55:39.121"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.122" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.122" endtime="20171005 18:55:39.122"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.121" endtime="20171005 18:55:39.123"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.007" endtime="20171005 18:55:39.123"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.124" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.124" endtime="20171005 18:55:39.124"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.123" endtime="20171005 18:55:39.124"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 18:55:39.125" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status status="PASS" starttime="20171005 18:55:39.124" endtime="20171005 18:55:39.125"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.127" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.126" endtime="20171005 18:55:39.127"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.125" endtime="20171005 18:55:39.127"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.129" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.128" endtime="20171005 18:55:39.129"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.127" endtime="20171005 18:55:39.129"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.125" endtime="20171005 18:55:39.129"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.130" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.130" endtime="20171005 18:55:39.130"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.129" endtime="20171005 18:55:39.130"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.132" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.131" endtime="20171005 18:55:39.132"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.131" endtime="20171005 18:55:39.132"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.129" endtime="20171005 18:55:39.132"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.133" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.133" endtime="20171005 18:55:39.133"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.132" endtime="20171005 18:55:39.133"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.134" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.134" endtime="20171005 18:55:39.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.134" endtime="20171005 18:55:39.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.132" endtime="20171005 18:55:39.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.125" endtime="20171005 18:55:39.135"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.136" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.135" endtime="20171005 18:55:39.136"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.135" endtime="20171005 18:55:39.136"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:38.992" endtime="20171005 18:55:39.136"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 18:55:39.143" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20171005 18:55:39.142" endtime="20171005 18:55:39.143"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171005 18:55:39.144" level="INFO">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Sys Inventory Files', 'System Inventory Files') | ('SEL Log', 'Collect eSEL...</msg>
<status status="PASS" starttime="20171005 18:55:39.144" endtime="20171005 18:55:39.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.145" endtime="20171005 18:55:39.146"></status>
</kw>
<msg timestamp="20171005 18:55:39.146" level="INFO">@{ffdc_function_list} = [ BMC Specific Files | OS FFDC | FFDC Generic Report | Sys Inventory Files | SEL Log | Get Request FFDC | Core Files ]</msg>
<status status="PASS" starttime="20171005 18:55:39.145" endtime="20171005 18:55:39.146"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.147" endtime="20171005 18:55:39.148"></status>
</kw>
<msg timestamp="20171005 18:55:39.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:39.148" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:39.147" endtime="20171005 18:55:39.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.148" endtime="20171005 18:55:39.149"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 18:55:39.176" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20171005 18:55:39.175" endtime="20171005 18:55:39.176"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 18:55:39.177" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC...</msg>
<status status="PASS" starttime="20171005 18:55:39.177" endtime="20171005 18:55:39.177"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:39.178" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20171005 18:55:39.177" endtime="20171005 18:55:39.178"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.179" endtime="20171005 18:55:39.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:39.180" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:39.179" endtime="20171005 18:55:39.180"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:39.250" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:39.251" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171005 18:55:39.297" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:39.213" endtime="20171005 18:55:39.298"></status>
</kw>
<msg timestamp="20171005 18:55:39.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:39.298" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20171005 18:55:39.180" endtime="20171005 18:55:39.298"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:39.298" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20171005 18:55:39.298" endtime="20171005 18:55:39.299"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:39.299" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:39.299" endtime="20171005 18:55:39.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.307" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_procinfo.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.306" endtime="20171005 18:55:39.307"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.305" endtime="20171005 18:55:39.307"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.299" endtime="20171005 18:55:39.307"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.178" endtime="20171005 18:55:39.307"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.177" endtime="20171005 18:55:39.307"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:39.308" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20171005 18:55:39.307" endtime="20171005 18:55:39.308"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.309" endtime="20171005 18:55:39.309"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:39.310" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:39.309" endtime="20171005 18:55:39.310"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:39.379" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:39.380" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171005 18:55:39.426" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:39.342" endtime="20171005 18:55:39.426"></status>
</kw>
<msg timestamp="20171005 18:55:39.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:39.426" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          277428 kB\nMemAvailable:     322148 kB\nBuffers:           12072 kB\nCached:            44224 kB\nSwapCached:            0 kB\nActive:           10156...</msg>
<status status="PASS" starttime="20171005 18:55:39.310" endtime="20171005 18:55:39.427"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:39.427" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          277428 kB
MemAvailable:     322148 kB
Buffers:           12072 kB
Cached:            44224 kB
SwapCached:            0 kB
Active:           101564 kB
Inac...</msg>
<status status="PASS" starttime="20171005 18:55:39.427" endtime="20171005 18:55:39.427"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:39.428" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:39.428" endtime="20171005 18:55:39.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.439" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_meminfo.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.438" endtime="20171005 18:55:39.439"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.437" endtime="20171005 18:55:39.439"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.428" endtime="20171005 18:55:39.439"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.308" endtime="20171005 18:55:39.440"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.307" endtime="20171005 18:55:39.440"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:39.440" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20171005 18:55:39.440" endtime="20171005 18:55:39.440"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.442" endtime="20171005 18:55:39.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:39.443" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:39.442" endtime="20171005 18:55:39.443"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:39.512" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:39.513" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171005 18:55:39.893" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:39.475" endtime="20171005 18:55:39.893"></status>
</kw>
<msg timestamp="20171005 18:55:39.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:39.893" level="INFO">${ret_values} = (u'Mem: 154824K used, 277428K free, 8908K shrd, 12072K buff, 44224K cached\nCPU:   0% usr   7% sys   0% nic  92% idle   0% io   0% irq   0% sirq\nLoad average: 0.15 0.63 0.84 2/163 1834\n  PID  PPID U...</msg>
<status status="PASS" starttime="20171005 18:55:39.443" endtime="20171005 18:55:39.893"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:39.894" level="INFO">${stdout} = Mem: 154824K used, 277428K free, 8908K shrd, 12072K buff, 44224K cached
CPU:   0% usr   7% sys   0% nic  92% idle   0% io   0% irq   0% sirq
Load average: 0.15 0.63 0.84 2/163 1834
  PID  PPID USER   ...</msg>
<status status="PASS" starttime="20171005 18:55:39.894" endtime="20171005 18:55:39.894"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:39.895" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:39.894" endtime="20171005 18:55:39.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:39.902" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_proc_list.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:39.902" endtime="20171005 18:55:39.903"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.901" endtime="20171005 18:55:39.903"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.895" endtime="20171005 18:55:39.903"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.441" endtime="20171005 18:55:39.903"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.440" endtime="20171005 18:55:39.903"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:39.904" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20171005 18:55:39.903" endtime="20171005 18:55:39.904"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:39.905" endtime="20171005 18:55:39.905"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:39.906" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:39.905" endtime="20171005 18:55:39.906"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:39.975" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:39.975" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171005 18:55:40.032" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:39.938" endtime="20171005 18:55:40.032"></status>
</kw>
<msg timestamp="20171005 18:55:40.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:40.033" level="INFO">${ret_values} = (u'[    0.300000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550A\n[    0.650000] console [ttyS4] enabled\n[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits fr...</msg>
<status status="PASS" starttime="20171005 18:55:39.906" endtime="20171005 18:55:40.033"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:40.034" level="INFO">${stdout} = [    0.300000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550A
[    0.650000] console [ttyS4] enabled
[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0x...</msg>
<status status="PASS" starttime="20171005 18:55:40.033" endtime="20171005 18:55:40.034"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:40.034" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:40.034" endtime="20171005 18:55:40.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:40.043" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_dmesg.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:40.042" endtime="20171005 18:55:40.043"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:40.041" endtime="20171005 18:55:40.043"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:40.034" endtime="20171005 18:55:40.043"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.904" endtime="20171005 18:55:40.044"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.903" endtime="20171005 18:55:40.044"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:40.044" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_journalctl_nopager.txt</msg>
<status status="PASS" starttime="20171005 18:55:40.044" endtime="20171005 18:55:40.044"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:40.045" endtime="20171005 18:55:40.046"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:40.046" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:40.046" endtime="20171005 18:55:40.046"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:40.116" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:40.116" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171005 18:55:41.901" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:40.079" endtime="20171005 18:55:41.902"></status>
</kw>
<msg timestamp="20171005 18:55:41.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:41.904" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-10-05 18:41:26 UTC, end at Thu 2017-10-05 18:55:51 UTC. --\nOct 05 18:41:26 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 05 18:41:26 witherspoon kernel: Linu...</msg>
<status status="PASS" starttime="20171005 18:55:40.047" endtime="20171005 18:55:41.905"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:41.906" level="INFO">${stdout} = -- Logs begin at Thu 2017-10-05 18:41:26 UTC, end at Thu 2017-10-05 18:55:51 UTC. --
Oct 05 18:41:26 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 05 18:41:26 witherspoon kernel: Linux ver...</msg>
<status status="PASS" starttime="20171005 18:55:41.905" endtime="20171005 18:55:41.906"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:41.906" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:41.906" endtime="20171005 18:55:41.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:41.915" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:41.914" endtime="20171005 18:55:41.915"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:41.912" endtime="20171005 18:55:41.915"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:41.907" endtime="20171005 18:55:41.915"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:40.045" endtime="20171005 18:55:41.915"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:40.044" endtime="20171005 18:55:41.915"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:41.916" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_journalctl_pretty.txt</msg>
<status status="PASS" starttime="20171005 18:55:41.916" endtime="20171005 18:55:41.916"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:41.917" endtime="20171005 18:55:41.918"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:41.919" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:41.918" endtime="20171005 18:55:41.919"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:41.991" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:41.991" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171005 18:55:46.622" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:41.954" endtime="20171005 18:55:46.627"></status>
</kw>
<msg timestamp="20171005 18:55:46.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:46.653" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=191eab0a91cf4a6a956f44176e349007;i=1;b=d745708af1484df09389ab9e335f91d9;m=1520825;t=55ad1125fa932;x=c176dec9c4b98ada",\n\t"__REALTIME_TIMESTAMP" : "1507228886477106",\n\t"__MON...</msg>
<status status="PASS" starttime="20171005 18:55:41.919" endtime="20171005 18:55:46.654"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:46.660" level="INFO">${stdout} = {
	"__CURSOR" : "s=191eab0a91cf4a6a956f44176e349007;i=1;b=d745708af1484df09389ab9e335f91d9;m=1520825;t=55ad1125fa932;x=c176dec9c4b98ada",
	"__REALTIME_TIMESTAMP" : "1507228886477106",
	"__MONOTONIC_TI...</msg>
<status status="PASS" starttime="20171005 18:55:46.654" endtime="20171005 18:55:46.660"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:46.660" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:46.660" endtime="20171005 18:55:46.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:46.679" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:46.674" endtime="20171005 18:55:46.679"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:46.666" endtime="20171005 18:55:46.679"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:46.661" endtime="20171005 18:55:46.679"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:41.917" endtime="20171005 18:55:46.679"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:41.915" endtime="20171005 18:55:46.679"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:46.680" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20171005 18:55:46.680" endtime="20171005 18:55:46.680"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:46.682" endtime="20171005 18:55:46.682"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:46.683" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:46.682" endtime="20171005 18:55:46.683"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:46.759" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:46.759" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171005 18:55:47.280" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:46.722" endtime="20171005 18:55:47.280"></status>
</kw>
<msg timestamp="20171005 18:55:47.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:47.282" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  5 18:44 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  5 18:44 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20171005 18:55:46.683" endtime="20171005 18:55:47.282"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:47.282" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  5 18:44 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  5 18:44 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20171005 18:55:47.282" endtime="20171005 18:55:47.283"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:47.283" level="INFO">${stderr} = ls: /proc/1838/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20171005 18:55:47.283" endtime="20171005 18:55:47.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.291" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.290" endtime="20171005 18:55:47.291"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.289" endtime="20171005 18:55:47.291"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.283" endtime="20171005 18:55:47.291"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:46.681" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:46.680" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.177" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.176" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.176" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.176" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.175" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.149" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.146" endtime="20171005 18:55:47.292"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.146" endtime="20171005 18:55:47.292"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:47.294" endtime="20171005 18:55:47.294"></status>
</kw>
<msg timestamp="20171005 18:55:47.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:47.294" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:47.293" endtime="20171005 18:55:47.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:47.295" endtime="20171005 18:55:47.295"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171005 18:55:47.322" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 18:55:47.322" endtime="20171005 18:55:47.322"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.321" endtime="20171005 18:55:47.322"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.295" endtime="20171005 18:55:47.322"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.292" endtime="20171005 18:55:47.323"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.292" endtime="20171005 18:55:47.323"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:47.324" endtime="20171005 18:55:47.325"></status>
</kw>
<msg timestamp="20171005 18:55:47.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:47.325" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:47.324" endtime="20171005 18:55:47.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:47.325" endtime="20171005 18:55:47.325"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 18:55:47.352" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status status="PASS" starttime="20171005 18:55:47.352" endtime="20171005 18:55:47.352"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 18:55:47.353" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status status="PASS" starttime="20171005 18:55:47.353" endtime="20171005 18:55:47.353"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 18:55:47.359" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20171005 18:55:47.354" endtime="20171005 18:55:47.359"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.364" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.363" endtime="20171005 18:55:47.364"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.362" endtime="20171005 18:55:47.364"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.365" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.365" endtime="20171005 18:55:47.365"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.364" endtime="20171005 18:55:47.365"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.366" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.366" endtime="20171005 18:55:47.366"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.365" endtime="20171005 18:55:47.367"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.368" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.367" endtime="20171005 18:55:47.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.367" endtime="20171005 18:55:47.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.361" endtime="20171005 18:55:47.368"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.361" endtime="20171005 18:55:47.368"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:47.369" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:47.368" endtime="20171005 18:55:47.369"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:47.439" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:47.439" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171005 18:55:47.506" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:47.401" endtime="20171005 18:55:47.506"></status>
</kw>
<msg timestamp="20171005 18:55:47.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:47.507" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-111"\nVERSION_ID="v1.99.10-111-gca5a12f"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" starttime="20171005 18:55:47.369" endtime="20171005 18:55:47.507"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:47.507" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-111"
VERSION_ID="v1.99.10-111-gca5a12f"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" starttime="20171005 18:55:47.507" endtime="20171005 18:55:47.508"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:47.508" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:47.508" endtime="20171005 18:55:47.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.515" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.515" endtime="20171005 18:55:47.515"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.514" endtime="20171005 18:55:47.515"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.508" endtime="20171005 18:55:47.516"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.360" endtime="20171005 18:55:47.516"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.360" endtime="20171005 18:55:47.516"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.519" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.518" endtime="20171005 18:55:47.519"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.518" endtime="20171005 18:55:47.519"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.520" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.520" endtime="20171005 18:55:47.520"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.519" endtime="20171005 18:55:47.520"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.521" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.521" endtime="20171005 18:55:47.522"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.520" endtime="20171005 18:55:47.522"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.523" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.522" endtime="20171005 18:55:47.523"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.522" endtime="20171005 18:55:47.523"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.517" endtime="20171005 18:55:47.523"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.517" endtime="20171005 18:55:47.523"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:47.524" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:47.524" endtime="20171005 18:55:47.524"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:47.595" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:47.596" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171005 18:55:47.663" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:47.557" endtime="20171005 18:55:47.663"></status>
</kw>
<msg timestamp="20171005 18:55:47.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:47.663" level="INFO">${ret_values} = (u'20171005182334', u'', 0)</msg>
<status status="PASS" starttime="20171005 18:55:47.525" endtime="20171005 18:55:47.663"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:47.664" level="INFO">${stdout} = 20171005182334</msg>
<status status="PASS" starttime="20171005 18:55:47.664" endtime="20171005 18:55:47.664"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:47.665" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:47.665" endtime="20171005 18:55:47.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.676" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.675" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.674" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.665" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.516" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.516" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.360" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.353" endtime="20171005 18:55:47.676"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.352" endtime="20171005 18:55:47.676"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 18:55:47.678" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20171005 18:55:47.677" endtime="20171005 18:55:47.678"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 18:55:47.678" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20171005 18:55:47.678" endtime="20171005 18:55:47.678"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.682" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.681" endtime="20171005 18:55:47.682"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.681" endtime="20171005 18:55:47.682"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.683" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.683" endtime="20171005 18:55:47.683"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.682" endtime="20171005 18:55:47.683"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.684" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.684" endtime="20171005 18:55:47.685"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.684" endtime="20171005 18:55:47.685"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:47.686" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:47.685" endtime="20171005 18:55:47.686"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.685" endtime="20171005 18:55:47.686"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.680" endtime="20171005 18:55:47.686"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.680" endtime="20171005 18:55:47.686"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:47.687" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:47.686" endtime="20171005 18:55:47.687"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:47.756" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:47.757" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171005 18:55:49.123" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:47.719" endtime="20171005 18:55:49.123"></status>
</kw>
<msg timestamp="20171005 18:55:49.124" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.124" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" starttime="20171005 18:55:47.687" endtime="20171005 18:55:49.124"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:49.124" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20171005 18:55:49.124" endtime="20171005 18:55:49.124"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:49.125" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:49.125" endtime="20171005 18:55:49.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.134" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.134" endtime="20171005 18:55:49.134"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.133" endtime="20171005 18:55:49.134"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.125" endtime="20171005 18:55:49.134"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.679" endtime="20171005 18:55:49.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.679" endtime="20171005 18:55:49.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.679" endtime="20171005 18:55:49.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.677" endtime="20171005 18:55:49.135"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.676" endtime="20171005 18:55:49.135"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 18:55:49.136" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" starttime="20171005 18:55:49.136" endtime="20171005 18:55:49.136"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171005 18:55:49.137" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20171005 18:55:49.136" endtime="20171005 18:55:49.137"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.140" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.139" endtime="20171005 18:55:49.140"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.139" endtime="20171005 18:55:49.140"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.141" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.141" endtime="20171005 18:55:49.141"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.140" endtime="20171005 18:55:49.141"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.143" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.142" endtime="20171005 18:55:49.143"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.142" endtime="20171005 18:55:49.143"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.144" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.143" endtime="20171005 18:55:49.144"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.143" endtime="20171005 18:55:49.144"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.138" endtime="20171005 18:55:49.144"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.138" endtime="20171005 18:55:49.144"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:49.145" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:49.144" endtime="20171005 18:55:49.145"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:49.216" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:49.217" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171005 18:55:49.263" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:49.177" endtime="20171005 18:55:49.264"></status>
</kw>
<msg timestamp="20171005 18:55:49.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.264" level="INFO">${ret_values} = (u' 18:56:04 up 15 min,  load average: 0.49, 0.68, 0.85', u'', 0)</msg>
<status status="PASS" starttime="20171005 18:55:49.145" endtime="20171005 18:55:49.264"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:49.265" level="INFO">${stdout} =  18:56:04 up 15 min,  load average: 0.49, 0.68, 0.85</msg>
<status status="PASS" starttime="20171005 18:55:49.264" endtime="20171005 18:55:49.265"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:49.266" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:49.265" endtime="20171005 18:55:49.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.273" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.272" endtime="20171005 18:55:49.273"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.272" endtime="20171005 18:55:49.273"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.266" endtime="20171005 18:55:49.273"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.137" endtime="20171005 18:55:49.273"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.137" endtime="20171005 18:55:49.273"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.276" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.276" endtime="20171005 18:55:49.276"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.275" endtime="20171005 18:55:49.276"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.278" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.277" endtime="20171005 18:55:49.278"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.276" endtime="20171005 18:55:49.278"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.279" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.279" endtime="20171005 18:55:49.279"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.278" endtime="20171005 18:55:49.279"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.280" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.280" endtime="20171005 18:55:49.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.279" endtime="20171005 18:55:49.281"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.275" endtime="20171005 18:55:49.281"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.274" endtime="20171005 18:55:49.281"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:49.282" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:49.281" endtime="20171005 18:55:49.282"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:49.351" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:49.352" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171005 18:55:49.408" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:49.314" endtime="20171005 18:55:49.409"></status>
</kw>
<msg timestamp="20171005 18:55:49.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.409" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" starttime="20171005 18:55:49.282" endtime="20171005 18:55:49.409"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:49.410" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" starttime="20171005 18:55:49.409" endtime="20171005 18:55:49.410"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:49.410" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:49.410" endtime="20171005 18:55:49.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.418" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.417" endtime="20171005 18:55:49.418"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.417" endtime="20171005 18:55:49.418"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.411" endtime="20171005 18:55:49.418"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.273" endtime="20171005 18:55:49.418"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.273" endtime="20171005 18:55:49.418"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.421" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.421" endtime="20171005 18:55:49.421"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.420" endtime="20171005 18:55:49.421"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.423" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.422" endtime="20171005 18:55:49.423"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.421" endtime="20171005 18:55:49.423"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.424" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.423" endtime="20171005 18:55:49.424"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.423" endtime="20171005 18:55:49.424"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.425" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.425" endtime="20171005 18:55:49.425"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.424" endtime="20171005 18:55:49.425"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.420" endtime="20171005 18:55:49.426"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.419" endtime="20171005 18:55:49.426"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:55:49.426" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20171005 18:55:49.426" endtime="20171005 18:55:49.426"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171005 18:55:49.496" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:49.497" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171005 18:55:49.544" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20171005 18:55:49.459" endtime="20171005 18:55:49.544"></status>
</kw>
<msg timestamp="20171005 18:55:49.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.544" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20171005 18:55:49.427" endtime="20171005 18:55:49.544"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171005 18:55:49.545" level="INFO">${stdout} = Linux witherspoon 4.10.17-49ec844d9d16d90dbfe4fe215de03fe62247dfb3 #1 Wed Oct 4 04:48:06 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20171005 18:55:49.545" endtime="20171005 18:55:49.545"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171005 18:55:49.545" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20171005 18:55:49.545" endtime="20171005 18:55:49.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.553" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:49.552" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.552" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.546" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.418" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.418" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.137" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.135" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.135" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.352" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.351" endtime="20171005 18:55:49.553"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.326" endtime="20171005 18:55:49.554"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.323" endtime="20171005 18:55:49.554"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:47.323" endtime="20171005 18:55:49.554"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:49.555" endtime="20171005 18:55:49.555"></status>
</kw>
<msg timestamp="20171005 18:55:49.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.556" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:49.555" endtime="20171005 18:55:49.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:49.556" endtime="20171005 18:55:49.556"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:49.585" endtime="20171005 18:55:49.586"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:49.587" level="INFO">File '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/6989/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20171005 18:55:49.586" endtime="20171005 18:55:49.587"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.584" endtime="20171005 18:55:49.587"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.556" endtime="20171005 18:55:49.587"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.554" endtime="20171005 18:55:49.587"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.554" endtime="20171005 18:55:49.587"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:49.589" endtime="20171005 18:55:49.590"></status>
</kw>
<msg timestamp="20171005 18:55:49.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.590" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:49.589" endtime="20171005 18:55:49.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:49.590" endtime="20171005 18:55:49.590"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:49.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:49.620" endtime="20171005 18:55:49.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:49.622" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:49.622" endtime="20171005 18:55:49.622"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:49.623" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:49.622" endtime="20171005 18:55:49.623"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:49.623" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:49.623" endtime="20171005 18:55:49.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:49.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:49.624" endtime="20171005 18:55:49.841"></status>
</kw>
<msg timestamp="20171005 18:55:49.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:49.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:49.624" endtime="20171005 18:55:49.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:49.842" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:49.842" endtime="20171005 18:55:49.842"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:49.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:49.842" endtime="20171005 18:55:49.843"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.619" endtime="20171005 18:55:49.843"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.619" endtime="20171005 18:55:49.843"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.618" endtime="20171005 18:55:49.843"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:49.844" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20171005 18:55:49.843" endtime="20171005 18:55:49.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:49.844" endtime="20171005 18:55:49.844"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:50.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:50.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:49.845" endtime="20171005 18:55:50.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.053" endtime="20171005 18:55:50.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:50.054" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:50.054" endtime="20171005 18:55:50.054"></status>
</kw>
<msg timestamp="20171005 18:55:50.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:49.618" endtime="20171005 18:55:50.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.055" endtime="20171005 18:55:50.055"></status>
</kw>
<msg timestamp="20171005 18:55:50.055" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:50.054" endtime="20171005 18:55:50.055"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.056" endtime="20171005 18:55:50.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:50.056" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507229162536, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507229163166, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1331"
      ], 
      "Id": 4, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507229163433, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:50.057" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:50.057" level="INFO">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'associations': [], u'AdditionalData': [u'_PID=1333'], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Timestamp': 1507229163166,...</msg>
<status status="PASS" starttime="20171005 18:55:50.056" endtime="20171005 18:55:50.057"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20171005 18:55:50.057" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" starttime="20171005 18:55:50.057" endtime="20171005 18:55:50.057"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:50.058" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_esel</msg>
<status status="PASS" starttime="20171005 18:55:50.058" endtime="20171005 18:55:50.058"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:50.059" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_esel"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:50.058" endtime="20171005 18:55:50.059"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.059" endtime="20171005 18:55:50.060"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:50.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:50.063" endtime="20171005 18:55:50.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:50.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:50.064" endtime="20171005 18:55:50.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:50.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:50.065" endtime="20171005 18:55:50.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:50.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:50.066" endtime="20171005 18:55:50.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.278" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:50.067" endtime="20171005 18:55:50.278"></status>
</kw>
<msg timestamp="20171005 18:55:50.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:50.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.066" endtime="20171005 18:55:50.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.279" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.279" endtime="20171005 18:55:50.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.280" endtime="20171005 18:55:50.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.062" endtime="20171005 18:55:50.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.062" endtime="20171005 18:55:50.280"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.061" endtime="20171005 18:55:50.281"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:50.281" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20171005 18:55:50.281" endtime="20171005 18:55:50.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.282" endtime="20171005 18:55:50.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:50.367" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171005 18:55:50.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.282" endtime="20171005 18:55:50.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.368" endtime="20171005 18:55:50.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:50.369" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:50.368" endtime="20171005 18:55:50.369"></status>
</kw>
<msg timestamp="20171005 18:55:50.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.061" endtime="20171005 18:55:50.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.369" endtime="20171005 18:55:50.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:50.370" level="INFO">To JSON using : content={
  "data": [
    "_PID=1333"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:50.370" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:50.370" level="INFO">${content} = {u'data': [u'_PID=1333'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:50.370" endtime="20171005 18:55:50.370"></status>
</kw>
<msg timestamp="20171005 18:55:50.371" level="INFO">${esel_data} = [u'_PID=1333']</msg>
<status status="PASS" starttime="20171005 18:55:50.060" endtime="20171005 18:55:50.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171005 18:55:50.372" level="FAIL">[ _PID=1333 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171005 18:55:50.372" endtime="20171005 18:55:50.372"></status>
</kw>
<msg timestamp="20171005 18:55:50.372" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 18:55:50.371" endtime="20171005 18:55:50.372"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.373" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:55:50.373" endtime="20171005 18:55:50.373"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.059" endtime="20171005 18:55:50.373"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.374" endtime="20171005 18:55:50.374"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:50.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:50.377" endtime="20171005 18:55:50.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:50.379" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:50.378" endtime="20171005 18:55:50.379"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:50.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:50.379" endtime="20171005 18:55:50.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:50.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:50.380" endtime="20171005 18:55:50.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:50.381" endtime="20171005 18:55:50.559"></status>
</kw>
<msg timestamp="20171005 18:55:50.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:50.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.380" endtime="20171005 18:55:50.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.560" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.560" endtime="20171005 18:55:50.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.561" endtime="20171005 18:55:50.561"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.377" endtime="20171005 18:55:50.561"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.376" endtime="20171005 18:55:50.561"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.376" endtime="20171005 18:55:50.562"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:50.562" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20171005 18:55:50.562" endtime="20171005 18:55:50.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.563" endtime="20171005 18:55:50.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:50.649" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171005 18:55:50.649" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.563" endtime="20171005 18:55:50.649"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.649" endtime="20171005 18:55:50.650"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:50.650" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:50.650" endtime="20171005 18:55:50.650"></status>
</kw>
<msg timestamp="20171005 18:55:50.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.375" endtime="20171005 18:55:50.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.651" endtime="20171005 18:55:50.651"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:50.652" level="INFO">To JSON using : content={
  "data": [
    "_PID=1333"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:50.652" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:50.652" level="INFO">${content} = {u'data': [u'_PID=1333'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:50.651" endtime="20171005 18:55:50.652"></status>
</kw>
<msg timestamp="20171005 18:55:50.652" level="INFO">${esel_data} = [u'_PID=1333']</msg>
<status status="PASS" starttime="20171005 18:55:50.374" endtime="20171005 18:55:50.652"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171005 18:55:50.653" level="FAIL">[ _PID=1333 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171005 18:55:50.653" endtime="20171005 18:55:50.653"></status>
</kw>
<msg timestamp="20171005 18:55:50.653" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 18:55:50.652" endtime="20171005 18:55:50.654"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.654" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:55:50.654" endtime="20171005 18:55:50.654"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.373" endtime="20171005 18:55:50.654"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.655" endtime="20171005 18:55:50.655"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:50.659" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:50.658" endtime="20171005 18:55:50.659"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:50.660" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:50.659" endtime="20171005 18:55:50.660"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:50.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:50.660" endtime="20171005 18:55:50.660"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:50.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:50.661" endtime="20171005 18:55:50.661"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.838" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:50.662" endtime="20171005 18:55:50.838"></status>
</kw>
<msg timestamp="20171005 18:55:50.838" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:50.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.661" endtime="20171005 18:55:50.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.839" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.838" endtime="20171005 18:55:50.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.839" endtime="20171005 18:55:50.839"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.658" endtime="20171005 18:55:50.840"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.657" endtime="20171005 18:55:50.840"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.657" endtime="20171005 18:55:50.840"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:50.840" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20171005 18:55:50.840" endtime="20171005 18:55:50.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.841" endtime="20171005 18:55:50.841"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:50.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171005 18:55:50.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.842" endtime="20171005 18:55:50.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:50.967" endtime="20171005 18:55:50.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:50.967" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:50.967" endtime="20171005 18:55:50.968"></status>
</kw>
<msg timestamp="20171005 18:55:50.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.656" endtime="20171005 18:55:50.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:50.968" endtime="20171005 18:55:50.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:50.969" level="INFO">To JSON using : content={
  "data": [
    "_PID=1331"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:50.969" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:50.969" level="INFO">${content} = {u'data': [u'_PID=1331'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:50.969" endtime="20171005 18:55:50.969"></status>
</kw>
<msg timestamp="20171005 18:55:50.970" level="INFO">${esel_data} = [u'_PID=1331']</msg>
<status status="PASS" starttime="20171005 18:55:50.655" endtime="20171005 18:55:50.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171005 18:55:50.971" level="FAIL">[ _PID=1331 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" starttime="20171005 18:55:50.970" endtime="20171005 18:55:50.971"></status>
</kw>
<msg timestamp="20171005 18:55:50.971" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 18:55:50.970" endtime="20171005 18:55:50.971"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171005 18:55:50.972" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20171005 18:55:50.971" endtime="20171005 18:55:50.972"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.654" endtime="20171005 18:55:50.972"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:50.059" endtime="20171005 18:55:50.972"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20171005 18:55:50.977" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:55:50.984" level="INFO">${out} = </msg>
<status status="PASS" starttime="20171005 18:55:50.972" endtime="20171005 18:55:50.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20171005 18:55:50.992" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20171005 18:55:50.989" endtime="20171005 18:55:50.992"></status>
</kw>
<msg timestamp="20171005 18:55:50.992" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20171005 18:55:50.987" endtime="20171005 18:55:50.992"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171005 18:55:50.996" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 18:55:50.993" endtime="20171005 18:55:50.996"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.617" endtime="20171005 18:55:50.999"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.591" endtime="20171005 18:55:51.000"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.588" endtime="20171005 18:55:51.001"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:49.587" endtime="20171005 18:55:51.002"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:51.007" endtime="20171005 18:55:51.007"></status>
</kw>
<msg timestamp="20171005 18:55:51.007" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:51.008" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:51.006" endtime="20171005 18:55:51.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:51.010" endtime="20171005 18:55:51.012"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171005 18:55:51.059" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20171005 18:55:51.058" endtime="20171005 18:55:51.059"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171005 18:55:51.060" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_inventory', ...</msg>
<status status="PASS" starttime="20171005 18:55:51.060" endtime="20171005 18:55:51.060"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:51.061" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_elog.txt</msg>
<status status="PASS" starttime="20171005 18:55:51.060" endtime="20171005 18:55:51.061"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:51.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:51.063" endtime="20171005 18:55:51.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:51.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:51.065" endtime="20171005 18:55:51.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:51.066" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:51.065" endtime="20171005 18:55:51.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:51.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:51.066" endtime="20171005 18:55:51.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.286" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:51.067" endtime="20171005 18:55:51.287"></status>
</kw>
<msg timestamp="20171005 18:55:51.287" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:51.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.067" endtime="20171005 18:55:51.287"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.287" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.287" endtime="20171005 18:55:51.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.288" endtime="20171005 18:55:51.288"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.063" endtime="20171005 18:55:51.288"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.062" endtime="20171005 18:55:51.289"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.062" endtime="20171005 18:55:51.289"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:51.290" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:51.289" endtime="20171005 18:55:51.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:51.290" endtime="20171005 18:55:51.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:51.484" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:51.484" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.291" endtime="20171005 18:55:51.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:51.484" endtime="20171005 18:55:51.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:51.485" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:51.485" endtime="20171005 18:55:51.485"></status>
</kw>
<msg timestamp="20171005 18:55:51.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.061" endtime="20171005 18:55:51.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.486" endtime="20171005 18:55:51.486"></status>
</kw>
<msg timestamp="20171005 18:55:51.487" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:51.486" endtime="20171005 18:55:51.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:51.487" endtime="20171005 18:55:51.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:51.488" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507229162536, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1333"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507229163166, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1331"
      ], 
      "Id": 4, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1507229163433, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:51.488" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:51.488" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [
                "_PID=1333"
            ],
            "Id": 2,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" starttime="20171005 18:55:51.487" endtime="20171005 18:55:51.488"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:51.490" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_elog.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:51.489" endtime="20171005 18:55:51.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.488" endtime="20171005 18:55:51.490"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.060" endtime="20171005 18:55:51.490"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:51.491" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20171005 18:55:51.490" endtime="20171005 18:55:51.491"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:51.495" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:51.495" endtime="20171005 18:55:51.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:51.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:51.496" endtime="20171005 18:55:51.497"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:51.497" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:51.497" endtime="20171005 18:55:51.497"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:51.498" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:51.498" endtime="20171005 18:55:51.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:51.499" endtime="20171005 18:55:51.687"></status>
</kw>
<msg timestamp="20171005 18:55:51.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:51.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.498" endtime="20171005 18:55:51.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.688" endtime="20171005 18:55:51.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:51.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.688" endtime="20171005 18:55:51.689"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.494" endtime="20171005 18:55:51.689"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.493" endtime="20171005 18:55:51.689"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.492" endtime="20171005 18:55:51.689"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:51.690" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:51.689" endtime="20171005 18:55:51.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:51.690" endtime="20171005 18:55:51.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:52.264" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:52.264" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.691" endtime="20171005 18:55:52.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:52.265" endtime="20171005 18:55:52.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:52.265" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:52.265" endtime="20171005 18:55:52.265"></status>
</kw>
<msg timestamp="20171005 18:55:52.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:51.491" endtime="20171005 18:55:52.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.266" endtime="20171005 18:55:52.267"></status>
</kw>
<msg timestamp="20171005 18:55:52.267" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:52.266" endtime="20171005 18:55:52.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:52.267" endtime="20171005 18:55:52.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:52.269" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 6000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26580
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 206000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:52.269" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:52.269" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" starttime="20171005 18:55:52.268" endtime="20171005 18:55:52.269"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:52.271" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_sensor_list.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:52.270" endtime="20171005 18:55:52.271"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.269" endtime="20171005 18:55:52.271"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.490" endtime="20171005 18:55:52.271"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:52.272" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_OCC_state.txt</msg>
<status status="PASS" starttime="20171005 18:55:52.271" endtime="20171005 18:55:52.272"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:52.275" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:52.274" endtime="20171005 18:55:52.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:52.276" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:52.275" endtime="20171005 18:55:52.276"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:52.276" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:52.276" endtime="20171005 18:55:52.276"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:52.277" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:52.277" endtime="20171005 18:55:52.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.461" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:52.278" endtime="20171005 18:55:52.461"></status>
</kw>
<msg timestamp="20171005 18:55:52.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:52.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.277" endtime="20171005 18:55:52.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.461" endtime="20171005 18:55:52.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.462" endtime="20171005 18:55:52.463"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.274" endtime="20171005 18:55:52.463"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.273" endtime="20171005 18:55:52.463"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.273" endtime="20171005 18:55:52.463"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:52.463" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:52.463" endtime="20171005 18:55:52.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:52.464" endtime="20171005 18:55:52.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:52.612" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:52.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.464" endtime="20171005 18:55:52.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:52.613" endtime="20171005 18:55:52.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:52.613" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:52.613" endtime="20171005 18:55:52.613"></status>
</kw>
<msg timestamp="20171005 18:55:52.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.272" endtime="20171005 18:55:52.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.614" endtime="20171005 18:55:52.615"></status>
</kw>
<msg timestamp="20171005 18:55:52.615" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:52.614" endtime="20171005 18:55:52.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:52.615" endtime="20171005 18:55:52.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:52.616" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:52.616" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:52.616" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" starttime="20171005 18:55:52.616" endtime="20171005 18:55:52.616"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:52.619" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_OCC_state.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:52.617" endtime="20171005 18:55:52.619"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.617" endtime="20171005 18:55:52.619"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.271" endtime="20171005 18:55:52.619"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:52.620" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_inventory.txt</msg>
<status status="PASS" starttime="20171005 18:55:52.620" endtime="20171005 18:55:52.620"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:52.623" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:52.622" endtime="20171005 18:55:52.623"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:52.624" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:52.623" endtime="20171005 18:55:52.624"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:52.624" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:52.624" endtime="20171005 18:55:52.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:52.625" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:52.625" endtime="20171005 18:55:52.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:52.626" endtime="20171005 18:55:52.804"></status>
</kw>
<msg timestamp="20171005 18:55:52.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:52.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.625" endtime="20171005 18:55:52.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.805" endtime="20171005 18:55:52.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:52.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.805" endtime="20171005 18:55:52.806"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.622" endtime="20171005 18:55:52.806"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.621" endtime="20171005 18:55:52.806"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.621" endtime="20171005 18:55:52.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:52.807" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:52.806" endtime="20171005 18:55:52.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:52.807" endtime="20171005 18:55:52.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:55.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:55.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.808" endtime="20171005 18:55:55.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:55.053" endtime="20171005 18:55:55.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:55.053" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:55.053" endtime="20171005 18:55:55.054"></status>
</kw>
<msg timestamp="20171005 18:55:55.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:52.620" endtime="20171005 18:55:55.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.055" endtime="20171005 18:55:55.055"></status>
</kw>
<msg timestamp="20171005 18:55:55.055" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:55.054" endtime="20171005 18:55:55.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:55.055" endtime="20171005 18:55:55.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:55.059" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/270096c5", 
        "/xyz/openbmc_project/software/30a69178"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:55.059" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:55.060" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" starttime="20171005 18:55:55.056" endtime="20171005 18:55:55.060"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:55.063" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_inventory.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:55.061" endtime="20171005 18:55:55.063"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.060" endtime="20171005 18:55:55.063"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:52.619" endtime="20171005 18:55:55.063"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:55.064" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_control_list.txt</msg>
<status status="PASS" starttime="20171005 18:55:55.063" endtime="20171005 18:55:55.064"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:55.067" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:55.066" endtime="20171005 18:55:55.067"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:55.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:55.067" endtime="20171005 18:55:55.068"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:55.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:55.068" endtime="20171005 18:55:55.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:55.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:55.068" endtime="20171005 18:55:55.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:55.078" endtime="20171005 18:55:55.331"></status>
</kw>
<msg timestamp="20171005 18:55:55.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:55.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.069" endtime="20171005 18:55:55.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.332" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.332" endtime="20171005 18:55:55.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.332" endtime="20171005 18:55:55.333"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.066" endtime="20171005 18:55:55.333"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.065" endtime="20171005 18:55:55.333"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.065" endtime="20171005 18:55:55.333"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:55.334" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:55.333" endtime="20171005 18:55:55.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:55.334" endtime="20171005 18:55:55.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:55.637" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:55.637" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.335" endtime="20171005 18:55:55.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:55.637" endtime="20171005 18:55:55.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:55.638" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:55.638" endtime="20171005 18:55:55.638"></status>
</kw>
<msg timestamp="20171005 18:55:55.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.064" endtime="20171005 18:55:55.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.639" endtime="20171005 18:55:55.640"></status>
</kw>
<msg timestamp="20171005 18:55:55.640" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:55.639" endtime="20171005 18:55:55.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:55.640" endtime="20171005 18:55:55.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:55.641" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:55.641" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:55.642" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" starttime="20171005 18:55:55.641" endtime="20171005 18:55:55.642"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:55.643" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_control_list.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:55.643" endtime="20171005 18:55:55.644"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.642" endtime="20171005 18:55:55.644"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.063" endtime="20171005 18:55:55.644"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:55.644" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_FIRMWARE_list.txt</msg>
<status status="PASS" starttime="20171005 18:55:55.644" endtime="20171005 18:55:55.645"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:55.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:55.647" endtime="20171005 18:55:55.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:55.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:55.648" endtime="20171005 18:55:55.648"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:55.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:55.648" endtime="20171005 18:55:55.649"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:55.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:55.649" endtime="20171005 18:55:55.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:55.650" endtime="20171005 18:55:55.828"></status>
</kw>
<msg timestamp="20171005 18:55:55.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:55.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.650" endtime="20171005 18:55:55.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.829" endtime="20171005 18:55:55.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:55.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.830" endtime="20171005 18:55:55.830"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.646" endtime="20171005 18:55:55.830"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.646" endtime="20171005 18:55:55.830"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.645" endtime="20171005 18:55:55.830"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:55.831" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:55.831" endtime="20171005 18:55:55.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:55.831" endtime="20171005 18:55:55.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:56.175" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:56.176" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.832" endtime="20171005 18:55:56.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:56.176" endtime="20171005 18:55:56.176"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:56.177" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:56.177" endtime="20171005 18:55:56.177"></status>
</kw>
<msg timestamp="20171005 18:55:56.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:55.645" endtime="20171005 18:55:56.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:56.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:56.178" endtime="20171005 18:55:56.178"></status>
</kw>
<msg timestamp="20171005 18:55:56.178" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:56.177" endtime="20171005 18:55:56.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:56.179" endtime="20171005 18:55:56.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:56.180" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/270096c5": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-109-gd573056", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/270096c5/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/270096c5/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/30a69178": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-111-gca5a12f", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/30a69178/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/30a69178/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/270096c5", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/30a69178"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/30a69178"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:56.180" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:56.181" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/270096c5": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" starttime="20171005 18:55:56.179" endtime="20171005 18:55:56.181"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:56.183" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_FIRMWARE_list.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:56.182" endtime="20171005 18:55:56.183"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:56.181" endtime="20171005 18:55:56.183"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:55.644" endtime="20171005 18:55:56.183"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171005 18:55:56.184" level="INFO">${logpath} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_led.txt</msg>
<status status="PASS" starttime="20171005 18:55:56.184" endtime="20171005 18:55:56.184"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:56.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:56.187" endtime="20171005 18:55:56.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:56.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:56.188" endtime="20171005 18:55:56.188"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:56.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:56.188" endtime="20171005 18:55:56.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:56.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:56.189" endtime="20171005 18:55:56.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:56.413" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:56.190" endtime="20171005 18:55:56.414"></status>
</kw>
<msg timestamp="20171005 18:55:56.414" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:56.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:56.189" endtime="20171005 18:55:56.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:56.415" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:56.414" endtime="20171005 18:55:56.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:56.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:56.415" endtime="20171005 18:55:56.415"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:56.186" endtime="20171005 18:55:56.416"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:56.186" endtime="20171005 18:55:56.416"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:56.185" endtime="20171005 18:55:56.416"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:56.416" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" starttime="20171005 18:55:56.416" endtime="20171005 18:55:56.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:56.417" endtime="20171005 18:55:56.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:58.086" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171005 18:55:58.087" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:56.417" endtime="20171005 18:55:58.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:58.087" endtime="20171005 18:55:58.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:58.088" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:58.088" endtime="20171005 18:55:58.088"></status>
</kw>
<msg timestamp="20171005 18:55:58.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:56.184" endtime="20171005 18:55:58.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:58.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:58.089" endtime="20171005 18:55:58.089"></status>
</kw>
<msg timestamp="20171005 18:55:58.089" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20171005 18:55:58.088" endtime="20171005 18:55:58.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:58.090" endtime="20171005 18:55:58.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171005 18:55:58.092" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:58.092" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171005 18:55:58.093" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" starttime="20171005 18:55:58.090" endtime="20171005 18:55:58.093"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:58.094" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_led.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/20171005185538928375_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:58.094" endtime="20171005 18:55:58.094"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.093" endtime="20171005 18:55:58.094"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:56.183" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.060" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.059" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.059" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.059" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.058" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.012" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.002" endtime="20171005 18:55:58.095"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:51.002" endtime="20171005 18:55:58.095"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:58.097" endtime="20171005 18:55:58.097"></status>
</kw>
<msg timestamp="20171005 18:55:58.097" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:58.097" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20171005 18:55:58.096" endtime="20171005 18:55:58.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:58.098" endtime="20171005 18:55:58.098"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171005 18:55:58.162" level="INFO">host=9.3.86.161
path_separator=/
port=22
width=80
height=24
timeout=25 seconds
prompt=# 
index=1
term_type=vt100
encoding=UTF-8
alias=bmc_connection
newline=</msg>
<msg timestamp="20171005 18:55:58.162" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171005 18:55:58.222" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171005 18:55:58.235" level="INFO">${core_files} = None</msg>
<msg timestamp="20171005 18:55:58.235" level="INFO">${stderr} = None</msg>
<msg timestamp="20171005 18:55:58.235" level="INFO">${rc} = None</msg>
<msg timestamp="20171005 18:55:58.235" level="FAIL">#(UTC) 2017/10/05 18:55:58.233941 -    0.072563 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" starttime="20171005 18:55:58.127" endtime="20171005 18:55:58.235"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171005 18:55:58.236" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171005 18:55:58.237" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" starttime="20171005 18:55:58.236" endtime="20171005 18:55:58.237"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:58.247" endtime="20171005 18:55:58.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:58.260" endtime="20171005 18:55:59.195"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.259" endtime="20171005 18:55:59.196"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.258" endtime="20171005 18:55:59.196"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.247" endtime="20171005 18:55:59.196"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.237" endtime="20171005 18:55:59.196"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" starttime="20171005 18:55:59.196" endtime="20171005 18:55:59.196"></status>
</kw>
<status status="FAIL" starttime="20171005 18:55:58.126" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.098" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.095" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:58.095" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.146" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.143" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.143" endtime="20171005 18:55:59.197"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.143" endtime="20171005 18:55:59.197"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20171005 18:55:59.205" endtime="20171005 18:55:59.205"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.198" endtime="20171005 18:55:59.205"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:39.142" endtime="20171005 18:55:59.205"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.771" endtime="20171005 18:55:59.205"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.771" endtime="20171005 18:55:59.205"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171005 18:55:59.217" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20171005 18:55:59.206" endtime="20171005 18:55:59.217"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171005 18:55:59.218" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/6989/obmc-robot/logs/20171005185538928375_TestsTestBasicPoweron/20171005185538928375_PowerOnTest/</msg>
<status status="PASS" starttime="20171005 18:55:59.217" endtime="20171005 18:55:59.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.218" endtime="20171005 18:55:59.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.219" endtime="20171005 18:55:59.219"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:59.219" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs"&gt;/tmp/fspcibld/6989/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20171005 18:55:59.219" endtime="20171005 18:55:59.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:59.220" level="INFO">File '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20171005 18:55:59.220" endtime="20171005 18:55:59.221"></status>
</kw>
<msg timestamp="20171005 18:55:59.221" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20171005 18:55:59.220" endtime="20171005 18:55:59.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.221" endtime="20171005 18:55:59.221"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.222" endtime="20171005 18:55:59.222"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:55:59.223" level="INFO">${cur_time} = 2017-10-05 18:55:59:222711</msg>
<status status="PASS" starttime="20171005 18:55:59.223" endtime="20171005 18:55:59.223"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171005 18:55:59.224" level="INFO">${cur_time} = 20171005185559222711</msg>
<status status="PASS" starttime="20171005 18:55:59.223" endtime="20171005 18:55:59.224"></status>
</kw>
<msg timestamp="20171005 18:55:59.224" level="INFO">${cur_time} = 20171005185559222711</msg>
<status status="PASS" starttime="20171005 18:55:59.222" endtime="20171005 18:55:59.224"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:55:59.226" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:55:59.225" endtime="20171005 18:55:59.226"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.205" endtime="20171005 18:55:59.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="utils" name="Delete Error Logs">
<doc>Delete error logs.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:59.230" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:59.230" endtime="20171005 18:55:59.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:59.231" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:59.231" endtime="20171005 18:55:59.231"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:59.232" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:59.232" endtime="20171005 18:55:59.232"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:59.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:59.232" endtime="20171005 18:55:59.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:59.233" endtime="20171005 18:55:59.473"></status>
</kw>
<msg timestamp="20171005 18:55:59.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:59.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.233" endtime="20171005 18:55:59.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.474" endtime="20171005 18:55:59.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.474" endtime="20171005 18:55:59.475"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.229" endtime="20171005 18:55:59.475"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.229" endtime="20171005 18:55:59.475"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.228" endtime="20171005 18:55:59.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:59.476" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" starttime="20171005 18:55:59.475" endtime="20171005 18:55:59.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.476" endtime="20171005 18:55:59.476"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:59.553" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 18:55:59.553" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.477" endtime="20171005 18:55:59.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.553" endtime="20171005 18:55:59.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:59.554" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:59.554" endtime="20171005 18:55:59.554"></status>
</kw>
<msg timestamp="20171005 18:55:59.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.227" endtime="20171005 18:55:59.554"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.555" endtime="20171005 18:55:59.555"></status>
</kw>
<kw library="utils" name="Get URL List">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:59.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:59.560" endtime="20171005 18:55:59.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:59.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:59.562" endtime="20171005 18:55:59.562"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:59.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:59.562" endtime="20171005 18:55:59.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:59.563" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:59.563" endtime="20171005 18:55:59.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.767" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:59.564" endtime="20171005 18:55:59.767"></status>
</kw>
<msg timestamp="20171005 18:55:59.767" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:55:59.767" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.563" endtime="20171005 18:55:59.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.768" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.768" endtime="20171005 18:55:59.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.768" endtime="20171005 18:55:59.769"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.560" endtime="20171005 18:55:59.769"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.559" endtime="20171005 18:55:59.769"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.558" endtime="20171005 18:55:59.769"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:55:59.770" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" starttime="20171005 18:55:59.769" endtime="20171005 18:55:59.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.770" endtime="20171005 18:55:59.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:55:59.830" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171005 18:55:59.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.770" endtime="20171005 18:55:59.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.830" endtime="20171005 18:55:59.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:55:59.831" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:55:59.831" endtime="20171005 18:55:59.831"></status>
</kw>
<msg timestamp="20171005 18:55:59.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.558" endtime="20171005 18:55:59.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:55:59.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.832" endtime="20171005 18:55:59.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171005 18:55:59.833" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2", 
    "/xyz/openbmc_project/logging/entry/4"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171005 18:55:59.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171005 18:55:59.833" level="INFO">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/4'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20171005 18:55:59.832" endtime="20171005 18:55:59.833"></status>
</kw>
<msg timestamp="20171005 18:55:59.833" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" starttime="20171005 18:55:59.557" endtime="20171005 18:55:59.833"></status>
</kw>
<kw library="Collections" name="Sort List">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.834" endtime="20171005 18:55:59.834"></status>
</kw>
<msg timestamp="20171005 18:55:59.834" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" starttime="20171005 18:55:59.556" endtime="20171005 18:55:59.834"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:55:59.835" endtime="20171005 18:55:59.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:59.836" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171005 18:55:59.836" endtime="20171005 18:55:59.836"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:55:59.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:55:59.839" endtime="20171005 18:55:59.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:55:59.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:55:59.840" endtime="20171005 18:55:59.840"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:55:59.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:55:59.840" endtime="20171005 18:55:59.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:55:59.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:55:59.841" endtime="20171005 18:55:59.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.020" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:55:59.842" endtime="20171005 18:56:00.020"></status>
</kw>
<msg timestamp="20171005 18:56:00.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:56:00.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.842" endtime="20171005 18:56:00.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.021" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.020" endtime="20171005 18:56:00.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.021" endtime="20171005 18:56:00.022"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.838" endtime="20171005 18:56:00.022"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.837" endtime="20171005 18:56:00.022"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.837" endtime="20171005 18:56:00.022"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:56:00.022" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" starttime="20171005 18:56:00.022" endtime="20171005 18:56:00.022"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:56:00.024" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 18:56:00.023" endtime="20171005 18:56:00.024"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:56:00.025" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 18:56:00.025" endtime="20171005 18:56:00.025"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.024" endtime="20171005 18:56:00.025"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.023" endtime="20171005 18:56:00.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:56:00.127" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171005 18:56:00.127" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.026" endtime="20171005 18:56:00.127"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:56:00.128" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:56:00.128" endtime="20171005 18:56:00.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:56:00.129" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:56:00.129" endtime="20171005 18:56:00.129"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.128" endtime="20171005 18:56:00.129"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.127" endtime="20171005 18:56:00.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:56:00.130" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:56:00.130" endtime="20171005 18:56:00.130"></status>
</kw>
<msg timestamp="20171005 18:56:00.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:55:59.836" endtime="20171005 18:56:00.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.130" endtime="20171005 18:56:00.131"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.834" endtime="20171005 18:56:00.131"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.834" endtime="20171005 18:56:00.131"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:00.132" endtime="20171005 18:56:00.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:56:00.133" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171005 18:56:00.132" endtime="20171005 18:56:00.133"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:56:00.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:56:00.135" endtime="20171005 18:56:00.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:56:00.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:56:00.136" endtime="20171005 18:56:00.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:56:00.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:56:00.137" endtime="20171005 18:56:00.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:56:00.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:56:00.138" endtime="20171005 18:56:00.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:56:00.139" endtime="20171005 18:56:00.314"></status>
</kw>
<msg timestamp="20171005 18:56:00.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:56:00.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.138" endtime="20171005 18:56:00.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.315" endtime="20171005 18:56:00.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.315" endtime="20171005 18:56:00.316"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.135" endtime="20171005 18:56:00.316"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.134" endtime="20171005 18:56:00.316"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.134" endtime="20171005 18:56:00.316"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:56:00.317" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" starttime="20171005 18:56:00.316" endtime="20171005 18:56:00.317"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:56:00.318" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 18:56:00.318" endtime="20171005 18:56:00.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:56:00.319" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 18:56:00.319" endtime="20171005 18:56:00.319"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.319" endtime="20171005 18:56:00.319"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.317" endtime="20171005 18:56:00.320"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:56:00.413" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171005 18:56:00.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.320" endtime="20171005 18:56:00.413"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:56:00.414" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:56:00.413" endtime="20171005 18:56:00.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:56:00.415" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:56:00.415" endtime="20171005 18:56:00.415"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.414" endtime="20171005 18:56:00.415"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.413" endtime="20171005 18:56:00.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:56:00.416" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:56:00.415" endtime="20171005 18:56:00.416"></status>
</kw>
<msg timestamp="20171005 18:56:00.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.133" endtime="20171005 18:56:00.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.416" endtime="20171005 18:56:00.417"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.131" endtime="20171005 18:56:00.417"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.131" endtime="20171005 18:56:00.417"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/4">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:00.417" endtime="20171005 18:56:00.418"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:56:00.418" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20171005 18:56:00.418" endtime="20171005 18:56:00.419"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:56:00.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:56:00.421" endtime="20171005 18:56:00.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:56:00.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:56:00.422" endtime="20171005 18:56:00.422"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:56:00.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:56:00.422" endtime="20171005 18:56:00.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:56:00.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:56:00.423" endtime="20171005 18:56:00.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.662" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:56:00.424" endtime="20171005 18:56:00.662"></status>
</kw>
<msg timestamp="20171005 18:56:00.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:56:00.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.424" endtime="20171005 18:56:00.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.663" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.662" endtime="20171005 18:56:00.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.663" endtime="20171005 18:56:00.664"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.420" endtime="20171005 18:56:00.664"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.420" endtime="20171005 18:56:00.664"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.419" endtime="20171005 18:56:00.664"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:56:00.664" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4</msg>
<status status="PASS" starttime="20171005 18:56:00.664" endtime="20171005 18:56:00.665"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:56:00.666" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/4, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 18:56:00.665" endtime="20171005 18:56:00.666"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:56:00.667" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/4, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" starttime="20171005 18:56:00.667" endtime="20171005 18:56:00.667"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.667" endtime="20171005 18:56:00.668"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.665" endtime="20171005 18:56:00.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:56:00.819" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171005 18:56:00.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.668" endtime="20171005 18:56:00.819"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171005 18:56:00.821" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:56:00.820" endtime="20171005 18:56:00.821"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171005 18:56:00.822" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20171005 18:56:00.821" endtime="20171005 18:56:00.822"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.821" endtime="20171005 18:56:00.822"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.820" endtime="20171005 18:56:00.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:56:00.822" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:56:00.822" endtime="20171005 18:56:00.822"></status>
</kw>
<msg timestamp="20171005 18:56:00.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.419" endtime="20171005 18:56:00.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:00.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.823" endtime="20171005 18:56:00.823"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.417" endtime="20171005 18:56:00.824"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.417" endtime="20171005 18:56:00.824"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.834" endtime="20171005 18:56:00.824"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.227" endtime="20171005 18:56:00.824"></status>
</kw>
<kw library="dump_utils" name="Delete All Dumps">
<doc>Delete all dumps.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171005 18:56:00.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20171005 18:56:00.826" endtime="20171005 18:56:00.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171005 18:56:00.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20171005 18:56:00.827" endtime="20171005 18:56:00.828"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171005 18:56:00.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20171005 18:56:00.828" endtime="20171005 18:56:00.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171005 18:56:00.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20171005 18:56:00.829" endtime="20171005 18:56:00.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171005 18:56:01.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20171005 18:56:00.831" endtime="20171005 18:56:01.006"></status>
</kw>
<msg timestamp="20171005 18:56:01.007" level="INFO">${status} = PASS</msg>
<msg timestamp="20171005 18:56:01.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.830" endtime="20171005 18:56:01.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171005 18:56:01.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:01.007" endtime="20171005 18:56:01.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171005 18:56:01.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20171005 18:56:01.008" endtime="20171005 18:56:01.008"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.826" endtime="20171005 18:56:01.008"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.825" endtime="20171005 18:56:01.008"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.825" endtime="20171005 18:56:01.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171005 18:56:01.009" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" starttime="20171005 18:56:01.009" endtime="20171005 18:56:01.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.009" endtime="20171005 18:56:01.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171005 18:56:01.055" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171005 18:56:01.055" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:01.010" endtime="20171005 18:56:01.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.056" endtime="20171005 18:56:01.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171005 18:56:01.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20171005 18:56:01.056" endtime="20171005 18:56:01.056"></status>
</kw>
<msg timestamp="20171005 18:56:01.057" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20171005 18:56:00.824" endtime="20171005 18:56:01.057"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171005 18:56:01.057" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20171005 18:56:01.057" endtime="20171005 18:56:01.057"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:00.824" endtime="20171005 18:56:01.058"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.227" endtime="20171005 18:56:01.058"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:59.226" endtime="20171005 18:56:01.058"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.770" endtime="20171005 18:56:01.058"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171005 18:56:01.060" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:56:01.059" endtime="20171005 18:56:01.060"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171005 18:56:01.060" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:56:01.060" endtime="20171005 18:56:01.060"></status>
</kw>
<msg timestamp="20171005 18:56:01.061" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" starttime="20171005 18:56:01.059" endtime="20171005 18:56:01.061"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:56:01.062" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20171005 18:56:01.062" endtime="20171005 18:56:01.062"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.063" endtime="20171005 18:56:01.063"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:56:01.068" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:56:01.071" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:56:01.071" level="INFO">${output} = /tmp/fspcibld/6989/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20171005 18:56:01.064" endtime="20171005 18:56:01.071"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.073" endtime="20171005 18:56:01.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.075" endtime="20171005 18:56:01.076"></status>
</kw>
<msg timestamp="20171005 18:56:01.076" level="INFO">${ssh_pw_file_path} = ssh_pw</msg>
<status status="PASS" starttime="20171005 18:56:01.075" endtime="20171005 18:56:01.076"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:56:01.077" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:56:01.076" endtime="20171005 18:56:01.077"></status>
</kw>
<msg timestamp="20171005 18:56:01.077" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:56:01.061" endtime="20171005 18:56:01.077"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171005 18:56:01.078" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" starttime="20171005 18:56:01.078" endtime="20171005 18:56:01.078"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:56:01.079" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20171005 18:56:01.078" endtime="20171005 18:56:01.079"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.079" endtime="20171005 18:56:01.079"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171005 18:56:01.083" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171005 18:56:01.097" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:56:01.097" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 18:56:01.080" endtime="20171005 18:56:01.097"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.099" endtime="20171005 18:56:01.100"></status>
</kw>
<msg timestamp="20171005 18:56:01.101" level="INFO">${os_con_pid} = 202</msg>
<status status="PASS" starttime="20171005 18:56:01.061" endtime="20171005 18:56:01.101"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171005 18:56:01.102" level="INFO">${cmd_buf} = kill -9 202</msg>
<status status="PASS" starttime="20171005 18:56:01.101" endtime="20171005 18:56:01.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.103" endtime="20171005 18:56:01.103"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:01.102" endtime="20171005 18:56:01.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20171005 18:56:01.108" level="INFO">Running command 'kill -9 202 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20171005 18:56:01.104" endtime="20171005 18:56:01.111"></status>
</kw>
<msg timestamp="20171005 18:56:01.112" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:56:01.112" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 18:56:01.104" endtime="20171005 18:56:01.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.133" endtime="20171005 18:56:01.134"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:01.130" endtime="20171005 18:56:01.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171005 18:56:01.144" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/6989/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/6989/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20171005 18:56:01.138" endtime="20171005 18:56:01.144"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:01.137" endtime="20171005 18:56:01.144"></status>
</kw>
<status status="PASS" starttime="20171005 18:56:01.135" endtime="20171005 18:56:01.144"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171005 18:56:01.145" level="INFO">${output} = </msg>
<status status="PASS" starttime="20171005 18:56:01.144" endtime="20171005 18:56:01.145"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171005 18:56:01.154" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20171005 18:56:01.145" endtime="20171005 18:56:01.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20171005 18:56:01.155" endtime="20171005 18:56:01.208"></status>
</kw>
<msg timestamp="20171005 18:56:01.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20171005 18:56:01.209" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171005 18:56:01.154" endtime="20171005 18:56:01.209"></status>
</kw>
<msg timestamp="20171005 18:56:01.210" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171005 18:56:01.058" endtime="20171005 18:56:01.210"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20171005 18:56:01.213" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" starttime="20171005 18:56:01.212" endtime="20171005 18:56:01.213"></status>
</kw>
<status status="PASS" starttime="20171005 18:55:35.770" endtime="20171005 18:56:01.213"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20171005 18:45:26.045" critical="yes" endtime="20171005 18:56:01.213">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20171005 18:45:26.007" endtime="20171005 18:56:01.215"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20171005 18:45:17.275" endtime="20171005 18:56:01.223"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171005 18:45:42.481" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
