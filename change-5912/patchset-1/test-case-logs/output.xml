<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170810 02:32:14.105">
<suite id="s1" source="/tmp/fspcibld/15815/obmc-robot/tests" name="Tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 02:32:14.618" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 02:32:14.618" status="FAIL" starttime="20170810 02:32:14.617"></status>
</kw>
<msg timestamp="20170810 02:32:14.618" level="INFO">${has_host} = False</msg>
<status endtime="20170810 02:32:14.618" status="PASS" starttime="20170810 02:32:14.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 02:32:14.619" status="PASS" starttime="20170810 02:32:14.618"></status>
</kw>
<status endtime="20170810 02:32:14.619" status="PASS" starttime="20170810 02:32:14.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170810 02:32:14.620" level="INFO">${port_num} = 22</msg>
<status endtime="20170810 02:32:14.620" status="PASS" starttime="20170810 02:32:14.620"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170810 02:32:14.621" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170810 02:32:14.621" status="PASS" starttime="20170810 02:32:14.620"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170810 02:32:14.621" level="INFO">${https_num} = 443</msg>
<status endtime="20170810 02:32:14.621" status="PASS" starttime="20170810 02:32:14.621"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170810 02:32:14.622" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170810 02:32:14.622" status="PASS" starttime="20170810 02:32:14.622"></status>
</kw>
<status endtime="20170810 02:32:14.622" status="PASS" starttime="20170810 02:32:14.620"></status>
</kw>
<status endtime="20170810 02:32:14.622" status="PASS" starttime="20170810 02:32:14.619"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 02:32:14.623" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 02:32:14.623" status="FAIL" starttime="20170810 02:32:14.623"></status>
</kw>
<msg timestamp="20170810 02:32:14.623" level="INFO">${has_port} = False</msg>
<status endtime="20170810 02:32:14.623" status="PASS" starttime="20170810 02:32:14.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 02:32:14.625" status="PASS" starttime="20170810 02:32:14.625"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 02:32:14.625" status="PASS" starttime="20170810 02:32:14.625"></status>
</kw>
<status endtime="20170810 02:32:14.626" status="PASS" starttime="20170810 02:32:14.624"></status>
</kw>
<status endtime="20170810 02:32:14.626" status="PASS" starttime="20170810 02:32:14.624"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 02:32:14.626" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170810 02:32:16.406" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 02:32:16.406" status="PASS" starttime="20170810 02:32:14.626"></status>
</kw>
<status endtime="20170810 02:32:16.406" status="PASS" starttime="20170810 02:32:14.616"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:32:16.408" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170810 02:32:16.485" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 02:32:16.485" level="INFO">${output} = VERSION_ID="v1.99.8-208-ge32c8f2"</msg>
<msg timestamp="20170810 02:32:16.485" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:32:16.485" status="PASS" starttime="20170810 02:32:16.407"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 02:32:16.486" level="INFO">Length is 0</msg>
<status endtime="20170810 02:32:16.486" status="PASS" starttime="20170810 02:32:16.486"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170810 02:32:16.486" level="INFO">VERSION_ID="v1.99.8-208-ge32c8f2"</msg>
<status endtime="20170810 02:32:16.486" status="PASS" starttime="20170810 02:32:16.486"></status>
</kw>
<status endtime="20170810 02:32:16.487" status="PASS" starttime="20170810 02:32:16.407"></status>
</kw>
<status endtime="20170810 02:32:16.487" status="PASS" starttime="20170810 02:32:16.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:32:16.488" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170810 02:32:16.656" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170810 02:32:16.656" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170810 02:32:16.656" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170810 02:32:16.656" status="PASS" starttime="20170810 02:32:16.488"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 02:32:16.657" level="INFO">Length is 81</msg>
<msg timestamp="20170810 02:32:16.657" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170810 02:32:16.657" status="FAIL" starttime="20170810 02:32:16.657"></status>
</kw>
<status endtime="20170810 02:32:16.657" status="FAIL" starttime="20170810 02:32:16.487"></status>
</kw>
<status endtime="20170810 02:32:16.658" status="FAIL" starttime="20170810 02:32:16.487"></status>
</kw>
<status endtime="20170810 02:32:16.658" status="PASS" starttime="20170810 02:32:16.487"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 02:32:16.843" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:32:16.843" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170810 02:32:17.664" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170810 02:32:17.664" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 02:32:17.742" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 02:32:17.750" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 02:32:17.750" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 02:32:17.750" level="INFO">${rc} = 0</msg>
<status endtime="20170810 02:32:17.750" status="PASS" starttime="20170810 02:32:16.659"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 02:32:17.750" level="INFO">Length is 0</msg>
<status endtime="20170810 02:32:17.750" status="PASS" starttime="20170810 02:32:17.750"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 02:32:17.751" level="INFO">Length is 11</msg>
<status endtime="20170810 02:32:17.751" status="PASS" starttime="20170810 02:32:17.751"></status>
</kw>
<msg timestamp="20170810 02:32:17.751" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170810 02:32:17.751" status="PASS" starttime="20170810 02:32:16.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 02:32:17.751" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170810 02:32:17.752" status="PASS" starttime="20170810 02:32:17.751"></status>
</kw>
<status endtime="20170810 02:32:17.752" status="PASS" starttime="20170810 02:32:16.658"></status>
</kw>
<status endtime="20170810 02:32:17.752" status="PASS" starttime="20170810 02:32:16.658"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 02:32:17.754" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 02:32:17.755" status="FAIL" starttime="20170810 02:32:17.754"></status>
</kw>
<msg timestamp="20170810 02:32:17.755" level="INFO">${has_host} = False</msg>
<status endtime="20170810 02:32:17.755" status="PASS" starttime="20170810 02:32:17.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 02:32:17.756" status="PASS" starttime="20170810 02:32:17.756"></status>
</kw>
<status endtime="20170810 02:32:17.756" status="PASS" starttime="20170810 02:32:17.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170810 02:32:17.758" level="INFO">${port_num} = 22</msg>
<status endtime="20170810 02:32:17.758" status="PASS" starttime="20170810 02:32:17.758"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170810 02:32:17.758" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170810 02:32:17.759" status="PASS" starttime="20170810 02:32:17.758"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170810 02:32:17.759" level="INFO">${https_num} = 443</msg>
<status endtime="20170810 02:32:17.759" status="PASS" starttime="20170810 02:32:17.759"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170810 02:32:17.760" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170810 02:32:17.760" status="PASS" starttime="20170810 02:32:17.759"></status>
</kw>
<status endtime="20170810 02:32:17.760" status="PASS" starttime="20170810 02:32:17.757"></status>
</kw>
<status endtime="20170810 02:32:17.760" status="PASS" starttime="20170810 02:32:17.757"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 02:32:17.761" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 02:32:17.761" status="FAIL" starttime="20170810 02:32:17.761"></status>
</kw>
<msg timestamp="20170810 02:32:17.761" level="INFO">${has_port} = False</msg>
<status endtime="20170810 02:32:17.761" status="PASS" starttime="20170810 02:32:17.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 02:32:17.763" status="PASS" starttime="20170810 02:32:17.762"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 02:32:17.763" status="PASS" starttime="20170810 02:32:17.763"></status>
</kw>
<status endtime="20170810 02:32:17.763" status="PASS" starttime="20170810 02:32:17.762"></status>
</kw>
<status endtime="20170810 02:32:17.764" status="PASS" starttime="20170810 02:32:17.761"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 02:32:17.764" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170810 02:32:19.479" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 02:32:19.480" status="PASS" starttime="20170810 02:32:17.764"></status>
</kw>
<status endtime="20170810 02:32:19.480" status="PASS" starttime="20170810 02:32:17.753"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:32:19.481" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170810 02:32:19.559" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 02:32:19.560" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170810 02:32:19.560" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:32:19.560" status="PASS" starttime="20170810 02:32:19.481"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 02:32:19.560" level="INFO">Length is 0</msg>
<status endtime="20170810 02:32:19.561" status="PASS" starttime="20170810 02:32:19.560"></status>
</kw>
<msg timestamp="20170810 02:32:19.561" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170810 02:32:19.561" status="PASS" starttime="20170810 02:32:19.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170810 02:32:19.561" status="PASS" starttime="20170810 02:32:19.561"></status>
</kw>
<status endtime="20170810 02:32:19.561" status="PASS" starttime="20170810 02:32:17.752"></status>
</kw>
<status endtime="20170810 02:32:19.562" status="PASS" starttime="20170810 02:32:17.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170810 02:32:19.562" status="PASS" starttime="20170810 02:32:19.562"></status>
</kw>
<status endtime="20170810 02:32:19.562" status="PASS" starttime="20170810 02:32:14.616"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/15815/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/15815/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:19.644" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:19.644" status="PASS" starttime="20170810 02:32:19.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:19.645" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:19.645" status="PASS" starttime="20170810 02:32:19.644"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:19.645" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:19.646" status="PASS" starttime="20170810 02:32:19.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:19.646" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:19.646" status="PASS" starttime="20170810 02:32:19.646"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:19.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:19.830" status="PASS" starttime="20170810 02:32:19.647"></status>
</kw>
<msg timestamp="20170810 02:32:19.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:19.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:19.830" status="PASS" starttime="20170810 02:32:19.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:19.831" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:19.831" status="PASS" starttime="20170810 02:32:19.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:19.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:19.832" status="PASS" starttime="20170810 02:32:19.831"></status>
</kw>
<status endtime="20170810 02:32:19.832" status="PASS" starttime="20170810 02:32:19.643"></status>
</kw>
<status endtime="20170810 02:32:19.832" status="PASS" starttime="20170810 02:32:19.642"></status>
</kw>
<status endtime="20170810 02:32:19.832" status="PASS" starttime="20170810 02:32:19.642"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:19.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:19.838" status="PASS" starttime="20170810 02:32:19.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:19.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:19.838" status="PASS" starttime="20170810 02:32:19.838"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:19.839" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:19.839" status="PASS" starttime="20170810 02:32:19.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:19.840" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:19.840" status="PASS" starttime="20170810 02:32:19.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:20.024" status="PASS" starttime="20170810 02:32:19.840"></status>
</kw>
<msg timestamp="20170810 02:32:20.024" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:20.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:20.024" status="PASS" starttime="20170810 02:32:19.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.025" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:20.025" status="PASS" starttime="20170810 02:32:20.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:20.026" status="PASS" starttime="20170810 02:32:20.025"></status>
</kw>
<status endtime="20170810 02:32:20.026" status="PASS" starttime="20170810 02:32:19.836"></status>
</kw>
<status endtime="20170810 02:32:20.026" status="PASS" starttime="20170810 02:32:19.836"></status>
</kw>
<status endtime="20170810 02:32:20.026" status="PASS" starttime="20170810 02:32:19.835"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:20.027" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:32:20.027" status="PASS" starttime="20170810 02:32:20.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:20.029" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:20.029" status="PASS" starttime="20170810 02:32:20.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:20.030" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:20.030" status="PASS" starttime="20170810 02:32:20.029"></status>
</kw>
<status endtime="20170810 02:32:20.030" status="PASS" starttime="20170810 02:32:20.029"></status>
</kw>
<status endtime="20170810 02:32:20.030" status="PASS" starttime="20170810 02:32:20.027"></status>
</kw>
<status endtime="20170810 02:32:20.030" status="PASS" starttime="20170810 02:32:20.027"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:20.130" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:20.131" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:20.131" status="PASS" starttime="20170810 02:32:20.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:20.132" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:20.133" status="PASS" starttime="20170810 02:32:20.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:20.133" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:20.134" status="PASS" starttime="20170810 02:32:20.133"></status>
</kw>
<status endtime="20170810 02:32:20.134" status="PASS" starttime="20170810 02:32:20.133"></status>
</kw>
<status endtime="20170810 02:32:20.134" status="PASS" starttime="20170810 02:32:20.131"></status>
</kw>
<status endtime="20170810 02:32:20.134" status="PASS" starttime="20170810 02:32:20.131"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:20.134" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:20.134" status="PASS" starttime="20170810 02:32:20.134"></status>
</kw>
<msg timestamp="20170810 02:32:20.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:20.135" status="PASS" starttime="20170810 02:32:19.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:20.135" status="PASS" starttime="20170810 02:32:20.135"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:20.136" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:20.136" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:20.136" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 02:32:20.136" status="PASS" starttime="20170810 02:32:20.135"></status>
</kw>
<msg timestamp="20170810 02:32:20.136" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 02:32:20.136" status="PASS" starttime="20170810 02:32:19.834"></status>
</kw>
<msg timestamp="20170810 02:32:20.137" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 02:32:20.137" status="PASS" starttime="20170810 02:32:19.833"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 02:32:20.138" level="FAIL">Off != Quiesced</msg>
<status endtime="20170810 02:32:20.138" status="FAIL" starttime="20170810 02:32:20.138"></status>
</kw>
<msg timestamp="20170810 02:32:20.139" level="INFO">${status} = False</msg>
<status endtime="20170810 02:32:20.139" status="PASS" starttime="20170810 02:32:20.137"></status>
</kw>
<msg timestamp="20170810 02:32:20.139" level="INFO">${status} = False</msg>
<status endtime="20170810 02:32:20.139" status="PASS" starttime="20170810 02:32:19.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170810 02:32:20.140" status="PASS" starttime="20170810 02:32:20.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 02:32:20.141" status="PASS" starttime="20170810 02:32:20.140"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 02:32:20.156" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 02:32:20.156" status="PASS" starttime="20170810 02:32:20.142"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 02:32:20.171" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170810 02:32:20.171" status="PASS" starttime="20170810 02:32:20.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:32:20.174" level="INFO">${cur_time} = 2017-08-10 02:32:20:173298</msg>
<status endtime="20170810 02:32:20.174" status="PASS" starttime="20170810 02:32:20.173"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:32:20.174" level="INFO">${cur_time} = 20170810023220173298</msg>
<status endtime="20170810 02:32:20.174" status="PASS" starttime="20170810 02:32:20.174"></status>
</kw>
<status endtime="20170810 02:32:20.175" status="PASS" starttime="20170810 02:32:20.172"></status>
</kw>
<msg timestamp="20170810 02:32:20.179" level="INFO">${FFDC_TIME} = 20170810023220173298</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 02:32:20.180" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170810 02:32:20.180" status="PASS" starttime="20170810 02:32:20.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 02:32:20.181" level="INFO">${suite_name} = 20170810023220173298_TestsSecurityTestSsl</msg>
<status endtime="20170810 02:32:20.181" status="PASS" starttime="20170810 02:32:20.181"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 02:32:20.182" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170810 02:32:20.182" status="PASS" starttime="20170810 02:32:20.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 02:32:20.182" level="INFO">${test_name} = 20170810023220173298_TestSSLConnection</msg>
<status endtime="20170810 02:32:20.182" status="PASS" starttime="20170810 02:32:20.182"></status>
</kw>
<status endtime="20170810 02:32:20.182" status="PASS" starttime="20170810 02:32:20.180"></status>
</kw>
<msg timestamp="20170810 02:32:20.183" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/15815/obmc-robot/logs/20170810023220173298_TestsSecurityTestSsl/20170810023220173298_TestSSLConnection/</msg>
<msg timestamp="20170810 02:32:20.187" level="INFO">${FFDC_PREFIX} = 20170810023220173298_</msg>
<status endtime="20170810 02:32:20.187" status="PASS" starttime="20170810 02:32:20.172"></status>
</kw>
<status endtime="20170810 02:32:20.187" status="PASS" starttime="20170810 02:32:20.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 02:32:20.188" status="PASS" starttime="20170810 02:32:20.188"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.189" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs"&gt;/tmp/fspcibld/15815/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170810 02:32:20.189" status="PASS" starttime="20170810 02:32:20.188"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.190" level="FAIL">File '/tmp/fspcibld/15815/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170810 02:32:20.190" status="FAIL" starttime="20170810 02:32:20.189"></status>
</kw>
<msg timestamp="20170810 02:32:20.190" level="INFO">${exist} = False</msg>
<status endtime="20170810 02:32:20.190" status="PASS" starttime="20170810 02:32:20.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.191" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:32:20.191" status="PASS" starttime="20170810 02:32:20.191"></status>
</kw>
<status endtime="20170810 02:32:20.191" status="PASS" starttime="20170810 02:32:20.190"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 02:32:20.192" status="PASS" starttime="20170810 02:32:20.191"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:32:20.193" level="INFO">${cur_time} = 2017-08-10 02:32:20:192522</msg>
<status endtime="20170810 02:32:20.193" status="PASS" starttime="20170810 02:32:20.192"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:32:20.194" level="INFO">${cur_time} = 20170810023220192522</msg>
<status endtime="20170810 02:32:20.194" status="PASS" starttime="20170810 02:32:20.193"></status>
</kw>
<msg timestamp="20170810 02:32:20.194" level="INFO">${cur_time} = 20170810023220192522</msg>
<status endtime="20170810 02:32:20.194" status="PASS" starttime="20170810 02:32:20.192"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.195" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:32:20.195" status="PASS" starttime="20170810 02:32:20.194"></status>
</kw>
<status endtime="20170810 02:32:20.195" status="PASS" starttime="20170810 02:32:20.141"></status>
</kw>
<status endtime="20170810 02:32:20.195" status="PASS" starttime="20170810 02:32:19.833"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170810 02:32:20.195" status="PASS" starttime="20170810 02:32:19.641"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:20.196" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:20.196" status="PASS" starttime="20170810 02:32:20.196"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170810 02:32:20.196" status="PASS" starttime="20170810 02:32:19.565"></status>
</suite>
<status endtime="20170810 02:32:20.198" status="PASS" starttime="20170810 02:32:19.562"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/15815/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 02:32:20.235" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:32:20.235" status="PASS" starttime="20170810 02:32:20.235"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 02:32:20.236" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:32:20.236" status="PASS" starttime="20170810 02:32:20.235"></status>
</kw>
<msg timestamp="20170810 02:32:20.236" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:32:20.236" status="PASS" starttime="20170810 02:32:20.234"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 02:32:20.238" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:32:20.238" status="PASS" starttime="20170810 02:32:20.238"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 02:32:20.239" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:32:20.239" status="PASS" starttime="20170810 02:32:20.238"></status>
</kw>
<msg timestamp="20170810 02:32:20.239" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:32:20.239" status="PASS" starttime="20170810 02:32:20.237"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.240" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 02:32:20.240" status="PASS" starttime="20170810 02:32:20.239"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:32:20.240" status="PASS" starttime="20170810 02:32:20.240"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:32:20.245" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:32:20.247" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:32:20.247" level="INFO">${output} = /tmp/fspcibld/15815/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 02:32:20.247" status="PASS" starttime="20170810 02:32:20.240"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:32:20.250" status="PASS" starttime="20170810 02:32:20.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 02:32:20.251" status="PASS" starttime="20170810 02:32:20.251"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.252" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 02:32:20.252" status="PASS" starttime="20170810 02:32:20.251"></status>
</kw>
<msg timestamp="20170810 02:32:20.252" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 02:32:20.252" status="PASS" starttime="20170810 02:32:20.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.253" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 02:32:20.253" status="PASS" starttime="20170810 02:32:20.253"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:32:20.254" status="PASS" starttime="20170810 02:32:20.253"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170810 02:32:20.257" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:32:20.268" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:32:20.268" level="INFO">${os_con_pid} = </msg>
<status endtime="20170810 02:32:20.269" status="PASS" starttime="20170810 02:32:20.254"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 02:32:20.271" status="PASS" starttime="20170810 02:32:20.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.272" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 02:32:20.272" status="PASS" starttime="20170810 02:32:20.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:32:20.273" status="PASS" starttime="20170810 02:32:20.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:32:20.274" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 02:32:20.274" level="INFO">${output} = None</msg>
<status endtime="20170810 02:32:20.274" status="PASS" starttime="20170810 02:32:20.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:32:20.275" status="PASS" starttime="20170810 02:32:20.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.278" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status endtime="20170810 02:32:20.278" status="FAIL" starttime="20170810 02:32:20.276"></status>
</kw>
<status endtime="20170810 02:32:20.278" status="PASS" starttime="20170810 02:32:20.276"></status>
</kw>
<status endtime="20170810 02:32:20.278" status="PASS" starttime="20170810 02:32:20.275"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:32:20.279" level="INFO">${output} = </msg>
<status endtime="20170810 02:32:20.279" status="PASS" starttime="20170810 02:32:20.278"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170810 02:32:20.279" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170810 02:32:20.279" status="PASS" starttime="20170810 02:32:20.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 02:32:20.321" status="PASS" starttime="20170810 02:32:20.280"></status>
</kw>
<msg timestamp="20170810 02:32:20.322" level="INFO">${rc} = 1</msg>
<msg timestamp="20170810 02:32:20.322" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170810 02:32:20.322" status="PASS" starttime="20170810 02:32:20.280"></status>
</kw>
<msg timestamp="20170810 02:32:20.323" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170810 02:32:20.323" status="PASS" starttime="20170810 02:32:20.236"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.325" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 02:32:20.325" status="PASS" starttime="20170810 02:32:20.324"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.326" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 02:32:20.326" status="PASS" starttime="20170810 02:32:20.325"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:32:20.326" status="PASS" starttime="20170810 02:32:20.326"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:32:20.329" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:32:20.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:32:20.332" level="INFO">${output} = /tmp/fspcibld/15815/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 02:32:20.332" status="PASS" starttime="20170810 02:32:20.326"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:32:20.335" status="PASS" starttime="20170810 02:32:20.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 02:32:20.336" status="PASS" starttime="20170810 02:32:20.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.337" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 02:32:20.337" status="PASS" starttime="20170810 02:32:20.336"></status>
</kw>
<msg timestamp="20170810 02:32:20.337" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 02:32:20.337" status="PASS" starttime="20170810 02:32:20.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:32:20.338" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170810 02:32:20.338" status="PASS" starttime="20170810 02:32:20.338"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:32:20.338" status="PASS" starttime="20170810 02:32:20.338"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:32:20.345" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170810 02:32:20.347" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:32:20.347" level="INFO">${output} = </msg>
<status endtime="20170810 02:32:20.347" status="PASS" starttime="20170810 02:32:20.339"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 02:32:20.352" status="PASS" starttime="20170810 02:32:20.351"></status>
</kw>
<status endtime="20170810 02:32:20.352" status="PASS" starttime="20170810 02:32:20.234"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170810 02:32:20.353" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 02:32:20.355" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170810 02:32:20.355" status="PASS" starttime="20170810 02:32:20.355"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:20.357" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 02:32:20.357" status="PASS" starttime="20170810 02:32:20.356"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:20.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:20.361" status="PASS" starttime="20170810 02:32:20.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:20.362" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:20.362" status="PASS" starttime="20170810 02:32:20.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:20.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:20.363" status="PASS" starttime="20170810 02:32:20.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:20.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:20.363" status="PASS" starttime="20170810 02:32:20.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.886" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:20.886" status="PASS" starttime="20170810 02:32:20.364"></status>
</kw>
<msg timestamp="20170810 02:32:20.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:20.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:20.886" status="PASS" starttime="20170810 02:32:20.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:20.887" status="PASS" starttime="20170810 02:32:20.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:20.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:20.888" status="PASS" starttime="20170810 02:32:20.887"></status>
</kw>
<status endtime="20170810 02:32:20.888" status="PASS" starttime="20170810 02:32:20.359"></status>
</kw>
<status endtime="20170810 02:32:20.888" status="PASS" starttime="20170810 02:32:20.359"></status>
</kw>
<status endtime="20170810 02:32:20.888" status="PASS" starttime="20170810 02:32:20.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:20.889" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 02:32:20.889" status="PASS" starttime="20170810 02:32:20.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:20.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:20.889" status="PASS" starttime="20170810 02:32:20.889"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 02:32:20.890" status="PASS" starttime="20170810 02:32:20.890"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:20.892" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170810 02:32:20.892" status="PASS" starttime="20170810 02:32:20.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:20.893" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 02:32:20.893" status="PASS" starttime="20170810 02:32:20.892"></status>
</kw>
<status endtime="20170810 02:32:20.893" status="PASS" starttime="20170810 02:32:20.892"></status>
</kw>
<status endtime="20170810 02:32:20.893" status="PASS" starttime="20170810 02:32:20.890"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:21.580" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 02:32:21.580" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:21.580" status="PASS" starttime="20170810 02:32:20.893"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:21.581" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:21.581" status="PASS" starttime="20170810 02:32:21.581"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:21.582" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:21.582" status="PASS" starttime="20170810 02:32:21.582"></status>
</kw>
<status endtime="20170810 02:32:21.583" status="PASS" starttime="20170810 02:32:21.582"></status>
</kw>
<status endtime="20170810 02:32:21.583" status="PASS" starttime="20170810 02:32:21.580"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:21.583" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:21.583" status="PASS" starttime="20170810 02:32:21.583"></status>
</kw>
<msg timestamp="20170810 02:32:21.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:21.583" status="PASS" starttime="20170810 02:32:20.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:21.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:21.584" status="PASS" starttime="20170810 02:32:21.584"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 02:32:21.585" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:21.585" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:21.585" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170810 02:32:21.585" status="PASS" starttime="20170810 02:32:21.584"></status>
</kw>
<status endtime="20170810 02:32:21.585" status="PASS" starttime="20170810 02:32:20.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 02:32:21.586" status="PASS" starttime="20170810 02:32:21.585"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:21.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:21.591" status="PASS" starttime="20170810 02:32:21.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:21.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:21.591" status="PASS" starttime="20170810 02:32:21.591"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:21.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:21.592" status="PASS" starttime="20170810 02:32:21.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:21.593" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:21.593" status="PASS" starttime="20170810 02:32:21.592"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:22.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:22.543" status="PASS" starttime="20170810 02:32:21.594"></status>
</kw>
<msg timestamp="20170810 02:32:22.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:22.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:22.543" status="PASS" starttime="20170810 02:32:21.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:22.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:22.544" status="PASS" starttime="20170810 02:32:22.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:22.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:22.545" status="PASS" starttime="20170810 02:32:22.544"></status>
</kw>
<status endtime="20170810 02:32:22.545" status="PASS" starttime="20170810 02:32:21.590"></status>
</kw>
<status endtime="20170810 02:32:22.545" status="PASS" starttime="20170810 02:32:21.589"></status>
</kw>
<status endtime="20170810 02:32:22.545" status="PASS" starttime="20170810 02:32:21.589"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:22.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:32:22.546" status="PASS" starttime="20170810 02:32:22.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:22.548" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:22.548" status="PASS" starttime="20170810 02:32:22.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:22.549" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:22.549" status="PASS" starttime="20170810 02:32:22.548"></status>
</kw>
<status endtime="20170810 02:32:22.549" status="PASS" starttime="20170810 02:32:22.548"></status>
</kw>
<status endtime="20170810 02:32:22.549" status="PASS" starttime="20170810 02:32:22.546"></status>
</kw>
<status endtime="20170810 02:32:22.549" status="PASS" starttime="20170810 02:32:22.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:24.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:24.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:24.892" status="PASS" starttime="20170810 02:32:22.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:24.894" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:24.894" status="PASS" starttime="20170810 02:32:24.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:24.895" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:24.895" status="PASS" starttime="20170810 02:32:24.895"></status>
</kw>
<status endtime="20170810 02:32:24.895" status="PASS" starttime="20170810 02:32:24.895"></status>
</kw>
<status endtime="20170810 02:32:24.896" status="PASS" starttime="20170810 02:32:24.893"></status>
</kw>
<status endtime="20170810 02:32:24.896" status="PASS" starttime="20170810 02:32:24.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:24.896" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:24.896" status="PASS" starttime="20170810 02:32:24.896"></status>
</kw>
<msg timestamp="20170810 02:32:24.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:24.896" status="PASS" starttime="20170810 02:32:21.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:24.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:24.897" status="PASS" starttime="20170810 02:32:24.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:24.898" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:24.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:24.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:32:24.898" status="PASS" starttime="20170810 02:32:24.897"></status>
</kw>
<msg timestamp="20170810 02:32:24.898" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:32:24.898" status="PASS" starttime="20170810 02:32:21.587"></status>
</kw>
<msg timestamp="20170810 02:32:24.899" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:32:24.899" status="PASS" starttime="20170810 02:32:21.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:32:24.899" status="PASS" starttime="20170810 02:32:24.899"></status>
</kw>
<status endtime="20170810 02:32:24.899" status="PASS" starttime="20170810 02:32:21.587"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:24.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:24.904" status="PASS" starttime="20170810 02:32:24.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:24.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:24.904" status="PASS" starttime="20170810 02:32:24.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:24.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:24.905" status="PASS" starttime="20170810 02:32:24.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:24.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:24.905" status="PASS" starttime="20170810 02:32:24.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:25.389" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:25.389" status="PASS" starttime="20170810 02:32:24.906"></status>
</kw>
<msg timestamp="20170810 02:32:25.389" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:25.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:25.389" status="PASS" starttime="20170810 02:32:24.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:25.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:25.390" status="PASS" starttime="20170810 02:32:25.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:25.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:25.390" status="PASS" starttime="20170810 02:32:25.390"></status>
</kw>
<status endtime="20170810 02:32:25.391" status="PASS" starttime="20170810 02:32:24.902"></status>
</kw>
<status endtime="20170810 02:32:25.391" status="PASS" starttime="20170810 02:32:24.902"></status>
</kw>
<status endtime="20170810 02:32:25.391" status="PASS" starttime="20170810 02:32:24.901"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:25.391" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:32:25.391" status="PASS" starttime="20170810 02:32:25.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:25.393" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:25.394" status="PASS" starttime="20170810 02:32:25.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:25.394" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:25.394" status="PASS" starttime="20170810 02:32:25.394"></status>
</kw>
<status endtime="20170810 02:32:25.395" status="PASS" starttime="20170810 02:32:25.394"></status>
</kw>
<status endtime="20170810 02:32:25.395" status="PASS" starttime="20170810 02:32:25.392"></status>
</kw>
<status endtime="20170810 02:32:25.395" status="PASS" starttime="20170810 02:32:25.392"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:27.604" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:27.604" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:27.604" status="PASS" starttime="20170810 02:32:25.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:27.606" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:27.606" status="PASS" starttime="20170810 02:32:27.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:27.607" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:27.608" status="PASS" starttime="20170810 02:32:27.607"></status>
</kw>
<status endtime="20170810 02:32:27.608" status="PASS" starttime="20170810 02:32:27.606"></status>
</kw>
<status endtime="20170810 02:32:27.608" status="PASS" starttime="20170810 02:32:27.605"></status>
</kw>
<status endtime="20170810 02:32:27.608" status="PASS" starttime="20170810 02:32:27.605"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:27.608" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:27.608" status="PASS" starttime="20170810 02:32:27.608"></status>
</kw>
<msg timestamp="20170810 02:32:27.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:27.609" status="PASS" starttime="20170810 02:32:24.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:27.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:27.609" status="PASS" starttime="20170810 02:32:27.609"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:27.610" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:27.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:27.610" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 02:32:27.610" status="PASS" starttime="20170810 02:32:27.609"></status>
</kw>
<msg timestamp="20170810 02:32:27.610" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 02:32:27.610" status="PASS" starttime="20170810 02:32:24.900"></status>
</kw>
<msg timestamp="20170810 02:32:27.610" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 02:32:27.611" status="PASS" starttime="20170810 02:32:24.899"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:32:27.611" status="PASS" starttime="20170810 02:32:27.611"></status>
</kw>
<status endtime="20170810 02:32:27.611" status="PASS" starttime="20170810 02:32:21.586"></status>
</kw>
<status endtime="20170810 02:32:27.611" status="PASS" starttime="20170810 02:32:21.586"></status>
</kw>
<status endtime="20170810 02:32:27.611" status="PASS" starttime="20170810 02:32:20.354"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 02:32:27.612" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170810 02:32:27.612" status="PASS" starttime="20170810 02:32:27.612"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:27.613" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 02:32:27.614" status="PASS" starttime="20170810 02:32:27.613"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:27.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:27.616" status="PASS" starttime="20170810 02:32:27.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:27.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:27.617" status="PASS" starttime="20170810 02:32:27.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:27.618" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:27.618" status="PASS" starttime="20170810 02:32:27.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:27.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:27.618" status="PASS" starttime="20170810 02:32:27.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:28.523" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:28.523" status="PASS" starttime="20170810 02:32:27.619"></status>
</kw>
<msg timestamp="20170810 02:32:28.523" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:28.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:28.523" status="PASS" starttime="20170810 02:32:27.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:28.524" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:28.524" status="PASS" starttime="20170810 02:32:28.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:28.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:28.525" status="PASS" starttime="20170810 02:32:28.524"></status>
</kw>
<status endtime="20170810 02:32:28.525" status="PASS" starttime="20170810 02:32:27.615"></status>
</kw>
<status endtime="20170810 02:32:28.525" status="PASS" starttime="20170810 02:32:27.615"></status>
</kw>
<status endtime="20170810 02:32:28.525" status="PASS" starttime="20170810 02:32:27.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:28.526" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 02:32:28.526" status="PASS" starttime="20170810 02:32:28.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:28.526" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:28.526" status="PASS" starttime="20170810 02:32:28.526"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 02:32:28.527" status="PASS" starttime="20170810 02:32:28.526"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:28.529" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status endtime="20170810 02:32:28.529" status="PASS" starttime="20170810 02:32:28.528"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:28.530" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 02:32:28.530" status="PASS" starttime="20170810 02:32:28.529"></status>
</kw>
<status endtime="20170810 02:32:28.530" status="PASS" starttime="20170810 02:32:28.529"></status>
</kw>
<status endtime="20170810 02:32:28.530" status="PASS" starttime="20170810 02:32:28.527"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:28.976" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 02:32:28.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:28.977" status="PASS" starttime="20170810 02:32:28.530"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:28.978" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:28.978" status="PASS" starttime="20170810 02:32:28.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:28.979" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:28.979" status="PASS" starttime="20170810 02:32:28.979"></status>
</kw>
<status endtime="20170810 02:32:28.979" status="PASS" starttime="20170810 02:32:28.978"></status>
</kw>
<status endtime="20170810 02:32:28.979" status="PASS" starttime="20170810 02:32:28.977"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:28.980" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:28.980" status="PASS" starttime="20170810 02:32:28.980"></status>
</kw>
<msg timestamp="20170810 02:32:28.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:28.980" status="PASS" starttime="20170810 02:32:27.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:28.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:28.981" status="PASS" starttime="20170810 02:32:28.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 02:32:28.981" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:28.981" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:28.982" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170810 02:32:28.982" status="PASS" starttime="20170810 02:32:28.981"></status>
</kw>
<status endtime="20170810 02:32:28.982" status="PASS" starttime="20170810 02:32:27.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 02:32:28.982" status="PASS" starttime="20170810 02:32:28.982"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:28.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:28.988" status="PASS" starttime="20170810 02:32:28.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:28.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:28.989" status="PASS" starttime="20170810 02:32:28.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:28.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:28.990" status="PASS" starttime="20170810 02:32:28.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:28.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:28.991" status="PASS" starttime="20170810 02:32:28.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:29.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:29.790" status="PASS" starttime="20170810 02:32:28.992"></status>
</kw>
<msg timestamp="20170810 02:32:29.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:29.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:29.790" status="PASS" starttime="20170810 02:32:28.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:29.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:29.791" status="PASS" starttime="20170810 02:32:29.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:29.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:29.793" status="PASS" starttime="20170810 02:32:29.792"></status>
</kw>
<status endtime="20170810 02:32:29.793" status="PASS" starttime="20170810 02:32:28.986"></status>
</kw>
<status endtime="20170810 02:32:29.794" status="PASS" starttime="20170810 02:32:28.986"></status>
</kw>
<status endtime="20170810 02:32:29.794" status="PASS" starttime="20170810 02:32:28.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:29.795" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:32:29.795" status="PASS" starttime="20170810 02:32:29.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:29.800" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:29.800" status="PASS" starttime="20170810 02:32:29.798"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:29.801" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:29.801" status="PASS" starttime="20170810 02:32:29.801"></status>
</kw>
<status endtime="20170810 02:32:29.801" status="PASS" starttime="20170810 02:32:29.800"></status>
</kw>
<status endtime="20170810 02:32:29.801" status="PASS" starttime="20170810 02:32:29.797"></status>
</kw>
<status endtime="20170810 02:32:29.802" status="PASS" starttime="20170810 02:32:29.796"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:32.514" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:32.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:32.514" status="PASS" starttime="20170810 02:32:29.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:32.516" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:32.516" status="PASS" starttime="20170810 02:32:32.515"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:32.517" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:32.517" status="PASS" starttime="20170810 02:32:32.517"></status>
</kw>
<status endtime="20170810 02:32:32.517" status="PASS" starttime="20170810 02:32:32.516"></status>
</kw>
<status endtime="20170810 02:32:32.517" status="PASS" starttime="20170810 02:32:32.515"></status>
</kw>
<status endtime="20170810 02:32:32.517" status="PASS" starttime="20170810 02:32:32.514"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:32.518" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:32.518" status="PASS" starttime="20170810 02:32:32.518"></status>
</kw>
<msg timestamp="20170810 02:32:32.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:32.518" status="PASS" starttime="20170810 02:32:28.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:32.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:32.519" status="PASS" starttime="20170810 02:32:32.518"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:32.519" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:32.519" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:32.519" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:32:32.519" status="PASS" starttime="20170810 02:32:32.519"></status>
</kw>
<msg timestamp="20170810 02:32:32.520" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:32:32.520" status="PASS" starttime="20170810 02:32:28.984"></status>
</kw>
<msg timestamp="20170810 02:32:32.520" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:32:32.520" status="PASS" starttime="20170810 02:32:28.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 02:32:32.521" level="FAIL">On != Off</msg>
<status endtime="20170810 02:32:32.521" status="FAIL" starttime="20170810 02:32:32.520"></status>
</kw>
<status endtime="20170810 02:32:32.521" status="FAIL" starttime="20170810 02:32:28.983"></status>
</kw>
<status endtime="20170810 02:32:32.521" status="FAIL" starttime="20170810 02:32:28.983"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:42.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:42.527" status="PASS" starttime="20170810 02:32:42.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:42.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:42.528" status="PASS" starttime="20170810 02:32:42.528"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:42.529" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:42.529" status="PASS" starttime="20170810 02:32:42.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:42.529" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:42.529" status="PASS" starttime="20170810 02:32:42.529"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:42.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:42.713" status="PASS" starttime="20170810 02:32:42.530"></status>
</kw>
<msg timestamp="20170810 02:32:42.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:42.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:42.713" status="PASS" starttime="20170810 02:32:42.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:42.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:42.714" status="PASS" starttime="20170810 02:32:42.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:42.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:42.714" status="PASS" starttime="20170810 02:32:42.714"></status>
</kw>
<status endtime="20170810 02:32:42.714" status="PASS" starttime="20170810 02:32:42.526"></status>
</kw>
<status endtime="20170810 02:32:42.715" status="PASS" starttime="20170810 02:32:42.526"></status>
</kw>
<status endtime="20170810 02:32:42.715" status="PASS" starttime="20170810 02:32:42.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:42.716" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:32:42.716" status="PASS" starttime="20170810 02:32:42.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:42.719" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:42.719" status="PASS" starttime="20170810 02:32:42.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:42.720" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:42.720" status="PASS" starttime="20170810 02:32:42.720"></status>
</kw>
<status endtime="20170810 02:32:42.720" status="PASS" starttime="20170810 02:32:42.719"></status>
</kw>
<status endtime="20170810 02:32:42.721" status="PASS" starttime="20170810 02:32:42.717"></status>
</kw>
<status endtime="20170810 02:32:42.721" status="PASS" starttime="20170810 02:32:42.716"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:42.831" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:42.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:42.831" status="PASS" starttime="20170810 02:32:42.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:42.833" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:42.833" status="PASS" starttime="20170810 02:32:42.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:42.834" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:42.834" status="PASS" starttime="20170810 02:32:42.833"></status>
</kw>
<status endtime="20170810 02:32:42.834" status="PASS" starttime="20170810 02:32:42.833"></status>
</kw>
<status endtime="20170810 02:32:42.834" status="PASS" starttime="20170810 02:32:42.832"></status>
</kw>
<status endtime="20170810 02:32:42.834" status="PASS" starttime="20170810 02:32:42.831"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:42.834" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:42.835" status="PASS" starttime="20170810 02:32:42.834"></status>
</kw>
<msg timestamp="20170810 02:32:42.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:42.835" status="PASS" starttime="20170810 02:32:42.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:42.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:42.835" status="PASS" starttime="20170810 02:32:42.835"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:42.836" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:42.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:42.836" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:32:42.836" status="PASS" starttime="20170810 02:32:42.836"></status>
</kw>
<msg timestamp="20170810 02:32:42.836" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:32:42.836" status="PASS" starttime="20170810 02:32:42.524"></status>
</kw>
<msg timestamp="20170810 02:32:42.837" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:32:42.837" status="PASS" starttime="20170810 02:32:42.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 02:32:42.837" level="FAIL">On != Off</msg>
<status endtime="20170810 02:32:42.837" status="FAIL" starttime="20170810 02:32:42.837"></status>
</kw>
<status endtime="20170810 02:32:42.838" status="FAIL" starttime="20170810 02:32:42.522"></status>
</kw>
<status endtime="20170810 02:32:42.838" status="FAIL" starttime="20170810 02:32:42.522"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:52.843" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:52.843" status="PASS" starttime="20170810 02:32:52.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:52.844" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:52.844" status="PASS" starttime="20170810 02:32:52.844"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:52.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:52.845" status="PASS" starttime="20170810 02:32:52.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:52.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:52.846" status="PASS" starttime="20170810 02:32:52.845"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:53.022" status="PASS" starttime="20170810 02:32:52.846"></status>
</kw>
<msg timestamp="20170810 02:32:53.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:53.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.022" status="PASS" starttime="20170810 02:32:52.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.023" status="PASS" starttime="20170810 02:32:53.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.024" status="PASS" starttime="20170810 02:32:53.023"></status>
</kw>
<status endtime="20170810 02:32:53.024" status="PASS" starttime="20170810 02:32:52.842"></status>
</kw>
<status endtime="20170810 02:32:53.024" status="PASS" starttime="20170810 02:32:52.842"></status>
</kw>
<status endtime="20170810 02:32:53.024" status="PASS" starttime="20170810 02:32:52.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:53.025" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:32:53.025" status="PASS" starttime="20170810 02:32:53.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:53.027" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:53.027" status="PASS" starttime="20170810 02:32:53.026"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:53.028" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:53.028" status="PASS" starttime="20170810 02:32:53.028"></status>
</kw>
<status endtime="20170810 02:32:53.028" status="PASS" starttime="20170810 02:32:53.027"></status>
</kw>
<status endtime="20170810 02:32:53.028" status="PASS" starttime="20170810 02:32:53.026"></status>
</kw>
<status endtime="20170810 02:32:53.028" status="PASS" starttime="20170810 02:32:53.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:53.112" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:53.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.112" status="PASS" starttime="20170810 02:32:53.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:53.114" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:53.114" status="PASS" starttime="20170810 02:32:53.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:53.115" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:53.115" status="PASS" starttime="20170810 02:32:53.114"></status>
</kw>
<status endtime="20170810 02:32:53.115" status="PASS" starttime="20170810 02:32:53.114"></status>
</kw>
<status endtime="20170810 02:32:53.115" status="PASS" starttime="20170810 02:32:53.113"></status>
</kw>
<status endtime="20170810 02:32:53.115" status="PASS" starttime="20170810 02:32:53.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:53.115" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:53.116" status="PASS" starttime="20170810 02:32:53.115"></status>
</kw>
<msg timestamp="20170810 02:32:53.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.116" status="PASS" starttime="20170810 02:32:52.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.116" status="PASS" starttime="20170810 02:32:53.116"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:53.117" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:53.117" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:53.117" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:32:53.117" status="PASS" starttime="20170810 02:32:53.117"></status>
</kw>
<msg timestamp="20170810 02:32:53.117" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:32:53.117" status="PASS" starttime="20170810 02:32:52.840"></status>
</kw>
<msg timestamp="20170810 02:32:53.118" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:32:53.118" status="PASS" starttime="20170810 02:32:52.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:32:53.118" status="PASS" starttime="20170810 02:32:53.118"></status>
</kw>
<status endtime="20170810 02:32:53.118" status="PASS" starttime="20170810 02:32:52.839"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:53.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:53.125" status="PASS" starttime="20170810 02:32:53.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:53.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:53.125" status="PASS" starttime="20170810 02:32:53.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:53.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:53.126" status="PASS" starttime="20170810 02:32:53.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:53.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:53.127" status="PASS" starttime="20170810 02:32:53.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:53.433" status="PASS" starttime="20170810 02:32:53.128"></status>
</kw>
<msg timestamp="20170810 02:32:53.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:53.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.434" status="PASS" starttime="20170810 02:32:53.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.435" status="PASS" starttime="20170810 02:32:53.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.436" status="PASS" starttime="20170810 02:32:53.435"></status>
</kw>
<status endtime="20170810 02:32:53.436" status="PASS" starttime="20170810 02:32:53.124"></status>
</kw>
<status endtime="20170810 02:32:53.436" status="PASS" starttime="20170810 02:32:53.121"></status>
</kw>
<status endtime="20170810 02:32:53.436" status="PASS" starttime="20170810 02:32:53.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:53.437" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:32:53.437" status="PASS" starttime="20170810 02:32:53.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:53.440" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:53.440" status="PASS" starttime="20170810 02:32:53.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:53.441" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:32:53.441" status="PASS" starttime="20170810 02:32:53.441"></status>
</kw>
<status endtime="20170810 02:32:53.442" status="PASS" starttime="20170810 02:32:53.440"></status>
</kw>
<status endtime="20170810 02:32:53.442" status="PASS" starttime="20170810 02:32:53.438"></status>
</kw>
<status endtime="20170810 02:32:53.442" status="PASS" starttime="20170810 02:32:53.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:53.555" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:32:53.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.555" status="PASS" starttime="20170810 02:32:53.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:53.557" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:53.557" status="PASS" starttime="20170810 02:32:53.556"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:53.558" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:53.558" status="PASS" starttime="20170810 02:32:53.558"></status>
</kw>
<status endtime="20170810 02:32:53.558" status="PASS" starttime="20170810 02:32:53.557"></status>
</kw>
<status endtime="20170810 02:32:53.558" status="PASS" starttime="20170810 02:32:53.556"></status>
</kw>
<status endtime="20170810 02:32:53.558" status="PASS" starttime="20170810 02:32:53.555"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:53.559" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:53.559" status="PASS" starttime="20170810 02:32:53.559"></status>
</kw>
<msg timestamp="20170810 02:32:53.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.559" status="PASS" starttime="20170810 02:32:53.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.560" status="PASS" starttime="20170810 02:32:53.559"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:53.560" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:53.560" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:53.561" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:32:53.561" status="PASS" starttime="20170810 02:32:53.560"></status>
</kw>
<msg timestamp="20170810 02:32:53.561" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:32:53.561" status="PASS" starttime="20170810 02:32:53.119"></status>
</kw>
<msg timestamp="20170810 02:32:53.561" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:32:53.561" status="PASS" starttime="20170810 02:32:53.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:32:53.562" status="PASS" starttime="20170810 02:32:53.561"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:32:53.566" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:32:53.566" status="PASS" starttime="20170810 02:32:53.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:32:53.567" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:32:53.567" status="PASS" starttime="20170810 02:32:53.566"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:32:53.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:32:53.567" status="PASS" starttime="20170810 02:32:53.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:32:53.568" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:32:53.568" status="PASS" starttime="20170810 02:32:53.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:32:53.751" status="PASS" starttime="20170810 02:32:53.568"></status>
</kw>
<msg timestamp="20170810 02:32:53.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:32:53.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.751" status="PASS" starttime="20170810 02:32:53.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.752" status="PASS" starttime="20170810 02:32:53.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.753" status="PASS" starttime="20170810 02:32:53.752"></status>
</kw>
<status endtime="20170810 02:32:53.753" status="PASS" starttime="20170810 02:32:53.565"></status>
</kw>
<status endtime="20170810 02:32:53.753" status="PASS" starttime="20170810 02:32:53.564"></status>
</kw>
<status endtime="20170810 02:32:53.753" status="PASS" starttime="20170810 02:32:53.564"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:32:53.754" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:32:53.754" status="PASS" starttime="20170810 02:32:53.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:53.756" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:32:53.756" status="PASS" starttime="20170810 02:32:53.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:53.757" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:32:53.757" status="PASS" starttime="20170810 02:32:53.756"></status>
</kw>
<status endtime="20170810 02:32:53.757" status="PASS" starttime="20170810 02:32:53.756"></status>
</kw>
<status endtime="20170810 02:32:53.757" status="PASS" starttime="20170810 02:32:53.754"></status>
</kw>
<status endtime="20170810 02:32:53.757" status="PASS" starttime="20170810 02:32:53.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:32:53.839" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:32:53.839" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.840" status="PASS" starttime="20170810 02:32:53.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:32:53.841" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:53.841" status="PASS" starttime="20170810 02:32:53.841"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:32:53.842" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:32:53.842" status="PASS" starttime="20170810 02:32:53.842"></status>
</kw>
<status endtime="20170810 02:32:53.842" status="PASS" starttime="20170810 02:32:53.841"></status>
</kw>
<status endtime="20170810 02:32:53.843" status="PASS" starttime="20170810 02:32:53.840"></status>
</kw>
<status endtime="20170810 02:32:53.843" status="PASS" starttime="20170810 02:32:53.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:32:53.843" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:32:53.843" status="PASS" starttime="20170810 02:32:53.843"></status>
</kw>
<msg timestamp="20170810 02:32:53.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:32:53.843" status="PASS" starttime="20170810 02:32:53.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:32:53.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:32:53.844" status="PASS" starttime="20170810 02:32:53.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:32:53.845" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:32:53.845" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:32:53.845" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:32:53.845" status="PASS" starttime="20170810 02:32:53.844"></status>
</kw>
<msg timestamp="20170810 02:32:53.845" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:32:53.845" status="PASS" starttime="20170810 02:32:53.563"></status>
</kw>
<msg timestamp="20170810 02:32:53.845" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:32:53.845" status="PASS" starttime="20170810 02:32:53.562"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:32:53.846" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:32:53.846" status="FAIL" starttime="20170810 02:32:53.845"></status>
</kw>
<status endtime="20170810 02:32:53.846" status="FAIL" starttime="20170810 02:32:53.562"></status>
</kw>
<status endtime="20170810 02:32:53.846" status="FAIL" starttime="20170810 02:32:52.838"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:03.852" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:03.852" status="PASS" starttime="20170810 02:33:03.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:03.853" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:03.853" status="PASS" starttime="20170810 02:33:03.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:03.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:03.853" status="PASS" starttime="20170810 02:33:03.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:03.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:03.854" status="PASS" starttime="20170810 02:33:03.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:04.049" status="PASS" starttime="20170810 02:33:03.855"></status>
</kw>
<msg timestamp="20170810 02:33:04.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:04.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.049" status="PASS" starttime="20170810 02:33:03.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.049" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.050" status="PASS" starttime="20170810 02:33:04.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.050" status="PASS" starttime="20170810 02:33:04.050"></status>
</kw>
<status endtime="20170810 02:33:04.050" status="PASS" starttime="20170810 02:33:03.850"></status>
</kw>
<status endtime="20170810 02:33:04.050" status="PASS" starttime="20170810 02:33:03.850"></status>
</kw>
<status endtime="20170810 02:33:04.051" status="PASS" starttime="20170810 02:33:03.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:04.051" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:33:04.051" status="PASS" starttime="20170810 02:33:04.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:04.053" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:04.053" status="PASS" starttime="20170810 02:33:04.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:04.054" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:04.054" status="PASS" starttime="20170810 02:33:04.054"></status>
</kw>
<status endtime="20170810 02:33:04.054" status="PASS" starttime="20170810 02:33:04.053"></status>
</kw>
<status endtime="20170810 02:33:04.055" status="PASS" starttime="20170810 02:33:04.052"></status>
</kw>
<status endtime="20170810 02:33:04.055" status="PASS" starttime="20170810 02:33:04.051"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:04.119" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:04.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.119" status="PASS" starttime="20170810 02:33:04.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:04.121" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:04.121" status="PASS" starttime="20170810 02:33:04.120"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:04.122" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:04.122" status="PASS" starttime="20170810 02:33:04.121"></status>
</kw>
<status endtime="20170810 02:33:04.122" status="PASS" starttime="20170810 02:33:04.121"></status>
</kw>
<status endtime="20170810 02:33:04.122" status="PASS" starttime="20170810 02:33:04.120"></status>
</kw>
<status endtime="20170810 02:33:04.122" status="PASS" starttime="20170810 02:33:04.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:04.123" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:04.123" status="PASS" starttime="20170810 02:33:04.123"></status>
</kw>
<msg timestamp="20170810 02:33:04.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.123" status="PASS" starttime="20170810 02:33:03.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.124" status="PASS" starttime="20170810 02:33:04.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:04.124" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:04.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:04.125" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:33:04.125" status="PASS" starttime="20170810 02:33:04.124"></status>
</kw>
<msg timestamp="20170810 02:33:04.125" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:33:04.125" status="PASS" starttime="20170810 02:33:03.848"></status>
</kw>
<msg timestamp="20170810 02:33:04.125" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:33:04.125" status="PASS" starttime="20170810 02:33:03.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:33:04.126" status="PASS" starttime="20170810 02:33:04.126"></status>
</kw>
<status endtime="20170810 02:33:04.126" status="PASS" starttime="20170810 02:33:03.847"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:04.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:04.132" status="PASS" starttime="20170810 02:33:04.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:04.133" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:04.133" status="PASS" starttime="20170810 02:33:04.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:04.134" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:04.134" status="PASS" starttime="20170810 02:33:04.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:04.135" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:04.135" status="PASS" starttime="20170810 02:33:04.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:04.329" status="PASS" starttime="20170810 02:33:04.136"></status>
</kw>
<msg timestamp="20170810 02:33:04.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:04.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.329" status="PASS" starttime="20170810 02:33:04.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.330" status="PASS" starttime="20170810 02:33:04.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.330" status="PASS" starttime="20170810 02:33:04.330"></status>
</kw>
<status endtime="20170810 02:33:04.331" status="PASS" starttime="20170810 02:33:04.130"></status>
</kw>
<status endtime="20170810 02:33:04.331" status="PASS" starttime="20170810 02:33:04.129"></status>
</kw>
<status endtime="20170810 02:33:04.331" status="PASS" starttime="20170810 02:33:04.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:04.331" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:33:04.331" status="PASS" starttime="20170810 02:33:04.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:04.334" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:04.334" status="PASS" starttime="20170810 02:33:04.333"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:04.335" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:04.335" status="PASS" starttime="20170810 02:33:04.334"></status>
</kw>
<status endtime="20170810 02:33:04.335" status="PASS" starttime="20170810 02:33:04.334"></status>
</kw>
<status endtime="20170810 02:33:04.335" status="PASS" starttime="20170810 02:33:04.332"></status>
</kw>
<status endtime="20170810 02:33:04.335" status="PASS" starttime="20170810 02:33:04.332"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:04.451" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:04.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.451" status="PASS" starttime="20170810 02:33:04.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:04.453" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:04.453" status="PASS" starttime="20170810 02:33:04.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:04.454" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:04.454" status="PASS" starttime="20170810 02:33:04.454"></status>
</kw>
<status endtime="20170810 02:33:04.454" status="PASS" starttime="20170810 02:33:04.453"></status>
</kw>
<status endtime="20170810 02:33:04.454" status="PASS" starttime="20170810 02:33:04.452"></status>
</kw>
<status endtime="20170810 02:33:04.454" status="PASS" starttime="20170810 02:33:04.452"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:04.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:04.455" status="PASS" starttime="20170810 02:33:04.455"></status>
</kw>
<msg timestamp="20170810 02:33:04.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.455" status="PASS" starttime="20170810 02:33:04.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.456" status="PASS" starttime="20170810 02:33:04.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:04.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:04.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:04.457" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:33:04.457" status="PASS" starttime="20170810 02:33:04.456"></status>
</kw>
<msg timestamp="20170810 02:33:04.457" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:33:04.457" status="PASS" starttime="20170810 02:33:04.127"></status>
</kw>
<msg timestamp="20170810 02:33:04.458" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:33:04.458" status="PASS" starttime="20170810 02:33:04.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:33:04.458" status="PASS" starttime="20170810 02:33:04.458"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:04.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:04.462" status="PASS" starttime="20170810 02:33:04.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:04.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:04.463" status="PASS" starttime="20170810 02:33:04.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:04.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:04.463" status="PASS" starttime="20170810 02:33:04.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:04.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:04.464" status="PASS" starttime="20170810 02:33:04.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.762" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:04.763" status="PASS" starttime="20170810 02:33:04.465"></status>
</kw>
<msg timestamp="20170810 02:33:04.763" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:04.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.763" status="PASS" starttime="20170810 02:33:04.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.763" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.763" status="PASS" starttime="20170810 02:33:04.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.764" status="PASS" starttime="20170810 02:33:04.764"></status>
</kw>
<status endtime="20170810 02:33:04.764" status="PASS" starttime="20170810 02:33:04.461"></status>
</kw>
<status endtime="20170810 02:33:04.764" status="PASS" starttime="20170810 02:33:04.461"></status>
</kw>
<status endtime="20170810 02:33:04.765" status="PASS" starttime="20170810 02:33:04.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:04.765" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:33:04.765" status="PASS" starttime="20170810 02:33:04.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:04.767" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:04.767" status="PASS" starttime="20170810 02:33:04.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:04.768" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:04.768" status="PASS" starttime="20170810 02:33:04.768"></status>
</kw>
<status endtime="20170810 02:33:04.768" status="PASS" starttime="20170810 02:33:04.767"></status>
</kw>
<status endtime="20170810 02:33:04.768" status="PASS" starttime="20170810 02:33:04.766"></status>
</kw>
<status endtime="20170810 02:33:04.769" status="PASS" starttime="20170810 02:33:04.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:04.841" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:33:04.841" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.841" status="PASS" starttime="20170810 02:33:04.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:04.843" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:04.843" status="PASS" starttime="20170810 02:33:04.842"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:04.843" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:04.844" status="PASS" starttime="20170810 02:33:04.843"></status>
</kw>
<status endtime="20170810 02:33:04.844" status="PASS" starttime="20170810 02:33:04.843"></status>
</kw>
<status endtime="20170810 02:33:04.844" status="PASS" starttime="20170810 02:33:04.842"></status>
</kw>
<status endtime="20170810 02:33:04.844" status="PASS" starttime="20170810 02:33:04.841"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:04.844" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:04.844" status="PASS" starttime="20170810 02:33:04.844"></status>
</kw>
<msg timestamp="20170810 02:33:04.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:04.845" status="PASS" starttime="20170810 02:33:04.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:04.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:04.845" status="PASS" starttime="20170810 02:33:04.845"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:04.846" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:04.846" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:04.846" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:33:04.846" status="PASS" starttime="20170810 02:33:04.846"></status>
</kw>
<msg timestamp="20170810 02:33:04.846" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:33:04.846" status="PASS" starttime="20170810 02:33:04.459"></status>
</kw>
<msg timestamp="20170810 02:33:04.847" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:33:04.847" status="PASS" starttime="20170810 02:33:04.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:33:04.847" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:33:04.847" status="FAIL" starttime="20170810 02:33:04.847"></status>
</kw>
<status endtime="20170810 02:33:04.847" status="FAIL" starttime="20170810 02:33:04.458"></status>
</kw>
<status endtime="20170810 02:33:04.848" status="FAIL" starttime="20170810 02:33:03.847"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:14.854" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:14.854" status="PASS" starttime="20170810 02:33:14.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:14.855" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:14.855" status="PASS" starttime="20170810 02:33:14.855"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:14.856" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:14.856" status="PASS" starttime="20170810 02:33:14.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:14.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:14.857" status="PASS" starttime="20170810 02:33:14.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:15.305" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:15.305" status="PASS" starttime="20170810 02:33:14.858"></status>
</kw>
<msg timestamp="20170810 02:33:15.305" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:15.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:15.305" status="PASS" starttime="20170810 02:33:14.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:15.306" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:15.306" status="PASS" starttime="20170810 02:33:15.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:15.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:15.307" status="PASS" starttime="20170810 02:33:15.306"></status>
</kw>
<status endtime="20170810 02:33:15.307" status="PASS" starttime="20170810 02:33:14.853"></status>
</kw>
<status endtime="20170810 02:33:15.307" status="PASS" starttime="20170810 02:33:14.852"></status>
</kw>
<status endtime="20170810 02:33:15.307" status="PASS" starttime="20170810 02:33:14.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:15.308" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:33:15.308" status="PASS" starttime="20170810 02:33:15.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:15.310" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:15.310" status="PASS" starttime="20170810 02:33:15.309"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:15.311" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:15.311" status="PASS" starttime="20170810 02:33:15.310"></status>
</kw>
<status endtime="20170810 02:33:15.311" status="PASS" starttime="20170810 02:33:15.310"></status>
</kw>
<status endtime="20170810 02:33:15.311" status="PASS" starttime="20170810 02:33:15.308"></status>
</kw>
<status endtime="20170810 02:33:15.311" status="PASS" starttime="20170810 02:33:15.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:16.090" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:16.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:16.090" status="PASS" starttime="20170810 02:33:15.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:16.092" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:16.092" status="PASS" starttime="20170810 02:33:16.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:16.093" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:16.093" status="PASS" starttime="20170810 02:33:16.093"></status>
</kw>
<status endtime="20170810 02:33:16.093" status="PASS" starttime="20170810 02:33:16.092"></status>
</kw>
<status endtime="20170810 02:33:16.093" status="PASS" starttime="20170810 02:33:16.091"></status>
</kw>
<status endtime="20170810 02:33:16.094" status="PASS" starttime="20170810 02:33:16.090"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:16.094" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:16.094" status="PASS" starttime="20170810 02:33:16.094"></status>
</kw>
<msg timestamp="20170810 02:33:16.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:16.094" status="PASS" starttime="20170810 02:33:14.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:16.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:16.095" status="PASS" starttime="20170810 02:33:16.095"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:16.096" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:16.096" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:16.096" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:33:16.096" status="PASS" starttime="20170810 02:33:16.095"></status>
</kw>
<msg timestamp="20170810 02:33:16.096" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:33:16.096" status="PASS" starttime="20170810 02:33:14.849"></status>
</kw>
<msg timestamp="20170810 02:33:16.096" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:33:16.096" status="PASS" starttime="20170810 02:33:14.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:33:16.097" status="PASS" starttime="20170810 02:33:16.097"></status>
</kw>
<status endtime="20170810 02:33:16.097" status="PASS" starttime="20170810 02:33:14.848"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:16.100" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:16.101" status="PASS" starttime="20170810 02:33:16.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:16.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:16.101" status="PASS" starttime="20170810 02:33:16.101"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:16.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:16.102" status="PASS" starttime="20170810 02:33:16.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:16.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:16.103" status="PASS" starttime="20170810 02:33:16.102"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:16.379" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:16.379" status="PASS" starttime="20170810 02:33:16.103"></status>
</kw>
<msg timestamp="20170810 02:33:16.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:16.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:16.379" status="PASS" starttime="20170810 02:33:16.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:16.379" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:16.380" status="PASS" starttime="20170810 02:33:16.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:16.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:16.380" status="PASS" starttime="20170810 02:33:16.380"></status>
</kw>
<status endtime="20170810 02:33:16.380" status="PASS" starttime="20170810 02:33:16.100"></status>
</kw>
<status endtime="20170810 02:33:16.380" status="PASS" starttime="20170810 02:33:16.099"></status>
</kw>
<status endtime="20170810 02:33:16.381" status="PASS" starttime="20170810 02:33:16.099"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:16.381" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:33:16.381" status="PASS" starttime="20170810 02:33:16.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:16.384" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:16.384" status="PASS" starttime="20170810 02:33:16.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:16.385" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:16.385" status="PASS" starttime="20170810 02:33:16.384"></status>
</kw>
<status endtime="20170810 02:33:16.385" status="PASS" starttime="20170810 02:33:16.384"></status>
</kw>
<status endtime="20170810 02:33:16.385" status="PASS" starttime="20170810 02:33:16.382"></status>
</kw>
<status endtime="20170810 02:33:16.385" status="PASS" starttime="20170810 02:33:16.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:17.085" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:17.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:17.086" status="PASS" starttime="20170810 02:33:16.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:17.087" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:17.087" status="PASS" starttime="20170810 02:33:17.087"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:17.088" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:17.088" status="PASS" starttime="20170810 02:33:17.088"></status>
</kw>
<status endtime="20170810 02:33:17.088" status="PASS" starttime="20170810 02:33:17.087"></status>
</kw>
<status endtime="20170810 02:33:17.089" status="PASS" starttime="20170810 02:33:17.086"></status>
</kw>
<status endtime="20170810 02:33:17.089" status="PASS" starttime="20170810 02:33:17.086"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:17.089" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:17.089" status="PASS" starttime="20170810 02:33:17.089"></status>
</kw>
<msg timestamp="20170810 02:33:17.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:17.089" status="PASS" starttime="20170810 02:33:16.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:17.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:17.090" status="PASS" starttime="20170810 02:33:17.090"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:17.090" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:17.090" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:17.091" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:33:17.091" status="PASS" starttime="20170810 02:33:17.090"></status>
</kw>
<msg timestamp="20170810 02:33:17.091" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:33:17.091" status="PASS" starttime="20170810 02:33:16.097"></status>
</kw>
<msg timestamp="20170810 02:33:17.091" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:33:17.091" status="PASS" starttime="20170810 02:33:16.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:33:17.092" status="PASS" starttime="20170810 02:33:17.091"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:17.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:17.096" status="PASS" starttime="20170810 02:33:17.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:17.097" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:17.097" status="PASS" starttime="20170810 02:33:17.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:17.097" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:17.098" status="PASS" starttime="20170810 02:33:17.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:17.098" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:17.098" status="PASS" starttime="20170810 02:33:17.098"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:17.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:17.460" status="PASS" starttime="20170810 02:33:17.099"></status>
</kw>
<msg timestamp="20170810 02:33:17.460" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:17.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:17.461" status="PASS" starttime="20170810 02:33:17.098"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:17.461" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:17.462" status="PASS" starttime="20170810 02:33:17.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:17.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:17.463" status="PASS" starttime="20170810 02:33:17.462"></status>
</kw>
<status endtime="20170810 02:33:17.463" status="PASS" starttime="20170810 02:33:17.095"></status>
</kw>
<status endtime="20170810 02:33:17.463" status="PASS" starttime="20170810 02:33:17.094"></status>
</kw>
<status endtime="20170810 02:33:17.463" status="PASS" starttime="20170810 02:33:17.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:17.464" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:33:17.464" status="PASS" starttime="20170810 02:33:17.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:17.467" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:17.467" status="PASS" starttime="20170810 02:33:17.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:17.468" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:17.468" status="PASS" starttime="20170810 02:33:17.468"></status>
</kw>
<status endtime="20170810 02:33:17.469" status="PASS" starttime="20170810 02:33:17.467"></status>
</kw>
<status endtime="20170810 02:33:17.469" status="PASS" starttime="20170810 02:33:17.465"></status>
</kw>
<status endtime="20170810 02:33:17.469" status="PASS" starttime="20170810 02:33:17.464"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:17.898" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:33:17.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:17.898" status="PASS" starttime="20170810 02:33:17.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:17.900" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:17.900" status="PASS" starttime="20170810 02:33:17.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:17.900" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:17.901" status="PASS" starttime="20170810 02:33:17.900"></status>
</kw>
<status endtime="20170810 02:33:17.901" status="PASS" starttime="20170810 02:33:17.900"></status>
</kw>
<status endtime="20170810 02:33:17.901" status="PASS" starttime="20170810 02:33:17.899"></status>
</kw>
<status endtime="20170810 02:33:17.901" status="PASS" starttime="20170810 02:33:17.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:17.901" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:17.901" status="PASS" starttime="20170810 02:33:17.901"></status>
</kw>
<msg timestamp="20170810 02:33:17.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:17.902" status="PASS" starttime="20170810 02:33:17.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:17.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:17.902" status="PASS" starttime="20170810 02:33:17.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:17.903" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:17.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:17.903" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:33:17.903" status="PASS" starttime="20170810 02:33:17.903"></status>
</kw>
<msg timestamp="20170810 02:33:17.903" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:33:17.903" status="PASS" starttime="20170810 02:33:17.093"></status>
</kw>
<msg timestamp="20170810 02:33:17.904" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:33:17.904" status="PASS" starttime="20170810 02:33:17.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:33:17.904" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:33:17.904" status="FAIL" starttime="20170810 02:33:17.904"></status>
</kw>
<status endtime="20170810 02:33:17.904" status="FAIL" starttime="20170810 02:33:17.092"></status>
</kw>
<status endtime="20170810 02:33:17.905" status="FAIL" starttime="20170810 02:33:14.848"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:27.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:27.911" status="PASS" starttime="20170810 02:33:27.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:27.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:27.911" status="PASS" starttime="20170810 02:33:27.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:27.912" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:27.912" status="PASS" starttime="20170810 02:33:27.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:27.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:27.912" status="PASS" starttime="20170810 02:33:27.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:28.143" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:28.143" status="PASS" starttime="20170810 02:33:27.913"></status>
</kw>
<msg timestamp="20170810 02:33:28.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:28.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:28.144" status="PASS" starttime="20170810 02:33:27.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:28.144" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:28.144" status="PASS" starttime="20170810 02:33:28.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:28.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:28.145" status="PASS" starttime="20170810 02:33:28.145"></status>
</kw>
<status endtime="20170810 02:33:28.145" status="PASS" starttime="20170810 02:33:27.909"></status>
</kw>
<status endtime="20170810 02:33:28.145" status="PASS" starttime="20170810 02:33:27.909"></status>
</kw>
<status endtime="20170810 02:33:28.145" status="PASS" starttime="20170810 02:33:27.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:28.146" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:33:28.146" status="PASS" starttime="20170810 02:33:28.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:28.148" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:28.148" status="PASS" starttime="20170810 02:33:28.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:28.149" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:28.149" status="PASS" starttime="20170810 02:33:28.149"></status>
</kw>
<status endtime="20170810 02:33:28.149" status="PASS" starttime="20170810 02:33:28.148"></status>
</kw>
<status endtime="20170810 02:33:28.150" status="PASS" starttime="20170810 02:33:28.147"></status>
</kw>
<status endtime="20170810 02:33:28.150" status="PASS" starttime="20170810 02:33:28.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:28.800" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:28.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:28.800" status="PASS" starttime="20170810 02:33:28.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:28.805" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:28.805" status="PASS" starttime="20170810 02:33:28.802"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:28.806" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:28.806" status="PASS" starttime="20170810 02:33:28.806"></status>
</kw>
<status endtime="20170810 02:33:28.806" status="PASS" starttime="20170810 02:33:28.805"></status>
</kw>
<status endtime="20170810 02:33:28.806" status="PASS" starttime="20170810 02:33:28.801"></status>
</kw>
<status endtime="20170810 02:33:28.806" status="PASS" starttime="20170810 02:33:28.801"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:28.807" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:28.807" status="PASS" starttime="20170810 02:33:28.807"></status>
</kw>
<msg timestamp="20170810 02:33:28.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:28.807" status="PASS" starttime="20170810 02:33:27.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:28.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:28.808" status="PASS" starttime="20170810 02:33:28.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:28.808" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:28.808" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:28.808" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:33:28.808" status="PASS" starttime="20170810 02:33:28.808"></status>
</kw>
<msg timestamp="20170810 02:33:28.809" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:33:28.809" status="PASS" starttime="20170810 02:33:27.907"></status>
</kw>
<msg timestamp="20170810 02:33:28.809" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:33:28.809" status="PASS" starttime="20170810 02:33:27.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:33:28.810" status="PASS" starttime="20170810 02:33:28.809"></status>
</kw>
<status endtime="20170810 02:33:28.810" status="PASS" starttime="20170810 02:33:27.906"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:28.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:28.814" status="PASS" starttime="20170810 02:33:28.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:28.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:28.815" status="PASS" starttime="20170810 02:33:28.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:28.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:28.815" status="PASS" starttime="20170810 02:33:28.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:28.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:28.816" status="PASS" starttime="20170810 02:33:28.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:29.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:29.474" status="PASS" starttime="20170810 02:33:28.817"></status>
</kw>
<msg timestamp="20170810 02:33:29.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:29.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:29.474" status="PASS" starttime="20170810 02:33:28.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:29.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:29.475" status="PASS" starttime="20170810 02:33:29.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:29.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:29.475" status="PASS" starttime="20170810 02:33:29.475"></status>
</kw>
<status endtime="20170810 02:33:29.476" status="PASS" starttime="20170810 02:33:28.813"></status>
</kw>
<status endtime="20170810 02:33:29.476" status="PASS" starttime="20170810 02:33:28.812"></status>
</kw>
<status endtime="20170810 02:33:29.476" status="PASS" starttime="20170810 02:33:28.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:29.476" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:33:29.476" status="PASS" starttime="20170810 02:33:29.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:29.503" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:29.503" status="PASS" starttime="20170810 02:33:29.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:29.504" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:29.505" status="PASS" starttime="20170810 02:33:29.504"></status>
</kw>
<status endtime="20170810 02:33:29.505" status="PASS" starttime="20170810 02:33:29.503"></status>
</kw>
<status endtime="20170810 02:33:29.505" status="PASS" starttime="20170810 02:33:29.477"></status>
</kw>
<status endtime="20170810 02:33:29.505" status="PASS" starttime="20170810 02:33:29.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:29.848" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:29.848" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:29.849" status="PASS" starttime="20170810 02:33:29.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:29.850" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:29.850" status="PASS" starttime="20170810 02:33:29.850"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:29.851" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:29.851" status="PASS" starttime="20170810 02:33:29.851"></status>
</kw>
<status endtime="20170810 02:33:29.851" status="PASS" starttime="20170810 02:33:29.850"></status>
</kw>
<status endtime="20170810 02:33:29.851" status="PASS" starttime="20170810 02:33:29.849"></status>
</kw>
<status endtime="20170810 02:33:29.852" status="PASS" starttime="20170810 02:33:29.849"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:29.852" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:29.852" status="PASS" starttime="20170810 02:33:29.852"></status>
</kw>
<msg timestamp="20170810 02:33:29.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:29.852" status="PASS" starttime="20170810 02:33:28.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:29.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:29.853" status="PASS" starttime="20170810 02:33:29.852"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:29.853" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:29.853" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:29.854" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:33:29.854" status="PASS" starttime="20170810 02:33:29.853"></status>
</kw>
<msg timestamp="20170810 02:33:29.854" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:33:29.854" status="PASS" starttime="20170810 02:33:28.810"></status>
</kw>
<msg timestamp="20170810 02:33:29.854" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:33:29.854" status="PASS" starttime="20170810 02:33:28.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:33:29.855" status="PASS" starttime="20170810 02:33:29.854"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:29.859" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:29.859" status="PASS" starttime="20170810 02:33:29.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:29.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:29.860" status="PASS" starttime="20170810 02:33:29.859"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:29.860" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:29.860" status="PASS" starttime="20170810 02:33:29.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:29.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:29.861" status="PASS" starttime="20170810 02:33:29.861"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:30.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:30.364" status="PASS" starttime="20170810 02:33:29.862"></status>
</kw>
<msg timestamp="20170810 02:33:30.364" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:30.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:30.364" status="PASS" starttime="20170810 02:33:29.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:30.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:30.365" status="PASS" starttime="20170810 02:33:30.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:30.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:30.366" status="PASS" starttime="20170810 02:33:30.365"></status>
</kw>
<status endtime="20170810 02:33:30.366" status="PASS" starttime="20170810 02:33:29.858"></status>
</kw>
<status endtime="20170810 02:33:30.366" status="PASS" starttime="20170810 02:33:29.857"></status>
</kw>
<status endtime="20170810 02:33:30.366" status="PASS" starttime="20170810 02:33:29.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:30.366" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:33:30.367" status="PASS" starttime="20170810 02:33:30.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:30.369" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:30.369" status="PASS" starttime="20170810 02:33:30.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:30.369" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:30.370" status="PASS" starttime="20170810 02:33:30.369"></status>
</kw>
<status endtime="20170810 02:33:30.370" status="PASS" starttime="20170810 02:33:30.369"></status>
</kw>
<status endtime="20170810 02:33:30.370" status="PASS" starttime="20170810 02:33:30.367"></status>
</kw>
<status endtime="20170810 02:33:30.370" status="PASS" starttime="20170810 02:33:30.367"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:30.952" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:33:30.953" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:30.953" status="PASS" starttime="20170810 02:33:30.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:30.954" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:30.954" status="PASS" starttime="20170810 02:33:30.954"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:30.955" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:30.955" status="PASS" starttime="20170810 02:33:30.955"></status>
</kw>
<status endtime="20170810 02:33:30.956" status="PASS" starttime="20170810 02:33:30.954"></status>
</kw>
<status endtime="20170810 02:33:30.956" status="PASS" starttime="20170810 02:33:30.953"></status>
</kw>
<status endtime="20170810 02:33:30.956" status="PASS" starttime="20170810 02:33:30.953"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:30.956" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:30.956" status="PASS" starttime="20170810 02:33:30.956"></status>
</kw>
<msg timestamp="20170810 02:33:30.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:30.956" status="PASS" starttime="20170810 02:33:29.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:30.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:30.957" status="PASS" starttime="20170810 02:33:30.957"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:30.958" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:30.958" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:30.958" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:33:30.958" status="PASS" starttime="20170810 02:33:30.957"></status>
</kw>
<msg timestamp="20170810 02:33:30.958" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:33:30.958" status="PASS" starttime="20170810 02:33:29.856"></status>
</kw>
<msg timestamp="20170810 02:33:30.958" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:33:30.958" status="PASS" starttime="20170810 02:33:29.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:33:30.959" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:33:30.959" status="FAIL" starttime="20170810 02:33:30.959"></status>
</kw>
<status endtime="20170810 02:33:30.959" status="FAIL" starttime="20170810 02:33:29.855"></status>
</kw>
<status endtime="20170810 02:33:30.959" status="FAIL" starttime="20170810 02:33:27.905"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:40.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:40.965" status="PASS" starttime="20170810 02:33:40.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:40.966" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:40.966" status="PASS" starttime="20170810 02:33:40.966"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:40.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:40.967" status="PASS" starttime="20170810 02:33:40.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:40.967" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:40.967" status="PASS" starttime="20170810 02:33:40.967"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:41.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:41.422" status="PASS" starttime="20170810 02:33:40.968"></status>
</kw>
<msg timestamp="20170810 02:33:41.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:41.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:41.422" status="PASS" starttime="20170810 02:33:40.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:41.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:41.423" status="PASS" starttime="20170810 02:33:41.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:41.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:41.424" status="PASS" starttime="20170810 02:33:41.423"></status>
</kw>
<status endtime="20170810 02:33:41.424" status="PASS" starttime="20170810 02:33:40.964"></status>
</kw>
<status endtime="20170810 02:33:41.424" status="PASS" starttime="20170810 02:33:40.964"></status>
</kw>
<status endtime="20170810 02:33:41.424" status="PASS" starttime="20170810 02:33:40.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:41.425" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:33:41.425" status="PASS" starttime="20170810 02:33:41.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:41.427" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:41.427" status="PASS" starttime="20170810 02:33:41.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:41.428" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:41.428" status="PASS" starttime="20170810 02:33:41.428"></status>
</kw>
<status endtime="20170810 02:33:41.428" status="PASS" starttime="20170810 02:33:41.427"></status>
</kw>
<status endtime="20170810 02:33:41.428" status="PASS" starttime="20170810 02:33:41.425"></status>
</kw>
<status endtime="20170810 02:33:41.428" status="PASS" starttime="20170810 02:33:41.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:41.961" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:41.962" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:41.962" status="PASS" starttime="20170810 02:33:41.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:41.964" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:41.964" status="PASS" starttime="20170810 02:33:41.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:41.964" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:41.965" status="PASS" starttime="20170810 02:33:41.964"></status>
</kw>
<status endtime="20170810 02:33:41.965" status="PASS" starttime="20170810 02:33:41.964"></status>
</kw>
<status endtime="20170810 02:33:41.965" status="PASS" starttime="20170810 02:33:41.963"></status>
</kw>
<status endtime="20170810 02:33:41.965" status="PASS" starttime="20170810 02:33:41.962"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:41.965" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:41.965" status="PASS" starttime="20170810 02:33:41.965"></status>
</kw>
<msg timestamp="20170810 02:33:41.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:41.966" status="PASS" starttime="20170810 02:33:40.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:41.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:41.966" status="PASS" starttime="20170810 02:33:41.966"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:41.967" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:41.967" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:41.967" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:33:41.967" status="PASS" starttime="20170810 02:33:41.967"></status>
</kw>
<msg timestamp="20170810 02:33:41.967" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:33:41.967" status="PASS" starttime="20170810 02:33:40.962"></status>
</kw>
<msg timestamp="20170810 02:33:41.968" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:33:41.968" status="PASS" starttime="20170810 02:33:40.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:33:41.968" status="PASS" starttime="20170810 02:33:41.968"></status>
</kw>
<status endtime="20170810 02:33:41.968" status="PASS" starttime="20170810 02:33:40.961"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:41.972" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:41.972" status="PASS" starttime="20170810 02:33:41.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:41.973" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:41.973" status="PASS" starttime="20170810 02:33:41.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:41.973" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:41.973" status="PASS" starttime="20170810 02:33:41.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:41.974" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:41.974" status="PASS" starttime="20170810 02:33:41.974"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:42.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:42.342" status="PASS" starttime="20170810 02:33:41.975"></status>
</kw>
<msg timestamp="20170810 02:33:42.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:42.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:42.342" status="PASS" starttime="20170810 02:33:41.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:42.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:42.343" status="PASS" starttime="20170810 02:33:42.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:42.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:42.343" status="PASS" starttime="20170810 02:33:42.343"></status>
</kw>
<status endtime="20170810 02:33:42.343" status="PASS" starttime="20170810 02:33:41.971"></status>
</kw>
<status endtime="20170810 02:33:42.343" status="PASS" starttime="20170810 02:33:41.971"></status>
</kw>
<status endtime="20170810 02:33:42.344" status="PASS" starttime="20170810 02:33:41.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:42.344" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:33:42.344" status="PASS" starttime="20170810 02:33:42.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:42.346" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:42.346" status="PASS" starttime="20170810 02:33:42.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:42.347" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:42.347" status="PASS" starttime="20170810 02:33:42.347"></status>
</kw>
<status endtime="20170810 02:33:42.347" status="PASS" starttime="20170810 02:33:42.346"></status>
</kw>
<status endtime="20170810 02:33:42.347" status="PASS" starttime="20170810 02:33:42.345"></status>
</kw>
<status endtime="20170810 02:33:42.348" status="PASS" starttime="20170810 02:33:42.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:43.228" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:43.228" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:43.228" status="PASS" starttime="20170810 02:33:42.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:43.230" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:43.230" status="PASS" starttime="20170810 02:33:43.229"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:43.231" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:43.231" status="PASS" starttime="20170810 02:33:43.231"></status>
</kw>
<status endtime="20170810 02:33:43.231" status="PASS" starttime="20170810 02:33:43.230"></status>
</kw>
<status endtime="20170810 02:33:43.231" status="PASS" starttime="20170810 02:33:43.229"></status>
</kw>
<status endtime="20170810 02:33:43.231" status="PASS" starttime="20170810 02:33:43.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:43.232" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:43.232" status="PASS" starttime="20170810 02:33:43.231"></status>
</kw>
<msg timestamp="20170810 02:33:43.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:43.232" status="PASS" starttime="20170810 02:33:41.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:43.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:43.233" status="PASS" starttime="20170810 02:33:43.232"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:43.233" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:43.233" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:43.233" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:33:43.233" status="PASS" starttime="20170810 02:33:43.233"></status>
</kw>
<msg timestamp="20170810 02:33:43.234" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:33:43.234" status="PASS" starttime="20170810 02:33:41.969"></status>
</kw>
<msg timestamp="20170810 02:33:43.234" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:33:43.234" status="PASS" starttime="20170810 02:33:41.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:33:43.235" status="PASS" starttime="20170810 02:33:43.234"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:43.239" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:43.239" status="PASS" starttime="20170810 02:33:43.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:43.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:43.240" status="PASS" starttime="20170810 02:33:43.239"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:43.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:43.240" status="PASS" starttime="20170810 02:33:43.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:43.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:43.241" status="PASS" starttime="20170810 02:33:43.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:43.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:43.722" status="PASS" starttime="20170810 02:33:43.242"></status>
</kw>
<msg timestamp="20170810 02:33:43.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:43.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:43.722" status="PASS" starttime="20170810 02:33:43.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:43.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:43.723" status="PASS" starttime="20170810 02:33:43.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:43.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:43.723" status="PASS" starttime="20170810 02:33:43.723"></status>
</kw>
<status endtime="20170810 02:33:43.724" status="PASS" starttime="20170810 02:33:43.238"></status>
</kw>
<status endtime="20170810 02:33:43.724" status="PASS" starttime="20170810 02:33:43.237"></status>
</kw>
<status endtime="20170810 02:33:43.724" status="PASS" starttime="20170810 02:33:43.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:43.725" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:33:43.725" status="PASS" starttime="20170810 02:33:43.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:43.728" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:43.728" status="PASS" starttime="20170810 02:33:43.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:43.729" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:43.729" status="PASS" starttime="20170810 02:33:43.729"></status>
</kw>
<status endtime="20170810 02:33:43.729" status="PASS" starttime="20170810 02:33:43.728"></status>
</kw>
<status endtime="20170810 02:33:43.730" status="PASS" starttime="20170810 02:33:43.726"></status>
</kw>
<status endtime="20170810 02:33:43.730" status="PASS" starttime="20170810 02:33:43.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:44.091" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:33:44.091" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:44.092" status="PASS" starttime="20170810 02:33:43.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:44.093" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:44.093" status="PASS" starttime="20170810 02:33:44.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:44.095" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:44.095" status="PASS" starttime="20170810 02:33:44.094"></status>
</kw>
<status endtime="20170810 02:33:44.095" status="PASS" starttime="20170810 02:33:44.093"></status>
</kw>
<status endtime="20170810 02:33:44.095" status="PASS" starttime="20170810 02:33:44.092"></status>
</kw>
<status endtime="20170810 02:33:44.095" status="PASS" starttime="20170810 02:33:44.092"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:44.095" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:44.096" status="PASS" starttime="20170810 02:33:44.095"></status>
</kw>
<msg timestamp="20170810 02:33:44.096" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:44.096" status="PASS" starttime="20170810 02:33:43.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:44.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:44.096" status="PASS" starttime="20170810 02:33:44.096"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:44.097" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:44.097" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:44.097" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:33:44.097" status="PASS" starttime="20170810 02:33:44.097"></status>
</kw>
<msg timestamp="20170810 02:33:44.097" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:33:44.097" status="PASS" starttime="20170810 02:33:43.235"></status>
</kw>
<msg timestamp="20170810 02:33:44.098" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:33:44.098" status="PASS" starttime="20170810 02:33:43.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:33:44.098" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:33:44.098" status="FAIL" starttime="20170810 02:33:44.098"></status>
</kw>
<status endtime="20170810 02:33:44.099" status="FAIL" starttime="20170810 02:33:43.235"></status>
</kw>
<status endtime="20170810 02:33:44.099" status="FAIL" starttime="20170810 02:33:40.960"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:54.104" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:54.104" status="PASS" starttime="20170810 02:33:54.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:54.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:54.105" status="PASS" starttime="20170810 02:33:54.104"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:54.105" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:54.105" status="PASS" starttime="20170810 02:33:54.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:54.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:54.106" status="PASS" starttime="20170810 02:33:54.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:54.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:54.442" status="PASS" starttime="20170810 02:33:54.107"></status>
</kw>
<msg timestamp="20170810 02:33:54.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:54.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:54.442" status="PASS" starttime="20170810 02:33:54.106"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:54.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:54.443" status="PASS" starttime="20170810 02:33:54.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:54.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:54.443" status="PASS" starttime="20170810 02:33:54.443"></status>
</kw>
<status endtime="20170810 02:33:54.444" status="PASS" starttime="20170810 02:33:54.103"></status>
</kw>
<status endtime="20170810 02:33:54.444" status="PASS" starttime="20170810 02:33:54.102"></status>
</kw>
<status endtime="20170810 02:33:54.444" status="PASS" starttime="20170810 02:33:54.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:54.445" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:33:54.445" status="PASS" starttime="20170810 02:33:54.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:54.448" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:54.448" status="PASS" starttime="20170810 02:33:54.447"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:54.449" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:54.449" status="PASS" starttime="20170810 02:33:54.449"></status>
</kw>
<status endtime="20170810 02:33:54.450" status="PASS" starttime="20170810 02:33:54.448"></status>
</kw>
<status endtime="20170810 02:33:54.450" status="PASS" starttime="20170810 02:33:54.446"></status>
</kw>
<status endtime="20170810 02:33:54.450" status="PASS" starttime="20170810 02:33:54.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:54.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:54.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:54.788" status="PASS" starttime="20170810 02:33:54.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:54.790" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:54.790" status="PASS" starttime="20170810 02:33:54.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:54.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:54.791" status="PASS" starttime="20170810 02:33:54.791"></status>
</kw>
<status endtime="20170810 02:33:54.791" status="PASS" starttime="20170810 02:33:54.790"></status>
</kw>
<status endtime="20170810 02:33:54.791" status="PASS" starttime="20170810 02:33:54.789"></status>
</kw>
<status endtime="20170810 02:33:54.791" status="PASS" starttime="20170810 02:33:54.789"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:54.792" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:54.792" status="PASS" starttime="20170810 02:33:54.792"></status>
</kw>
<msg timestamp="20170810 02:33:54.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:54.792" status="PASS" starttime="20170810 02:33:54.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:54.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:54.793" status="PASS" starttime="20170810 02:33:54.792"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:54.794" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:54.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:54.794" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:33:54.794" status="PASS" starttime="20170810 02:33:54.793"></status>
</kw>
<msg timestamp="20170810 02:33:54.794" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:33:54.794" status="PASS" starttime="20170810 02:33:54.101"></status>
</kw>
<msg timestamp="20170810 02:33:54.794" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:33:54.794" status="PASS" starttime="20170810 02:33:54.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:33:54.795" status="PASS" starttime="20170810 02:33:54.795"></status>
</kw>
<status endtime="20170810 02:33:54.795" status="PASS" starttime="20170810 02:33:54.100"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:54.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:54.800" status="PASS" starttime="20170810 02:33:54.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:54.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:54.800" status="PASS" starttime="20170810 02:33:54.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:54.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:54.801" status="PASS" starttime="20170810 02:33:54.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:54.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:54.801" status="PASS" starttime="20170810 02:33:54.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:55.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:55.329" status="PASS" starttime="20170810 02:33:54.802"></status>
</kw>
<msg timestamp="20170810 02:33:55.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:55.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:55.329" status="PASS" starttime="20170810 02:33:54.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:55.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:55.330" status="PASS" starttime="20170810 02:33:55.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:55.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:55.331" status="PASS" starttime="20170810 02:33:55.330"></status>
</kw>
<status endtime="20170810 02:33:55.331" status="PASS" starttime="20170810 02:33:54.798"></status>
</kw>
<status endtime="20170810 02:33:55.331" status="PASS" starttime="20170810 02:33:54.798"></status>
</kw>
<status endtime="20170810 02:33:55.331" status="PASS" starttime="20170810 02:33:54.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:55.332" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:33:55.332" status="PASS" starttime="20170810 02:33:55.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:55.334" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:55.334" status="PASS" starttime="20170810 02:33:55.333"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:55.335" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:33:55.335" status="PASS" starttime="20170810 02:33:55.335"></status>
</kw>
<status endtime="20170810 02:33:55.336" status="PASS" starttime="20170810 02:33:55.334"></status>
</kw>
<status endtime="20170810 02:33:55.336" status="PASS" starttime="20170810 02:33:55.333"></status>
</kw>
<status endtime="20170810 02:33:55.336" status="PASS" starttime="20170810 02:33:55.332"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:55.981" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:33:55.981" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:55.981" status="PASS" starttime="20170810 02:33:55.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:55.983" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:55.983" status="PASS" starttime="20170810 02:33:55.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:55.983" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:55.984" status="PASS" starttime="20170810 02:33:55.983"></status>
</kw>
<status endtime="20170810 02:33:55.984" status="PASS" starttime="20170810 02:33:55.983"></status>
</kw>
<status endtime="20170810 02:33:55.984" status="PASS" starttime="20170810 02:33:55.982"></status>
</kw>
<status endtime="20170810 02:33:55.984" status="PASS" starttime="20170810 02:33:55.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:55.984" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:55.984" status="PASS" starttime="20170810 02:33:55.984"></status>
</kw>
<msg timestamp="20170810 02:33:55.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:55.985" status="PASS" starttime="20170810 02:33:54.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:55.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:55.985" status="PASS" starttime="20170810 02:33:55.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:55.986" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:55.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:55.986" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:33:55.986" status="PASS" starttime="20170810 02:33:55.986"></status>
</kw>
<msg timestamp="20170810 02:33:55.986" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:33:55.986" status="PASS" starttime="20170810 02:33:54.796"></status>
</kw>
<msg timestamp="20170810 02:33:55.987" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:33:55.987" status="PASS" starttime="20170810 02:33:54.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:33:55.987" status="PASS" starttime="20170810 02:33:55.987"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:33:55.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:33:55.992" status="PASS" starttime="20170810 02:33:55.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:33:55.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:33:55.992" status="PASS" starttime="20170810 02:33:55.992"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:33:55.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:33:55.993" status="PASS" starttime="20170810 02:33:55.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:33:55.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:33:55.994" status="PASS" starttime="20170810 02:33:55.993"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:33:56.431" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:33:56.432" status="PASS" starttime="20170810 02:33:55.994"></status>
</kw>
<msg timestamp="20170810 02:33:56.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:33:56.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:56.432" status="PASS" starttime="20170810 02:33:55.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:33:56.432" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:56.433" status="PASS" starttime="20170810 02:33:56.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:56.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:56.433" status="PASS" starttime="20170810 02:33:56.433"></status>
</kw>
<status endtime="20170810 02:33:56.433" status="PASS" starttime="20170810 02:33:55.990"></status>
</kw>
<status endtime="20170810 02:33:56.433" status="PASS" starttime="20170810 02:33:55.990"></status>
</kw>
<status endtime="20170810 02:33:56.434" status="PASS" starttime="20170810 02:33:55.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:33:56.434" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:33:56.434" status="PASS" starttime="20170810 02:33:56.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:56.437" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:56.437" status="PASS" starttime="20170810 02:33:56.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:56.437" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:33:56.438" status="PASS" starttime="20170810 02:33:56.437"></status>
</kw>
<status endtime="20170810 02:33:56.438" status="PASS" starttime="20170810 02:33:56.437"></status>
</kw>
<status endtime="20170810 02:33:56.438" status="PASS" starttime="20170810 02:33:56.435"></status>
</kw>
<status endtime="20170810 02:33:56.438" status="PASS" starttime="20170810 02:33:56.434"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:33:56.839" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:33:56.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:56.840" status="PASS" starttime="20170810 02:33:56.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:33:56.841" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:56.841" status="PASS" starttime="20170810 02:33:56.841"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:33:56.842" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:33:56.842" status="PASS" starttime="20170810 02:33:56.842"></status>
</kw>
<status endtime="20170810 02:33:56.842" status="PASS" starttime="20170810 02:33:56.842"></status>
</kw>
<status endtime="20170810 02:33:56.843" status="PASS" starttime="20170810 02:33:56.840"></status>
</kw>
<status endtime="20170810 02:33:56.843" status="PASS" starttime="20170810 02:33:56.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:33:56.843" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:33:56.843" status="PASS" starttime="20170810 02:33:56.843"></status>
</kw>
<msg timestamp="20170810 02:33:56.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:33:56.843" status="PASS" starttime="20170810 02:33:55.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:33:56.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:33:56.844" status="PASS" starttime="20170810 02:33:56.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:33:56.845" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:33:56.845" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:33:56.845" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:33:56.845" status="PASS" starttime="20170810 02:33:56.844"></status>
</kw>
<msg timestamp="20170810 02:33:56.845" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:33:56.845" status="PASS" starttime="20170810 02:33:55.988"></status>
</kw>
<msg timestamp="20170810 02:33:56.845" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:33:56.845" status="PASS" starttime="20170810 02:33:55.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:33:56.846" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:33:56.846" status="FAIL" starttime="20170810 02:33:56.846"></status>
</kw>
<status endtime="20170810 02:33:56.846" status="FAIL" starttime="20170810 02:33:55.987"></status>
</kw>
<status endtime="20170810 02:33:56.846" status="FAIL" starttime="20170810 02:33:54.099"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:06.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:06.852" status="PASS" starttime="20170810 02:34:06.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:06.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:06.852" status="PASS" starttime="20170810 02:34:06.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:06.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:06.853" status="PASS" starttime="20170810 02:34:06.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:06.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:06.854" status="PASS" starttime="20170810 02:34:06.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:07.441" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:07.441" status="PASS" starttime="20170810 02:34:06.855"></status>
</kw>
<msg timestamp="20170810 02:34:07.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:07.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:07.442" status="PASS" starttime="20170810 02:34:06.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:07.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:07.442" status="PASS" starttime="20170810 02:34:07.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:07.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:07.443" status="PASS" starttime="20170810 02:34:07.443"></status>
</kw>
<status endtime="20170810 02:34:07.443" status="PASS" starttime="20170810 02:34:06.850"></status>
</kw>
<status endtime="20170810 02:34:07.443" status="PASS" starttime="20170810 02:34:06.850"></status>
</kw>
<status endtime="20170810 02:34:07.443" status="PASS" starttime="20170810 02:34:06.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:07.444" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:34:07.444" status="PASS" starttime="20170810 02:34:07.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:07.446" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:07.446" status="PASS" starttime="20170810 02:34:07.445"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:07.447" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:07.447" status="PASS" starttime="20170810 02:34:07.447"></status>
</kw>
<status endtime="20170810 02:34:07.447" status="PASS" starttime="20170810 02:34:07.446"></status>
</kw>
<status endtime="20170810 02:34:07.447" status="PASS" starttime="20170810 02:34:07.445"></status>
</kw>
<status endtime="20170810 02:34:07.447" status="PASS" starttime="20170810 02:34:07.444"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:07.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:07.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:07.787" status="PASS" starttime="20170810 02:34:07.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:07.789" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:07.789" status="PASS" starttime="20170810 02:34:07.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:07.790" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:07.790" status="PASS" starttime="20170810 02:34:07.790"></status>
</kw>
<status endtime="20170810 02:34:07.790" status="PASS" starttime="20170810 02:34:07.789"></status>
</kw>
<status endtime="20170810 02:34:07.790" status="PASS" starttime="20170810 02:34:07.788"></status>
</kw>
<status endtime="20170810 02:34:07.790" status="PASS" starttime="20170810 02:34:07.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:07.791" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:07.791" status="PASS" starttime="20170810 02:34:07.790"></status>
</kw>
<msg timestamp="20170810 02:34:07.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:07.791" status="PASS" starttime="20170810 02:34:06.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:07.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:07.792" status="PASS" starttime="20170810 02:34:07.791"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:07.792" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:07.792" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:07.792" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:34:07.792" status="PASS" starttime="20170810 02:34:07.792"></status>
</kw>
<msg timestamp="20170810 02:34:07.793" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:34:07.793" status="PASS" starttime="20170810 02:34:06.848"></status>
</kw>
<msg timestamp="20170810 02:34:07.793" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:34:07.793" status="PASS" starttime="20170810 02:34:06.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:34:07.793" status="PASS" starttime="20170810 02:34:07.793"></status>
</kw>
<status endtime="20170810 02:34:07.794" status="PASS" starttime="20170810 02:34:06.847"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:07.800" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:07.800" status="PASS" starttime="20170810 02:34:07.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:07.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:07.801" status="PASS" starttime="20170810 02:34:07.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:07.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:07.802" status="PASS" starttime="20170810 02:34:07.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:07.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:07.802" status="PASS" starttime="20170810 02:34:07.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:08.407" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:08.407" status="PASS" starttime="20170810 02:34:07.803"></status>
</kw>
<msg timestamp="20170810 02:34:08.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:08.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:08.407" status="PASS" starttime="20170810 02:34:07.803"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:08.408" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:08.408" status="PASS" starttime="20170810 02:34:08.408"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:08.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:08.409" status="PASS" starttime="20170810 02:34:08.408"></status>
</kw>
<status endtime="20170810 02:34:08.409" status="PASS" starttime="20170810 02:34:07.799"></status>
</kw>
<status endtime="20170810 02:34:08.409" status="PASS" starttime="20170810 02:34:07.796"></status>
</kw>
<status endtime="20170810 02:34:08.409" status="PASS" starttime="20170810 02:34:07.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:08.410" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:34:08.410" status="PASS" starttime="20170810 02:34:08.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:08.412" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:08.412" status="PASS" starttime="20170810 02:34:08.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:08.413" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:08.413" status="PASS" starttime="20170810 02:34:08.412"></status>
</kw>
<status endtime="20170810 02:34:08.413" status="PASS" starttime="20170810 02:34:08.412"></status>
</kw>
<status endtime="20170810 02:34:08.413" status="PASS" starttime="20170810 02:34:08.410"></status>
</kw>
<status endtime="20170810 02:34:08.413" status="PASS" starttime="20170810 02:34:08.410"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:08.528" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:08.528" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:08.528" status="PASS" starttime="20170810 02:34:08.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:08.530" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:08.530" status="PASS" starttime="20170810 02:34:08.529"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:08.531" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:08.531" status="PASS" starttime="20170810 02:34:08.531"></status>
</kw>
<status endtime="20170810 02:34:08.531" status="PASS" starttime="20170810 02:34:08.530"></status>
</kw>
<status endtime="20170810 02:34:08.532" status="PASS" starttime="20170810 02:34:08.529"></status>
</kw>
<status endtime="20170810 02:34:08.532" status="PASS" starttime="20170810 02:34:08.529"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:08.532" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:08.532" status="PASS" starttime="20170810 02:34:08.532"></status>
</kw>
<msg timestamp="20170810 02:34:08.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:08.532" status="PASS" starttime="20170810 02:34:07.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:08.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:08.533" status="PASS" starttime="20170810 02:34:08.533"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:08.534" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:08.534" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:08.534" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:34:08.534" status="PASS" starttime="20170810 02:34:08.533"></status>
</kw>
<msg timestamp="20170810 02:34:08.534" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:34:08.534" status="PASS" starttime="20170810 02:34:07.794"></status>
</kw>
<msg timestamp="20170810 02:34:08.534" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:34:08.534" status="PASS" starttime="20170810 02:34:07.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:34:08.535" status="PASS" starttime="20170810 02:34:08.535"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:08.539" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:08.539" status="PASS" starttime="20170810 02:34:08.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:08.540" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:08.540" status="PASS" starttime="20170810 02:34:08.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:08.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:08.540" status="PASS" starttime="20170810 02:34:08.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:08.541" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:08.541" status="PASS" starttime="20170810 02:34:08.541"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:09.028" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:09.028" status="PASS" starttime="20170810 02:34:08.542"></status>
</kw>
<msg timestamp="20170810 02:34:09.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:09.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:09.028" status="PASS" starttime="20170810 02:34:08.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:09.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:09.029" status="PASS" starttime="20170810 02:34:09.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:09.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:09.030" status="PASS" starttime="20170810 02:34:09.029"></status>
</kw>
<status endtime="20170810 02:34:09.030" status="PASS" starttime="20170810 02:34:08.538"></status>
</kw>
<status endtime="20170810 02:34:09.030" status="PASS" starttime="20170810 02:34:08.537"></status>
</kw>
<status endtime="20170810 02:34:09.030" status="PASS" starttime="20170810 02:34:08.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:09.031" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:34:09.031" status="PASS" starttime="20170810 02:34:09.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:09.033" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:09.033" status="PASS" starttime="20170810 02:34:09.032"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:09.034" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:09.034" status="PASS" starttime="20170810 02:34:09.034"></status>
</kw>
<status endtime="20170810 02:34:09.034" status="PASS" starttime="20170810 02:34:09.033"></status>
</kw>
<status endtime="20170810 02:34:09.034" status="PASS" starttime="20170810 02:34:09.032"></status>
</kw>
<status endtime="20170810 02:34:09.034" status="PASS" starttime="20170810 02:34:09.031"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:09.298" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:34:09.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:09.298" status="PASS" starttime="20170810 02:34:09.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:09.300" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:09.300" status="PASS" starttime="20170810 02:34:09.299"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:09.301" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:09.301" status="PASS" starttime="20170810 02:34:09.300"></status>
</kw>
<status endtime="20170810 02:34:09.301" status="PASS" starttime="20170810 02:34:09.300"></status>
</kw>
<status endtime="20170810 02:34:09.301" status="PASS" starttime="20170810 02:34:09.299"></status>
</kw>
<status endtime="20170810 02:34:09.301" status="PASS" starttime="20170810 02:34:09.298"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:09.301" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:09.301" status="PASS" starttime="20170810 02:34:09.301"></status>
</kw>
<msg timestamp="20170810 02:34:09.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:09.302" status="PASS" starttime="20170810 02:34:08.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:09.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:09.302" status="PASS" starttime="20170810 02:34:09.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:09.303" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:09.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:09.303" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:34:09.303" status="PASS" starttime="20170810 02:34:09.303"></status>
</kw>
<msg timestamp="20170810 02:34:09.303" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:34:09.303" status="PASS" starttime="20170810 02:34:08.536"></status>
</kw>
<msg timestamp="20170810 02:34:09.304" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:34:09.304" status="PASS" starttime="20170810 02:34:08.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:34:09.304" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:34:09.304" status="FAIL" starttime="20170810 02:34:09.304"></status>
</kw>
<status endtime="20170810 02:34:09.304" status="FAIL" starttime="20170810 02:34:08.535"></status>
</kw>
<status endtime="20170810 02:34:09.305" status="FAIL" starttime="20170810 02:34:06.847"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:19.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:19.310" status="PASS" starttime="20170810 02:34:19.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:19.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:19.311" status="PASS" starttime="20170810 02:34:19.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:19.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:19.312" status="PASS" starttime="20170810 02:34:19.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:19.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:19.312" status="PASS" starttime="20170810 02:34:19.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.523" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:19.523" status="PASS" starttime="20170810 02:34:19.313"></status>
</kw>
<msg timestamp="20170810 02:34:19.524" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:19.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:19.524" status="PASS" starttime="20170810 02:34:19.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.524" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:19.524" status="PASS" starttime="20170810 02:34:19.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:19.525" status="PASS" starttime="20170810 02:34:19.525"></status>
</kw>
<status endtime="20170810 02:34:19.525" status="PASS" starttime="20170810 02:34:19.309"></status>
</kw>
<status endtime="20170810 02:34:19.525" status="PASS" starttime="20170810 02:34:19.308"></status>
</kw>
<status endtime="20170810 02:34:19.526" status="PASS" starttime="20170810 02:34:19.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:19.526" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:34:19.526" status="PASS" starttime="20170810 02:34:19.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:19.528" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:19.528" status="PASS" starttime="20170810 02:34:19.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:19.529" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:19.529" status="PASS" starttime="20170810 02:34:19.529"></status>
</kw>
<status endtime="20170810 02:34:19.529" status="PASS" starttime="20170810 02:34:19.528"></status>
</kw>
<status endtime="20170810 02:34:19.529" status="PASS" starttime="20170810 02:34:19.527"></status>
</kw>
<status endtime="20170810 02:34:19.529" status="PASS" starttime="20170810 02:34:19.526"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:19.622" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:19.622" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:19.622" status="PASS" starttime="20170810 02:34:19.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:19.624" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:19.624" status="PASS" starttime="20170810 02:34:19.623"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:19.625" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:19.626" status="PASS" starttime="20170810 02:34:19.625"></status>
</kw>
<status endtime="20170810 02:34:19.626" status="PASS" starttime="20170810 02:34:19.624"></status>
</kw>
<status endtime="20170810 02:34:19.626" status="PASS" starttime="20170810 02:34:19.623"></status>
</kw>
<status endtime="20170810 02:34:19.626" status="PASS" starttime="20170810 02:34:19.623"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:19.626" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:19.626" status="PASS" starttime="20170810 02:34:19.626"></status>
</kw>
<msg timestamp="20170810 02:34:19.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:19.627" status="PASS" starttime="20170810 02:34:19.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:19.627" status="PASS" starttime="20170810 02:34:19.627"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:19.628" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:19.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:19.628" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:34:19.628" status="PASS" starttime="20170810 02:34:19.627"></status>
</kw>
<msg timestamp="20170810 02:34:19.628" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:34:19.628" status="PASS" starttime="20170810 02:34:19.306"></status>
</kw>
<msg timestamp="20170810 02:34:19.628" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:34:19.629" status="PASS" starttime="20170810 02:34:19.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:34:19.629" status="PASS" starttime="20170810 02:34:19.629"></status>
</kw>
<status endtime="20170810 02:34:19.629" status="PASS" starttime="20170810 02:34:19.306"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:19.633" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:19.633" status="PASS" starttime="20170810 02:34:19.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:19.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:19.634" status="PASS" starttime="20170810 02:34:19.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:19.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:19.634" status="PASS" starttime="20170810 02:34:19.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:19.635" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:19.635" status="PASS" starttime="20170810 02:34:19.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.889" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:19.889" status="PASS" starttime="20170810 02:34:19.635"></status>
</kw>
<msg timestamp="20170810 02:34:19.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:19.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:19.889" status="PASS" starttime="20170810 02:34:19.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.890" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:19.890" status="PASS" starttime="20170810 02:34:19.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:19.891" status="PASS" starttime="20170810 02:34:19.890"></status>
</kw>
<status endtime="20170810 02:34:19.891" status="PASS" starttime="20170810 02:34:19.632"></status>
</kw>
<status endtime="20170810 02:34:19.891" status="PASS" starttime="20170810 02:34:19.631"></status>
</kw>
<status endtime="20170810 02:34:19.891" status="PASS" starttime="20170810 02:34:19.631"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:19.892" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:34:19.892" status="PASS" starttime="20170810 02:34:19.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:19.894" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:19.894" status="PASS" starttime="20170810 02:34:19.893"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:19.895" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:19.895" status="PASS" starttime="20170810 02:34:19.895"></status>
</kw>
<status endtime="20170810 02:34:19.895" status="PASS" starttime="20170810 02:34:19.894"></status>
</kw>
<status endtime="20170810 02:34:19.895" status="PASS" starttime="20170810 02:34:19.892"></status>
</kw>
<status endtime="20170810 02:34:19.895" status="PASS" starttime="20170810 02:34:19.892"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:19.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:19.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:19.986" status="PASS" starttime="20170810 02:34:19.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:19.988" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:19.988" status="PASS" starttime="20170810 02:34:19.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:19.989" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:19.989" status="PASS" starttime="20170810 02:34:19.988"></status>
</kw>
<status endtime="20170810 02:34:19.989" status="PASS" starttime="20170810 02:34:19.988"></status>
</kw>
<status endtime="20170810 02:34:19.989" status="PASS" starttime="20170810 02:34:19.987"></status>
</kw>
<status endtime="20170810 02:34:19.989" status="PASS" starttime="20170810 02:34:19.986"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:19.989" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:19.989" status="PASS" starttime="20170810 02:34:19.989"></status>
</kw>
<msg timestamp="20170810 02:34:19.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:19.990" status="PASS" starttime="20170810 02:34:19.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:19.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:19.990" status="PASS" starttime="20170810 02:34:19.990"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:19.991" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:19.991" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:19.991" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:34:19.991" status="PASS" starttime="20170810 02:34:19.991"></status>
</kw>
<msg timestamp="20170810 02:34:19.991" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:34:19.991" status="PASS" starttime="20170810 02:34:19.630"></status>
</kw>
<msg timestamp="20170810 02:34:19.992" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:34:19.992" status="PASS" starttime="20170810 02:34:19.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:34:19.992" status="PASS" starttime="20170810 02:34:19.992"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:19.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:19.997" status="PASS" starttime="20170810 02:34:19.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:19.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:19.997" status="PASS" starttime="20170810 02:34:19.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:19.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:19.998" status="PASS" starttime="20170810 02:34:19.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:19.998" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:19.999" status="PASS" starttime="20170810 02:34:19.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:20.174" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:20.174" status="PASS" starttime="20170810 02:34:19.999"></status>
</kw>
<msg timestamp="20170810 02:34:20.174" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:20.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:20.174" status="PASS" starttime="20170810 02:34:19.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:20.175" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:20.175" status="PASS" starttime="20170810 02:34:20.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:20.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:20.176" status="PASS" starttime="20170810 02:34:20.175"></status>
</kw>
<status endtime="20170810 02:34:20.176" status="PASS" starttime="20170810 02:34:19.995"></status>
</kw>
<status endtime="20170810 02:34:20.176" status="PASS" starttime="20170810 02:34:19.995"></status>
</kw>
<status endtime="20170810 02:34:20.176" status="PASS" starttime="20170810 02:34:19.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:20.177" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:34:20.177" status="PASS" starttime="20170810 02:34:20.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:20.179" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:20.179" status="PASS" starttime="20170810 02:34:20.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:20.180" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:20.180" status="PASS" starttime="20170810 02:34:20.179"></status>
</kw>
<status endtime="20170810 02:34:20.180" status="PASS" starttime="20170810 02:34:20.179"></status>
</kw>
<status endtime="20170810 02:34:20.180" status="PASS" starttime="20170810 02:34:20.177"></status>
</kw>
<status endtime="20170810 02:34:20.180" status="PASS" starttime="20170810 02:34:20.177"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:20.245" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:34:20.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:20.246" status="PASS" starttime="20170810 02:34:20.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:20.247" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:20.248" status="PASS" starttime="20170810 02:34:20.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:20.248" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:20.248" status="PASS" starttime="20170810 02:34:20.248"></status>
</kw>
<status endtime="20170810 02:34:20.249" status="PASS" starttime="20170810 02:34:20.248"></status>
</kw>
<status endtime="20170810 02:34:20.249" status="PASS" starttime="20170810 02:34:20.246"></status>
</kw>
<status endtime="20170810 02:34:20.249" status="PASS" starttime="20170810 02:34:20.246"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:20.249" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:20.249" status="PASS" starttime="20170810 02:34:20.249"></status>
</kw>
<msg timestamp="20170810 02:34:20.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:20.249" status="PASS" starttime="20170810 02:34:19.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:20.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:20.250" status="PASS" starttime="20170810 02:34:20.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:20.251" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:20.251" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:20.251" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:34:20.251" status="PASS" starttime="20170810 02:34:20.250"></status>
</kw>
<msg timestamp="20170810 02:34:20.251" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:34:20.251" status="PASS" starttime="20170810 02:34:19.993"></status>
</kw>
<msg timestamp="20170810 02:34:20.251" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:34:20.251" status="PASS" starttime="20170810 02:34:19.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:34:20.252" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:34:20.252" status="FAIL" starttime="20170810 02:34:20.252"></status>
</kw>
<status endtime="20170810 02:34:20.252" status="FAIL" starttime="20170810 02:34:19.992"></status>
</kw>
<status endtime="20170810 02:34:20.252" status="FAIL" starttime="20170810 02:34:19.305"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:30.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:30.258" status="PASS" starttime="20170810 02:34:30.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:30.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:30.259" status="PASS" starttime="20170810 02:34:30.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:30.259" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:30.259" status="PASS" starttime="20170810 02:34:30.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:30.260" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:30.260" status="PASS" starttime="20170810 02:34:30.260"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:30.436" status="PASS" starttime="20170810 02:34:30.261"></status>
</kw>
<msg timestamp="20170810 02:34:30.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:30.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:30.437" status="PASS" starttime="20170810 02:34:30.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:30.438" status="PASS" starttime="20170810 02:34:30.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:30.438" status="PASS" starttime="20170810 02:34:30.438"></status>
</kw>
<status endtime="20170810 02:34:30.438" status="PASS" starttime="20170810 02:34:30.257"></status>
</kw>
<status endtime="20170810 02:34:30.438" status="PASS" starttime="20170810 02:34:30.256"></status>
</kw>
<status endtime="20170810 02:34:30.439" status="PASS" starttime="20170810 02:34:30.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:30.439" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:34:30.439" status="PASS" starttime="20170810 02:34:30.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:30.441" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:30.441" status="PASS" starttime="20170810 02:34:30.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:30.442" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:30.442" status="PASS" starttime="20170810 02:34:30.442"></status>
</kw>
<status endtime="20170810 02:34:30.442" status="PASS" starttime="20170810 02:34:30.441"></status>
</kw>
<status endtime="20170810 02:34:30.442" status="PASS" starttime="20170810 02:34:30.440"></status>
</kw>
<status endtime="20170810 02:34:30.442" status="PASS" starttime="20170810 02:34:30.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:30.505" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:30.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:30.505" status="PASS" starttime="20170810 02:34:30.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:30.507" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:30.507" status="PASS" starttime="20170810 02:34:30.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:30.508" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:30.508" status="PASS" starttime="20170810 02:34:30.508"></status>
</kw>
<status endtime="20170810 02:34:30.508" status="PASS" starttime="20170810 02:34:30.507"></status>
</kw>
<status endtime="20170810 02:34:30.508" status="PASS" starttime="20170810 02:34:30.506"></status>
</kw>
<status endtime="20170810 02:34:30.508" status="PASS" starttime="20170810 02:34:30.505"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:30.509" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:30.509" status="PASS" starttime="20170810 02:34:30.509"></status>
</kw>
<msg timestamp="20170810 02:34:30.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:30.509" status="PASS" starttime="20170810 02:34:30.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:30.510" status="PASS" starttime="20170810 02:34:30.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:30.510" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:30.510" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:30.510" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:34:30.510" status="PASS" starttime="20170810 02:34:30.510"></status>
</kw>
<msg timestamp="20170810 02:34:30.511" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:34:30.511" status="PASS" starttime="20170810 02:34:30.254"></status>
</kw>
<msg timestamp="20170810 02:34:30.511" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:34:30.511" status="PASS" starttime="20170810 02:34:30.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:34:30.512" status="PASS" starttime="20170810 02:34:30.511"></status>
</kw>
<status endtime="20170810 02:34:30.512" status="PASS" starttime="20170810 02:34:30.253"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:30.515" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:30.515" status="PASS" starttime="20170810 02:34:30.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:30.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:30.516" status="PASS" starttime="20170810 02:34:30.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:30.517" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:30.517" status="PASS" starttime="20170810 02:34:30.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:30.517" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:30.517" status="PASS" starttime="20170810 02:34:30.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.832" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:30.832" status="PASS" starttime="20170810 02:34:30.518"></status>
</kw>
<msg timestamp="20170810 02:34:30.832" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:30.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:30.832" status="PASS" starttime="20170810 02:34:30.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.833" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:30.833" status="PASS" starttime="20170810 02:34:30.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:30.834" status="PASS" starttime="20170810 02:34:30.833"></status>
</kw>
<status endtime="20170810 02:34:30.834" status="PASS" starttime="20170810 02:34:30.514"></status>
</kw>
<status endtime="20170810 02:34:30.834" status="PASS" starttime="20170810 02:34:30.514"></status>
</kw>
<status endtime="20170810 02:34:30.834" status="PASS" starttime="20170810 02:34:30.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:30.834" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:34:30.834" status="PASS" starttime="20170810 02:34:30.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:30.837" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:30.837" status="PASS" starttime="20170810 02:34:30.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:30.838" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:30.838" status="PASS" starttime="20170810 02:34:30.838"></status>
</kw>
<status endtime="20170810 02:34:30.838" status="PASS" starttime="20170810 02:34:30.837"></status>
</kw>
<status endtime="20170810 02:34:30.838" status="PASS" starttime="20170810 02:34:30.835"></status>
</kw>
<status endtime="20170810 02:34:30.838" status="PASS" starttime="20170810 02:34:30.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:30.990" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:30.990" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:30.990" status="PASS" starttime="20170810 02:34:30.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:30.992" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:30.992" status="PASS" starttime="20170810 02:34:30.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:30.993" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:30.993" status="PASS" starttime="20170810 02:34:30.993"></status>
</kw>
<status endtime="20170810 02:34:30.993" status="PASS" starttime="20170810 02:34:30.992"></status>
</kw>
<status endtime="20170810 02:34:30.993" status="PASS" starttime="20170810 02:34:30.991"></status>
</kw>
<status endtime="20170810 02:34:30.993" status="PASS" starttime="20170810 02:34:30.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:30.994" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:30.994" status="PASS" starttime="20170810 02:34:30.993"></status>
</kw>
<msg timestamp="20170810 02:34:30.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:30.994" status="PASS" starttime="20170810 02:34:30.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:30.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:30.994" status="PASS" starttime="20170810 02:34:30.994"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:30.995" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:30.995" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:30.995" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:34:30.995" status="PASS" starttime="20170810 02:34:30.995"></status>
</kw>
<msg timestamp="20170810 02:34:30.995" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:34:30.996" status="PASS" starttime="20170810 02:34:30.512"></status>
</kw>
<msg timestamp="20170810 02:34:30.996" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:34:30.996" status="PASS" starttime="20170810 02:34:30.512"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:34:30.996" status="PASS" starttime="20170810 02:34:30.996"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:31.000" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:31.001" status="PASS" starttime="20170810 02:34:31.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:31.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:31.001" status="PASS" starttime="20170810 02:34:31.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:31.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:31.002" status="PASS" starttime="20170810 02:34:31.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:31.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:31.003" status="PASS" starttime="20170810 02:34:31.002"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:31.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:31.192" status="PASS" starttime="20170810 02:34:31.003"></status>
</kw>
<msg timestamp="20170810 02:34:31.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:31.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:31.192" status="PASS" starttime="20170810 02:34:31.003"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:31.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:31.193" status="PASS" starttime="20170810 02:34:31.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:31.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:31.193" status="PASS" starttime="20170810 02:34:31.193"></status>
</kw>
<status endtime="20170810 02:34:31.194" status="PASS" starttime="20170810 02:34:30.999"></status>
</kw>
<status endtime="20170810 02:34:31.194" status="PASS" starttime="20170810 02:34:30.999"></status>
</kw>
<status endtime="20170810 02:34:31.194" status="PASS" starttime="20170810 02:34:30.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:31.194" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:34:31.194" status="PASS" starttime="20170810 02:34:31.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:31.196" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:31.197" status="PASS" starttime="20170810 02:34:31.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:31.198" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:31.198" status="PASS" starttime="20170810 02:34:31.197"></status>
</kw>
<status endtime="20170810 02:34:31.198" status="PASS" starttime="20170810 02:34:31.197"></status>
</kw>
<status endtime="20170810 02:34:31.198" status="PASS" starttime="20170810 02:34:31.195"></status>
</kw>
<status endtime="20170810 02:34:31.198" status="PASS" starttime="20170810 02:34:31.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:31.265" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:34:31.265" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:31.265" status="PASS" starttime="20170810 02:34:31.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:31.267" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:31.267" status="PASS" starttime="20170810 02:34:31.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:31.267" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:31.268" status="PASS" starttime="20170810 02:34:31.267"></status>
</kw>
<status endtime="20170810 02:34:31.268" status="PASS" starttime="20170810 02:34:31.267"></status>
</kw>
<status endtime="20170810 02:34:31.268" status="PASS" starttime="20170810 02:34:31.265"></status>
</kw>
<status endtime="20170810 02:34:31.268" status="PASS" starttime="20170810 02:34:31.265"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:31.268" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:31.268" status="PASS" starttime="20170810 02:34:31.268"></status>
</kw>
<msg timestamp="20170810 02:34:31.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:31.269" status="PASS" starttime="20170810 02:34:30.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:31.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:31.269" status="PASS" starttime="20170810 02:34:31.269"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:31.270" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:31.270" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:31.270" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:34:31.270" status="PASS" starttime="20170810 02:34:31.269"></status>
</kw>
<msg timestamp="20170810 02:34:31.270" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:34:31.270" status="PASS" starttime="20170810 02:34:30.997"></status>
</kw>
<msg timestamp="20170810 02:34:31.270" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:34:31.270" status="PASS" starttime="20170810 02:34:30.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:34:31.271" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:34:31.271" status="FAIL" starttime="20170810 02:34:31.271"></status>
</kw>
<status endtime="20170810 02:34:31.271" status="FAIL" starttime="20170810 02:34:30.997"></status>
</kw>
<status endtime="20170810 02:34:31.271" status="FAIL" starttime="20170810 02:34:30.253"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:41.277" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:41.278" status="PASS" starttime="20170810 02:34:41.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:41.278" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:41.278" status="PASS" starttime="20170810 02:34:41.278"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:41.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:41.279" status="PASS" starttime="20170810 02:34:41.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:41.279" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:41.280" status="PASS" starttime="20170810 02:34:41.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.500" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:41.501" status="PASS" starttime="20170810 02:34:41.280"></status>
</kw>
<msg timestamp="20170810 02:34:41.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:41.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:41.501" status="PASS" starttime="20170810 02:34:41.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:41.501" status="PASS" starttime="20170810 02:34:41.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:41.502" status="PASS" starttime="20170810 02:34:41.502"></status>
</kw>
<status endtime="20170810 02:34:41.502" status="PASS" starttime="20170810 02:34:41.276"></status>
</kw>
<status endtime="20170810 02:34:41.502" status="PASS" starttime="20170810 02:34:41.275"></status>
</kw>
<status endtime="20170810 02:34:41.502" status="PASS" starttime="20170810 02:34:41.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:41.503" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:34:41.503" status="PASS" starttime="20170810 02:34:41.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:41.505" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:41.505" status="PASS" starttime="20170810 02:34:41.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:41.506" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:41.506" status="PASS" starttime="20170810 02:34:41.506"></status>
</kw>
<status endtime="20170810 02:34:41.506" status="PASS" starttime="20170810 02:34:41.505"></status>
</kw>
<status endtime="20170810 02:34:41.507" status="PASS" starttime="20170810 02:34:41.504"></status>
</kw>
<status endtime="20170810 02:34:41.507" status="PASS" starttime="20170810 02:34:41.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:41.595" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:41.595" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:41.596" status="PASS" starttime="20170810 02:34:41.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:41.600" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:41.600" status="PASS" starttime="20170810 02:34:41.597"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:41.601" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:41.601" status="PASS" starttime="20170810 02:34:41.601"></status>
</kw>
<status endtime="20170810 02:34:41.601" status="PASS" starttime="20170810 02:34:41.600"></status>
</kw>
<status endtime="20170810 02:34:41.601" status="PASS" starttime="20170810 02:34:41.596"></status>
</kw>
<status endtime="20170810 02:34:41.601" status="PASS" starttime="20170810 02:34:41.596"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:41.602" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:41.602" status="PASS" starttime="20170810 02:34:41.602"></status>
</kw>
<msg timestamp="20170810 02:34:41.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:41.602" status="PASS" starttime="20170810 02:34:41.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:41.603" status="PASS" starttime="20170810 02:34:41.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:41.603" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:41.603" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:41.604" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:34:41.604" status="PASS" starttime="20170810 02:34:41.603"></status>
</kw>
<msg timestamp="20170810 02:34:41.604" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:34:41.604" status="PASS" starttime="20170810 02:34:41.274"></status>
</kw>
<msg timestamp="20170810 02:34:41.604" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:34:41.604" status="PASS" starttime="20170810 02:34:41.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:34:41.605" status="PASS" starttime="20170810 02:34:41.604"></status>
</kw>
<status endtime="20170810 02:34:41.605" status="PASS" starttime="20170810 02:34:41.273"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:41.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:41.609" status="PASS" starttime="20170810 02:34:41.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:41.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:41.610" status="PASS" starttime="20170810 02:34:41.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:41.610" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:41.611" status="PASS" starttime="20170810 02:34:41.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:41.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:41.611" status="PASS" starttime="20170810 02:34:41.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:41.863" status="PASS" starttime="20170810 02:34:41.613"></status>
</kw>
<msg timestamp="20170810 02:34:41.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:41.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:41.863" status="PASS" starttime="20170810 02:34:41.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:41.864" status="PASS" starttime="20170810 02:34:41.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:41.864" status="PASS" starttime="20170810 02:34:41.864"></status>
</kw>
<status endtime="20170810 02:34:41.865" status="PASS" starttime="20170810 02:34:41.608"></status>
</kw>
<status endtime="20170810 02:34:41.865" status="PASS" starttime="20170810 02:34:41.607"></status>
</kw>
<status endtime="20170810 02:34:41.865" status="PASS" starttime="20170810 02:34:41.607"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:41.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:34:41.865" status="PASS" starttime="20170810 02:34:41.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:41.868" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:41.868" status="PASS" starttime="20170810 02:34:41.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:41.869" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:41.869" status="PASS" starttime="20170810 02:34:41.868"></status>
</kw>
<status endtime="20170810 02:34:41.869" status="PASS" starttime="20170810 02:34:41.868"></status>
</kw>
<status endtime="20170810 02:34:41.869" status="PASS" starttime="20170810 02:34:41.866"></status>
</kw>
<status endtime="20170810 02:34:41.869" status="PASS" starttime="20170810 02:34:41.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:41.958" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:41.958" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:41.959" status="PASS" starttime="20170810 02:34:41.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:41.960" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:41.960" status="PASS" starttime="20170810 02:34:41.960"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:41.961" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:41.961" status="PASS" starttime="20170810 02:34:41.961"></status>
</kw>
<status endtime="20170810 02:34:41.961" status="PASS" starttime="20170810 02:34:41.960"></status>
</kw>
<status endtime="20170810 02:34:41.961" status="PASS" starttime="20170810 02:34:41.959"></status>
</kw>
<status endtime="20170810 02:34:41.962" status="PASS" starttime="20170810 02:34:41.959"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:41.962" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:41.962" status="PASS" starttime="20170810 02:34:41.962"></status>
</kw>
<msg timestamp="20170810 02:34:41.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:41.962" status="PASS" starttime="20170810 02:34:41.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:41.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:41.963" status="PASS" starttime="20170810 02:34:41.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:41.963" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:41.964" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:41.964" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:34:41.964" status="PASS" starttime="20170810 02:34:41.963"></status>
</kw>
<msg timestamp="20170810 02:34:41.964" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:34:41.964" status="PASS" starttime="20170810 02:34:41.605"></status>
</kw>
<msg timestamp="20170810 02:34:41.964" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:34:41.964" status="PASS" starttime="20170810 02:34:41.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:34:41.965" status="PASS" starttime="20170810 02:34:41.965"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:41.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:41.969" status="PASS" starttime="20170810 02:34:41.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:41.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:41.970" status="PASS" starttime="20170810 02:34:41.969"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:41.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:41.970" status="PASS" starttime="20170810 02:34:41.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:41.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:41.971" status="PASS" starttime="20170810 02:34:41.971"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:42.150" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:42.150" status="PASS" starttime="20170810 02:34:41.972"></status>
</kw>
<msg timestamp="20170810 02:34:42.151" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:42.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:42.151" status="PASS" starttime="20170810 02:34:41.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:42.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:42.151" status="PASS" starttime="20170810 02:34:42.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:42.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:42.152" status="PASS" starttime="20170810 02:34:42.152"></status>
</kw>
<status endtime="20170810 02:34:42.152" status="PASS" starttime="20170810 02:34:41.968"></status>
</kw>
<status endtime="20170810 02:34:42.152" status="PASS" starttime="20170810 02:34:41.967"></status>
</kw>
<status endtime="20170810 02:34:42.152" status="PASS" starttime="20170810 02:34:41.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:42.153" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:34:42.153" status="PASS" starttime="20170810 02:34:42.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:42.155" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:42.155" status="PASS" starttime="20170810 02:34:42.154"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:42.156" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:42.156" status="PASS" starttime="20170810 02:34:42.156"></status>
</kw>
<status endtime="20170810 02:34:42.156" status="PASS" starttime="20170810 02:34:42.155"></status>
</kw>
<status endtime="20170810 02:34:42.156" status="PASS" starttime="20170810 02:34:42.154"></status>
</kw>
<status endtime="20170810 02:34:42.156" status="PASS" starttime="20170810 02:34:42.153"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:42.232" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:34:42.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:42.232" status="PASS" starttime="20170810 02:34:42.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:42.233" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:42.234" status="PASS" starttime="20170810 02:34:42.233"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:42.234" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:42.234" status="PASS" starttime="20170810 02:34:42.234"></status>
</kw>
<status endtime="20170810 02:34:42.235" status="PASS" starttime="20170810 02:34:42.234"></status>
</kw>
<status endtime="20170810 02:34:42.235" status="PASS" starttime="20170810 02:34:42.233"></status>
</kw>
<status endtime="20170810 02:34:42.235" status="PASS" starttime="20170810 02:34:42.232"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:42.235" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:42.235" status="PASS" starttime="20170810 02:34:42.235"></status>
</kw>
<msg timestamp="20170810 02:34:42.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:42.235" status="PASS" starttime="20170810 02:34:41.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:42.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:42.236" status="PASS" starttime="20170810 02:34:42.236"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:42.237" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:42.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:42.237" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:34:42.237" status="PASS" starttime="20170810 02:34:42.236"></status>
</kw>
<msg timestamp="20170810 02:34:42.237" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:34:42.237" status="PASS" starttime="20170810 02:34:41.966"></status>
</kw>
<msg timestamp="20170810 02:34:42.237" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:34:42.237" status="PASS" starttime="20170810 02:34:41.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:34:42.238" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:34:42.238" status="FAIL" starttime="20170810 02:34:42.238"></status>
</kw>
<status endtime="20170810 02:34:42.238" status="FAIL" starttime="20170810 02:34:41.965"></status>
</kw>
<status endtime="20170810 02:34:42.238" status="FAIL" starttime="20170810 02:34:41.272"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:52.244" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:52.245" status="PASS" starttime="20170810 02:34:52.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:52.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:52.245" status="PASS" starttime="20170810 02:34:52.245"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:52.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:52.246" status="PASS" starttime="20170810 02:34:52.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:52.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:52.247" status="PASS" starttime="20170810 02:34:52.246"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:52.497" status="PASS" starttime="20170810 02:34:52.247"></status>
</kw>
<msg timestamp="20170810 02:34:52.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:52.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:52.497" status="PASS" starttime="20170810 02:34:52.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:52.498" status="PASS" starttime="20170810 02:34:52.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:52.498" status="PASS" starttime="20170810 02:34:52.498"></status>
</kw>
<status endtime="20170810 02:34:52.499" status="PASS" starttime="20170810 02:34:52.243"></status>
</kw>
<status endtime="20170810 02:34:52.499" status="PASS" starttime="20170810 02:34:52.242"></status>
</kw>
<status endtime="20170810 02:34:52.499" status="PASS" starttime="20170810 02:34:52.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:52.499" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:34:52.499" status="PASS" starttime="20170810 02:34:52.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:52.501" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:52.501" status="PASS" starttime="20170810 02:34:52.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:52.502" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:52.503" status="PASS" starttime="20170810 02:34:52.502"></status>
</kw>
<status endtime="20170810 02:34:52.503" status="PASS" starttime="20170810 02:34:52.502"></status>
</kw>
<status endtime="20170810 02:34:52.503" status="PASS" starttime="20170810 02:34:52.500"></status>
</kw>
<status endtime="20170810 02:34:52.503" status="PASS" starttime="20170810 02:34:52.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:52.567" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:52.567" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:52.567" status="PASS" starttime="20170810 02:34:52.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:52.569" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:52.569" status="PASS" starttime="20170810 02:34:52.568"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:52.570" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:52.570" status="PASS" starttime="20170810 02:34:52.570"></status>
</kw>
<status endtime="20170810 02:34:52.570" status="PASS" starttime="20170810 02:34:52.569"></status>
</kw>
<status endtime="20170810 02:34:52.570" status="PASS" starttime="20170810 02:34:52.568"></status>
</kw>
<status endtime="20170810 02:34:52.571" status="PASS" starttime="20170810 02:34:52.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:52.571" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:52.571" status="PASS" starttime="20170810 02:34:52.571"></status>
</kw>
<msg timestamp="20170810 02:34:52.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:52.571" status="PASS" starttime="20170810 02:34:52.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:52.572" status="PASS" starttime="20170810 02:34:52.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:52.573" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:52.573" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:52.573" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:34:52.573" status="PASS" starttime="20170810 02:34:52.572"></status>
</kw>
<msg timestamp="20170810 02:34:52.573" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:34:52.573" status="PASS" starttime="20170810 02:34:52.241"></status>
</kw>
<msg timestamp="20170810 02:34:52.573" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:34:52.573" status="PASS" starttime="20170810 02:34:52.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:34:52.574" status="PASS" starttime="20170810 02:34:52.574"></status>
</kw>
<status endtime="20170810 02:34:52.574" status="PASS" starttime="20170810 02:34:52.240"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:52.578" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:52.578" status="PASS" starttime="20170810 02:34:52.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:52.579" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:52.579" status="PASS" starttime="20170810 02:34:52.578"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:52.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:52.579" status="PASS" starttime="20170810 02:34:52.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:52.580" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:52.580" status="PASS" starttime="20170810 02:34:52.580"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.757" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:52.757" status="PASS" starttime="20170810 02:34:52.581"></status>
</kw>
<msg timestamp="20170810 02:34:52.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:52.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:52.758" status="PASS" starttime="20170810 02:34:52.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:52.758" status="PASS" starttime="20170810 02:34:52.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:52.759" status="PASS" starttime="20170810 02:34:52.759"></status>
</kw>
<status endtime="20170810 02:34:52.759" status="PASS" starttime="20170810 02:34:52.577"></status>
</kw>
<status endtime="20170810 02:34:52.759" status="PASS" starttime="20170810 02:34:52.576"></status>
</kw>
<status endtime="20170810 02:34:52.759" status="PASS" starttime="20170810 02:34:52.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:52.760" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:34:52.760" status="PASS" starttime="20170810 02:34:52.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:52.762" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:52.762" status="PASS" starttime="20170810 02:34:52.761"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:52.763" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:34:52.763" status="PASS" starttime="20170810 02:34:52.763"></status>
</kw>
<status endtime="20170810 02:34:52.764" status="PASS" starttime="20170810 02:34:52.763"></status>
</kw>
<status endtime="20170810 02:34:52.764" status="PASS" starttime="20170810 02:34:52.761"></status>
</kw>
<status endtime="20170810 02:34:52.764" status="PASS" starttime="20170810 02:34:52.760"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:52.874" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:34:52.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:52.875" status="PASS" starttime="20170810 02:34:52.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:52.876" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:52.877" status="PASS" starttime="20170810 02:34:52.876"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:52.877" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:52.877" status="PASS" starttime="20170810 02:34:52.877"></status>
</kw>
<status endtime="20170810 02:34:52.878" status="PASS" starttime="20170810 02:34:52.877"></status>
</kw>
<status endtime="20170810 02:34:52.878" status="PASS" starttime="20170810 02:34:52.875"></status>
</kw>
<status endtime="20170810 02:34:52.878" status="PASS" starttime="20170810 02:34:52.875"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:52.878" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:52.878" status="PASS" starttime="20170810 02:34:52.878"></status>
</kw>
<msg timestamp="20170810 02:34:52.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:52.878" status="PASS" starttime="20170810 02:34:52.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:52.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:52.879" status="PASS" starttime="20170810 02:34:52.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:52.880" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:52.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:52.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:34:52.880" status="PASS" starttime="20170810 02:34:52.879"></status>
</kw>
<msg timestamp="20170810 02:34:52.880" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:34:52.880" status="PASS" starttime="20170810 02:34:52.575"></status>
</kw>
<msg timestamp="20170810 02:34:52.880" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:34:52.880" status="PASS" starttime="20170810 02:34:52.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:34:52.881" status="PASS" starttime="20170810 02:34:52.881"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:34:52.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:34:52.885" status="PASS" starttime="20170810 02:34:52.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:34:52.886" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:34:52.886" status="PASS" starttime="20170810 02:34:52.885"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:34:52.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:34:52.886" status="PASS" starttime="20170810 02:34:52.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:34:52.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:34:52.887" status="PASS" starttime="20170810 02:34:52.887"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:34:53.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:34:53.113" status="PASS" starttime="20170810 02:34:52.888"></status>
</kw>
<msg timestamp="20170810 02:34:53.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:34:53.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:53.113" status="PASS" starttime="20170810 02:34:52.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:34:53.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:53.114" status="PASS" starttime="20170810 02:34:53.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:53.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:53.114" status="PASS" starttime="20170810 02:34:53.114"></status>
</kw>
<status endtime="20170810 02:34:53.115" status="PASS" starttime="20170810 02:34:52.884"></status>
</kw>
<status endtime="20170810 02:34:53.115" status="PASS" starttime="20170810 02:34:52.883"></status>
</kw>
<status endtime="20170810 02:34:53.115" status="PASS" starttime="20170810 02:34:52.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:34:53.115" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:34:53.115" status="PASS" starttime="20170810 02:34:53.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:53.117" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:53.117" status="PASS" starttime="20170810 02:34:53.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:53.118" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:34:53.118" status="PASS" starttime="20170810 02:34:53.118"></status>
</kw>
<status endtime="20170810 02:34:53.119" status="PASS" starttime="20170810 02:34:53.118"></status>
</kw>
<status endtime="20170810 02:34:53.119" status="PASS" starttime="20170810 02:34:53.116"></status>
</kw>
<status endtime="20170810 02:34:53.119" status="PASS" starttime="20170810 02:34:53.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:34:53.186" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:34:53.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:53.186" status="PASS" starttime="20170810 02:34:53.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:34:53.187" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:53.188" status="PASS" starttime="20170810 02:34:53.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:34:53.188" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:34:53.189" status="PASS" starttime="20170810 02:34:53.188"></status>
</kw>
<status endtime="20170810 02:34:53.189" status="PASS" starttime="20170810 02:34:53.188"></status>
</kw>
<status endtime="20170810 02:34:53.189" status="PASS" starttime="20170810 02:34:53.187"></status>
</kw>
<status endtime="20170810 02:34:53.189" status="PASS" starttime="20170810 02:34:53.186"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:34:53.189" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:34:53.189" status="PASS" starttime="20170810 02:34:53.189"></status>
</kw>
<msg timestamp="20170810 02:34:53.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:34:53.190" status="PASS" starttime="20170810 02:34:52.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:34:53.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:34:53.190" status="PASS" starttime="20170810 02:34:53.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:34:53.191" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:34:53.191" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:34:53.191" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:34:53.191" status="PASS" starttime="20170810 02:34:53.191"></status>
</kw>
<msg timestamp="20170810 02:34:53.191" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:34:53.191" status="PASS" starttime="20170810 02:34:52.882"></status>
</kw>
<msg timestamp="20170810 02:34:53.191" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:34:53.192" status="PASS" starttime="20170810 02:34:52.881"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:34:53.192" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:34:53.192" status="FAIL" starttime="20170810 02:34:53.192"></status>
</kw>
<status endtime="20170810 02:34:53.192" status="FAIL" starttime="20170810 02:34:52.881"></status>
</kw>
<status endtime="20170810 02:34:53.193" status="FAIL" starttime="20170810 02:34:52.239"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:03.198" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:03.198" status="PASS" starttime="20170810 02:35:03.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:03.199" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:03.199" status="PASS" starttime="20170810 02:35:03.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:03.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:03.200" status="PASS" starttime="20170810 02:35:03.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:03.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:03.200" status="PASS" starttime="20170810 02:35:03.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:03.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:03.575" status="PASS" starttime="20170810 02:35:03.201"></status>
</kw>
<msg timestamp="20170810 02:35:03.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:03.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:03.575" status="PASS" starttime="20170810 02:35:03.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:03.576" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:03.576" status="PASS" starttime="20170810 02:35:03.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:03.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:03.577" status="PASS" starttime="20170810 02:35:03.576"></status>
</kw>
<status endtime="20170810 02:35:03.577" status="PASS" starttime="20170810 02:35:03.197"></status>
</kw>
<status endtime="20170810 02:35:03.577" status="PASS" starttime="20170810 02:35:03.196"></status>
</kw>
<status endtime="20170810 02:35:03.577" status="PASS" starttime="20170810 02:35:03.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:03.577" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:35:03.577" status="PASS" starttime="20170810 02:35:03.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:03.579" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:03.579" status="PASS" starttime="20170810 02:35:03.579"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:03.580" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:03.580" status="PASS" starttime="20170810 02:35:03.580"></status>
</kw>
<status endtime="20170810 02:35:03.581" status="PASS" starttime="20170810 02:35:03.580"></status>
</kw>
<status endtime="20170810 02:35:03.581" status="PASS" starttime="20170810 02:35:03.578"></status>
</kw>
<status endtime="20170810 02:35:03.581" status="PASS" starttime="20170810 02:35:03.578"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:08.666" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:08.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:08.667" status="PASS" starttime="20170810 02:35:03.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:08.669" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:08.669" status="PASS" starttime="20170810 02:35:08.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:08.670" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:08.670" status="PASS" starttime="20170810 02:35:08.670"></status>
</kw>
<status endtime="20170810 02:35:08.670" status="PASS" starttime="20170810 02:35:08.669"></status>
</kw>
<status endtime="20170810 02:35:08.671" status="PASS" starttime="20170810 02:35:08.668"></status>
</kw>
<status endtime="20170810 02:35:08.671" status="PASS" starttime="20170810 02:35:08.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:08.671" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:08.671" status="PASS" starttime="20170810 02:35:08.671"></status>
</kw>
<msg timestamp="20170810 02:35:08.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:08.671" status="PASS" starttime="20170810 02:35:03.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:08.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:08.672" status="PASS" starttime="20170810 02:35:08.672"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:08.672" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:08.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:08.673" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:35:08.673" status="PASS" starttime="20170810 02:35:08.672"></status>
</kw>
<msg timestamp="20170810 02:35:08.673" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:35:08.673" status="PASS" starttime="20170810 02:35:03.194"></status>
</kw>
<msg timestamp="20170810 02:35:08.673" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:35:08.673" status="PASS" starttime="20170810 02:35:03.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:35:08.674" status="PASS" starttime="20170810 02:35:08.674"></status>
</kw>
<status endtime="20170810 02:35:08.674" status="PASS" starttime="20170810 02:35:03.194"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:08.678" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:08.678" status="PASS" starttime="20170810 02:35:08.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:08.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:08.679" status="PASS" starttime="20170810 02:35:08.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:08.679" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:08.679" status="PASS" starttime="20170810 02:35:08.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:08.680" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:08.680" status="PASS" starttime="20170810 02:35:08.679"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:09.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:09.570" status="PASS" starttime="20170810 02:35:08.680"></status>
</kw>
<msg timestamp="20170810 02:35:09.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:09.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:09.570" status="PASS" starttime="20170810 02:35:08.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:09.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:09.571" status="PASS" starttime="20170810 02:35:09.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:09.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:09.572" status="PASS" starttime="20170810 02:35:09.571"></status>
</kw>
<status endtime="20170810 02:35:09.572" status="PASS" starttime="20170810 02:35:08.677"></status>
</kw>
<status endtime="20170810 02:35:09.572" status="PASS" starttime="20170810 02:35:08.676"></status>
</kw>
<status endtime="20170810 02:35:09.572" status="PASS" starttime="20170810 02:35:08.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:09.573" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:35:09.573" status="PASS" starttime="20170810 02:35:09.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:09.575" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:09.575" status="PASS" starttime="20170810 02:35:09.574"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:09.576" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:09.576" status="PASS" starttime="20170810 02:35:09.576"></status>
</kw>
<status endtime="20170810 02:35:09.576" status="PASS" starttime="20170810 02:35:09.575"></status>
</kw>
<status endtime="20170810 02:35:09.577" status="PASS" starttime="20170810 02:35:09.574"></status>
</kw>
<status endtime="20170810 02:35:09.577" status="PASS" starttime="20170810 02:35:09.573"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:11.070" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:11.070" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:11.070" status="PASS" starttime="20170810 02:35:09.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:11.072" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:11.072" status="PASS" starttime="20170810 02:35:11.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:11.073" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:11.073" status="PASS" starttime="20170810 02:35:11.073"></status>
</kw>
<status endtime="20170810 02:35:11.073" status="PASS" starttime="20170810 02:35:11.072"></status>
</kw>
<status endtime="20170810 02:35:11.073" status="PASS" starttime="20170810 02:35:11.071"></status>
</kw>
<status endtime="20170810 02:35:11.073" status="PASS" starttime="20170810 02:35:11.070"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:11.074" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:11.074" status="PASS" starttime="20170810 02:35:11.074"></status>
</kw>
<msg timestamp="20170810 02:35:11.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:11.074" status="PASS" starttime="20170810 02:35:08.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:11.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:11.075" status="PASS" starttime="20170810 02:35:11.074"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:11.075" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:11.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:11.075" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 02:35:11.075" status="PASS" starttime="20170810 02:35:11.075"></status>
</kw>
<msg timestamp="20170810 02:35:11.076" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 02:35:11.076" status="PASS" starttime="20170810 02:35:08.675"></status>
</kw>
<msg timestamp="20170810 02:35:11.076" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 02:35:11.076" status="PASS" starttime="20170810 02:35:08.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 02:35:11.077" level="FAIL">Running != Off</msg>
<status endtime="20170810 02:35:11.077" status="FAIL" starttime="20170810 02:35:11.076"></status>
</kw>
<status endtime="20170810 02:35:11.077" status="FAIL" starttime="20170810 02:35:03.193"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:21.082" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:21.082" status="PASS" starttime="20170810 02:35:21.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:21.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:21.083" status="PASS" starttime="20170810 02:35:21.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:21.084" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:21.084" status="PASS" starttime="20170810 02:35:21.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:21.085" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:21.085" status="PASS" starttime="20170810 02:35:21.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:21.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:21.477" status="PASS" starttime="20170810 02:35:21.086"></status>
</kw>
<msg timestamp="20170810 02:35:21.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:21.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:21.477" status="PASS" starttime="20170810 02:35:21.086"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:21.478" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:21.478" status="PASS" starttime="20170810 02:35:21.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:21.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:21.478" status="PASS" starttime="20170810 02:35:21.478"></status>
</kw>
<status endtime="20170810 02:35:21.478" status="PASS" starttime="20170810 02:35:21.081"></status>
</kw>
<status endtime="20170810 02:35:21.479" status="PASS" starttime="20170810 02:35:21.081"></status>
</kw>
<status endtime="20170810 02:35:21.479" status="PASS" starttime="20170810 02:35:21.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:21.479" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:35:21.479" status="PASS" starttime="20170810 02:35:21.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:21.481" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:21.481" status="PASS" starttime="20170810 02:35:21.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:21.482" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:21.482" status="PASS" starttime="20170810 02:35:21.482"></status>
</kw>
<status endtime="20170810 02:35:21.482" status="PASS" starttime="20170810 02:35:21.481"></status>
</kw>
<status endtime="20170810 02:35:21.483" status="PASS" starttime="20170810 02:35:21.480"></status>
</kw>
<status endtime="20170810 02:35:21.483" status="PASS" starttime="20170810 02:35:21.480"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:21.563" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:21.563" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:21.563" status="PASS" starttime="20170810 02:35:21.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:21.566" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:21.566" status="PASS" starttime="20170810 02:35:21.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:21.567" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:21.567" status="PASS" starttime="20170810 02:35:21.567"></status>
</kw>
<status endtime="20170810 02:35:21.567" status="PASS" starttime="20170810 02:35:21.566"></status>
</kw>
<status endtime="20170810 02:35:21.567" status="PASS" starttime="20170810 02:35:21.564"></status>
</kw>
<status endtime="20170810 02:35:21.568" status="PASS" starttime="20170810 02:35:21.564"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:21.568" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:21.568" status="PASS" starttime="20170810 02:35:21.568"></status>
</kw>
<msg timestamp="20170810 02:35:21.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:21.568" status="PASS" starttime="20170810 02:35:21.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:21.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:21.569" status="PASS" starttime="20170810 02:35:21.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:21.569" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:21.570" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:21.570" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:35:21.570" status="PASS" starttime="20170810 02:35:21.569"></status>
</kw>
<msg timestamp="20170810 02:35:21.570" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:35:21.570" status="PASS" starttime="20170810 02:35:21.079"></status>
</kw>
<msg timestamp="20170810 02:35:21.570" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:35:21.570" status="PASS" starttime="20170810 02:35:21.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 02:35:21.571" level="FAIL">On != Off</msg>
<status endtime="20170810 02:35:21.571" status="FAIL" starttime="20170810 02:35:21.571"></status>
</kw>
<status endtime="20170810 02:35:21.571" status="FAIL" starttime="20170810 02:35:21.078"></status>
</kw>
<status endtime="20170810 02:35:21.571" status="FAIL" starttime="20170810 02:35:21.077"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:31.577" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:31.577" status="PASS" starttime="20170810 02:35:31.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:31.578" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:31.578" status="PASS" starttime="20170810 02:35:31.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:31.578" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:31.578" status="PASS" starttime="20170810 02:35:31.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:31.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:31.579" status="PASS" starttime="20170810 02:35:31.579"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:32.090" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:32.090" status="PASS" starttime="20170810 02:35:31.580"></status>
</kw>
<msg timestamp="20170810 02:35:32.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:32.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:32.090" status="PASS" starttime="20170810 02:35:31.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:32.091" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:32.091" status="PASS" starttime="20170810 02:35:32.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:32.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:32.091" status="PASS" starttime="20170810 02:35:32.091"></status>
</kw>
<status endtime="20170810 02:35:32.091" status="PASS" starttime="20170810 02:35:31.576"></status>
</kw>
<status endtime="20170810 02:35:32.092" status="PASS" starttime="20170810 02:35:31.575"></status>
</kw>
<status endtime="20170810 02:35:32.092" status="PASS" starttime="20170810 02:35:31.575"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:32.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:35:32.092" status="PASS" starttime="20170810 02:35:32.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:32.094" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:32.094" status="PASS" starttime="20170810 02:35:32.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:32.095" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:32.095" status="PASS" starttime="20170810 02:35:32.095"></status>
</kw>
<status endtime="20170810 02:35:32.096" status="PASS" starttime="20170810 02:35:32.094"></status>
</kw>
<status endtime="20170810 02:35:32.096" status="PASS" starttime="20170810 02:35:32.093"></status>
</kw>
<status endtime="20170810 02:35:32.096" status="PASS" starttime="20170810 02:35:32.093"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:32.658" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:32.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:32.658" status="PASS" starttime="20170810 02:35:32.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:32.660" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:32.660" status="PASS" starttime="20170810 02:35:32.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:32.661" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:32.661" status="PASS" starttime="20170810 02:35:32.661"></status>
</kw>
<status endtime="20170810 02:35:32.661" status="PASS" starttime="20170810 02:35:32.660"></status>
</kw>
<status endtime="20170810 02:35:32.661" status="PASS" starttime="20170810 02:35:32.659"></status>
</kw>
<status endtime="20170810 02:35:32.662" status="PASS" starttime="20170810 02:35:32.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:32.662" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:32.662" status="PASS" starttime="20170810 02:35:32.662"></status>
</kw>
<msg timestamp="20170810 02:35:32.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:32.662" status="PASS" starttime="20170810 02:35:31.574"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:32.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:32.663" status="PASS" starttime="20170810 02:35:32.662"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:32.663" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:32.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:32.664" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:35:32.664" status="PASS" starttime="20170810 02:35:32.663"></status>
</kw>
<msg timestamp="20170810 02:35:32.664" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:35:32.664" status="PASS" starttime="20170810 02:35:31.573"></status>
</kw>
<msg timestamp="20170810 02:35:32.665" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:35:32.665" status="PASS" starttime="20170810 02:35:31.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:35:32.665" status="PASS" starttime="20170810 02:35:32.665"></status>
</kw>
<status endtime="20170810 02:35:32.665" status="PASS" starttime="20170810 02:35:31.572"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:32.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:32.669" status="PASS" starttime="20170810 02:35:32.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:32.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:32.670" status="PASS" starttime="20170810 02:35:32.670"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:32.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:32.671" status="PASS" starttime="20170810 02:35:32.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:32.671" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:32.671" status="PASS" starttime="20170810 02:35:32.671"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.270" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:33.271" status="PASS" starttime="20170810 02:35:32.672"></status>
</kw>
<msg timestamp="20170810 02:35:33.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:33.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:33.271" status="PASS" starttime="20170810 02:35:32.672"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.271" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:33.272" status="PASS" starttime="20170810 02:35:33.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:33.273" status="PASS" starttime="20170810 02:35:33.272"></status>
</kw>
<status endtime="20170810 02:35:33.273" status="PASS" starttime="20170810 02:35:32.668"></status>
</kw>
<status endtime="20170810 02:35:33.273" status="PASS" starttime="20170810 02:35:32.668"></status>
</kw>
<status endtime="20170810 02:35:33.273" status="PASS" starttime="20170810 02:35:32.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:33.273" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:35:33.274" status="PASS" starttime="20170810 02:35:33.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:33.276" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:33.276" status="PASS" starttime="20170810 02:35:33.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:33.276" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:33.277" status="PASS" starttime="20170810 02:35:33.276"></status>
</kw>
<status endtime="20170810 02:35:33.277" status="PASS" starttime="20170810 02:35:33.276"></status>
</kw>
<status endtime="20170810 02:35:33.277" status="PASS" starttime="20170810 02:35:33.274"></status>
</kw>
<status endtime="20170810 02:35:33.277" status="PASS" starttime="20170810 02:35:33.274"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:33.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:33.693" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:33.693" status="PASS" starttime="20170810 02:35:33.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:33.695" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:33.695" status="PASS" starttime="20170810 02:35:33.694"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:33.696" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:33.696" status="PASS" starttime="20170810 02:35:33.696"></status>
</kw>
<status endtime="20170810 02:35:33.696" status="PASS" starttime="20170810 02:35:33.695"></status>
</kw>
<status endtime="20170810 02:35:33.696" status="PASS" starttime="20170810 02:35:33.694"></status>
</kw>
<status endtime="20170810 02:35:33.696" status="PASS" starttime="20170810 02:35:33.693"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:33.697" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:33.697" status="PASS" starttime="20170810 02:35:33.697"></status>
</kw>
<msg timestamp="20170810 02:35:33.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:33.697" status="PASS" starttime="20170810 02:35:32.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:33.698" status="PASS" starttime="20170810 02:35:33.698"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:33.699" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:33.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:33.699" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:35:33.699" status="PASS" starttime="20170810 02:35:33.699"></status>
</kw>
<msg timestamp="20170810 02:35:33.699" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:35:33.699" status="PASS" starttime="20170810 02:35:32.666"></status>
</kw>
<msg timestamp="20170810 02:35:33.700" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:35:33.700" status="PASS" starttime="20170810 02:35:32.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:35:33.700" status="PASS" starttime="20170810 02:35:33.700"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:33.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:33.705" status="PASS" starttime="20170810 02:35:33.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:33.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:33.705" status="PASS" starttime="20170810 02:35:33.705"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:33.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:33.706" status="PASS" starttime="20170810 02:35:33.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:33.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:33.706" status="PASS" starttime="20170810 02:35:33.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:33.941" status="PASS" starttime="20170810 02:35:33.708"></status>
</kw>
<msg timestamp="20170810 02:35:33.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:33.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:33.941" status="PASS" starttime="20170810 02:35:33.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:33.942" status="PASS" starttime="20170810 02:35:33.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:33.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:33.943" status="PASS" starttime="20170810 02:35:33.942"></status>
</kw>
<status endtime="20170810 02:35:33.943" status="PASS" starttime="20170810 02:35:33.703"></status>
</kw>
<status endtime="20170810 02:35:33.943" status="PASS" starttime="20170810 02:35:33.703"></status>
</kw>
<status endtime="20170810 02:35:33.943" status="PASS" starttime="20170810 02:35:33.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:33.944" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:35:33.944" status="PASS" starttime="20170810 02:35:33.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:33.946" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:35:33.946" status="PASS" starttime="20170810 02:35:33.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:33.947" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:35:33.947" status="PASS" starttime="20170810 02:35:33.947"></status>
</kw>
<status endtime="20170810 02:35:33.947" status="PASS" starttime="20170810 02:35:33.946"></status>
</kw>
<status endtime="20170810 02:35:33.947" status="PASS" starttime="20170810 02:35:33.944"></status>
</kw>
<status endtime="20170810 02:35:33.947" status="PASS" starttime="20170810 02:35:33.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:34.068" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:35:34.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:34.068" status="PASS" starttime="20170810 02:35:33.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:34.070" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:34.070" status="PASS" starttime="20170810 02:35:34.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:34.070" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:34.071" status="PASS" starttime="20170810 02:35:34.070"></status>
</kw>
<status endtime="20170810 02:35:34.071" status="PASS" starttime="20170810 02:35:34.070"></status>
</kw>
<status endtime="20170810 02:35:34.071" status="PASS" starttime="20170810 02:35:34.069"></status>
</kw>
<status endtime="20170810 02:35:34.071" status="PASS" starttime="20170810 02:35:34.068"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:34.071" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:34.071" status="PASS" starttime="20170810 02:35:34.071"></status>
</kw>
<msg timestamp="20170810 02:35:34.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:34.072" status="PASS" starttime="20170810 02:35:33.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:34.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:34.072" status="PASS" starttime="20170810 02:35:34.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:34.073" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:34.073" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:34.073" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:35:34.073" status="PASS" starttime="20170810 02:35:34.072"></status>
</kw>
<msg timestamp="20170810 02:35:34.073" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:35:34.073" status="PASS" starttime="20170810 02:35:33.701"></status>
</kw>
<msg timestamp="20170810 02:35:34.073" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:35:34.073" status="PASS" starttime="20170810 02:35:33.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:35:34.074" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:35:34.074" status="FAIL" starttime="20170810 02:35:34.074"></status>
</kw>
<status endtime="20170810 02:35:34.074" status="FAIL" starttime="20170810 02:35:33.700"></status>
</kw>
<status endtime="20170810 02:35:34.074" status="FAIL" starttime="20170810 02:35:31.572"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:44.080" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:44.080" status="PASS" starttime="20170810 02:35:44.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:44.081" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:44.081" status="PASS" starttime="20170810 02:35:44.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:44.081" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:44.081" status="PASS" starttime="20170810 02:35:44.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:44.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:44.082" status="PASS" starttime="20170810 02:35:44.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.275" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:44.275" status="PASS" starttime="20170810 02:35:44.083"></status>
</kw>
<msg timestamp="20170810 02:35:44.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:44.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.275" status="PASS" starttime="20170810 02:35:44.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.276" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.276" status="PASS" starttime="20170810 02:35:44.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.276" status="PASS" starttime="20170810 02:35:44.276"></status>
</kw>
<status endtime="20170810 02:35:44.277" status="PASS" starttime="20170810 02:35:44.079"></status>
</kw>
<status endtime="20170810 02:35:44.277" status="PASS" starttime="20170810 02:35:44.078"></status>
</kw>
<status endtime="20170810 02:35:44.277" status="PASS" starttime="20170810 02:35:44.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:44.277" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:35:44.277" status="PASS" starttime="20170810 02:35:44.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:44.280" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:44.280" status="PASS" starttime="20170810 02:35:44.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:44.281" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:44.281" status="PASS" starttime="20170810 02:35:44.280"></status>
</kw>
<status endtime="20170810 02:35:44.281" status="PASS" starttime="20170810 02:35:44.280"></status>
</kw>
<status endtime="20170810 02:35:44.281" status="PASS" starttime="20170810 02:35:44.278"></status>
</kw>
<status endtime="20170810 02:35:44.281" status="PASS" starttime="20170810 02:35:44.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:44.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:44.344" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.344" status="PASS" starttime="20170810 02:35:44.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:44.346" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:44.346" status="PASS" starttime="20170810 02:35:44.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:44.346" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:44.347" status="PASS" starttime="20170810 02:35:44.346"></status>
</kw>
<status endtime="20170810 02:35:44.347" status="PASS" starttime="20170810 02:35:44.346"></status>
</kw>
<status endtime="20170810 02:35:44.347" status="PASS" starttime="20170810 02:35:44.345"></status>
</kw>
<status endtime="20170810 02:35:44.347" status="PASS" starttime="20170810 02:35:44.344"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:44.347" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:44.347" status="PASS" starttime="20170810 02:35:44.347"></status>
</kw>
<msg timestamp="20170810 02:35:44.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.348" status="PASS" starttime="20170810 02:35:44.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.348" status="PASS" starttime="20170810 02:35:44.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:44.349" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:44.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:44.349" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:35:44.349" status="PASS" starttime="20170810 02:35:44.349"></status>
</kw>
<msg timestamp="20170810 02:35:44.349" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:35:44.349" status="PASS" starttime="20170810 02:35:44.076"></status>
</kw>
<msg timestamp="20170810 02:35:44.350" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:35:44.350" status="PASS" starttime="20170810 02:35:44.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:35:44.350" status="PASS" starttime="20170810 02:35:44.350"></status>
</kw>
<status endtime="20170810 02:35:44.350" status="PASS" starttime="20170810 02:35:44.075"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:44.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:44.354" status="PASS" starttime="20170810 02:35:44.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:44.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:44.355" status="PASS" starttime="20170810 02:35:44.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:44.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:44.355" status="PASS" starttime="20170810 02:35:44.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:44.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:44.356" status="PASS" starttime="20170810 02:35:44.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:44.547" status="PASS" starttime="20170810 02:35:44.357"></status>
</kw>
<msg timestamp="20170810 02:35:44.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:44.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.548" status="PASS" starttime="20170810 02:35:44.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.548" status="PASS" starttime="20170810 02:35:44.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.549" status="PASS" starttime="20170810 02:35:44.549"></status>
</kw>
<status endtime="20170810 02:35:44.549" status="PASS" starttime="20170810 02:35:44.353"></status>
</kw>
<status endtime="20170810 02:35:44.549" status="PASS" starttime="20170810 02:35:44.353"></status>
</kw>
<status endtime="20170810 02:35:44.549" status="PASS" starttime="20170810 02:35:44.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:44.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:35:44.550" status="PASS" starttime="20170810 02:35:44.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:44.552" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:44.552" status="PASS" starttime="20170810 02:35:44.551"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:44.553" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:44.553" status="PASS" starttime="20170810 02:35:44.553"></status>
</kw>
<status endtime="20170810 02:35:44.553" status="PASS" starttime="20170810 02:35:44.552"></status>
</kw>
<status endtime="20170810 02:35:44.553" status="PASS" starttime="20170810 02:35:44.551"></status>
</kw>
<status endtime="20170810 02:35:44.553" status="PASS" starttime="20170810 02:35:44.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:44.678" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:44.678" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.678" status="PASS" starttime="20170810 02:35:44.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:44.680" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:44.680" status="PASS" starttime="20170810 02:35:44.679"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:44.681" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:44.681" status="PASS" starttime="20170810 02:35:44.680"></status>
</kw>
<status endtime="20170810 02:35:44.681" status="PASS" starttime="20170810 02:35:44.680"></status>
</kw>
<status endtime="20170810 02:35:44.681" status="PASS" starttime="20170810 02:35:44.679"></status>
</kw>
<status endtime="20170810 02:35:44.681" status="PASS" starttime="20170810 02:35:44.678"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:44.681" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:44.682" status="PASS" starttime="20170810 02:35:44.681"></status>
</kw>
<msg timestamp="20170810 02:35:44.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.682" status="PASS" starttime="20170810 02:35:44.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.682" status="PASS" starttime="20170810 02:35:44.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:44.683" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:44.683" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:44.683" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:35:44.683" status="PASS" starttime="20170810 02:35:44.683"></status>
</kw>
<msg timestamp="20170810 02:35:44.683" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:35:44.683" status="PASS" starttime="20170810 02:35:44.351"></status>
</kw>
<msg timestamp="20170810 02:35:44.684" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:35:44.684" status="PASS" starttime="20170810 02:35:44.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:35:44.684" status="PASS" starttime="20170810 02:35:44.684"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:44.689" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:44.689" status="PASS" starttime="20170810 02:35:44.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:44.690" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:44.690" status="PASS" starttime="20170810 02:35:44.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:44.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:44.690" status="PASS" starttime="20170810 02:35:44.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:44.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:44.691" status="PASS" starttime="20170810 02:35:44.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:44.940" status="PASS" starttime="20170810 02:35:44.691"></status>
</kw>
<msg timestamp="20170810 02:35:44.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:44.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:44.941" status="PASS" starttime="20170810 02:35:44.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.941" status="PASS" starttime="20170810 02:35:44.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:44.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:44.942" status="PASS" starttime="20170810 02:35:44.942"></status>
</kw>
<status endtime="20170810 02:35:44.942" status="PASS" starttime="20170810 02:35:44.687"></status>
</kw>
<status endtime="20170810 02:35:44.942" status="PASS" starttime="20170810 02:35:44.687"></status>
</kw>
<status endtime="20170810 02:35:44.942" status="PASS" starttime="20170810 02:35:44.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:44.943" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:35:44.943" status="PASS" starttime="20170810 02:35:44.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:44.945" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:35:44.945" status="PASS" starttime="20170810 02:35:44.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:44.946" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:35:44.946" status="PASS" starttime="20170810 02:35:44.946"></status>
</kw>
<status endtime="20170810 02:35:44.946" status="PASS" starttime="20170810 02:35:44.945"></status>
</kw>
<status endtime="20170810 02:35:44.946" status="PASS" starttime="20170810 02:35:44.944"></status>
</kw>
<status endtime="20170810 02:35:44.946" status="PASS" starttime="20170810 02:35:44.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:45.024" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:35:45.024" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:45.024" status="PASS" starttime="20170810 02:35:44.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:45.026" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:45.026" status="PASS" starttime="20170810 02:35:45.025"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:45.027" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:45.027" status="PASS" starttime="20170810 02:35:45.027"></status>
</kw>
<status endtime="20170810 02:35:45.027" status="PASS" starttime="20170810 02:35:45.026"></status>
</kw>
<status endtime="20170810 02:35:45.027" status="PASS" starttime="20170810 02:35:45.025"></status>
</kw>
<status endtime="20170810 02:35:45.027" status="PASS" starttime="20170810 02:35:45.025"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:45.028" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:45.028" status="PASS" starttime="20170810 02:35:45.028"></status>
</kw>
<msg timestamp="20170810 02:35:45.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:45.028" status="PASS" starttime="20170810 02:35:44.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:45.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:45.029" status="PASS" starttime="20170810 02:35:45.028"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:45.029" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:45.029" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:45.029" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:35:45.029" status="PASS" starttime="20170810 02:35:45.029"></status>
</kw>
<msg timestamp="20170810 02:35:45.030" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:35:45.030" status="PASS" starttime="20170810 02:35:44.685"></status>
</kw>
<msg timestamp="20170810 02:35:45.030" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:35:45.030" status="PASS" starttime="20170810 02:35:44.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:35:45.031" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:35:45.031" status="FAIL" starttime="20170810 02:35:45.030"></status>
</kw>
<status endtime="20170810 02:35:45.031" status="FAIL" starttime="20170810 02:35:44.684"></status>
</kw>
<status endtime="20170810 02:35:45.031" status="FAIL" starttime="20170810 02:35:44.075"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:55.036" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:55.036" status="PASS" starttime="20170810 02:35:55.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:55.037" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:55.037" status="PASS" starttime="20170810 02:35:55.037"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:55.038" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:55.038" status="PASS" starttime="20170810 02:35:55.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:55.038" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:55.038" status="PASS" starttime="20170810 02:35:55.038"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:55.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:55.501" status="PASS" starttime="20170810 02:35:55.039"></status>
</kw>
<msg timestamp="20170810 02:35:55.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:55.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:55.501" status="PASS" starttime="20170810 02:35:55.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:55.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:55.502" status="PASS" starttime="20170810 02:35:55.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:55.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:55.503" status="PASS" starttime="20170810 02:35:55.502"></status>
</kw>
<status endtime="20170810 02:35:55.503" status="PASS" starttime="20170810 02:35:55.035"></status>
</kw>
<status endtime="20170810 02:35:55.503" status="PASS" starttime="20170810 02:35:55.035"></status>
</kw>
<status endtime="20170810 02:35:55.503" status="PASS" starttime="20170810 02:35:55.034"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:55.503" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:35:55.503" status="PASS" starttime="20170810 02:35:55.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:55.506" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:55.506" status="PASS" starttime="20170810 02:35:55.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:55.507" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:55.507" status="PASS" starttime="20170810 02:35:55.506"></status>
</kw>
<status endtime="20170810 02:35:55.507" status="PASS" starttime="20170810 02:35:55.506"></status>
</kw>
<status endtime="20170810 02:35:55.507" status="PASS" starttime="20170810 02:35:55.504"></status>
</kw>
<status endtime="20170810 02:35:55.507" status="PASS" starttime="20170810 02:35:55.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:56.078" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:56.079" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:56.079" status="PASS" starttime="20170810 02:35:55.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:56.080" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:56.080" status="PASS" starttime="20170810 02:35:56.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:56.081" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:56.081" status="PASS" starttime="20170810 02:35:56.081"></status>
</kw>
<status endtime="20170810 02:35:56.081" status="PASS" starttime="20170810 02:35:56.081"></status>
</kw>
<status endtime="20170810 02:35:56.082" status="PASS" starttime="20170810 02:35:56.079"></status>
</kw>
<status endtime="20170810 02:35:56.082" status="PASS" starttime="20170810 02:35:56.079"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:56.082" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:56.082" status="PASS" starttime="20170810 02:35:56.082"></status>
</kw>
<msg timestamp="20170810 02:35:56.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:56.082" status="PASS" starttime="20170810 02:35:55.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:56.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:56.083" status="PASS" starttime="20170810 02:35:56.083"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:56.083" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:56.084" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:56.084" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:35:56.084" status="PASS" starttime="20170810 02:35:56.083"></status>
</kw>
<msg timestamp="20170810 02:35:56.084" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:35:56.084" status="PASS" starttime="20170810 02:35:55.033"></status>
</kw>
<msg timestamp="20170810 02:35:56.084" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:35:56.084" status="PASS" starttime="20170810 02:35:55.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:35:56.085" status="PASS" starttime="20170810 02:35:56.085"></status>
</kw>
<status endtime="20170810 02:35:56.085" status="PASS" starttime="20170810 02:35:55.032"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:56.089" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:56.089" status="PASS" starttime="20170810 02:35:56.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:56.090" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:56.090" status="PASS" starttime="20170810 02:35:56.089"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:56.090" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:56.090" status="PASS" starttime="20170810 02:35:56.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:56.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:56.091" status="PASS" starttime="20170810 02:35:56.091"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:56.630" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:56.630" status="PASS" starttime="20170810 02:35:56.092"></status>
</kw>
<msg timestamp="20170810 02:35:56.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:56.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:56.630" status="PASS" starttime="20170810 02:35:56.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:56.631" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:56.631" status="PASS" starttime="20170810 02:35:56.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:56.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:56.632" status="PASS" starttime="20170810 02:35:56.631"></status>
</kw>
<status endtime="20170810 02:35:56.632" status="PASS" starttime="20170810 02:35:56.088"></status>
</kw>
<status endtime="20170810 02:35:56.632" status="PASS" starttime="20170810 02:35:56.087"></status>
</kw>
<status endtime="20170810 02:35:56.632" status="PASS" starttime="20170810 02:35:56.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:56.633" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:35:56.633" status="PASS" starttime="20170810 02:35:56.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:56.635" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:56.635" status="PASS" starttime="20170810 02:35:56.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:56.636" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:35:56.636" status="PASS" starttime="20170810 02:35:56.635"></status>
</kw>
<status endtime="20170810 02:35:56.636" status="PASS" starttime="20170810 02:35:56.635"></status>
</kw>
<status endtime="20170810 02:35:56.636" status="PASS" starttime="20170810 02:35:56.633"></status>
</kw>
<status endtime="20170810 02:35:56.636" status="PASS" starttime="20170810 02:35:56.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:57.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:35:57.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:57.415" status="PASS" starttime="20170810 02:35:56.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:57.418" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:57.418" status="PASS" starttime="20170810 02:35:57.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:57.419" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:57.419" status="PASS" starttime="20170810 02:35:57.418"></status>
</kw>
<status endtime="20170810 02:35:57.419" status="PASS" starttime="20170810 02:35:57.418"></status>
</kw>
<status endtime="20170810 02:35:57.419" status="PASS" starttime="20170810 02:35:57.416"></status>
</kw>
<status endtime="20170810 02:35:57.419" status="PASS" starttime="20170810 02:35:57.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:57.419" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:57.419" status="PASS" starttime="20170810 02:35:57.419"></status>
</kw>
<msg timestamp="20170810 02:35:57.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:57.420" status="PASS" starttime="20170810 02:35:56.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:57.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:57.420" status="PASS" starttime="20170810 02:35:57.420"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:57.421" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:57.421" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:57.421" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:35:57.421" status="PASS" starttime="20170810 02:35:57.421"></status>
</kw>
<msg timestamp="20170810 02:35:57.421" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:35:57.421" status="PASS" starttime="20170810 02:35:56.086"></status>
</kw>
<msg timestamp="20170810 02:35:57.422" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:35:57.422" status="PASS" starttime="20170810 02:35:56.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:35:57.422" status="PASS" starttime="20170810 02:35:57.422"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:35:57.426" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:35:57.427" status="PASS" starttime="20170810 02:35:57.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:35:57.427" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:35:57.427" status="PASS" starttime="20170810 02:35:57.427"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:35:57.428" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:35:57.428" status="PASS" starttime="20170810 02:35:57.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:35:57.429" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:35:57.429" status="PASS" starttime="20170810 02:35:57.428"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:35:57.875" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:35:57.875" status="PASS" starttime="20170810 02:35:57.430"></status>
</kw>
<msg timestamp="20170810 02:35:57.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:35:57.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:57.875" status="PASS" starttime="20170810 02:35:57.429"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:35:57.876" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:57.876" status="PASS" starttime="20170810 02:35:57.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:57.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:57.876" status="PASS" starttime="20170810 02:35:57.876"></status>
</kw>
<status endtime="20170810 02:35:57.877" status="PASS" starttime="20170810 02:35:57.425"></status>
</kw>
<status endtime="20170810 02:35:57.877" status="PASS" starttime="20170810 02:35:57.425"></status>
</kw>
<status endtime="20170810 02:35:57.877" status="PASS" starttime="20170810 02:35:57.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:35:57.877" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:35:57.877" status="PASS" starttime="20170810 02:35:57.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:57.879" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:35:57.879" status="PASS" starttime="20170810 02:35:57.879"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:57.880" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:35:57.880" status="PASS" starttime="20170810 02:35:57.880"></status>
</kw>
<status endtime="20170810 02:35:57.881" status="PASS" starttime="20170810 02:35:57.880"></status>
</kw>
<status endtime="20170810 02:35:57.881" status="PASS" starttime="20170810 02:35:57.878"></status>
</kw>
<status endtime="20170810 02:35:57.881" status="PASS" starttime="20170810 02:35:57.878"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:35:58.229" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:35:58.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:58.230" status="PASS" starttime="20170810 02:35:57.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:35:58.232" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:58.232" status="PASS" starttime="20170810 02:35:58.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:35:58.233" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:35:58.234" status="PASS" starttime="20170810 02:35:58.233"></status>
</kw>
<status endtime="20170810 02:35:58.234" status="PASS" starttime="20170810 02:35:58.232"></status>
</kw>
<status endtime="20170810 02:35:58.234" status="PASS" starttime="20170810 02:35:58.231"></status>
</kw>
<status endtime="20170810 02:35:58.234" status="PASS" starttime="20170810 02:35:58.230"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:35:58.234" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:35:58.234" status="PASS" starttime="20170810 02:35:58.234"></status>
</kw>
<msg timestamp="20170810 02:35:58.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:35:58.234" status="PASS" starttime="20170810 02:35:57.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:35:58.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:35:58.235" status="PASS" starttime="20170810 02:35:58.235"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:35:58.236" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:35:58.236" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:35:58.236" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:35:58.236" status="PASS" starttime="20170810 02:35:58.235"></status>
</kw>
<msg timestamp="20170810 02:35:58.236" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:35:58.236" status="PASS" starttime="20170810 02:35:57.423"></status>
</kw>
<msg timestamp="20170810 02:35:58.236" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:35:58.236" status="PASS" starttime="20170810 02:35:57.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:35:58.237" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:35:58.237" status="FAIL" starttime="20170810 02:35:58.237"></status>
</kw>
<status endtime="20170810 02:35:58.237" status="FAIL" starttime="20170810 02:35:57.422"></status>
</kw>
<status endtime="20170810 02:35:58.238" status="FAIL" starttime="20170810 02:35:55.031"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:08.242" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:08.243" status="PASS" starttime="20170810 02:36:08.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:08.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:08.243" status="PASS" starttime="20170810 02:36:08.243"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:08.244" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:08.244" status="PASS" starttime="20170810 02:36:08.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:08.245" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:08.245" status="PASS" starttime="20170810 02:36:08.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:08.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:08.654" status="PASS" starttime="20170810 02:36:08.245"></status>
</kw>
<msg timestamp="20170810 02:36:08.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:08.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:08.654" status="PASS" starttime="20170810 02:36:08.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:08.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:08.655" status="PASS" starttime="20170810 02:36:08.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:08.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:08.655" status="PASS" starttime="20170810 02:36:08.655"></status>
</kw>
<status endtime="20170810 02:36:08.655" status="PASS" starttime="20170810 02:36:08.241"></status>
</kw>
<status endtime="20170810 02:36:08.655" status="PASS" starttime="20170810 02:36:08.241"></status>
</kw>
<status endtime="20170810 02:36:08.656" status="PASS" starttime="20170810 02:36:08.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:08.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:36:08.656" status="PASS" starttime="20170810 02:36:08.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:08.658" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:08.658" status="PASS" starttime="20170810 02:36:08.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:08.659" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:08.659" status="PASS" starttime="20170810 02:36:08.659"></status>
</kw>
<status endtime="20170810 02:36:08.659" status="PASS" starttime="20170810 02:36:08.658"></status>
</kw>
<status endtime="20170810 02:36:08.660" status="PASS" starttime="20170810 02:36:08.657"></status>
</kw>
<status endtime="20170810 02:36:08.660" status="PASS" starttime="20170810 02:36:08.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:09.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:09.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:09.381" status="PASS" starttime="20170810 02:36:08.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:09.383" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:09.383" status="PASS" starttime="20170810 02:36:09.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:09.384" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:09.384" status="PASS" starttime="20170810 02:36:09.384"></status>
</kw>
<status endtime="20170810 02:36:09.384" status="PASS" starttime="20170810 02:36:09.383"></status>
</kw>
<status endtime="20170810 02:36:09.384" status="PASS" starttime="20170810 02:36:09.382"></status>
</kw>
<status endtime="20170810 02:36:09.384" status="PASS" starttime="20170810 02:36:09.382"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:09.385" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:09.385" status="PASS" starttime="20170810 02:36:09.385"></status>
</kw>
<msg timestamp="20170810 02:36:09.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:09.385" status="PASS" starttime="20170810 02:36:08.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:09.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:09.386" status="PASS" starttime="20170810 02:36:09.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:09.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:09.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:09.386" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:36:09.387" status="PASS" starttime="20170810 02:36:09.386"></status>
</kw>
<msg timestamp="20170810 02:36:09.387" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:36:09.387" status="PASS" starttime="20170810 02:36:08.239"></status>
</kw>
<msg timestamp="20170810 02:36:09.387" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:36:09.387" status="PASS" starttime="20170810 02:36:08.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:36:09.388" status="PASS" starttime="20170810 02:36:09.387"></status>
</kw>
<status endtime="20170810 02:36:09.388" status="PASS" starttime="20170810 02:36:08.238"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:09.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:09.392" status="PASS" starttime="20170810 02:36:09.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:09.393" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:09.393" status="PASS" starttime="20170810 02:36:09.392"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:09.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:09.393" status="PASS" starttime="20170810 02:36:09.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:09.394" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:09.394" status="PASS" starttime="20170810 02:36:09.394"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:09.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:09.912" status="PASS" starttime="20170810 02:36:09.395"></status>
</kw>
<msg timestamp="20170810 02:36:09.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:09.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:09.913" status="PASS" starttime="20170810 02:36:09.394"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:09.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:09.913" status="PASS" starttime="20170810 02:36:09.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:09.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:09.914" status="PASS" starttime="20170810 02:36:09.914"></status>
</kw>
<status endtime="20170810 02:36:09.914" status="PASS" starttime="20170810 02:36:09.390"></status>
</kw>
<status endtime="20170810 02:36:09.914" status="PASS" starttime="20170810 02:36:09.390"></status>
</kw>
<status endtime="20170810 02:36:09.914" status="PASS" starttime="20170810 02:36:09.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:09.915" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:36:09.915" status="PASS" starttime="20170810 02:36:09.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:09.917" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:09.917" status="PASS" starttime="20170810 02:36:09.916"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:09.918" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:09.918" status="PASS" starttime="20170810 02:36:09.918"></status>
</kw>
<status endtime="20170810 02:36:09.918" status="PASS" starttime="20170810 02:36:09.917"></status>
</kw>
<status endtime="20170810 02:36:09.918" status="PASS" starttime="20170810 02:36:09.916"></status>
</kw>
<status endtime="20170810 02:36:09.918" status="PASS" starttime="20170810 02:36:09.915"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:10.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:10.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:10.448" status="PASS" starttime="20170810 02:36:09.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:10.451" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:10.451" status="PASS" starttime="20170810 02:36:10.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:10.452" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:10.452" status="PASS" starttime="20170810 02:36:10.452"></status>
</kw>
<status endtime="20170810 02:36:10.452" status="PASS" starttime="20170810 02:36:10.451"></status>
</kw>
<status endtime="20170810 02:36:10.452" status="PASS" starttime="20170810 02:36:10.449"></status>
</kw>
<status endtime="20170810 02:36:10.453" status="PASS" starttime="20170810 02:36:10.449"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:10.453" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:10.453" status="PASS" starttime="20170810 02:36:10.453"></status>
</kw>
<msg timestamp="20170810 02:36:10.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:10.453" status="PASS" starttime="20170810 02:36:09.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:10.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:10.454" status="PASS" starttime="20170810 02:36:10.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:10.454" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:10.455" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:10.455" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:36:10.455" status="PASS" starttime="20170810 02:36:10.454"></status>
</kw>
<msg timestamp="20170810 02:36:10.455" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:36:10.455" status="PASS" starttime="20170810 02:36:09.388"></status>
</kw>
<msg timestamp="20170810 02:36:10.455" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:36:10.455" status="PASS" starttime="20170810 02:36:09.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:36:10.456" status="PASS" starttime="20170810 02:36:10.456"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:10.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:10.460" status="PASS" starttime="20170810 02:36:10.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:10.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:10.461" status="PASS" starttime="20170810 02:36:10.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:10.462" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:10.462" status="PASS" starttime="20170810 02:36:10.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:10.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:10.462" status="PASS" starttime="20170810 02:36:10.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:10.638" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:10.638" status="PASS" starttime="20170810 02:36:10.463"></status>
</kw>
<msg timestamp="20170810 02:36:10.638" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:10.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:10.638" status="PASS" starttime="20170810 02:36:10.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:10.639" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:10.639" status="PASS" starttime="20170810 02:36:10.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:10.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:10.639" status="PASS" starttime="20170810 02:36:10.639"></status>
</kw>
<status endtime="20170810 02:36:10.640" status="PASS" starttime="20170810 02:36:10.459"></status>
</kw>
<status endtime="20170810 02:36:10.640" status="PASS" starttime="20170810 02:36:10.459"></status>
</kw>
<status endtime="20170810 02:36:10.640" status="PASS" starttime="20170810 02:36:10.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:10.640" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:36:10.640" status="PASS" starttime="20170810 02:36:10.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:10.642" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:10.642" status="PASS" starttime="20170810 02:36:10.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:10.643" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:10.643" status="PASS" starttime="20170810 02:36:10.643"></status>
</kw>
<status endtime="20170810 02:36:10.644" status="PASS" starttime="20170810 02:36:10.643"></status>
</kw>
<status endtime="20170810 02:36:10.644" status="PASS" starttime="20170810 02:36:10.641"></status>
</kw>
<status endtime="20170810 02:36:10.644" status="PASS" starttime="20170810 02:36:10.641"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:11.422" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:36:11.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:11.423" status="PASS" starttime="20170810 02:36:10.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:11.424" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:11.425" status="PASS" starttime="20170810 02:36:11.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:11.425" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:11.425" status="PASS" starttime="20170810 02:36:11.425"></status>
</kw>
<status endtime="20170810 02:36:11.426" status="PASS" starttime="20170810 02:36:11.425"></status>
</kw>
<status endtime="20170810 02:36:11.426" status="PASS" starttime="20170810 02:36:11.423"></status>
</kw>
<status endtime="20170810 02:36:11.426" status="PASS" starttime="20170810 02:36:11.423"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:11.426" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:11.426" status="PASS" starttime="20170810 02:36:11.426"></status>
</kw>
<msg timestamp="20170810 02:36:11.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:11.426" status="PASS" starttime="20170810 02:36:10.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:11.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:11.427" status="PASS" starttime="20170810 02:36:11.427"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:11.428" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:11.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:11.428" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:36:11.428" status="PASS" starttime="20170810 02:36:11.427"></status>
</kw>
<msg timestamp="20170810 02:36:11.428" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:36:11.428" status="PASS" starttime="20170810 02:36:10.457"></status>
</kw>
<msg timestamp="20170810 02:36:11.428" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:36:11.428" status="PASS" starttime="20170810 02:36:10.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:36:11.429" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:36:11.429" status="FAIL" starttime="20170810 02:36:11.429"></status>
</kw>
<status endtime="20170810 02:36:11.429" status="FAIL" starttime="20170810 02:36:10.456"></status>
</kw>
<status endtime="20170810 02:36:11.429" status="FAIL" starttime="20170810 02:36:08.238"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:21.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:21.435" status="PASS" starttime="20170810 02:36:21.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:21.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:21.435" status="PASS" starttime="20170810 02:36:21.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:21.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:21.436" status="PASS" starttime="20170810 02:36:21.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:21.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:21.437" status="PASS" starttime="20170810 02:36:21.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:21.846" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:21.846" status="PASS" starttime="20170810 02:36:21.437"></status>
</kw>
<msg timestamp="20170810 02:36:21.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:21.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:21.846" status="PASS" starttime="20170810 02:36:21.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:21.847" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:21.847" status="PASS" starttime="20170810 02:36:21.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:21.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:21.848" status="PASS" starttime="20170810 02:36:21.847"></status>
</kw>
<status endtime="20170810 02:36:21.848" status="PASS" starttime="20170810 02:36:21.433"></status>
</kw>
<status endtime="20170810 02:36:21.848" status="PASS" starttime="20170810 02:36:21.433"></status>
</kw>
<status endtime="20170810 02:36:21.848" status="PASS" starttime="20170810 02:36:21.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:21.849" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:36:21.849" status="PASS" starttime="20170810 02:36:21.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:21.851" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:21.851" status="PASS" starttime="20170810 02:36:21.850"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:21.852" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:21.852" status="PASS" starttime="20170810 02:36:21.851"></status>
</kw>
<status endtime="20170810 02:36:21.852" status="PASS" starttime="20170810 02:36:21.851"></status>
</kw>
<status endtime="20170810 02:36:21.852" status="PASS" starttime="20170810 02:36:21.849"></status>
</kw>
<status endtime="20170810 02:36:21.852" status="PASS" starttime="20170810 02:36:21.849"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:22.214" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:22.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:22.214" status="PASS" starttime="20170810 02:36:21.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:22.216" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:22.216" status="PASS" starttime="20170810 02:36:22.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:22.217" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:22.217" status="PASS" starttime="20170810 02:36:22.217"></status>
</kw>
<status endtime="20170810 02:36:22.217" status="PASS" starttime="20170810 02:36:22.216"></status>
</kw>
<status endtime="20170810 02:36:22.217" status="PASS" starttime="20170810 02:36:22.215"></status>
</kw>
<status endtime="20170810 02:36:22.217" status="PASS" starttime="20170810 02:36:22.215"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:22.218" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:22.218" status="PASS" starttime="20170810 02:36:22.218"></status>
</kw>
<msg timestamp="20170810 02:36:22.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:22.218" status="PASS" starttime="20170810 02:36:21.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:22.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:22.219" status="PASS" starttime="20170810 02:36:22.218"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:22.219" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:22.219" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:22.219" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:36:22.220" status="PASS" starttime="20170810 02:36:22.219"></status>
</kw>
<msg timestamp="20170810 02:36:22.220" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:36:22.220" status="PASS" starttime="20170810 02:36:21.431"></status>
</kw>
<msg timestamp="20170810 02:36:22.220" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:36:22.220" status="PASS" starttime="20170810 02:36:21.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:36:22.221" status="PASS" starttime="20170810 02:36:22.220"></status>
</kw>
<status endtime="20170810 02:36:22.221" status="PASS" starttime="20170810 02:36:21.430"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:22.224" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:22.225" status="PASS" starttime="20170810 02:36:22.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:22.226" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:22.226" status="PASS" starttime="20170810 02:36:22.225"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:22.226" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:22.226" status="PASS" starttime="20170810 02:36:22.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:22.227" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:22.227" status="PASS" starttime="20170810 02:36:22.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:22.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:22.517" status="PASS" starttime="20170810 02:36:22.228"></status>
</kw>
<msg timestamp="20170810 02:36:22.518" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:22.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:22.518" status="PASS" starttime="20170810 02:36:22.227"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:22.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:22.518" status="PASS" starttime="20170810 02:36:22.518"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:22.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:22.519" status="PASS" starttime="20170810 02:36:22.519"></status>
</kw>
<status endtime="20170810 02:36:22.519" status="PASS" starttime="20170810 02:36:22.223"></status>
</kw>
<status endtime="20170810 02:36:22.519" status="PASS" starttime="20170810 02:36:22.223"></status>
</kw>
<status endtime="20170810 02:36:22.519" status="PASS" starttime="20170810 02:36:22.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:22.520" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:36:22.520" status="PASS" starttime="20170810 02:36:22.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:22.522" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:22.522" status="PASS" starttime="20170810 02:36:22.521"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:22.523" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:22.523" status="PASS" starttime="20170810 02:36:22.523"></status>
</kw>
<status endtime="20170810 02:36:22.523" status="PASS" starttime="20170810 02:36:22.522"></status>
</kw>
<status endtime="20170810 02:36:22.523" status="PASS" starttime="20170810 02:36:22.521"></status>
</kw>
<status endtime="20170810 02:36:22.523" status="PASS" starttime="20170810 02:36:22.520"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:23.216" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:23.216" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:23.216" status="PASS" starttime="20170810 02:36:22.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:23.218" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:23.218" status="PASS" starttime="20170810 02:36:23.217"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:23.219" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:23.219" status="PASS" starttime="20170810 02:36:23.219"></status>
</kw>
<status endtime="20170810 02:36:23.219" status="PASS" starttime="20170810 02:36:23.218"></status>
</kw>
<status endtime="20170810 02:36:23.219" status="PASS" starttime="20170810 02:36:23.217"></status>
</kw>
<status endtime="20170810 02:36:23.219" status="PASS" starttime="20170810 02:36:23.216"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:23.220" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:23.220" status="PASS" starttime="20170810 02:36:23.219"></status>
</kw>
<msg timestamp="20170810 02:36:23.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:23.220" status="PASS" starttime="20170810 02:36:22.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:23.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:23.221" status="PASS" starttime="20170810 02:36:23.220"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:23.221" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:23.221" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:23.221" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:36:23.221" status="PASS" starttime="20170810 02:36:23.221"></status>
</kw>
<msg timestamp="20170810 02:36:23.222" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:36:23.222" status="PASS" starttime="20170810 02:36:22.221"></status>
</kw>
<msg timestamp="20170810 02:36:23.222" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:36:23.222" status="PASS" starttime="20170810 02:36:22.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:36:23.222" status="PASS" starttime="20170810 02:36:23.222"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:23.226" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:23.227" status="PASS" starttime="20170810 02:36:23.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:23.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:23.228" status="PASS" starttime="20170810 02:36:23.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:23.228" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:23.228" status="PASS" starttime="20170810 02:36:23.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:23.229" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:23.229" status="PASS" starttime="20170810 02:36:23.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:23.550" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:23.551" status="PASS" starttime="20170810 02:36:23.230"></status>
</kw>
<msg timestamp="20170810 02:36:23.551" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:23.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:23.551" status="PASS" starttime="20170810 02:36:23.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:23.551" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:23.551" status="PASS" starttime="20170810 02:36:23.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:23.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:23.552" status="PASS" starttime="20170810 02:36:23.552"></status>
</kw>
<status endtime="20170810 02:36:23.552" status="PASS" starttime="20170810 02:36:23.226"></status>
</kw>
<status endtime="20170810 02:36:23.552" status="PASS" starttime="20170810 02:36:23.225"></status>
</kw>
<status endtime="20170810 02:36:23.552" status="PASS" starttime="20170810 02:36:23.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:23.553" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:36:23.553" status="PASS" starttime="20170810 02:36:23.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:23.555" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:23.555" status="PASS" starttime="20170810 02:36:23.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:23.556" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:23.556" status="PASS" starttime="20170810 02:36:23.556"></status>
</kw>
<status endtime="20170810 02:36:23.556" status="PASS" starttime="20170810 02:36:23.555"></status>
</kw>
<status endtime="20170810 02:36:23.556" status="PASS" starttime="20170810 02:36:23.554"></status>
</kw>
<status endtime="20170810 02:36:23.556" status="PASS" starttime="20170810 02:36:23.553"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:24.193" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:36:24.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:24.193" status="PASS" starttime="20170810 02:36:23.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:24.195" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:24.195" status="PASS" starttime="20170810 02:36:24.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:24.196" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:24.196" status="PASS" starttime="20170810 02:36:24.196"></status>
</kw>
<status endtime="20170810 02:36:24.196" status="PASS" starttime="20170810 02:36:24.195"></status>
</kw>
<status endtime="20170810 02:36:24.196" status="PASS" starttime="20170810 02:36:24.194"></status>
</kw>
<status endtime="20170810 02:36:24.196" status="PASS" starttime="20170810 02:36:24.193"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:24.197" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:24.197" status="PASS" starttime="20170810 02:36:24.197"></status>
</kw>
<msg timestamp="20170810 02:36:24.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:24.197" status="PASS" starttime="20170810 02:36:23.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:24.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:24.198" status="PASS" starttime="20170810 02:36:24.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:24.198" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:24.198" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:24.198" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:36:24.198" status="PASS" starttime="20170810 02:36:24.198"></status>
</kw>
<msg timestamp="20170810 02:36:24.199" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:36:24.199" status="PASS" starttime="20170810 02:36:23.223"></status>
</kw>
<msg timestamp="20170810 02:36:24.199" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:36:24.199" status="PASS" starttime="20170810 02:36:23.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:36:24.200" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:36:24.200" status="FAIL" starttime="20170810 02:36:24.199"></status>
</kw>
<status endtime="20170810 02:36:24.200" status="FAIL" starttime="20170810 02:36:23.223"></status>
</kw>
<status endtime="20170810 02:36:24.200" status="FAIL" starttime="20170810 02:36:21.430"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:34.205" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:34.205" status="PASS" starttime="20170810 02:36:34.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:34.206" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:34.206" status="PASS" starttime="20170810 02:36:34.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:34.206" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:34.206" status="PASS" starttime="20170810 02:36:34.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:34.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:34.207" status="PASS" starttime="20170810 02:36:34.207"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:34.615" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:34.615" status="PASS" starttime="20170810 02:36:34.208"></status>
</kw>
<msg timestamp="20170810 02:36:34.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:34.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:34.616" status="PASS" starttime="20170810 02:36:34.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:34.616" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:34.616" status="PASS" starttime="20170810 02:36:34.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:34.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:34.617" status="PASS" starttime="20170810 02:36:34.617"></status>
</kw>
<status endtime="20170810 02:36:34.617" status="PASS" starttime="20170810 02:36:34.204"></status>
</kw>
<status endtime="20170810 02:36:34.617" status="PASS" starttime="20170810 02:36:34.203"></status>
</kw>
<status endtime="20170810 02:36:34.617" status="PASS" starttime="20170810 02:36:34.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:34.618" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:36:34.618" status="PASS" starttime="20170810 02:36:34.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:34.620" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:34.620" status="PASS" starttime="20170810 02:36:34.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:34.621" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:34.621" status="PASS" starttime="20170810 02:36:34.621"></status>
</kw>
<status endtime="20170810 02:36:34.621" status="PASS" starttime="20170810 02:36:34.620"></status>
</kw>
<status endtime="20170810 02:36:34.622" status="PASS" starttime="20170810 02:36:34.619"></status>
</kw>
<status endtime="20170810 02:36:34.622" status="PASS" starttime="20170810 02:36:34.618"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:35.485" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:35.485" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:35.485" status="PASS" starttime="20170810 02:36:34.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:35.488" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:35.488" status="PASS" starttime="20170810 02:36:35.487"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:35.489" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:35.490" status="PASS" starttime="20170810 02:36:35.489"></status>
</kw>
<status endtime="20170810 02:36:35.490" status="PASS" starttime="20170810 02:36:35.488"></status>
</kw>
<status endtime="20170810 02:36:35.490" status="PASS" starttime="20170810 02:36:35.487"></status>
</kw>
<status endtime="20170810 02:36:35.490" status="PASS" starttime="20170810 02:36:35.486"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:35.490" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:35.490" status="PASS" starttime="20170810 02:36:35.490"></status>
</kw>
<msg timestamp="20170810 02:36:35.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:35.491" status="PASS" starttime="20170810 02:36:34.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:35.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:35.491" status="PASS" starttime="20170810 02:36:35.491"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:35.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:35.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:35.492" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:36:35.492" status="PASS" starttime="20170810 02:36:35.491"></status>
</kw>
<msg timestamp="20170810 02:36:35.492" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:36:35.492" status="PASS" starttime="20170810 02:36:34.202"></status>
</kw>
<msg timestamp="20170810 02:36:35.492" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:36:35.493" status="PASS" starttime="20170810 02:36:34.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:36:35.493" status="PASS" starttime="20170810 02:36:35.493"></status>
</kw>
<status endtime="20170810 02:36:35.493" status="PASS" starttime="20170810 02:36:34.201"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:35.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:35.497" status="PASS" starttime="20170810 02:36:35.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:35.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:35.498" status="PASS" starttime="20170810 02:36:35.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:35.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:35.499" status="PASS" starttime="20170810 02:36:35.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:35.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:35.499" status="PASS" starttime="20170810 02:36:35.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:35.976" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:35.976" status="PASS" starttime="20170810 02:36:35.500"></status>
</kw>
<msg timestamp="20170810 02:36:35.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:35.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:35.976" status="PASS" starttime="20170810 02:36:35.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:35.977" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:35.977" status="PASS" starttime="20170810 02:36:35.976"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:35.977" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:35.977" status="PASS" starttime="20170810 02:36:35.977"></status>
</kw>
<status endtime="20170810 02:36:35.978" status="PASS" starttime="20170810 02:36:35.496"></status>
</kw>
<status endtime="20170810 02:36:35.978" status="PASS" starttime="20170810 02:36:35.495"></status>
</kw>
<status endtime="20170810 02:36:35.978" status="PASS" starttime="20170810 02:36:35.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:35.978" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:36:35.978" status="PASS" starttime="20170810 02:36:35.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:35.981" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:35.981" status="PASS" starttime="20170810 02:36:35.980"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:35.982" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:35.982" status="PASS" starttime="20170810 02:36:35.981"></status>
</kw>
<status endtime="20170810 02:36:35.982" status="PASS" starttime="20170810 02:36:35.981"></status>
</kw>
<status endtime="20170810 02:36:35.982" status="PASS" starttime="20170810 02:36:35.979"></status>
</kw>
<status endtime="20170810 02:36:35.982" status="PASS" starttime="20170810 02:36:35.979"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:36.679" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:36.680" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:36.680" status="PASS" starttime="20170810 02:36:35.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:36.682" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:36.682" status="PASS" starttime="20170810 02:36:36.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:36.682" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:36.683" status="PASS" starttime="20170810 02:36:36.682"></status>
</kw>
<status endtime="20170810 02:36:36.683" status="PASS" starttime="20170810 02:36:36.682"></status>
</kw>
<status endtime="20170810 02:36:36.683" status="PASS" starttime="20170810 02:36:36.680"></status>
</kw>
<status endtime="20170810 02:36:36.683" status="PASS" starttime="20170810 02:36:36.680"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:36.683" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:36.683" status="PASS" starttime="20170810 02:36:36.683"></status>
</kw>
<msg timestamp="20170810 02:36:36.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:36.684" status="PASS" starttime="20170810 02:36:35.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:36.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:36.684" status="PASS" starttime="20170810 02:36:36.684"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:36.685" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:36.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:36.685" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:36:36.685" status="PASS" starttime="20170810 02:36:36.684"></status>
</kw>
<msg timestamp="20170810 02:36:36.685" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:36:36.685" status="PASS" starttime="20170810 02:36:35.494"></status>
</kw>
<msg timestamp="20170810 02:36:36.685" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:36:36.686" status="PASS" starttime="20170810 02:36:35.493"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:36:36.686" status="PASS" starttime="20170810 02:36:36.686"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:36.692" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:36.692" status="PASS" starttime="20170810 02:36:36.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:36.693" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:36.693" status="PASS" starttime="20170810 02:36:36.693"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:36.694" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:36.694" status="PASS" starttime="20170810 02:36:36.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:36.695" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:36.695" status="PASS" starttime="20170810 02:36:36.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:37.105" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:37.105" status="PASS" starttime="20170810 02:36:36.696"></status>
</kw>
<msg timestamp="20170810 02:36:37.105" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:37.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:37.105" status="PASS" starttime="20170810 02:36:36.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:37.106" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:37.106" status="PASS" starttime="20170810 02:36:37.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:37.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:37.106" status="PASS" starttime="20170810 02:36:37.106"></status>
</kw>
<status endtime="20170810 02:36:37.107" status="PASS" starttime="20170810 02:36:36.691"></status>
</kw>
<status endtime="20170810 02:36:37.107" status="PASS" starttime="20170810 02:36:36.690"></status>
</kw>
<status endtime="20170810 02:36:37.107" status="PASS" starttime="20170810 02:36:36.689"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:37.107" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:36:37.107" status="PASS" starttime="20170810 02:36:37.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:37.109" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:37.109" status="PASS" starttime="20170810 02:36:37.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:37.110" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:37.111" status="PASS" starttime="20170810 02:36:37.110"></status>
</kw>
<status endtime="20170810 02:36:37.111" status="PASS" starttime="20170810 02:36:37.110"></status>
</kw>
<status endtime="20170810 02:36:37.111" status="PASS" starttime="20170810 02:36:37.108"></status>
</kw>
<status endtime="20170810 02:36:37.111" status="PASS" starttime="20170810 02:36:37.108"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:37.423" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:36:37.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:37.423" status="PASS" starttime="20170810 02:36:37.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:37.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:37.425" status="PASS" starttime="20170810 02:36:37.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:37.426" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:37.426" status="PASS" starttime="20170810 02:36:37.425"></status>
</kw>
<status endtime="20170810 02:36:37.426" status="PASS" starttime="20170810 02:36:37.425"></status>
</kw>
<status endtime="20170810 02:36:37.426" status="PASS" starttime="20170810 02:36:37.424"></status>
</kw>
<status endtime="20170810 02:36:37.426" status="PASS" starttime="20170810 02:36:37.423"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:37.426" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:37.427" status="PASS" starttime="20170810 02:36:37.426"></status>
</kw>
<msg timestamp="20170810 02:36:37.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:37.427" status="PASS" starttime="20170810 02:36:36.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:37.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:37.427" status="PASS" starttime="20170810 02:36:37.427"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:37.428" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:37.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:37.428" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:36:37.428" status="PASS" starttime="20170810 02:36:37.428"></status>
</kw>
<msg timestamp="20170810 02:36:37.428" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:36:37.428" status="PASS" starttime="20170810 02:36:36.687"></status>
</kw>
<msg timestamp="20170810 02:36:37.429" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:36:37.429" status="PASS" starttime="20170810 02:36:36.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:36:37.429" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:36:37.429" status="FAIL" starttime="20170810 02:36:37.429"></status>
</kw>
<status endtime="20170810 02:36:37.430" status="FAIL" starttime="20170810 02:36:36.686"></status>
</kw>
<status endtime="20170810 02:36:37.430" status="FAIL" starttime="20170810 02:36:34.200"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:47.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:47.435" status="PASS" starttime="20170810 02:36:47.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:47.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:47.435" status="PASS" starttime="20170810 02:36:47.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:47.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:47.436" status="PASS" starttime="20170810 02:36:47.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:47.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:47.437" status="PASS" starttime="20170810 02:36:47.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:47.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:47.787" status="PASS" starttime="20170810 02:36:47.437"></status>
</kw>
<msg timestamp="20170810 02:36:47.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:47.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:47.787" status="PASS" starttime="20170810 02:36:47.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:47.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:47.788" status="PASS" starttime="20170810 02:36:47.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:47.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:47.789" status="PASS" starttime="20170810 02:36:47.788"></status>
</kw>
<status endtime="20170810 02:36:47.789" status="PASS" starttime="20170810 02:36:47.434"></status>
</kw>
<status endtime="20170810 02:36:47.789" status="PASS" starttime="20170810 02:36:47.433"></status>
</kw>
<status endtime="20170810 02:36:47.789" status="PASS" starttime="20170810 02:36:47.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:47.790" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:36:47.790" status="PASS" starttime="20170810 02:36:47.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:47.792" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:47.792" status="PASS" starttime="20170810 02:36:47.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:47.793" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:47.793" status="PASS" starttime="20170810 02:36:47.792"></status>
</kw>
<status endtime="20170810 02:36:47.793" status="PASS" starttime="20170810 02:36:47.792"></status>
</kw>
<status endtime="20170810 02:36:47.793" status="PASS" starttime="20170810 02:36:47.790"></status>
</kw>
<status endtime="20170810 02:36:47.793" status="PASS" starttime="20170810 02:36:47.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:47.989" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:47.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:47.989" status="PASS" starttime="20170810 02:36:47.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:47.991" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:47.991" status="PASS" starttime="20170810 02:36:47.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:47.991" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:47.992" status="PASS" starttime="20170810 02:36:47.991"></status>
</kw>
<status endtime="20170810 02:36:47.992" status="PASS" starttime="20170810 02:36:47.991"></status>
</kw>
<status endtime="20170810 02:36:47.992" status="PASS" starttime="20170810 02:36:47.990"></status>
</kw>
<status endtime="20170810 02:36:47.992" status="PASS" starttime="20170810 02:36:47.989"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:47.992" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:47.992" status="PASS" starttime="20170810 02:36:47.992"></status>
</kw>
<msg timestamp="20170810 02:36:47.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:47.993" status="PASS" starttime="20170810 02:36:47.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:47.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:47.993" status="PASS" starttime="20170810 02:36:47.993"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:47.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:47.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:47.994" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:36:47.994" status="PASS" starttime="20170810 02:36:47.993"></status>
</kw>
<msg timestamp="20170810 02:36:47.994" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:36:47.994" status="PASS" starttime="20170810 02:36:47.431"></status>
</kw>
<msg timestamp="20170810 02:36:47.994" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:36:47.995" status="PASS" starttime="20170810 02:36:47.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:36:47.995" status="PASS" starttime="20170810 02:36:47.995"></status>
</kw>
<status endtime="20170810 02:36:47.995" status="PASS" starttime="20170810 02:36:47.431"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:48.000" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:48.001" status="PASS" starttime="20170810 02:36:47.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:48.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:48.001" status="PASS" starttime="20170810 02:36:48.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:48.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:48.002" status="PASS" starttime="20170810 02:36:48.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:48.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:48.003" status="PASS" starttime="20170810 02:36:48.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.291" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:48.291" status="PASS" starttime="20170810 02:36:48.004"></status>
</kw>
<msg timestamp="20170810 02:36:48.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:48.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:48.291" status="PASS" starttime="20170810 02:36:48.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.292" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:48.292" status="PASS" starttime="20170810 02:36:48.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:48.293" status="PASS" starttime="20170810 02:36:48.292"></status>
</kw>
<status endtime="20170810 02:36:48.293" status="PASS" starttime="20170810 02:36:47.998"></status>
</kw>
<status endtime="20170810 02:36:48.293" status="PASS" starttime="20170810 02:36:47.998"></status>
</kw>
<status endtime="20170810 02:36:48.293" status="PASS" starttime="20170810 02:36:47.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:48.293" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:36:48.294" status="PASS" starttime="20170810 02:36:48.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:48.296" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:48.296" status="PASS" starttime="20170810 02:36:48.295"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:48.296" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:48.297" status="PASS" starttime="20170810 02:36:48.296"></status>
</kw>
<status endtime="20170810 02:36:48.297" status="PASS" starttime="20170810 02:36:48.296"></status>
</kw>
<status endtime="20170810 02:36:48.297" status="PASS" starttime="20170810 02:36:48.294"></status>
</kw>
<status endtime="20170810 02:36:48.297" status="PASS" starttime="20170810 02:36:48.294"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:48.460" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:48.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:48.460" status="PASS" starttime="20170810 02:36:48.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:48.462" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:48.462" status="PASS" starttime="20170810 02:36:48.461"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:48.463" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:48.463" status="PASS" starttime="20170810 02:36:48.462"></status>
</kw>
<status endtime="20170810 02:36:48.463" status="PASS" starttime="20170810 02:36:48.462"></status>
</kw>
<status endtime="20170810 02:36:48.463" status="PASS" starttime="20170810 02:36:48.461"></status>
</kw>
<status endtime="20170810 02:36:48.463" status="PASS" starttime="20170810 02:36:48.460"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:48.463" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:48.464" status="PASS" starttime="20170810 02:36:48.463"></status>
</kw>
<msg timestamp="20170810 02:36:48.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:48.464" status="PASS" starttime="20170810 02:36:47.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:48.464" status="PASS" starttime="20170810 02:36:48.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:48.465" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:48.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:48.465" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:36:48.465" status="PASS" starttime="20170810 02:36:48.465"></status>
</kw>
<msg timestamp="20170810 02:36:48.465" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:36:48.465" status="PASS" starttime="20170810 02:36:47.996"></status>
</kw>
<msg timestamp="20170810 02:36:48.466" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:36:48.466" status="PASS" starttime="20170810 02:36:47.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:36:48.466" status="PASS" starttime="20170810 02:36:48.466"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:48.471" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:48.471" status="PASS" starttime="20170810 02:36:48.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:48.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:48.471" status="PASS" starttime="20170810 02:36:48.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:48.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:48.472" status="PASS" starttime="20170810 02:36:48.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:48.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:48.473" status="PASS" starttime="20170810 02:36:48.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:48.734" status="PASS" starttime="20170810 02:36:48.473"></status>
</kw>
<msg timestamp="20170810 02:36:48.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:48.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:48.734" status="PASS" starttime="20170810 02:36:48.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.735" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:48.735" status="PASS" starttime="20170810 02:36:48.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:48.736" status="PASS" starttime="20170810 02:36:48.735"></status>
</kw>
<status endtime="20170810 02:36:48.736" status="PASS" starttime="20170810 02:36:48.470"></status>
</kw>
<status endtime="20170810 02:36:48.736" status="PASS" starttime="20170810 02:36:48.469"></status>
</kw>
<status endtime="20170810 02:36:48.736" status="PASS" starttime="20170810 02:36:48.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:48.736" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:36:48.736" status="PASS" starttime="20170810 02:36:48.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:48.739" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:48.739" status="PASS" starttime="20170810 02:36:48.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:48.740" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:48.740" status="PASS" starttime="20170810 02:36:48.740"></status>
</kw>
<status endtime="20170810 02:36:48.740" status="PASS" starttime="20170810 02:36:48.739"></status>
</kw>
<status endtime="20170810 02:36:48.740" status="PASS" starttime="20170810 02:36:48.737"></status>
</kw>
<status endtime="20170810 02:36:48.740" status="PASS" starttime="20170810 02:36:48.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:48.829" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:36:48.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:48.829" status="PASS" starttime="20170810 02:36:48.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:48.831" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:48.831" status="PASS" starttime="20170810 02:36:48.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:48.832" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:48.832" status="PASS" starttime="20170810 02:36:48.832"></status>
</kw>
<status endtime="20170810 02:36:48.832" status="PASS" starttime="20170810 02:36:48.831"></status>
</kw>
<status endtime="20170810 02:36:48.832" status="PASS" starttime="20170810 02:36:48.830"></status>
</kw>
<status endtime="20170810 02:36:48.832" status="PASS" starttime="20170810 02:36:48.830"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:48.833" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:48.833" status="PASS" starttime="20170810 02:36:48.833"></status>
</kw>
<msg timestamp="20170810 02:36:48.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:48.833" status="PASS" starttime="20170810 02:36:48.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:48.834" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:48.834" status="PASS" starttime="20170810 02:36:48.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:48.834" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:48.834" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:48.834" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:36:48.834" status="PASS" starttime="20170810 02:36:48.834"></status>
</kw>
<msg timestamp="20170810 02:36:48.835" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:36:48.835" status="PASS" starttime="20170810 02:36:48.467"></status>
</kw>
<msg timestamp="20170810 02:36:48.835" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:36:48.835" status="PASS" starttime="20170810 02:36:48.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:36:48.836" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:36:48.836" status="FAIL" starttime="20170810 02:36:48.835"></status>
</kw>
<status endtime="20170810 02:36:48.836" status="FAIL" starttime="20170810 02:36:48.466"></status>
</kw>
<status endtime="20170810 02:36:48.836" status="FAIL" starttime="20170810 02:36:47.430"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:58.841" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:58.841" status="PASS" starttime="20170810 02:36:58.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:58.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:58.842" status="PASS" starttime="20170810 02:36:58.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:58.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:58.842" status="PASS" starttime="20170810 02:36:58.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:58.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:58.843" status="PASS" starttime="20170810 02:36:58.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:59.268" status="PASS" starttime="20170810 02:36:58.844"></status>
</kw>
<msg timestamp="20170810 02:36:59.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:59.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.268" status="PASS" starttime="20170810 02:36:58.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.269" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.269" status="PASS" starttime="20170810 02:36:59.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.269" status="PASS" starttime="20170810 02:36:59.269"></status>
</kw>
<status endtime="20170810 02:36:59.270" status="PASS" starttime="20170810 02:36:58.840"></status>
</kw>
<status endtime="20170810 02:36:59.270" status="PASS" starttime="20170810 02:36:58.839"></status>
</kw>
<status endtime="20170810 02:36:59.270" status="PASS" starttime="20170810 02:36:58.839"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:59.270" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:36:59.270" status="PASS" starttime="20170810 02:36:59.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:59.272" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:59.272" status="PASS" starttime="20170810 02:36:59.272"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:59.273" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:59.273" status="PASS" starttime="20170810 02:36:59.273"></status>
</kw>
<status endtime="20170810 02:36:59.273" status="PASS" starttime="20170810 02:36:59.273"></status>
</kw>
<status endtime="20170810 02:36:59.274" status="PASS" starttime="20170810 02:36:59.271"></status>
</kw>
<status endtime="20170810 02:36:59.274" status="PASS" starttime="20170810 02:36:59.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:59.337" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:59.337" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.337" status="PASS" starttime="20170810 02:36:59.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:59.338" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:59.339" status="PASS" starttime="20170810 02:36:59.338"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:59.339" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:59.339" status="PASS" starttime="20170810 02:36:59.339"></status>
</kw>
<status endtime="20170810 02:36:59.340" status="PASS" starttime="20170810 02:36:59.339"></status>
</kw>
<status endtime="20170810 02:36:59.340" status="PASS" starttime="20170810 02:36:59.337"></status>
</kw>
<status endtime="20170810 02:36:59.340" status="PASS" starttime="20170810 02:36:59.337"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:59.340" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:59.340" status="PASS" starttime="20170810 02:36:59.340"></status>
</kw>
<msg timestamp="20170810 02:36:59.340" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.340" status="PASS" starttime="20170810 02:36:58.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.341" status="PASS" starttime="20170810 02:36:59.341"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:59.342" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:59.342" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:59.342" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:36:59.342" status="PASS" starttime="20170810 02:36:59.341"></status>
</kw>
<msg timestamp="20170810 02:36:59.342" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:36:59.342" status="PASS" starttime="20170810 02:36:58.838"></status>
</kw>
<msg timestamp="20170810 02:36:59.342" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:36:59.343" status="PASS" starttime="20170810 02:36:58.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:36:59.343" status="PASS" starttime="20170810 02:36:59.343"></status>
</kw>
<status endtime="20170810 02:36:59.343" status="PASS" starttime="20170810 02:36:58.837"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:59.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:59.347" status="PASS" starttime="20170810 02:36:59.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:59.348" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:59.348" status="PASS" starttime="20170810 02:36:59.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:59.349" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:59.349" status="PASS" starttime="20170810 02:36:59.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:59.349" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:59.349" status="PASS" starttime="20170810 02:36:59.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:59.526" status="PASS" starttime="20170810 02:36:59.350"></status>
</kw>
<msg timestamp="20170810 02:36:59.526" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:59.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.526" status="PASS" starttime="20170810 02:36:59.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.527" status="PASS" starttime="20170810 02:36:59.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.528" status="PASS" starttime="20170810 02:36:59.528"></status>
</kw>
<status endtime="20170810 02:36:59.528" status="PASS" starttime="20170810 02:36:59.346"></status>
</kw>
<status endtime="20170810 02:36:59.529" status="PASS" starttime="20170810 02:36:59.345"></status>
</kw>
<status endtime="20170810 02:36:59.529" status="PASS" starttime="20170810 02:36:59.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:59.530" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:36:59.530" status="PASS" starttime="20170810 02:36:59.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:59.533" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:59.533" status="PASS" starttime="20170810 02:36:59.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:59.534" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:36:59.534" status="PASS" starttime="20170810 02:36:59.534"></status>
</kw>
<status endtime="20170810 02:36:59.535" status="PASS" starttime="20170810 02:36:59.534"></status>
</kw>
<status endtime="20170810 02:36:59.535" status="PASS" starttime="20170810 02:36:59.531"></status>
</kw>
<status endtime="20170810 02:36:59.535" status="PASS" starttime="20170810 02:36:59.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:59.624" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:36:59.624" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.624" status="PASS" starttime="20170810 02:36:59.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:59.626" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:59.626" status="PASS" starttime="20170810 02:36:59.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:59.627" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:59.627" status="PASS" starttime="20170810 02:36:59.627"></status>
</kw>
<status endtime="20170810 02:36:59.627" status="PASS" starttime="20170810 02:36:59.626"></status>
</kw>
<status endtime="20170810 02:36:59.627" status="PASS" starttime="20170810 02:36:59.625"></status>
</kw>
<status endtime="20170810 02:36:59.627" status="PASS" starttime="20170810 02:36:59.624"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:59.628" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:59.628" status="PASS" starttime="20170810 02:36:59.627"></status>
</kw>
<msg timestamp="20170810 02:36:59.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.628" status="PASS" starttime="20170810 02:36:59.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.629" status="PASS" starttime="20170810 02:36:59.628"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:59.629" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:59.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:59.629" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:36:59.629" status="PASS" starttime="20170810 02:36:59.629"></status>
</kw>
<msg timestamp="20170810 02:36:59.630" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:36:59.630" status="PASS" starttime="20170810 02:36:59.344"></status>
</kw>
<msg timestamp="20170810 02:36:59.630" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:36:59.630" status="PASS" starttime="20170810 02:36:59.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:36:59.630" status="PASS" starttime="20170810 02:36:59.630"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:36:59.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:36:59.636" status="PASS" starttime="20170810 02:36:59.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:36:59.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:36:59.637" status="PASS" starttime="20170810 02:36:59.636"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:36:59.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:36:59.638" status="PASS" starttime="20170810 02:36:59.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:36:59.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:36:59.639" status="PASS" starttime="20170810 02:36:59.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.916" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:36:59.916" status="PASS" starttime="20170810 02:36:59.639"></status>
</kw>
<msg timestamp="20170810 02:36:59.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:36:59.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.916" status="PASS" starttime="20170810 02:36:59.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.917" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.917" status="PASS" starttime="20170810 02:36:59.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.918" status="PASS" starttime="20170810 02:36:59.917"></status>
</kw>
<status endtime="20170810 02:36:59.918" status="PASS" starttime="20170810 02:36:59.634"></status>
</kw>
<status endtime="20170810 02:36:59.918" status="PASS" starttime="20170810 02:36:59.634"></status>
</kw>
<status endtime="20170810 02:36:59.918" status="PASS" starttime="20170810 02:36:59.633"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:36:59.919" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:36:59.919" status="PASS" starttime="20170810 02:36:59.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:59.921" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:59.921" status="PASS" starttime="20170810 02:36:59.920"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:59.923" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:36:59.923" status="PASS" starttime="20170810 02:36:59.922"></status>
</kw>
<status endtime="20170810 02:36:59.923" status="PASS" starttime="20170810 02:36:59.922"></status>
</kw>
<status endtime="20170810 02:36:59.923" status="PASS" starttime="20170810 02:36:59.919"></status>
</kw>
<status endtime="20170810 02:36:59.923" status="PASS" starttime="20170810 02:36:59.919"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:36:59.990" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:36:59.990" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.990" status="PASS" starttime="20170810 02:36:59.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:36:59.992" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:59.992" status="PASS" starttime="20170810 02:36:59.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:36:59.993" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:36:59.993" status="PASS" starttime="20170810 02:36:59.993"></status>
</kw>
<status endtime="20170810 02:36:59.993" status="PASS" starttime="20170810 02:36:59.992"></status>
</kw>
<status endtime="20170810 02:36:59.993" status="PASS" starttime="20170810 02:36:59.991"></status>
</kw>
<status endtime="20170810 02:36:59.993" status="PASS" starttime="20170810 02:36:59.991"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:36:59.994" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:36:59.994" status="PASS" starttime="20170810 02:36:59.993"></status>
</kw>
<msg timestamp="20170810 02:36:59.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:36:59.994" status="PASS" starttime="20170810 02:36:59.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:36:59.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:36:59.995" status="PASS" starttime="20170810 02:36:59.994"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:36:59.995" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:36:59.995" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:36:59.995" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:36:59.995" status="PASS" starttime="20170810 02:36:59.995"></status>
</kw>
<msg timestamp="20170810 02:36:59.996" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:36:59.996" status="PASS" starttime="20170810 02:36:59.632"></status>
</kw>
<msg timestamp="20170810 02:36:59.996" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:36:59.996" status="PASS" starttime="20170810 02:36:59.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:36:59.997" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:36:59.997" status="FAIL" starttime="20170810 02:36:59.996"></status>
</kw>
<status endtime="20170810 02:36:59.997" status="FAIL" starttime="20170810 02:36:59.631"></status>
</kw>
<status endtime="20170810 02:36:59.997" status="FAIL" starttime="20170810 02:36:58.836"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:10.002" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:10.002" status="PASS" starttime="20170810 02:37:10.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:10.003" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:10.003" status="PASS" starttime="20170810 02:37:10.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:10.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:10.003" status="PASS" starttime="20170810 02:37:10.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:10.004" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:10.004" status="PASS" starttime="20170810 02:37:10.004"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:10.437" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:10.437" status="PASS" starttime="20170810 02:37:10.005"></status>
</kw>
<msg timestamp="20170810 02:37:10.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:10.438" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:10.438" status="PASS" starttime="20170810 02:37:10.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:10.438" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:10.438" status="PASS" starttime="20170810 02:37:10.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:10.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:10.439" status="PASS" starttime="20170810 02:37:10.439"></status>
</kw>
<status endtime="20170810 02:37:10.439" status="PASS" starttime="20170810 02:37:10.001"></status>
</kw>
<status endtime="20170810 02:37:10.439" status="PASS" starttime="20170810 02:37:10.000"></status>
</kw>
<status endtime="20170810 02:37:10.439" status="PASS" starttime="20170810 02:37:10.000"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:10.440" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:37:10.440" status="PASS" starttime="20170810 02:37:10.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:10.442" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:10.442" status="PASS" starttime="20170810 02:37:10.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:10.443" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:10.443" status="PASS" starttime="20170810 02:37:10.443"></status>
</kw>
<status endtime="20170810 02:37:10.443" status="PASS" starttime="20170810 02:37:10.442"></status>
</kw>
<status endtime="20170810 02:37:10.443" status="PASS" starttime="20170810 02:37:10.441"></status>
</kw>
<status endtime="20170810 02:37:10.443" status="PASS" starttime="20170810 02:37:10.440"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:14.004" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:14.004" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:14.004" status="PASS" starttime="20170810 02:37:10.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:14.006" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:14.006" status="PASS" starttime="20170810 02:37:14.005"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:14.007" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:14.007" status="PASS" starttime="20170810 02:37:14.006"></status>
</kw>
<status endtime="20170810 02:37:14.007" status="PASS" starttime="20170810 02:37:14.006"></status>
</kw>
<status endtime="20170810 02:37:14.007" status="PASS" starttime="20170810 02:37:14.005"></status>
</kw>
<status endtime="20170810 02:37:14.007" status="PASS" starttime="20170810 02:37:14.004"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:14.007" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:14.008" status="PASS" starttime="20170810 02:37:14.007"></status>
</kw>
<msg timestamp="20170810 02:37:14.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:14.008" status="PASS" starttime="20170810 02:37:09.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:14.008" status="PASS" starttime="20170810 02:37:14.008"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:14.009" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:14.009" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:14.009" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:37:14.009" status="PASS" starttime="20170810 02:37:14.009"></status>
</kw>
<msg timestamp="20170810 02:37:14.010" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:37:14.010" status="PASS" starttime="20170810 02:37:09.999"></status>
</kw>
<msg timestamp="20170810 02:37:14.010" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:37:14.010" status="PASS" starttime="20170810 02:37:09.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:37:14.010" status="PASS" starttime="20170810 02:37:14.010"></status>
</kw>
<status endtime="20170810 02:37:14.011" status="PASS" starttime="20170810 02:37:09.998"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:14.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:14.015" status="PASS" starttime="20170810 02:37:14.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:14.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:14.015" status="PASS" starttime="20170810 02:37:14.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:14.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:14.016" status="PASS" starttime="20170810 02:37:14.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:14.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:14.017" status="PASS" starttime="20170810 02:37:14.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.211" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:14.212" status="PASS" starttime="20170810 02:37:14.017"></status>
</kw>
<msg timestamp="20170810 02:37:14.212" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:14.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:14.212" status="PASS" starttime="20170810 02:37:14.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.212" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:14.212" status="PASS" starttime="20170810 02:37:14.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:14.213" status="PASS" starttime="20170810 02:37:14.213"></status>
</kw>
<status endtime="20170810 02:37:14.213" status="PASS" starttime="20170810 02:37:14.013"></status>
</kw>
<status endtime="20170810 02:37:14.213" status="PASS" starttime="20170810 02:37:14.013"></status>
</kw>
<status endtime="20170810 02:37:14.213" status="PASS" starttime="20170810 02:37:14.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:14.214" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:37:14.214" status="PASS" starttime="20170810 02:37:14.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:14.216" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:14.216" status="PASS" starttime="20170810 02:37:14.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:14.217" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:14.217" status="PASS" starttime="20170810 02:37:14.217"></status>
</kw>
<status endtime="20170810 02:37:14.217" status="PASS" starttime="20170810 02:37:14.216"></status>
</kw>
<status endtime="20170810 02:37:14.217" status="PASS" starttime="20170810 02:37:14.215"></status>
</kw>
<status endtime="20170810 02:37:14.217" status="PASS" starttime="20170810 02:37:14.214"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:14.478" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:14.478" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:14.478" status="PASS" starttime="20170810 02:37:14.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:14.480" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:14.480" status="PASS" starttime="20170810 02:37:14.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:14.481" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:14.481" status="PASS" starttime="20170810 02:37:14.481"></status>
</kw>
<status endtime="20170810 02:37:14.481" status="PASS" starttime="20170810 02:37:14.480"></status>
</kw>
<status endtime="20170810 02:37:14.481" status="PASS" starttime="20170810 02:37:14.479"></status>
</kw>
<status endtime="20170810 02:37:14.481" status="PASS" starttime="20170810 02:37:14.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:14.482" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:14.482" status="PASS" starttime="20170810 02:37:14.482"></status>
</kw>
<msg timestamp="20170810 02:37:14.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:14.482" status="PASS" starttime="20170810 02:37:14.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:14.483" status="PASS" starttime="20170810 02:37:14.482"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:14.483" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:14.483" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:14.483" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:37:14.483" status="PASS" starttime="20170810 02:37:14.483"></status>
</kw>
<msg timestamp="20170810 02:37:14.484" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:37:14.484" status="PASS" starttime="20170810 02:37:14.011"></status>
</kw>
<msg timestamp="20170810 02:37:14.484" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:37:14.484" status="PASS" starttime="20170810 02:37:14.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:37:14.485" status="PASS" starttime="20170810 02:37:14.484"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:14.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:14.489" status="PASS" starttime="20170810 02:37:14.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:14.490" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:14.490" status="PASS" starttime="20170810 02:37:14.489"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:14.490" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:14.490" status="PASS" starttime="20170810 02:37:14.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:14.491" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:14.491" status="PASS" starttime="20170810 02:37:14.490"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:14.964" status="PASS" starttime="20170810 02:37:14.492"></status>
</kw>
<msg timestamp="20170810 02:37:14.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:14.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:14.964" status="PASS" starttime="20170810 02:37:14.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:14.965" status="PASS" starttime="20170810 02:37:14.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:14.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:14.965" status="PASS" starttime="20170810 02:37:14.965"></status>
</kw>
<status endtime="20170810 02:37:14.965" status="PASS" starttime="20170810 02:37:14.488"></status>
</kw>
<status endtime="20170810 02:37:14.966" status="PASS" starttime="20170810 02:37:14.487"></status>
</kw>
<status endtime="20170810 02:37:14.966" status="PASS" starttime="20170810 02:37:14.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:14.966" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:37:14.966" status="PASS" starttime="20170810 02:37:14.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:14.969" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:37:14.969" status="PASS" starttime="20170810 02:37:14.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:14.970" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:37:14.970" status="PASS" starttime="20170810 02:37:14.969"></status>
</kw>
<status endtime="20170810 02:37:14.970" status="PASS" starttime="20170810 02:37:14.969"></status>
</kw>
<status endtime="20170810 02:37:14.970" status="PASS" starttime="20170810 02:37:14.967"></status>
</kw>
<status endtime="20170810 02:37:14.970" status="PASS" starttime="20170810 02:37:14.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:15.235" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:37:15.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:15.236" status="PASS" starttime="20170810 02:37:14.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:15.237" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:15.237" status="PASS" starttime="20170810 02:37:15.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:15.238" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:15.238" status="PASS" starttime="20170810 02:37:15.238"></status>
</kw>
<status endtime="20170810 02:37:15.239" status="PASS" starttime="20170810 02:37:15.238"></status>
</kw>
<status endtime="20170810 02:37:15.239" status="PASS" starttime="20170810 02:37:15.236"></status>
</kw>
<status endtime="20170810 02:37:15.239" status="PASS" starttime="20170810 02:37:15.236"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:15.239" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:15.239" status="PASS" starttime="20170810 02:37:15.239"></status>
</kw>
<msg timestamp="20170810 02:37:15.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:15.240" status="PASS" starttime="20170810 02:37:14.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:15.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:15.240" status="PASS" starttime="20170810 02:37:15.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:15.241" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:15.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:15.241" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:37:15.241" status="PASS" starttime="20170810 02:37:15.240"></status>
</kw>
<msg timestamp="20170810 02:37:15.241" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:37:15.241" status="PASS" starttime="20170810 02:37:14.486"></status>
</kw>
<msg timestamp="20170810 02:37:15.242" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:37:15.242" status="PASS" starttime="20170810 02:37:14.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:37:15.242" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:37:15.242" status="FAIL" starttime="20170810 02:37:15.242"></status>
</kw>
<status endtime="20170810 02:37:15.243" status="FAIL" starttime="20170810 02:37:14.485"></status>
</kw>
<status endtime="20170810 02:37:15.243" status="FAIL" starttime="20170810 02:37:09.997"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:25.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:25.248" status="PASS" starttime="20170810 02:37:25.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:25.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:25.249" status="PASS" starttime="20170810 02:37:25.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:25.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:25.249" status="PASS" starttime="20170810 02:37:25.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:25.254" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:25.254" status="PASS" starttime="20170810 02:37:25.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:26.813" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:26.814" status="PASS" starttime="20170810 02:37:25.254"></status>
</kw>
<msg timestamp="20170810 02:37:26.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:26.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:26.814" status="PASS" starttime="20170810 02:37:25.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:26.814" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:26.815" status="PASS" starttime="20170810 02:37:26.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:26.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:26.815" status="PASS" starttime="20170810 02:37:26.815"></status>
</kw>
<status endtime="20170810 02:37:26.815" status="PASS" starttime="20170810 02:37:25.247"></status>
</kw>
<status endtime="20170810 02:37:26.815" status="PASS" starttime="20170810 02:37:25.246"></status>
</kw>
<status endtime="20170810 02:37:26.816" status="PASS" starttime="20170810 02:37:25.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:26.816" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:37:26.816" status="PASS" starttime="20170810 02:37:26.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:26.818" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:26.818" status="PASS" starttime="20170810 02:37:26.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:26.819" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:26.819" status="PASS" starttime="20170810 02:37:26.819"></status>
</kw>
<status endtime="20170810 02:37:26.819" status="PASS" starttime="20170810 02:37:26.818"></status>
</kw>
<status endtime="20170810 02:37:26.819" status="PASS" starttime="20170810 02:37:26.817"></status>
</kw>
<status endtime="20170810 02:37:26.820" status="PASS" starttime="20170810 02:37:26.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:34.874" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:34.874" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:34.874" status="PASS" starttime="20170810 02:37:26.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:34.876" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:34.876" status="PASS" starttime="20170810 02:37:34.875"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:34.877" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:34.877" status="PASS" starttime="20170810 02:37:34.877"></status>
</kw>
<status endtime="20170810 02:37:34.877" status="PASS" starttime="20170810 02:37:34.876"></status>
</kw>
<status endtime="20170810 02:37:34.877" status="PASS" starttime="20170810 02:37:34.875"></status>
</kw>
<status endtime="20170810 02:37:34.877" status="PASS" starttime="20170810 02:37:34.874"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:34.878" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:34.878" status="PASS" starttime="20170810 02:37:34.878"></status>
</kw>
<msg timestamp="20170810 02:37:34.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:34.878" status="PASS" starttime="20170810 02:37:25.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:34.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:34.879" status="PASS" starttime="20170810 02:37:34.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:34.880" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:34.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:34.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:37:34.880" status="PASS" starttime="20170810 02:37:34.880"></status>
</kw>
<msg timestamp="20170810 02:37:34.881" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:37:34.881" status="PASS" starttime="20170810 02:37:25.244"></status>
</kw>
<msg timestamp="20170810 02:37:34.881" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:37:34.881" status="PASS" starttime="20170810 02:37:25.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 02:37:34.882" level="FAIL">On != Off</msg>
<status endtime="20170810 02:37:34.882" status="FAIL" starttime="20170810 02:37:34.882"></status>
</kw>
<status endtime="20170810 02:37:34.882" status="FAIL" starttime="20170810 02:37:25.244"></status>
</kw>
<status endtime="20170810 02:37:34.883" status="FAIL" starttime="20170810 02:37:25.243"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:44.888" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:44.888" status="PASS" starttime="20170810 02:37:44.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:44.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:44.889" status="PASS" starttime="20170810 02:37:44.889"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:44.890" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:44.890" status="PASS" starttime="20170810 02:37:44.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:44.890" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:44.890" status="PASS" starttime="20170810 02:37:44.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:45.242" status="PASS" starttime="20170810 02:37:44.891"></status>
</kw>
<msg timestamp="20170810 02:37:45.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:45.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:45.242" status="PASS" starttime="20170810 02:37:44.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:45.243" status="PASS" starttime="20170810 02:37:45.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:45.244" status="PASS" starttime="20170810 02:37:45.243"></status>
</kw>
<status endtime="20170810 02:37:45.244" status="PASS" starttime="20170810 02:37:44.887"></status>
</kw>
<status endtime="20170810 02:37:45.244" status="PASS" starttime="20170810 02:37:44.887"></status>
</kw>
<status endtime="20170810 02:37:45.244" status="PASS" starttime="20170810 02:37:44.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:45.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:37:45.245" status="PASS" starttime="20170810 02:37:45.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:45.247" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:45.247" status="PASS" starttime="20170810 02:37:45.246"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:45.248" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:45.248" status="PASS" starttime="20170810 02:37:45.248"></status>
</kw>
<status endtime="20170810 02:37:45.248" status="PASS" starttime="20170810 02:37:45.247"></status>
</kw>
<status endtime="20170810 02:37:45.248" status="PASS" starttime="20170810 02:37:45.246"></status>
</kw>
<status endtime="20170810 02:37:45.248" status="PASS" starttime="20170810 02:37:45.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:45.681" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:45.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:45.681" status="PASS" starttime="20170810 02:37:45.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:45.683" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:45.683" status="PASS" starttime="20170810 02:37:45.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:45.685" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:45.685" status="PASS" starttime="20170810 02:37:45.684"></status>
</kw>
<status endtime="20170810 02:37:45.685" status="PASS" starttime="20170810 02:37:45.684"></status>
</kw>
<status endtime="20170810 02:37:45.685" status="PASS" starttime="20170810 02:37:45.682"></status>
</kw>
<status endtime="20170810 02:37:45.685" status="PASS" starttime="20170810 02:37:45.681"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:45.686" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:45.686" status="PASS" starttime="20170810 02:37:45.685"></status>
</kw>
<msg timestamp="20170810 02:37:45.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:45.686" status="PASS" starttime="20170810 02:37:44.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:45.687" status="PASS" starttime="20170810 02:37:45.686"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:45.687" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:45.687" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:45.687" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:37:45.687" status="PASS" starttime="20170810 02:37:45.687"></status>
</kw>
<msg timestamp="20170810 02:37:45.687" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:37:45.688" status="PASS" starttime="20170810 02:37:44.885"></status>
</kw>
<msg timestamp="20170810 02:37:45.688" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:37:45.688" status="PASS" starttime="20170810 02:37:44.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:37:45.688" status="PASS" starttime="20170810 02:37:45.688"></status>
</kw>
<status endtime="20170810 02:37:45.689" status="PASS" starttime="20170810 02:37:44.884"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:45.692" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:45.692" status="PASS" starttime="20170810 02:37:45.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:45.693" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:45.693" status="PASS" starttime="20170810 02:37:45.693"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:45.694" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:45.694" status="PASS" starttime="20170810 02:37:45.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:45.694" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:45.694" status="PASS" starttime="20170810 02:37:45.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:45.879" status="PASS" starttime="20170810 02:37:45.695"></status>
</kw>
<msg timestamp="20170810 02:37:45.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:45.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:45.879" status="PASS" starttime="20170810 02:37:45.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.879" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:45.880" status="PASS" starttime="20170810 02:37:45.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:45.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:45.880" status="PASS" starttime="20170810 02:37:45.880"></status>
</kw>
<status endtime="20170810 02:37:45.880" status="PASS" starttime="20170810 02:37:45.691"></status>
</kw>
<status endtime="20170810 02:37:45.880" status="PASS" starttime="20170810 02:37:45.691"></status>
</kw>
<status endtime="20170810 02:37:45.881" status="PASS" starttime="20170810 02:37:45.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:45.881" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:37:45.881" status="PASS" starttime="20170810 02:37:45.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:45.884" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:45.884" status="PASS" starttime="20170810 02:37:45.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:45.885" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:45.885" status="PASS" starttime="20170810 02:37:45.884"></status>
</kw>
<status endtime="20170810 02:37:45.885" status="PASS" starttime="20170810 02:37:45.884"></status>
</kw>
<status endtime="20170810 02:37:45.885" status="PASS" starttime="20170810 02:37:45.882"></status>
</kw>
<status endtime="20170810 02:37:45.885" status="PASS" starttime="20170810 02:37:45.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:46.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:46.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:46.339" status="PASS" starttime="20170810 02:37:45.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:46.341" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:46.341" status="PASS" starttime="20170810 02:37:46.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:46.342" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:46.342" status="PASS" starttime="20170810 02:37:46.342"></status>
</kw>
<status endtime="20170810 02:37:46.342" status="PASS" starttime="20170810 02:37:46.341"></status>
</kw>
<status endtime="20170810 02:37:46.342" status="PASS" starttime="20170810 02:37:46.340"></status>
</kw>
<status endtime="20170810 02:37:46.342" status="PASS" starttime="20170810 02:37:46.340"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:46.343" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:46.343" status="PASS" starttime="20170810 02:37:46.343"></status>
</kw>
<msg timestamp="20170810 02:37:46.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:46.343" status="PASS" starttime="20170810 02:37:45.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:46.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:46.344" status="PASS" starttime="20170810 02:37:46.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:46.344" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:46.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:46.344" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:37:46.345" status="PASS" starttime="20170810 02:37:46.344"></status>
</kw>
<msg timestamp="20170810 02:37:46.345" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:37:46.345" status="PASS" starttime="20170810 02:37:45.689"></status>
</kw>
<msg timestamp="20170810 02:37:46.345" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:37:46.345" status="PASS" starttime="20170810 02:37:45.689"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:37:46.346" status="PASS" starttime="20170810 02:37:46.345"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:46.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:46.350" status="PASS" starttime="20170810 02:37:46.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:46.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:46.351" status="PASS" starttime="20170810 02:37:46.350"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:46.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:46.351" status="PASS" starttime="20170810 02:37:46.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:46.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:46.352" status="PASS" starttime="20170810 02:37:46.352"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:46.759" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:46.759" status="PASS" starttime="20170810 02:37:46.353"></status>
</kw>
<msg timestamp="20170810 02:37:46.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:46.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:46.759" status="PASS" starttime="20170810 02:37:46.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:46.760" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:46.760" status="PASS" starttime="20170810 02:37:46.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:46.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:46.761" status="PASS" starttime="20170810 02:37:46.760"></status>
</kw>
<status endtime="20170810 02:37:46.761" status="PASS" starttime="20170810 02:37:46.349"></status>
</kw>
<status endtime="20170810 02:37:46.761" status="PASS" starttime="20170810 02:37:46.348"></status>
</kw>
<status endtime="20170810 02:37:46.761" status="PASS" starttime="20170810 02:37:46.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:46.762" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:37:46.762" status="PASS" starttime="20170810 02:37:46.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:46.764" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:37:46.764" status="PASS" starttime="20170810 02:37:46.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:46.765" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:37:46.765" status="PASS" starttime="20170810 02:37:46.764"></status>
</kw>
<status endtime="20170810 02:37:46.765" status="PASS" starttime="20170810 02:37:46.764"></status>
</kw>
<status endtime="20170810 02:37:46.765" status="PASS" starttime="20170810 02:37:46.762"></status>
</kw>
<status endtime="20170810 02:37:46.765" status="PASS" starttime="20170810 02:37:46.762"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:46.831" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:37:46.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:46.831" status="PASS" starttime="20170810 02:37:46.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:46.833" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:46.833" status="PASS" starttime="20170810 02:37:46.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:46.834" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:46.834" status="PASS" starttime="20170810 02:37:46.833"></status>
</kw>
<status endtime="20170810 02:37:46.834" status="PASS" starttime="20170810 02:37:46.833"></status>
</kw>
<status endtime="20170810 02:37:46.834" status="PASS" starttime="20170810 02:37:46.832"></status>
</kw>
<status endtime="20170810 02:37:46.834" status="PASS" starttime="20170810 02:37:46.831"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:46.834" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:46.834" status="PASS" starttime="20170810 02:37:46.834"></status>
</kw>
<msg timestamp="20170810 02:37:46.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:46.835" status="PASS" starttime="20170810 02:37:46.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:46.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:46.835" status="PASS" starttime="20170810 02:37:46.835"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:46.836" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:46.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:46.836" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:37:46.836" status="PASS" starttime="20170810 02:37:46.836"></status>
</kw>
<msg timestamp="20170810 02:37:46.836" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:37:46.836" status="PASS" starttime="20170810 02:37:46.347"></status>
</kw>
<msg timestamp="20170810 02:37:46.837" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:37:46.837" status="PASS" starttime="20170810 02:37:46.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:37:46.837" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:37:46.837" status="FAIL" starttime="20170810 02:37:46.837"></status>
</kw>
<status endtime="20170810 02:37:46.837" status="FAIL" starttime="20170810 02:37:46.346"></status>
</kw>
<status endtime="20170810 02:37:46.838" status="FAIL" starttime="20170810 02:37:44.883"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:56.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:56.844" status="PASS" starttime="20170810 02:37:56.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:56.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:56.845" status="PASS" starttime="20170810 02:37:56.844"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:56.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:56.845" status="PASS" starttime="20170810 02:37:56.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:56.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:56.846" status="PASS" starttime="20170810 02:37:56.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:57.076" status="PASS" starttime="20170810 02:37:56.847"></status>
</kw>
<msg timestamp="20170810 02:37:57.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:57.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.076" status="PASS" starttime="20170810 02:37:56.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.077" status="PASS" starttime="20170810 02:37:57.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.078" status="PASS" starttime="20170810 02:37:57.077"></status>
</kw>
<status endtime="20170810 02:37:57.078" status="PASS" starttime="20170810 02:37:56.843"></status>
</kw>
<status endtime="20170810 02:37:57.078" status="PASS" starttime="20170810 02:37:56.842"></status>
</kw>
<status endtime="20170810 02:37:57.078" status="PASS" starttime="20170810 02:37:56.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:57.079" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:37:57.079" status="PASS" starttime="20170810 02:37:57.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:57.081" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:57.081" status="PASS" starttime="20170810 02:37:57.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:57.082" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:57.082" status="PASS" starttime="20170810 02:37:57.081"></status>
</kw>
<status endtime="20170810 02:37:57.082" status="PASS" starttime="20170810 02:37:57.081"></status>
</kw>
<status endtime="20170810 02:37:57.082" status="PASS" starttime="20170810 02:37:57.079"></status>
</kw>
<status endtime="20170810 02:37:57.082" status="PASS" starttime="20170810 02:37:57.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:57.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:57.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.145" status="PASS" starttime="20170810 02:37:57.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:57.147" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:57.147" status="PASS" starttime="20170810 02:37:57.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:57.148" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:57.148" status="PASS" starttime="20170810 02:37:57.148"></status>
</kw>
<status endtime="20170810 02:37:57.148" status="PASS" starttime="20170810 02:37:57.147"></status>
</kw>
<status endtime="20170810 02:37:57.149" status="PASS" starttime="20170810 02:37:57.146"></status>
</kw>
<status endtime="20170810 02:37:57.149" status="PASS" starttime="20170810 02:37:57.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:57.149" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:57.149" status="PASS" starttime="20170810 02:37:57.149"></status>
</kw>
<msg timestamp="20170810 02:37:57.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.149" status="PASS" starttime="20170810 02:37:56.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.150" status="PASS" starttime="20170810 02:37:57.150"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:57.151" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:57.151" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:57.151" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:37:57.151" status="PASS" starttime="20170810 02:37:57.150"></status>
</kw>
<msg timestamp="20170810 02:37:57.151" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:37:57.151" status="PASS" starttime="20170810 02:37:56.840"></status>
</kw>
<msg timestamp="20170810 02:37:57.151" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:37:57.151" status="PASS" starttime="20170810 02:37:56.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:37:57.152" status="PASS" starttime="20170810 02:37:57.152"></status>
</kw>
<status endtime="20170810 02:37:57.152" status="PASS" starttime="20170810 02:37:56.839"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:57.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:57.156" status="PASS" starttime="20170810 02:37:57.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:57.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:57.156" status="PASS" starttime="20170810 02:37:57.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:57.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:57.157" status="PASS" starttime="20170810 02:37:57.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:57.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:57.158" status="PASS" starttime="20170810 02:37:57.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:57.359" status="PASS" starttime="20170810 02:37:57.158"></status>
</kw>
<msg timestamp="20170810 02:37:57.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:57.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.359" status="PASS" starttime="20170810 02:37:57.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.360" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.360" status="PASS" starttime="20170810 02:37:57.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.361" status="PASS" starttime="20170810 02:37:57.360"></status>
</kw>
<status endtime="20170810 02:37:57.361" status="PASS" starttime="20170810 02:37:57.155"></status>
</kw>
<status endtime="20170810 02:37:57.361" status="PASS" starttime="20170810 02:37:57.154"></status>
</kw>
<status endtime="20170810 02:37:57.361" status="PASS" starttime="20170810 02:37:57.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:57.362" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:37:57.362" status="PASS" starttime="20170810 02:37:57.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:57.364" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:57.364" status="PASS" starttime="20170810 02:37:57.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:57.365" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:37:57.365" status="PASS" starttime="20170810 02:37:57.365"></status>
</kw>
<status endtime="20170810 02:37:57.365" status="PASS" starttime="20170810 02:37:57.364"></status>
</kw>
<status endtime="20170810 02:37:57.365" status="PASS" starttime="20170810 02:37:57.362"></status>
</kw>
<status endtime="20170810 02:37:57.365" status="PASS" starttime="20170810 02:37:57.362"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:57.455" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:37:57.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.455" status="PASS" starttime="20170810 02:37:57.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:57.457" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:57.457" status="PASS" starttime="20170810 02:37:57.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:57.457" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:57.458" status="PASS" starttime="20170810 02:37:57.457"></status>
</kw>
<status endtime="20170810 02:37:57.458" status="PASS" starttime="20170810 02:37:57.457"></status>
</kw>
<status endtime="20170810 02:37:57.458" status="PASS" starttime="20170810 02:37:57.456"></status>
</kw>
<status endtime="20170810 02:37:57.458" status="PASS" starttime="20170810 02:37:57.455"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:57.458" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:57.458" status="PASS" starttime="20170810 02:37:57.458"></status>
</kw>
<msg timestamp="20170810 02:37:57.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.459" status="PASS" starttime="20170810 02:37:57.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.459" status="PASS" starttime="20170810 02:37:57.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:57.460" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:57.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:57.460" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:37:57.460" status="PASS" starttime="20170810 02:37:57.460"></status>
</kw>
<msg timestamp="20170810 02:37:57.460" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:37:57.460" status="PASS" starttime="20170810 02:37:57.153"></status>
</kw>
<msg timestamp="20170810 02:37:57.461" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:37:57.461" status="PASS" starttime="20170810 02:37:57.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:37:57.461" status="PASS" starttime="20170810 02:37:57.461"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:37:57.465" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:37:57.465" status="PASS" starttime="20170810 02:37:57.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:37:57.466" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:37:57.466" status="PASS" starttime="20170810 02:37:57.466"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:37:57.467" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:37:57.467" status="PASS" starttime="20170810 02:37:57.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:37:57.467" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:37:57.467" status="PASS" starttime="20170810 02:37:57.467"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.681" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:37:57.681" status="PASS" starttime="20170810 02:37:57.468"></status>
</kw>
<msg timestamp="20170810 02:37:57.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:37:57.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.681" status="PASS" starttime="20170810 02:37:57.468"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.682" status="PASS" starttime="20170810 02:37:57.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.683" status="PASS" starttime="20170810 02:37:57.682"></status>
</kw>
<status endtime="20170810 02:37:57.683" status="PASS" starttime="20170810 02:37:57.464"></status>
</kw>
<status endtime="20170810 02:37:57.683" status="PASS" starttime="20170810 02:37:57.464"></status>
</kw>
<status endtime="20170810 02:37:57.683" status="PASS" starttime="20170810 02:37:57.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:37:57.684" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:37:57.684" status="PASS" starttime="20170810 02:37:57.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:57.686" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:37:57.686" status="PASS" starttime="20170810 02:37:57.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:57.687" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:37:57.687" status="PASS" starttime="20170810 02:37:57.687"></status>
</kw>
<status endtime="20170810 02:37:57.687" status="PASS" starttime="20170810 02:37:57.686"></status>
</kw>
<status endtime="20170810 02:37:57.687" status="PASS" starttime="20170810 02:37:57.684"></status>
</kw>
<status endtime="20170810 02:37:57.687" status="PASS" starttime="20170810 02:37:57.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:37:57.754" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:37:57.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.754" status="PASS" starttime="20170810 02:37:57.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:37:57.756" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:57.756" status="PASS" starttime="20170810 02:37:57.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:37:57.756" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:37:57.757" status="PASS" starttime="20170810 02:37:57.756"></status>
</kw>
<status endtime="20170810 02:37:57.757" status="PASS" starttime="20170810 02:37:57.756"></status>
</kw>
<status endtime="20170810 02:37:57.757" status="PASS" starttime="20170810 02:37:57.755"></status>
</kw>
<status endtime="20170810 02:37:57.757" status="PASS" starttime="20170810 02:37:57.754"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:37:57.757" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:37:57.757" status="PASS" starttime="20170810 02:37:57.757"></status>
</kw>
<msg timestamp="20170810 02:37:57.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:37:57.758" status="PASS" starttime="20170810 02:37:57.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:37:57.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:37:57.758" status="PASS" starttime="20170810 02:37:57.758"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:37:57.759" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:37:57.759" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:37:57.759" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:37:57.759" status="PASS" starttime="20170810 02:37:57.758"></status>
</kw>
<msg timestamp="20170810 02:37:57.759" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:37:57.759" status="PASS" starttime="20170810 02:37:57.462"></status>
</kw>
<msg timestamp="20170810 02:37:57.759" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:37:57.760" status="PASS" starttime="20170810 02:37:57.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:37:57.760" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:37:57.760" status="FAIL" starttime="20170810 02:37:57.760"></status>
</kw>
<status endtime="20170810 02:37:57.760" status="FAIL" starttime="20170810 02:37:57.461"></status>
</kw>
<status endtime="20170810 02:37:57.761" status="FAIL" starttime="20170810 02:37:56.838"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:07.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:07.767" status="PASS" starttime="20170810 02:38:07.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:07.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:07.768" status="PASS" starttime="20170810 02:38:07.767"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:07.768" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:07.768" status="PASS" starttime="20170810 02:38:07.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:07.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:07.769" status="PASS" starttime="20170810 02:38:07.769"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:08.040" status="PASS" starttime="20170810 02:38:07.770"></status>
</kw>
<msg timestamp="20170810 02:38:08.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:08.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:08.041" status="PASS" starttime="20170810 02:38:07.769"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:08.041" status="PASS" starttime="20170810 02:38:08.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:08.042" status="PASS" starttime="20170810 02:38:08.042"></status>
</kw>
<status endtime="20170810 02:38:08.042" status="PASS" starttime="20170810 02:38:07.766"></status>
</kw>
<status endtime="20170810 02:38:08.042" status="PASS" starttime="20170810 02:38:07.765"></status>
</kw>
<status endtime="20170810 02:38:08.042" status="PASS" starttime="20170810 02:38:07.764"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:08.043" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:38:08.043" status="PASS" starttime="20170810 02:38:08.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:08.045" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:08.045" status="PASS" starttime="20170810 02:38:08.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:08.046" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:08.046" status="PASS" starttime="20170810 02:38:08.046"></status>
</kw>
<status endtime="20170810 02:38:08.046" status="PASS" starttime="20170810 02:38:08.045"></status>
</kw>
<status endtime="20170810 02:38:08.046" status="PASS" starttime="20170810 02:38:08.044"></status>
</kw>
<status endtime="20170810 02:38:08.046" status="PASS" starttime="20170810 02:38:08.043"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:08.336" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:08.336" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:08.336" status="PASS" starttime="20170810 02:38:08.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:08.338" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:08.338" status="PASS" starttime="20170810 02:38:08.338"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:08.339" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:08.339" status="PASS" starttime="20170810 02:38:08.339"></status>
</kw>
<status endtime="20170810 02:38:08.340" status="PASS" starttime="20170810 02:38:08.339"></status>
</kw>
<status endtime="20170810 02:38:08.340" status="PASS" starttime="20170810 02:38:08.337"></status>
</kw>
<status endtime="20170810 02:38:08.340" status="PASS" starttime="20170810 02:38:08.337"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:08.340" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:08.340" status="PASS" starttime="20170810 02:38:08.340"></status>
</kw>
<msg timestamp="20170810 02:38:08.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:08.341" status="PASS" starttime="20170810 02:38:07.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:08.341" status="PASS" starttime="20170810 02:38:08.341"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:08.342" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:08.342" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:08.342" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:38:08.342" status="PASS" starttime="20170810 02:38:08.342"></status>
</kw>
<msg timestamp="20170810 02:38:08.342" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:38:08.342" status="PASS" starttime="20170810 02:38:07.763"></status>
</kw>
<msg timestamp="20170810 02:38:08.343" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:38:08.343" status="PASS" starttime="20170810 02:38:07.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:38:08.343" status="PASS" starttime="20170810 02:38:08.343"></status>
</kw>
<status endtime="20170810 02:38:08.343" status="PASS" starttime="20170810 02:38:07.762"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:08.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:08.347" status="PASS" starttime="20170810 02:38:08.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:08.348" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:08.348" status="PASS" starttime="20170810 02:38:08.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:08.348" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:08.348" status="PASS" starttime="20170810 02:38:08.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:08.349" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:08.349" status="PASS" starttime="20170810 02:38:08.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.650" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:08.650" status="PASS" starttime="20170810 02:38:08.350"></status>
</kw>
<msg timestamp="20170810 02:38:08.650" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:08.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:08.650" status="PASS" starttime="20170810 02:38:08.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.651" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:08.651" status="PASS" starttime="20170810 02:38:08.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:08.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:08.652" status="PASS" starttime="20170810 02:38:08.651"></status>
</kw>
<status endtime="20170810 02:38:08.652" status="PASS" starttime="20170810 02:38:08.346"></status>
</kw>
<status endtime="20170810 02:38:08.652" status="PASS" starttime="20170810 02:38:08.345"></status>
</kw>
<status endtime="20170810 02:38:08.652" status="PASS" starttime="20170810 02:38:08.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:08.653" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:38:08.653" status="PASS" starttime="20170810 02:38:08.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:08.655" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:08.655" status="PASS" starttime="20170810 02:38:08.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:08.656" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:08.656" status="PASS" starttime="20170810 02:38:08.656"></status>
</kw>
<status endtime="20170810 02:38:08.656" status="PASS" starttime="20170810 02:38:08.655"></status>
</kw>
<status endtime="20170810 02:38:08.656" status="PASS" starttime="20170810 02:38:08.653"></status>
</kw>
<status endtime="20170810 02:38:08.656" status="PASS" starttime="20170810 02:38:08.653"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:09.398" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:09.398" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:09.398" status="PASS" starttime="20170810 02:38:08.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:09.400" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:09.400" status="PASS" starttime="20170810 02:38:09.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:09.401" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:09.401" status="PASS" starttime="20170810 02:38:09.400"></status>
</kw>
<status endtime="20170810 02:38:09.401" status="PASS" starttime="20170810 02:38:09.400"></status>
</kw>
<status endtime="20170810 02:38:09.401" status="PASS" starttime="20170810 02:38:09.399"></status>
</kw>
<status endtime="20170810 02:38:09.401" status="PASS" starttime="20170810 02:38:09.398"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:09.401" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:09.402" status="PASS" starttime="20170810 02:38:09.401"></status>
</kw>
<msg timestamp="20170810 02:38:09.402" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:09.402" status="PASS" starttime="20170810 02:38:08.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:09.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:09.402" status="PASS" starttime="20170810 02:38:09.402"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:09.403" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:09.403" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:09.403" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:38:09.403" status="PASS" starttime="20170810 02:38:09.403"></status>
</kw>
<msg timestamp="20170810 02:38:09.403" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:38:09.403" status="PASS" starttime="20170810 02:38:08.344"></status>
</kw>
<msg timestamp="20170810 02:38:09.404" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:38:09.404" status="PASS" starttime="20170810 02:38:08.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:38:09.404" status="PASS" starttime="20170810 02:38:09.404"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:09.408" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:09.409" status="PASS" starttime="20170810 02:38:09.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:09.409" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:09.409" status="PASS" starttime="20170810 02:38:09.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:09.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:09.410" status="PASS" starttime="20170810 02:38:09.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:09.413" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:09.413" status="PASS" starttime="20170810 02:38:09.410"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:09.843" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:09.843" status="PASS" starttime="20170810 02:38:09.414"></status>
</kw>
<msg timestamp="20170810 02:38:09.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:09.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:09.843" status="PASS" starttime="20170810 02:38:09.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:09.844" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:09.844" status="PASS" starttime="20170810 02:38:09.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:09.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:09.844" status="PASS" starttime="20170810 02:38:09.844"></status>
</kw>
<status endtime="20170810 02:38:09.845" status="PASS" starttime="20170810 02:38:09.407"></status>
</kw>
<status endtime="20170810 02:38:09.845" status="PASS" starttime="20170810 02:38:09.407"></status>
</kw>
<status endtime="20170810 02:38:09.845" status="PASS" starttime="20170810 02:38:09.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:09.847" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:38:09.847" status="PASS" starttime="20170810 02:38:09.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:09.849" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:09.849" status="PASS" starttime="20170810 02:38:09.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:09.850" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:09.850" status="PASS" starttime="20170810 02:38:09.850"></status>
</kw>
<status endtime="20170810 02:38:09.851" status="PASS" starttime="20170810 02:38:09.850"></status>
</kw>
<status endtime="20170810 02:38:09.851" status="PASS" starttime="20170810 02:38:09.848"></status>
</kw>
<status endtime="20170810 02:38:09.851" status="PASS" starttime="20170810 02:38:09.848"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:10.442" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:38:10.443" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:10.443" status="PASS" starttime="20170810 02:38:09.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:10.444" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:10.444" status="PASS" starttime="20170810 02:38:10.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:10.445" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:10.446" status="PASS" starttime="20170810 02:38:10.445"></status>
</kw>
<status endtime="20170810 02:38:10.446" status="PASS" starttime="20170810 02:38:10.445"></status>
</kw>
<status endtime="20170810 02:38:10.446" status="PASS" starttime="20170810 02:38:10.443"></status>
</kw>
<status endtime="20170810 02:38:10.446" status="PASS" starttime="20170810 02:38:10.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:10.446" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:10.446" status="PASS" starttime="20170810 02:38:10.446"></status>
</kw>
<msg timestamp="20170810 02:38:10.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:10.447" status="PASS" starttime="20170810 02:38:09.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:10.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:10.447" status="PASS" starttime="20170810 02:38:10.447"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:10.448" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:10.448" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:10.448" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:38:10.448" status="PASS" starttime="20170810 02:38:10.447"></status>
</kw>
<msg timestamp="20170810 02:38:10.448" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:38:10.448" status="PASS" starttime="20170810 02:38:09.405"></status>
</kw>
<msg timestamp="20170810 02:38:10.448" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:38:10.448" status="PASS" starttime="20170810 02:38:09.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:38:10.449" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:38:10.449" status="FAIL" starttime="20170810 02:38:10.449"></status>
</kw>
<status endtime="20170810 02:38:10.449" status="FAIL" starttime="20170810 02:38:09.404"></status>
</kw>
<status endtime="20170810 02:38:10.449" status="FAIL" starttime="20170810 02:38:07.761"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:20.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:20.455" status="PASS" starttime="20170810 02:38:20.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:20.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:20.455" status="PASS" starttime="20170810 02:38:20.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:20.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:20.456" status="PASS" starttime="20170810 02:38:20.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:20.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:20.457" status="PASS" starttime="20170810 02:38:20.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:20.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:20.900" status="PASS" starttime="20170810 02:38:20.457"></status>
</kw>
<msg timestamp="20170810 02:38:20.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:20.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:20.901" status="PASS" starttime="20170810 02:38:20.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:20.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:20.901" status="PASS" starttime="20170810 02:38:20.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:20.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:20.902" status="PASS" starttime="20170810 02:38:20.902"></status>
</kw>
<status endtime="20170810 02:38:20.902" status="PASS" starttime="20170810 02:38:20.454"></status>
</kw>
<status endtime="20170810 02:38:20.902" status="PASS" starttime="20170810 02:38:20.453"></status>
</kw>
<status endtime="20170810 02:38:20.903" status="PASS" starttime="20170810 02:38:20.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:20.903" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:38:20.903" status="PASS" starttime="20170810 02:38:20.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:20.905" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:20.905" status="PASS" starttime="20170810 02:38:20.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:20.906" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:20.906" status="PASS" starttime="20170810 02:38:20.906"></status>
</kw>
<status endtime="20170810 02:38:20.906" status="PASS" starttime="20170810 02:38:20.905"></status>
</kw>
<status endtime="20170810 02:38:20.906" status="PASS" starttime="20170810 02:38:20.904"></status>
</kw>
<status endtime="20170810 02:38:20.906" status="PASS" starttime="20170810 02:38:20.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:21.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:21.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:21.366" status="PASS" starttime="20170810 02:38:20.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:21.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:21.369" status="PASS" starttime="20170810 02:38:21.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:21.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:21.369" status="PASS" starttime="20170810 02:38:21.369"></status>
</kw>
<status endtime="20170810 02:38:21.370" status="PASS" starttime="20170810 02:38:21.369"></status>
</kw>
<status endtime="20170810 02:38:21.370" status="PASS" starttime="20170810 02:38:21.367"></status>
</kw>
<status endtime="20170810 02:38:21.370" status="PASS" starttime="20170810 02:38:21.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:21.370" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:21.370" status="PASS" starttime="20170810 02:38:21.370"></status>
</kw>
<msg timestamp="20170810 02:38:21.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:21.371" status="PASS" starttime="20170810 02:38:20.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:21.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:21.371" status="PASS" starttime="20170810 02:38:21.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:21.372" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:21.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:21.372" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:38:21.372" status="PASS" starttime="20170810 02:38:21.371"></status>
</kw>
<msg timestamp="20170810 02:38:21.372" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:38:21.372" status="PASS" starttime="20170810 02:38:20.451"></status>
</kw>
<msg timestamp="20170810 02:38:21.373" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:38:21.373" status="PASS" starttime="20170810 02:38:20.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:38:21.373" status="PASS" starttime="20170810 02:38:21.373"></status>
</kw>
<status endtime="20170810 02:38:21.373" status="PASS" starttime="20170810 02:38:20.450"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:21.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:21.377" status="PASS" starttime="20170810 02:38:21.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:21.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:21.378" status="PASS" starttime="20170810 02:38:21.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:21.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:21.378" status="PASS" starttime="20170810 02:38:21.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:21.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:21.379" status="PASS" starttime="20170810 02:38:21.379"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:21.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:21.891" status="PASS" starttime="20170810 02:38:21.380"></status>
</kw>
<msg timestamp="20170810 02:38:21.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:21.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:21.892" status="PASS" starttime="20170810 02:38:21.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:21.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:21.892" status="PASS" starttime="20170810 02:38:21.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:21.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:21.893" status="PASS" starttime="20170810 02:38:21.893"></status>
</kw>
<status endtime="20170810 02:38:21.893" status="PASS" starttime="20170810 02:38:21.376"></status>
</kw>
<status endtime="20170810 02:38:21.893" status="PASS" starttime="20170810 02:38:21.375"></status>
</kw>
<status endtime="20170810 02:38:21.893" status="PASS" starttime="20170810 02:38:21.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:21.894" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:38:21.894" status="PASS" starttime="20170810 02:38:21.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:21.896" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:21.896" status="PASS" starttime="20170810 02:38:21.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:21.897" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:21.897" status="PASS" starttime="20170810 02:38:21.897"></status>
</kw>
<status endtime="20170810 02:38:21.898" status="PASS" starttime="20170810 02:38:21.897"></status>
</kw>
<status endtime="20170810 02:38:21.898" status="PASS" starttime="20170810 02:38:21.895"></status>
</kw>
<status endtime="20170810 02:38:21.898" status="PASS" starttime="20170810 02:38:21.894"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:22.608" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:22.609" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:22.609" status="PASS" starttime="20170810 02:38:21.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:22.611" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:22.611" status="PASS" starttime="20170810 02:38:22.610"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:22.612" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:22.612" status="PASS" starttime="20170810 02:38:22.611"></status>
</kw>
<status endtime="20170810 02:38:22.612" status="PASS" starttime="20170810 02:38:22.611"></status>
</kw>
<status endtime="20170810 02:38:22.612" status="PASS" starttime="20170810 02:38:22.610"></status>
</kw>
<status endtime="20170810 02:38:22.612" status="PASS" starttime="20170810 02:38:22.609"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:22.612" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:22.613" status="PASS" starttime="20170810 02:38:22.612"></status>
</kw>
<msg timestamp="20170810 02:38:22.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:22.613" status="PASS" starttime="20170810 02:38:21.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:22.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:22.613" status="PASS" starttime="20170810 02:38:22.613"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:22.614" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:22.614" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:22.614" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:38:22.614" status="PASS" starttime="20170810 02:38:22.614"></status>
</kw>
<msg timestamp="20170810 02:38:22.614" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:38:22.614" status="PASS" starttime="20170810 02:38:21.374"></status>
</kw>
<msg timestamp="20170810 02:38:22.615" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:38:22.615" status="PASS" starttime="20170810 02:38:21.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:38:22.615" status="PASS" starttime="20170810 02:38:22.615"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:22.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:22.619" status="PASS" starttime="20170810 02:38:22.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:22.620" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:22.620" status="PASS" starttime="20170810 02:38:22.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:22.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:22.621" status="PASS" starttime="20170810 02:38:22.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:22.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:22.621" status="PASS" starttime="20170810 02:38:22.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:23.119" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:23.119" status="PASS" starttime="20170810 02:38:22.622"></status>
</kw>
<msg timestamp="20170810 02:38:23.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:23.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:23.120" status="PASS" starttime="20170810 02:38:22.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:23.120" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:23.120" status="PASS" starttime="20170810 02:38:23.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:23.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:23.121" status="PASS" starttime="20170810 02:38:23.121"></status>
</kw>
<status endtime="20170810 02:38:23.121" status="PASS" starttime="20170810 02:38:22.618"></status>
</kw>
<status endtime="20170810 02:38:23.121" status="PASS" starttime="20170810 02:38:22.618"></status>
</kw>
<status endtime="20170810 02:38:23.121" status="PASS" starttime="20170810 02:38:22.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:23.122" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:38:23.122" status="PASS" starttime="20170810 02:38:23.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:23.124" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:23.124" status="PASS" starttime="20170810 02:38:23.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:23.125" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:23.125" status="PASS" starttime="20170810 02:38:23.125"></status>
</kw>
<status endtime="20170810 02:38:23.125" status="PASS" starttime="20170810 02:38:23.124"></status>
</kw>
<status endtime="20170810 02:38:23.125" status="PASS" starttime="20170810 02:38:23.123"></status>
</kw>
<status endtime="20170810 02:38:23.125" status="PASS" starttime="20170810 02:38:23.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:23.634" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:38:23.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:23.634" status="PASS" starttime="20170810 02:38:23.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:23.636" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:23.636" status="PASS" starttime="20170810 02:38:23.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:23.637" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:23.637" status="PASS" starttime="20170810 02:38:23.637"></status>
</kw>
<status endtime="20170810 02:38:23.637" status="PASS" starttime="20170810 02:38:23.636"></status>
</kw>
<status endtime="20170810 02:38:23.638" status="PASS" starttime="20170810 02:38:23.635"></status>
</kw>
<status endtime="20170810 02:38:23.638" status="PASS" starttime="20170810 02:38:23.635"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:23.638" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:23.638" status="PASS" starttime="20170810 02:38:23.638"></status>
</kw>
<msg timestamp="20170810 02:38:23.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:23.638" status="PASS" starttime="20170810 02:38:22.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:23.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:23.639" status="PASS" starttime="20170810 02:38:23.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:23.639" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:23.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:23.640" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:38:23.640" status="PASS" starttime="20170810 02:38:23.639"></status>
</kw>
<msg timestamp="20170810 02:38:23.640" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:38:23.640" status="PASS" starttime="20170810 02:38:22.616"></status>
</kw>
<msg timestamp="20170810 02:38:23.640" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:38:23.640" status="PASS" starttime="20170810 02:38:22.616"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:38:23.641" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:38:23.641" status="FAIL" starttime="20170810 02:38:23.641"></status>
</kw>
<status endtime="20170810 02:38:23.641" status="FAIL" starttime="20170810 02:38:22.615"></status>
</kw>
<status endtime="20170810 02:38:23.641" status="FAIL" starttime="20170810 02:38:20.450"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:33.650" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:33.651" status="PASS" starttime="20170810 02:38:33.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:33.652" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:33.652" status="PASS" starttime="20170810 02:38:33.651"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:33.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:33.653" status="PASS" starttime="20170810 02:38:33.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:33.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:33.655" status="PASS" starttime="20170810 02:38:33.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:34.123" status="PASS" starttime="20170810 02:38:33.656"></status>
</kw>
<msg timestamp="20170810 02:38:34.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:34.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:34.123" status="PASS" starttime="20170810 02:38:33.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:34.123" status="PASS" starttime="20170810 02:38:34.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:34.124" status="PASS" starttime="20170810 02:38:34.124"></status>
</kw>
<status endtime="20170810 02:38:34.124" status="PASS" starttime="20170810 02:38:33.648"></status>
</kw>
<status endtime="20170810 02:38:34.124" status="PASS" starttime="20170810 02:38:33.647"></status>
</kw>
<status endtime="20170810 02:38:34.125" status="PASS" starttime="20170810 02:38:33.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:34.125" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:38:34.125" status="PASS" starttime="20170810 02:38:34.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:34.127" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:34.127" status="PASS" starttime="20170810 02:38:34.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:34.128" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:34.128" status="PASS" starttime="20170810 02:38:34.128"></status>
</kw>
<status endtime="20170810 02:38:34.128" status="PASS" starttime="20170810 02:38:34.127"></status>
</kw>
<status endtime="20170810 02:38:34.129" status="PASS" starttime="20170810 02:38:34.126"></status>
</kw>
<status endtime="20170810 02:38:34.129" status="PASS" starttime="20170810 02:38:34.125"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:34.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:34.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:34.311" status="PASS" starttime="20170810 02:38:34.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:34.313" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:34.313" status="PASS" starttime="20170810 02:38:34.313"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:34.314" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:34.314" status="PASS" starttime="20170810 02:38:34.314"></status>
</kw>
<status endtime="20170810 02:38:34.315" status="PASS" starttime="20170810 02:38:34.314"></status>
</kw>
<status endtime="20170810 02:38:34.315" status="PASS" starttime="20170810 02:38:34.312"></status>
</kw>
<status endtime="20170810 02:38:34.315" status="PASS" starttime="20170810 02:38:34.312"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:34.315" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:34.315" status="PASS" starttime="20170810 02:38:34.315"></status>
</kw>
<msg timestamp="20170810 02:38:34.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:34.315" status="PASS" starttime="20170810 02:38:33.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:34.316" status="PASS" starttime="20170810 02:38:34.316"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:34.317" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:34.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:34.317" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:38:34.317" status="PASS" starttime="20170810 02:38:34.316"></status>
</kw>
<msg timestamp="20170810 02:38:34.317" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:38:34.317" status="PASS" starttime="20170810 02:38:33.644"></status>
</kw>
<msg timestamp="20170810 02:38:34.317" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:38:34.317" status="PASS" starttime="20170810 02:38:33.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:38:34.318" status="PASS" starttime="20170810 02:38:34.318"></status>
</kw>
<status endtime="20170810 02:38:34.318" status="PASS" starttime="20170810 02:38:33.643"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:34.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:34.322" status="PASS" starttime="20170810 02:38:34.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:34.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:34.323" status="PASS" starttime="20170810 02:38:34.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:34.323" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:34.323" status="PASS" starttime="20170810 02:38:34.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:34.324" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:34.324" status="PASS" starttime="20170810 02:38:34.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:34.653" status="PASS" starttime="20170810 02:38:34.325"></status>
</kw>
<msg timestamp="20170810 02:38:34.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:34.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:34.653" status="PASS" starttime="20170810 02:38:34.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:34.654" status="PASS" starttime="20170810 02:38:34.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:34.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:34.655" status="PASS" starttime="20170810 02:38:34.654"></status>
</kw>
<status endtime="20170810 02:38:34.655" status="PASS" starttime="20170810 02:38:34.321"></status>
</kw>
<status endtime="20170810 02:38:34.655" status="PASS" starttime="20170810 02:38:34.320"></status>
</kw>
<status endtime="20170810 02:38:34.655" status="PASS" starttime="20170810 02:38:34.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:34.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:38:34.656" status="PASS" starttime="20170810 02:38:34.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:34.658" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:34.658" status="PASS" starttime="20170810 02:38:34.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:34.660" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:34.660" status="PASS" starttime="20170810 02:38:34.659"></status>
</kw>
<status endtime="20170810 02:38:34.660" status="PASS" starttime="20170810 02:38:34.658"></status>
</kw>
<status endtime="20170810 02:38:34.660" status="PASS" starttime="20170810 02:38:34.656"></status>
</kw>
<status endtime="20170810 02:38:34.660" status="PASS" starttime="20170810 02:38:34.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:35.458" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:35.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:35.458" status="PASS" starttime="20170810 02:38:34.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:35.460" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:35.460" status="PASS" starttime="20170810 02:38:35.459"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:35.461" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:35.461" status="PASS" starttime="20170810 02:38:35.461"></status>
</kw>
<status endtime="20170810 02:38:35.461" status="PASS" starttime="20170810 02:38:35.460"></status>
</kw>
<status endtime="20170810 02:38:35.462" status="PASS" starttime="20170810 02:38:35.459"></status>
</kw>
<status endtime="20170810 02:38:35.462" status="PASS" starttime="20170810 02:38:35.458"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:35.462" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:35.462" status="PASS" starttime="20170810 02:38:35.462"></status>
</kw>
<msg timestamp="20170810 02:38:35.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:35.462" status="PASS" starttime="20170810 02:38:34.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:35.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:35.463" status="PASS" starttime="20170810 02:38:35.463"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:35.464" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:35.464" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:35.464" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:38:35.464" status="PASS" starttime="20170810 02:38:35.464"></status>
</kw>
<msg timestamp="20170810 02:38:35.465" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:38:35.465" status="PASS" starttime="20170810 02:38:34.319"></status>
</kw>
<msg timestamp="20170810 02:38:35.465" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:38:35.465" status="PASS" starttime="20170810 02:38:34.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:38:35.466" status="PASS" starttime="20170810 02:38:35.465"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:35.469" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:35.470" status="PASS" starttime="20170810 02:38:35.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:35.470" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:35.470" status="PASS" starttime="20170810 02:38:35.470"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:35.471" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:35.471" status="PASS" starttime="20170810 02:38:35.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:35.472" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:35.472" status="PASS" starttime="20170810 02:38:35.471"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:35.917" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:35.918" status="PASS" starttime="20170810 02:38:35.472"></status>
</kw>
<msg timestamp="20170810 02:38:35.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:35.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:35.918" status="PASS" starttime="20170810 02:38:35.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:35.918" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:35.919" status="PASS" starttime="20170810 02:38:35.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:35.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:35.919" status="PASS" starttime="20170810 02:38:35.919"></status>
</kw>
<status endtime="20170810 02:38:35.919" status="PASS" starttime="20170810 02:38:35.469"></status>
</kw>
<status endtime="20170810 02:38:35.919" status="PASS" starttime="20170810 02:38:35.468"></status>
</kw>
<status endtime="20170810 02:38:35.920" status="PASS" starttime="20170810 02:38:35.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:35.920" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:38:35.920" status="PASS" starttime="20170810 02:38:35.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:35.922" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:35.922" status="PASS" starttime="20170810 02:38:35.922"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:35.923" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:35.923" status="PASS" starttime="20170810 02:38:35.923"></status>
</kw>
<status endtime="20170810 02:38:35.923" status="PASS" starttime="20170810 02:38:35.922"></status>
</kw>
<status endtime="20170810 02:38:35.924" status="PASS" starttime="20170810 02:38:35.921"></status>
</kw>
<status endtime="20170810 02:38:35.924" status="PASS" starttime="20170810 02:38:35.920"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:36.601" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:38:36.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:36.601" status="PASS" starttime="20170810 02:38:35.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:36.604" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:36.604" status="PASS" starttime="20170810 02:38:36.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:36.605" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:36.606" status="PASS" starttime="20170810 02:38:36.605"></status>
</kw>
<status endtime="20170810 02:38:36.606" status="PASS" starttime="20170810 02:38:36.604"></status>
</kw>
<status endtime="20170810 02:38:36.606" status="PASS" starttime="20170810 02:38:36.603"></status>
</kw>
<status endtime="20170810 02:38:36.606" status="PASS" starttime="20170810 02:38:36.602"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:36.607" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:36.607" status="PASS" starttime="20170810 02:38:36.606"></status>
</kw>
<msg timestamp="20170810 02:38:36.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:36.607" status="PASS" starttime="20170810 02:38:35.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:36.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:36.608" status="PASS" starttime="20170810 02:38:36.607"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:36.609" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:36.609" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:36.609" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:38:36.609" status="PASS" starttime="20170810 02:38:36.608"></status>
</kw>
<msg timestamp="20170810 02:38:36.609" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:38:36.609" status="PASS" starttime="20170810 02:38:35.466"></status>
</kw>
<msg timestamp="20170810 02:38:36.610" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:38:36.610" status="PASS" starttime="20170810 02:38:35.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:38:36.611" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:38:36.611" status="FAIL" starttime="20170810 02:38:36.610"></status>
</kw>
<status endtime="20170810 02:38:36.611" status="FAIL" starttime="20170810 02:38:35.466"></status>
</kw>
<status endtime="20170810 02:38:36.611" status="FAIL" starttime="20170810 02:38:33.642"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:46.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:46.618" status="PASS" starttime="20170810 02:38:46.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:46.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:46.618" status="PASS" starttime="20170810 02:38:46.618"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:46.619" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:46.619" status="PASS" starttime="20170810 02:38:46.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:46.619" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:46.619" status="PASS" starttime="20170810 02:38:46.619"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:47.044" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:47.044" status="PASS" starttime="20170810 02:38:46.620"></status>
</kw>
<msg timestamp="20170810 02:38:47.045" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:47.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:47.045" status="PASS" starttime="20170810 02:38:46.620"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:47.045" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:47.045" status="PASS" starttime="20170810 02:38:47.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:47.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:47.046" status="PASS" starttime="20170810 02:38:47.046"></status>
</kw>
<status endtime="20170810 02:38:47.046" status="PASS" starttime="20170810 02:38:46.616"></status>
</kw>
<status endtime="20170810 02:38:47.046" status="PASS" starttime="20170810 02:38:46.615"></status>
</kw>
<status endtime="20170810 02:38:47.046" status="PASS" starttime="20170810 02:38:46.615"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:47.047" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:38:47.047" status="PASS" starttime="20170810 02:38:47.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:47.049" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:47.049" status="PASS" starttime="20170810 02:38:47.048"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:47.050" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:47.050" status="PASS" starttime="20170810 02:38:47.050"></status>
</kw>
<status endtime="20170810 02:38:47.050" status="PASS" starttime="20170810 02:38:47.049"></status>
</kw>
<status endtime="20170810 02:38:47.050" status="PASS" starttime="20170810 02:38:47.048"></status>
</kw>
<status endtime="20170810 02:38:47.051" status="PASS" starttime="20170810 02:38:47.047"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:47.767" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:47.767" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:47.767" status="PASS" starttime="20170810 02:38:47.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:47.769" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:47.769" status="PASS" starttime="20170810 02:38:47.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:47.770" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:47.771" status="PASS" starttime="20170810 02:38:47.770"></status>
</kw>
<status endtime="20170810 02:38:47.771" status="PASS" starttime="20170810 02:38:47.770"></status>
</kw>
<status endtime="20170810 02:38:47.771" status="PASS" starttime="20170810 02:38:47.768"></status>
</kw>
<status endtime="20170810 02:38:47.771" status="PASS" starttime="20170810 02:38:47.767"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:47.774" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:47.774" status="PASS" starttime="20170810 02:38:47.774"></status>
</kw>
<msg timestamp="20170810 02:38:47.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:47.775" status="PASS" starttime="20170810 02:38:46.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:47.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:47.775" status="PASS" starttime="20170810 02:38:47.775"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:47.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:47.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:47.776" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:38:47.776" status="PASS" starttime="20170810 02:38:47.776"></status>
</kw>
<msg timestamp="20170810 02:38:47.777" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:38:47.777" status="PASS" starttime="20170810 02:38:46.613"></status>
</kw>
<msg timestamp="20170810 02:38:47.778" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:38:47.778" status="PASS" starttime="20170810 02:38:46.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:38:47.778" status="PASS" starttime="20170810 02:38:47.778"></status>
</kw>
<status endtime="20170810 02:38:47.778" status="PASS" starttime="20170810 02:38:46.613"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:47.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:47.783" status="PASS" starttime="20170810 02:38:47.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:47.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:47.784" status="PASS" starttime="20170810 02:38:47.784"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:47.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:47.785" status="PASS" starttime="20170810 02:38:47.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:47.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:47.786" status="PASS" starttime="20170810 02:38:47.786"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:48.106" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:48.106" status="PASS" starttime="20170810 02:38:47.787"></status>
</kw>
<msg timestamp="20170810 02:38:48.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:48.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:48.107" status="PASS" starttime="20170810 02:38:47.787"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:48.108" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:48.108" status="PASS" starttime="20170810 02:38:48.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:48.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:48.108" status="PASS" starttime="20170810 02:38:48.108"></status>
</kw>
<status endtime="20170810 02:38:48.109" status="PASS" starttime="20170810 02:38:47.782"></status>
</kw>
<status endtime="20170810 02:38:48.109" status="PASS" starttime="20170810 02:38:47.781"></status>
</kw>
<status endtime="20170810 02:38:48.109" status="PASS" starttime="20170810 02:38:47.780"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:48.110" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:38:48.110" status="PASS" starttime="20170810 02:38:48.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:48.113" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:48.113" status="PASS" starttime="20170810 02:38:48.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:48.114" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:38:48.114" status="PASS" starttime="20170810 02:38:48.114"></status>
</kw>
<status endtime="20170810 02:38:48.114" status="PASS" starttime="20170810 02:38:48.113"></status>
</kw>
<status endtime="20170810 02:38:48.114" status="PASS" starttime="20170810 02:38:48.111"></status>
</kw>
<status endtime="20170810 02:38:48.114" status="PASS" starttime="20170810 02:38:48.110"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:48.683" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:38:48.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:48.685" status="PASS" starttime="20170810 02:38:48.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:48.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:48.687" status="PASS" starttime="20170810 02:38:48.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:48.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:48.688" status="PASS" starttime="20170810 02:38:48.688"></status>
</kw>
<status endtime="20170810 02:38:48.688" status="PASS" starttime="20170810 02:38:48.687"></status>
</kw>
<status endtime="20170810 02:38:48.689" status="PASS" starttime="20170810 02:38:48.686"></status>
</kw>
<status endtime="20170810 02:38:48.689" status="PASS" starttime="20170810 02:38:48.685"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:48.689" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:48.689" status="PASS" starttime="20170810 02:38:48.689"></status>
</kw>
<msg timestamp="20170810 02:38:48.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:48.689" status="PASS" starttime="20170810 02:38:47.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:48.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:48.690" status="PASS" starttime="20170810 02:38:48.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:48.691" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:48.691" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:48.691" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:38:48.691" status="PASS" starttime="20170810 02:38:48.691"></status>
</kw>
<msg timestamp="20170810 02:38:48.692" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:38:48.692" status="PASS" starttime="20170810 02:38:47.779"></status>
</kw>
<msg timestamp="20170810 02:38:48.692" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:38:48.692" status="PASS" starttime="20170810 02:38:47.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:38:48.693" status="PASS" starttime="20170810 02:38:48.693"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:48.699" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:48.699" status="PASS" starttime="20170810 02:38:48.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:48.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:48.700" status="PASS" starttime="20170810 02:38:48.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:48.701" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:48.701" status="PASS" starttime="20170810 02:38:48.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:48.701" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:48.701" status="PASS" starttime="20170810 02:38:48.701"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:38:49.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:38:49.094" status="PASS" starttime="20170810 02:38:48.705"></status>
</kw>
<msg timestamp="20170810 02:38:49.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:38:49.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:49.094" status="PASS" starttime="20170810 02:38:48.702"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:38:49.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:49.095" status="PASS" starttime="20170810 02:38:49.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:49.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:49.095" status="PASS" starttime="20170810 02:38:49.095"></status>
</kw>
<status endtime="20170810 02:38:49.096" status="PASS" starttime="20170810 02:38:48.697"></status>
</kw>
<status endtime="20170810 02:38:49.096" status="PASS" starttime="20170810 02:38:48.697"></status>
</kw>
<status endtime="20170810 02:38:49.096" status="PASS" starttime="20170810 02:38:48.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:38:49.096" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:38:49.096" status="PASS" starttime="20170810 02:38:49.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:49.098" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:49.098" status="PASS" starttime="20170810 02:38:49.098"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:49.099" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:38:49.099" status="PASS" starttime="20170810 02:38:49.099"></status>
</kw>
<status endtime="20170810 02:38:49.100" status="PASS" starttime="20170810 02:38:49.099"></status>
</kw>
<status endtime="20170810 02:38:49.100" status="PASS" starttime="20170810 02:38:49.097"></status>
</kw>
<status endtime="20170810 02:38:49.100" status="PASS" starttime="20170810 02:38:49.097"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:38:49.722" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:38:49.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:49.722" status="PASS" starttime="20170810 02:38:49.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:38:49.724" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:49.724" status="PASS" starttime="20170810 02:38:49.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:38:49.725" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:38:49.725" status="PASS" starttime="20170810 02:38:49.725"></status>
</kw>
<status endtime="20170810 02:38:49.725" status="PASS" starttime="20170810 02:38:49.724"></status>
</kw>
<status endtime="20170810 02:38:49.725" status="PASS" starttime="20170810 02:38:49.723"></status>
</kw>
<status endtime="20170810 02:38:49.725" status="PASS" starttime="20170810 02:38:49.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:38:49.726" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:38:49.726" status="PASS" starttime="20170810 02:38:49.726"></status>
</kw>
<msg timestamp="20170810 02:38:49.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:38:49.726" status="PASS" starttime="20170810 02:38:48.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:38:49.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:38:49.727" status="PASS" starttime="20170810 02:38:49.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:38:49.727" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:38:49.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:38:49.728" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:38:49.728" status="PASS" starttime="20170810 02:38:49.727"></status>
</kw>
<msg timestamp="20170810 02:38:49.728" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:38:49.728" status="PASS" starttime="20170810 02:38:48.694"></status>
</kw>
<msg timestamp="20170810 02:38:49.728" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:38:49.728" status="PASS" starttime="20170810 02:38:48.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:38:49.729" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:38:49.729" status="FAIL" starttime="20170810 02:38:49.728"></status>
</kw>
<status endtime="20170810 02:38:49.729" status="FAIL" starttime="20170810 02:38:48.693"></status>
</kw>
<status endtime="20170810 02:38:49.729" status="FAIL" starttime="20170810 02:38:46.612"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:38:59.737" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:38:59.738" status="PASS" starttime="20170810 02:38:59.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:38:59.739" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:38:59.739" status="PASS" starttime="20170810 02:38:59.739"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:38:59.740" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:38:59.740" status="PASS" starttime="20170810 02:38:59.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:38:59.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:38:59.741" status="PASS" starttime="20170810 02:38:59.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:00.047" status="PASS" starttime="20170810 02:38:59.742"></status>
</kw>
<msg timestamp="20170810 02:39:00.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:00.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:00.047" status="PASS" starttime="20170810 02:38:59.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.048" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:00.048" status="PASS" starttime="20170810 02:39:00.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:00.049" status="PASS" starttime="20170810 02:39:00.048"></status>
</kw>
<status endtime="20170810 02:39:00.049" status="PASS" starttime="20170810 02:38:59.736"></status>
</kw>
<status endtime="20170810 02:39:00.049" status="PASS" starttime="20170810 02:38:59.735"></status>
</kw>
<status endtime="20170810 02:39:00.049" status="PASS" starttime="20170810 02:38:59.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:00.050" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:39:00.050" status="PASS" starttime="20170810 02:39:00.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:00.052" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:00.052" status="PASS" starttime="20170810 02:39:00.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:00.053" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:00.053" status="PASS" starttime="20170810 02:39:00.053"></status>
</kw>
<status endtime="20170810 02:39:00.053" status="PASS" starttime="20170810 02:39:00.052"></status>
</kw>
<status endtime="20170810 02:39:00.053" status="PASS" starttime="20170810 02:39:00.051"></status>
</kw>
<status endtime="20170810 02:39:00.053" status="PASS" starttime="20170810 02:39:00.050"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:00.140" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:00.140" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:00.140" status="PASS" starttime="20170810 02:39:00.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:00.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:00.143" status="PASS" starttime="20170810 02:39:00.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:00.143" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:00.144" status="PASS" starttime="20170810 02:39:00.143"></status>
</kw>
<status endtime="20170810 02:39:00.144" status="PASS" starttime="20170810 02:39:00.143"></status>
</kw>
<status endtime="20170810 02:39:00.144" status="PASS" starttime="20170810 02:39:00.141"></status>
</kw>
<status endtime="20170810 02:39:00.144" status="PASS" starttime="20170810 02:39:00.141"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:00.144" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:00.144" status="PASS" starttime="20170810 02:39:00.144"></status>
</kw>
<msg timestamp="20170810 02:39:00.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:00.145" status="PASS" starttime="20170810 02:38:59.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:00.145" status="PASS" starttime="20170810 02:39:00.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:00.146" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:00.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:00.146" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:39:00.146" status="PASS" starttime="20170810 02:39:00.145"></status>
</kw>
<msg timestamp="20170810 02:39:00.146" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:39:00.146" status="PASS" starttime="20170810 02:38:59.732"></status>
</kw>
<msg timestamp="20170810 02:39:00.146" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:39:00.147" status="PASS" starttime="20170810 02:38:59.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:39:00.147" status="PASS" starttime="20170810 02:39:00.147"></status>
</kw>
<status endtime="20170810 02:39:00.147" status="PASS" starttime="20170810 02:38:59.731"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:00.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:00.151" status="PASS" starttime="20170810 02:39:00.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:00.152" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:00.152" status="PASS" starttime="20170810 02:39:00.151"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:00.152" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:00.152" status="PASS" starttime="20170810 02:39:00.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:00.153" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:00.153" status="PASS" starttime="20170810 02:39:00.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:00.559" status="PASS" starttime="20170810 02:39:00.154"></status>
</kw>
<msg timestamp="20170810 02:39:00.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:00.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:00.559" status="PASS" starttime="20170810 02:39:00.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.560" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:00.560" status="PASS" starttime="20170810 02:39:00.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:00.562" status="PASS" starttime="20170810 02:39:00.561"></status>
</kw>
<status endtime="20170810 02:39:00.562" status="PASS" starttime="20170810 02:39:00.150"></status>
</kw>
<status endtime="20170810 02:39:00.562" status="PASS" starttime="20170810 02:39:00.149"></status>
</kw>
<status endtime="20170810 02:39:00.562" status="PASS" starttime="20170810 02:39:00.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:00.563" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:39:00.563" status="PASS" starttime="20170810 02:39:00.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:00.567" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:00.567" status="PASS" starttime="20170810 02:39:00.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:00.568" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:00.568" status="PASS" starttime="20170810 02:39:00.568"></status>
</kw>
<status endtime="20170810 02:39:00.568" status="PASS" starttime="20170810 02:39:00.567"></status>
</kw>
<status endtime="20170810 02:39:00.569" status="PASS" starttime="20170810 02:39:00.564"></status>
</kw>
<status endtime="20170810 02:39:00.569" status="PASS" starttime="20170810 02:39:00.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:00.730" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:00.730" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:00.730" status="PASS" starttime="20170810 02:39:00.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:00.732" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:00.732" status="PASS" starttime="20170810 02:39:00.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:00.733" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:00.733" status="PASS" starttime="20170810 02:39:00.733"></status>
</kw>
<status endtime="20170810 02:39:00.733" status="PASS" starttime="20170810 02:39:00.732"></status>
</kw>
<status endtime="20170810 02:39:00.733" status="PASS" starttime="20170810 02:39:00.731"></status>
</kw>
<status endtime="20170810 02:39:00.733" status="PASS" starttime="20170810 02:39:00.730"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:00.734" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:00.734" status="PASS" starttime="20170810 02:39:00.734"></status>
</kw>
<msg timestamp="20170810 02:39:00.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:00.734" status="PASS" starttime="20170810 02:39:00.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:00.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:00.735" status="PASS" starttime="20170810 02:39:00.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:00.735" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:00.735" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:00.735" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:39:00.735" status="PASS" starttime="20170810 02:39:00.735"></status>
</kw>
<msg timestamp="20170810 02:39:00.736" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:39:00.736" status="PASS" starttime="20170810 02:39:00.148"></status>
</kw>
<msg timestamp="20170810 02:39:00.736" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:39:00.736" status="PASS" starttime="20170810 02:39:00.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:39:00.736" status="PASS" starttime="20170810 02:39:00.736"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:00.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:00.741" status="PASS" starttime="20170810 02:39:00.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:00.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:00.741" status="PASS" starttime="20170810 02:39:00.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:00.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:00.742" status="PASS" starttime="20170810 02:39:00.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:00.742" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:00.743" status="PASS" starttime="20170810 02:39:00.742"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:01.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:01.036" status="PASS" starttime="20170810 02:39:00.743"></status>
</kw>
<msg timestamp="20170810 02:39:01.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:01.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:01.036" status="PASS" starttime="20170810 02:39:00.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:01.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:01.037" status="PASS" starttime="20170810 02:39:01.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:01.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:01.038" status="PASS" starttime="20170810 02:39:01.037"></status>
</kw>
<status endtime="20170810 02:39:01.038" status="PASS" starttime="20170810 02:39:00.739"></status>
</kw>
<status endtime="20170810 02:39:01.038" status="PASS" starttime="20170810 02:39:00.739"></status>
</kw>
<status endtime="20170810 02:39:01.038" status="PASS" starttime="20170810 02:39:00.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:01.039" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:39:01.039" status="PASS" starttime="20170810 02:39:01.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:01.041" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:01.041" status="PASS" starttime="20170810 02:39:01.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:01.042" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:01.042" status="PASS" starttime="20170810 02:39:01.042"></status>
</kw>
<status endtime="20170810 02:39:01.042" status="PASS" starttime="20170810 02:39:01.041"></status>
</kw>
<status endtime="20170810 02:39:01.042" status="PASS" starttime="20170810 02:39:01.040"></status>
</kw>
<status endtime="20170810 02:39:01.042" status="PASS" starttime="20170810 02:39:01.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:01.141" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:39:01.142" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:01.142" status="PASS" starttime="20170810 02:39:01.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:01.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:01.143" status="PASS" starttime="20170810 02:39:01.143"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:01.144" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:01.144" status="PASS" starttime="20170810 02:39:01.144"></status>
</kw>
<status endtime="20170810 02:39:01.145" status="PASS" starttime="20170810 02:39:01.144"></status>
</kw>
<status endtime="20170810 02:39:01.145" status="PASS" starttime="20170810 02:39:01.142"></status>
</kw>
<status endtime="20170810 02:39:01.145" status="PASS" starttime="20170810 02:39:01.142"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:01.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:01.145" status="PASS" starttime="20170810 02:39:01.145"></status>
</kw>
<msg timestamp="20170810 02:39:01.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:01.145" status="PASS" starttime="20170810 02:39:00.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:01.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:01.146" status="PASS" starttime="20170810 02:39:01.146"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:01.147" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:01.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:01.147" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:39:01.147" status="PASS" starttime="20170810 02:39:01.146"></status>
</kw>
<msg timestamp="20170810 02:39:01.147" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:39:01.147" status="PASS" starttime="20170810 02:39:00.737"></status>
</kw>
<msg timestamp="20170810 02:39:01.147" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:39:01.147" status="PASS" starttime="20170810 02:39:00.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:39:01.148" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:39:01.148" status="FAIL" starttime="20170810 02:39:01.148"></status>
</kw>
<status endtime="20170810 02:39:01.148" status="FAIL" starttime="20170810 02:39:00.737"></status>
</kw>
<status endtime="20170810 02:39:01.148" status="FAIL" starttime="20170810 02:38:59.730"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:11.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:11.155" status="PASS" starttime="20170810 02:39:11.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:11.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:11.156" status="PASS" starttime="20170810 02:39:11.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:11.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:11.156" status="PASS" starttime="20170810 02:39:11.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:11.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:11.157" status="PASS" starttime="20170810 02:39:11.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.347" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:11.347" status="PASS" starttime="20170810 02:39:11.158"></status>
</kw>
<msg timestamp="20170810 02:39:11.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:11.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:11.347" status="PASS" starttime="20170810 02:39:11.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:11.348" status="PASS" starttime="20170810 02:39:11.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:11.348" status="PASS" starttime="20170810 02:39:11.348"></status>
</kw>
<status endtime="20170810 02:39:11.349" status="PASS" starttime="20170810 02:39:11.154"></status>
</kw>
<status endtime="20170810 02:39:11.349" status="PASS" starttime="20170810 02:39:11.153"></status>
</kw>
<status endtime="20170810 02:39:11.349" status="PASS" starttime="20170810 02:39:11.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:11.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:39:11.349" status="PASS" starttime="20170810 02:39:11.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:11.351" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:11.352" status="PASS" starttime="20170810 02:39:11.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:11.352" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:11.353" status="PASS" starttime="20170810 02:39:11.352"></status>
</kw>
<status endtime="20170810 02:39:11.353" status="PASS" starttime="20170810 02:39:11.352"></status>
</kw>
<status endtime="20170810 02:39:11.353" status="PASS" starttime="20170810 02:39:11.350"></status>
</kw>
<status endtime="20170810 02:39:11.353" status="PASS" starttime="20170810 02:39:11.350"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:11.416" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:11.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:11.416" status="PASS" starttime="20170810 02:39:11.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:11.418" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:11.418" status="PASS" starttime="20170810 02:39:11.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:11.419" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:11.419" status="PASS" starttime="20170810 02:39:11.419"></status>
</kw>
<status endtime="20170810 02:39:11.419" status="PASS" starttime="20170810 02:39:11.418"></status>
</kw>
<status endtime="20170810 02:39:11.420" status="PASS" starttime="20170810 02:39:11.417"></status>
</kw>
<status endtime="20170810 02:39:11.420" status="PASS" starttime="20170810 02:39:11.417"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:11.420" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:11.420" status="PASS" starttime="20170810 02:39:11.420"></status>
</kw>
<msg timestamp="20170810 02:39:11.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:11.420" status="PASS" starttime="20170810 02:39:11.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:11.421" status="PASS" starttime="20170810 02:39:11.421"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:11.422" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:11.422" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:11.422" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:39:11.422" status="PASS" starttime="20170810 02:39:11.421"></status>
</kw>
<msg timestamp="20170810 02:39:11.422" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:39:11.422" status="PASS" starttime="20170810 02:39:11.151"></status>
</kw>
<msg timestamp="20170810 02:39:11.422" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:39:11.422" status="PASS" starttime="20170810 02:39:11.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:39:11.423" status="PASS" starttime="20170810 02:39:11.423"></status>
</kw>
<status endtime="20170810 02:39:11.423" status="PASS" starttime="20170810 02:39:11.150"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:11.426" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:11.427" status="PASS" starttime="20170810 02:39:11.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:11.427" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:11.427" status="PASS" starttime="20170810 02:39:11.427"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:11.428" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:11.428" status="PASS" starttime="20170810 02:39:11.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:11.429" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:11.429" status="PASS" starttime="20170810 02:39:11.428"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.938" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:11.938" status="PASS" starttime="20170810 02:39:11.429"></status>
</kw>
<msg timestamp="20170810 02:39:11.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:11.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:11.938" status="PASS" starttime="20170810 02:39:11.429"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:11.939" status="PASS" starttime="20170810 02:39:11.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:11.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:11.940" status="PASS" starttime="20170810 02:39:11.939"></status>
</kw>
<status endtime="20170810 02:39:11.940" status="PASS" starttime="20170810 02:39:11.426"></status>
</kw>
<status endtime="20170810 02:39:11.940" status="PASS" starttime="20170810 02:39:11.425"></status>
</kw>
<status endtime="20170810 02:39:11.940" status="PASS" starttime="20170810 02:39:11.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:11.941" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:39:11.941" status="PASS" starttime="20170810 02:39:11.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:11.944" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:11.944" status="PASS" starttime="20170810 02:39:11.943"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:11.945" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:11.946" status="PASS" starttime="20170810 02:39:11.945"></status>
</kw>
<status endtime="20170810 02:39:11.946" status="PASS" starttime="20170810 02:39:11.944"></status>
</kw>
<status endtime="20170810 02:39:11.946" status="PASS" starttime="20170810 02:39:11.942"></status>
</kw>
<status endtime="20170810 02:39:11.946" status="PASS" starttime="20170810 02:39:11.941"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:12.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:12.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:12.145" status="PASS" starttime="20170810 02:39:11.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:12.147" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:12.147" status="PASS" starttime="20170810 02:39:12.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:12.149" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:12.149" status="PASS" starttime="20170810 02:39:12.148"></status>
</kw>
<status endtime="20170810 02:39:12.149" status="PASS" starttime="20170810 02:39:12.147"></status>
</kw>
<status endtime="20170810 02:39:12.149" status="PASS" starttime="20170810 02:39:12.146"></status>
</kw>
<status endtime="20170810 02:39:12.149" status="PASS" starttime="20170810 02:39:12.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:12.149" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:12.149" status="PASS" starttime="20170810 02:39:12.149"></status>
</kw>
<msg timestamp="20170810 02:39:12.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:12.150" status="PASS" starttime="20170810 02:39:11.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:12.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:12.150" status="PASS" starttime="20170810 02:39:12.150"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:12.151" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:12.151" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:12.151" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:39:12.151" status="PASS" starttime="20170810 02:39:12.151"></status>
</kw>
<msg timestamp="20170810 02:39:12.151" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:39:12.152" status="PASS" starttime="20170810 02:39:11.424"></status>
</kw>
<msg timestamp="20170810 02:39:12.152" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:39:12.152" status="PASS" starttime="20170810 02:39:11.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:39:12.152" status="PASS" starttime="20170810 02:39:12.152"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:12.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:12.157" status="PASS" starttime="20170810 02:39:12.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:12.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:12.157" status="PASS" starttime="20170810 02:39:12.157"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:12.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:12.158" status="PASS" starttime="20170810 02:39:12.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:12.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:12.159" status="PASS" starttime="20170810 02:39:12.158"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:12.383" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:12.383" status="PASS" starttime="20170810 02:39:12.159"></status>
</kw>
<msg timestamp="20170810 02:39:12.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:12.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:12.383" status="PASS" starttime="20170810 02:39:12.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:12.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:12.384" status="PASS" starttime="20170810 02:39:12.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:12.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:12.384" status="PASS" starttime="20170810 02:39:12.384"></status>
</kw>
<status endtime="20170810 02:39:12.384" status="PASS" starttime="20170810 02:39:12.155"></status>
</kw>
<status endtime="20170810 02:39:12.384" status="PASS" starttime="20170810 02:39:12.155"></status>
</kw>
<status endtime="20170810 02:39:12.385" status="PASS" starttime="20170810 02:39:12.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:12.385" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:39:12.385" status="PASS" starttime="20170810 02:39:12.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:12.387" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:12.387" status="PASS" starttime="20170810 02:39:12.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:12.388" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:12.388" status="PASS" starttime="20170810 02:39:12.388"></status>
</kw>
<status endtime="20170810 02:39:12.388" status="PASS" starttime="20170810 02:39:12.387"></status>
</kw>
<status endtime="20170810 02:39:12.389" status="PASS" starttime="20170810 02:39:12.386"></status>
</kw>
<status endtime="20170810 02:39:12.389" status="PASS" starttime="20170810 02:39:12.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:12.454" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:39:12.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:12.455" status="PASS" starttime="20170810 02:39:12.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:12.456" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:12.456" status="PASS" starttime="20170810 02:39:12.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:12.457" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:12.457" status="PASS" starttime="20170810 02:39:12.457"></status>
</kw>
<status endtime="20170810 02:39:12.457" status="PASS" starttime="20170810 02:39:12.457"></status>
</kw>
<status endtime="20170810 02:39:12.458" status="PASS" starttime="20170810 02:39:12.455"></status>
</kw>
<status endtime="20170810 02:39:12.458" status="PASS" starttime="20170810 02:39:12.455"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:12.458" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:12.458" status="PASS" starttime="20170810 02:39:12.458"></status>
</kw>
<msg timestamp="20170810 02:39:12.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:12.458" status="PASS" starttime="20170810 02:39:12.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:12.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:12.459" status="PASS" starttime="20170810 02:39:12.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:12.459" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:12.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:12.460" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:39:12.460" status="PASS" starttime="20170810 02:39:12.459"></status>
</kw>
<msg timestamp="20170810 02:39:12.460" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:39:12.460" status="PASS" starttime="20170810 02:39:12.153"></status>
</kw>
<msg timestamp="20170810 02:39:12.460" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:39:12.460" status="PASS" starttime="20170810 02:39:12.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:39:12.461" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:39:12.461" status="FAIL" starttime="20170810 02:39:12.460"></status>
</kw>
<status endtime="20170810 02:39:12.461" status="FAIL" starttime="20170810 02:39:12.153"></status>
</kw>
<status endtime="20170810 02:39:12.461" status="FAIL" starttime="20170810 02:39:11.149"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:22.468" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:22.469" status="PASS" starttime="20170810 02:39:22.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:22.470" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:22.470" status="PASS" starttime="20170810 02:39:22.469"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:22.471" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:22.471" status="PASS" starttime="20170810 02:39:22.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:22.472" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:22.472" status="PASS" starttime="20170810 02:39:22.471"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:22.881" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:22.881" status="PASS" starttime="20170810 02:39:22.473"></status>
</kw>
<msg timestamp="20170810 02:39:22.881" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:22.881" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:22.881" status="PASS" starttime="20170810 02:39:22.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:22.882" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:22.882" status="PASS" starttime="20170810 02:39:22.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:22.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:22.883" status="PASS" starttime="20170810 02:39:22.882"></status>
</kw>
<status endtime="20170810 02:39:22.883" status="PASS" starttime="20170810 02:39:22.467"></status>
</kw>
<status endtime="20170810 02:39:22.883" status="PASS" starttime="20170810 02:39:22.466"></status>
</kw>
<status endtime="20170810 02:39:22.883" status="PASS" starttime="20170810 02:39:22.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:22.884" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:39:22.884" status="PASS" starttime="20170810 02:39:22.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:22.886" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:22.886" status="PASS" starttime="20170810 02:39:22.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:22.887" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:22.887" status="PASS" starttime="20170810 02:39:22.886"></status>
</kw>
<status endtime="20170810 02:39:22.887" status="PASS" starttime="20170810 02:39:22.886"></status>
</kw>
<status endtime="20170810 02:39:22.887" status="PASS" starttime="20170810 02:39:22.884"></status>
</kw>
<status endtime="20170810 02:39:22.887" status="PASS" starttime="20170810 02:39:22.884"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:26.638" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:26.638" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:26.639" status="PASS" starttime="20170810 02:39:22.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:26.641" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:26.641" status="PASS" starttime="20170810 02:39:26.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:26.642" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:26.642" status="PASS" starttime="20170810 02:39:26.641"></status>
</kw>
<status endtime="20170810 02:39:26.642" status="PASS" starttime="20170810 02:39:26.641"></status>
</kw>
<status endtime="20170810 02:39:26.642" status="PASS" starttime="20170810 02:39:26.639"></status>
</kw>
<status endtime="20170810 02:39:26.642" status="PASS" starttime="20170810 02:39:26.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:26.642" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:26.643" status="PASS" starttime="20170810 02:39:26.642"></status>
</kw>
<msg timestamp="20170810 02:39:26.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:26.643" status="PASS" starttime="20170810 02:39:22.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:26.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:26.643" status="PASS" starttime="20170810 02:39:26.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:26.644" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:26.644" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:26.644" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:39:26.644" status="PASS" starttime="20170810 02:39:26.644"></status>
</kw>
<msg timestamp="20170810 02:39:26.645" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:39:26.645" status="PASS" starttime="20170810 02:39:22.463"></status>
</kw>
<msg timestamp="20170810 02:39:26.645" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:39:26.645" status="PASS" starttime="20170810 02:39:22.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:39:26.645" status="PASS" starttime="20170810 02:39:26.645"></status>
</kw>
<status endtime="20170810 02:39:26.646" status="PASS" starttime="20170810 02:39:22.463"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:26.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:26.650" status="PASS" starttime="20170810 02:39:26.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:26.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:26.650" status="PASS" starttime="20170810 02:39:26.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:26.651" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:26.651" status="PASS" starttime="20170810 02:39:26.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:26.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:26.651" status="PASS" starttime="20170810 02:39:26.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:26.908" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:26.908" status="PASS" starttime="20170810 02:39:26.652"></status>
</kw>
<msg timestamp="20170810 02:39:26.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:26.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:26.909" status="PASS" starttime="20170810 02:39:26.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:26.909" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:26.909" status="PASS" starttime="20170810 02:39:26.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:26.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:26.910" status="PASS" starttime="20170810 02:39:26.910"></status>
</kw>
<status endtime="20170810 02:39:26.910" status="PASS" starttime="20170810 02:39:26.648"></status>
</kw>
<status endtime="20170810 02:39:26.910" status="PASS" starttime="20170810 02:39:26.648"></status>
</kw>
<status endtime="20170810 02:39:26.911" status="PASS" starttime="20170810 02:39:26.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:26.911" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:39:26.911" status="PASS" starttime="20170810 02:39:26.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:26.914" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:26.914" status="PASS" starttime="20170810 02:39:26.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:26.915" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:26.915" status="PASS" starttime="20170810 02:39:26.914"></status>
</kw>
<status endtime="20170810 02:39:26.915" status="PASS" starttime="20170810 02:39:26.914"></status>
</kw>
<status endtime="20170810 02:39:26.915" status="PASS" starttime="20170810 02:39:26.912"></status>
</kw>
<status endtime="20170810 02:39:26.915" status="PASS" starttime="20170810 02:39:26.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:27.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:27.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:27.155" status="PASS" starttime="20170810 02:39:26.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:27.157" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:27.157" status="PASS" starttime="20170810 02:39:27.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:27.158" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:27.158" status="PASS" starttime="20170810 02:39:27.157"></status>
</kw>
<status endtime="20170810 02:39:27.158" status="PASS" starttime="20170810 02:39:27.157"></status>
</kw>
<status endtime="20170810 02:39:27.158" status="PASS" starttime="20170810 02:39:27.156"></status>
</kw>
<status endtime="20170810 02:39:27.158" status="PASS" starttime="20170810 02:39:27.155"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:27.158" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:27.158" status="PASS" starttime="20170810 02:39:27.158"></status>
</kw>
<msg timestamp="20170810 02:39:27.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:27.159" status="PASS" starttime="20170810 02:39:26.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:27.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:27.159" status="PASS" starttime="20170810 02:39:27.159"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:27.160" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:27.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:27.160" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:39:27.160" status="PASS" starttime="20170810 02:39:27.160"></status>
</kw>
<msg timestamp="20170810 02:39:27.160" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:39:27.160" status="PASS" starttime="20170810 02:39:26.646"></status>
</kw>
<msg timestamp="20170810 02:39:27.161" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:39:27.161" status="PASS" starttime="20170810 02:39:26.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:39:27.161" status="PASS" starttime="20170810 02:39:27.161"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:27.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:27.165" status="PASS" starttime="20170810 02:39:27.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:27.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:27.166" status="PASS" starttime="20170810 02:39:27.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:27.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:27.167" status="PASS" starttime="20170810 02:39:27.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:27.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:27.167" status="PASS" starttime="20170810 02:39:27.167"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:27.643" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:27.643" status="PASS" starttime="20170810 02:39:27.171"></status>
</kw>
<msg timestamp="20170810 02:39:27.643" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:27.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:27.643" status="PASS" starttime="20170810 02:39:27.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:27.644" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:27.644" status="PASS" starttime="20170810 02:39:27.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:27.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:27.644" status="PASS" starttime="20170810 02:39:27.644"></status>
</kw>
<status endtime="20170810 02:39:27.645" status="PASS" starttime="20170810 02:39:27.164"></status>
</kw>
<status endtime="20170810 02:39:27.645" status="PASS" starttime="20170810 02:39:27.164"></status>
</kw>
<status endtime="20170810 02:39:27.645" status="PASS" starttime="20170810 02:39:27.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:27.645" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:39:27.645" status="PASS" starttime="20170810 02:39:27.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:27.648" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:27.648" status="PASS" starttime="20170810 02:39:27.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:27.649" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:27.649" status="PASS" starttime="20170810 02:39:27.648"></status>
</kw>
<status endtime="20170810 02:39:27.649" status="PASS" starttime="20170810 02:39:27.648"></status>
</kw>
<status endtime="20170810 02:39:27.649" status="PASS" starttime="20170810 02:39:27.646"></status>
</kw>
<status endtime="20170810 02:39:27.649" status="PASS" starttime="20170810 02:39:27.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:27.792" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:39:27.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:27.792" status="PASS" starttime="20170810 02:39:27.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:27.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:27.794" status="PASS" starttime="20170810 02:39:27.793"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:27.795" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:27.795" status="PASS" starttime="20170810 02:39:27.794"></status>
</kw>
<status endtime="20170810 02:39:27.795" status="PASS" starttime="20170810 02:39:27.794"></status>
</kw>
<status endtime="20170810 02:39:27.795" status="PASS" starttime="20170810 02:39:27.793"></status>
</kw>
<status endtime="20170810 02:39:27.795" status="PASS" starttime="20170810 02:39:27.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:27.795" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:27.795" status="PASS" starttime="20170810 02:39:27.795"></status>
</kw>
<msg timestamp="20170810 02:39:27.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:27.796" status="PASS" starttime="20170810 02:39:27.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:27.796" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:27.796" status="PASS" starttime="20170810 02:39:27.796"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:27.797" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:27.797" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:27.797" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:39:27.797" status="PASS" starttime="20170810 02:39:27.797"></status>
</kw>
<msg timestamp="20170810 02:39:27.797" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:39:27.797" status="PASS" starttime="20170810 02:39:27.162"></status>
</kw>
<msg timestamp="20170810 02:39:27.798" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:39:27.798" status="PASS" starttime="20170810 02:39:27.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:39:27.798" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:39:27.798" status="FAIL" starttime="20170810 02:39:27.798"></status>
</kw>
<status endtime="20170810 02:39:27.798" status="FAIL" starttime="20170810 02:39:27.161"></status>
</kw>
<status endtime="20170810 02:39:27.799" status="FAIL" starttime="20170810 02:39:22.462"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:37.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:37.805" status="PASS" starttime="20170810 02:39:37.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:37.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:37.805" status="PASS" starttime="20170810 02:39:37.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:37.806" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:37.806" status="PASS" starttime="20170810 02:39:37.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:37.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:37.806" status="PASS" starttime="20170810 02:39:37.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:38.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:38.804" status="PASS" starttime="20170810 02:39:37.807"></status>
</kw>
<msg timestamp="20170810 02:39:38.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:38.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:38.804" status="PASS" starttime="20170810 02:39:37.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:38.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:38.805" status="PASS" starttime="20170810 02:39:38.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:38.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:38.805" status="PASS" starttime="20170810 02:39:38.805"></status>
</kw>
<status endtime="20170810 02:39:38.806" status="PASS" starttime="20170810 02:39:37.803"></status>
</kw>
<status endtime="20170810 02:39:38.806" status="PASS" starttime="20170810 02:39:37.803"></status>
</kw>
<status endtime="20170810 02:39:38.806" status="PASS" starttime="20170810 02:39:37.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:38.806" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:39:38.806" status="PASS" starttime="20170810 02:39:38.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:38.809" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:38.809" status="PASS" starttime="20170810 02:39:38.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:38.810" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:38.810" status="PASS" starttime="20170810 02:39:38.809"></status>
</kw>
<status endtime="20170810 02:39:38.810" status="PASS" starttime="20170810 02:39:38.809"></status>
</kw>
<status endtime="20170810 02:39:38.810" status="PASS" starttime="20170810 02:39:38.807"></status>
</kw>
<status endtime="20170810 02:39:38.810" status="PASS" starttime="20170810 02:39:38.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:44.789" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:44.790" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:44.790" status="PASS" starttime="20170810 02:39:38.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:44.792" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:44.792" status="PASS" starttime="20170810 02:39:44.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:44.793" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:44.793" status="PASS" starttime="20170810 02:39:44.793"></status>
</kw>
<status endtime="20170810 02:39:44.793" status="PASS" starttime="20170810 02:39:44.792"></status>
</kw>
<status endtime="20170810 02:39:44.793" status="PASS" starttime="20170810 02:39:44.791"></status>
</kw>
<status endtime="20170810 02:39:44.794" status="PASS" starttime="20170810 02:39:44.790"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:44.794" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:44.794" status="PASS" starttime="20170810 02:39:44.794"></status>
</kw>
<msg timestamp="20170810 02:39:44.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:44.794" status="PASS" starttime="20170810 02:39:37.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:44.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:44.795" status="PASS" starttime="20170810 02:39:44.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:44.795" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:44.795" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:44.796" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:39:44.796" status="PASS" starttime="20170810 02:39:44.795"></status>
</kw>
<msg timestamp="20170810 02:39:44.796" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:39:44.796" status="PASS" starttime="20170810 02:39:37.801"></status>
</kw>
<msg timestamp="20170810 02:39:44.796" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:39:44.796" status="PASS" starttime="20170810 02:39:37.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 02:39:44.797" level="FAIL">On != Off</msg>
<status endtime="20170810 02:39:44.797" status="FAIL" starttime="20170810 02:39:44.796"></status>
</kw>
<status endtime="20170810 02:39:44.797" status="FAIL" starttime="20170810 02:39:37.800"></status>
</kw>
<status endtime="20170810 02:39:44.797" status="FAIL" starttime="20170810 02:39:37.799"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:54.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:54.803" status="PASS" starttime="20170810 02:39:54.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:54.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:54.804" status="PASS" starttime="20170810 02:39:54.803"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:54.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:54.804" status="PASS" starttime="20170810 02:39:54.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:54.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:54.805" status="PASS" starttime="20170810 02:39:54.805"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:55.533" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:55.533" status="PASS" starttime="20170810 02:39:54.806"></status>
</kw>
<msg timestamp="20170810 02:39:55.533" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:55.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:55.533" status="PASS" starttime="20170810 02:39:54.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:55.534" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:55.534" status="PASS" starttime="20170810 02:39:55.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:55.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:55.535" status="PASS" starttime="20170810 02:39:55.534"></status>
</kw>
<status endtime="20170810 02:39:55.535" status="PASS" starttime="20170810 02:39:54.802"></status>
</kw>
<status endtime="20170810 02:39:55.535" status="PASS" starttime="20170810 02:39:54.801"></status>
</kw>
<status endtime="20170810 02:39:55.535" status="PASS" starttime="20170810 02:39:54.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:55.536" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:39:55.536" status="PASS" starttime="20170810 02:39:55.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:55.538" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:55.538" status="PASS" starttime="20170810 02:39:55.537"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:55.539" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:55.539" status="PASS" starttime="20170810 02:39:55.538"></status>
</kw>
<status endtime="20170810 02:39:55.539" status="PASS" starttime="20170810 02:39:55.538"></status>
</kw>
<status endtime="20170810 02:39:55.539" status="PASS" starttime="20170810 02:39:55.536"></status>
</kw>
<status endtime="20170810 02:39:55.539" status="PASS" starttime="20170810 02:39:55.536"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:56.066" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:56.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:56.067" status="PASS" starttime="20170810 02:39:55.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:56.069" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:56.069" status="PASS" starttime="20170810 02:39:56.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:56.070" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:56.070" status="PASS" starttime="20170810 02:39:56.069"></status>
</kw>
<status endtime="20170810 02:39:56.070" status="PASS" starttime="20170810 02:39:56.069"></status>
</kw>
<status endtime="20170810 02:39:56.070" status="PASS" starttime="20170810 02:39:56.068"></status>
</kw>
<status endtime="20170810 02:39:56.070" status="PASS" starttime="20170810 02:39:56.067"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:56.070" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:56.071" status="PASS" starttime="20170810 02:39:56.070"></status>
</kw>
<msg timestamp="20170810 02:39:56.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:56.071" status="PASS" starttime="20170810 02:39:54.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:56.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:56.071" status="PASS" starttime="20170810 02:39:56.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:56.072" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:56.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:56.072" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:39:56.072" status="PASS" starttime="20170810 02:39:56.072"></status>
</kw>
<msg timestamp="20170810 02:39:56.072" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:39:56.073" status="PASS" starttime="20170810 02:39:54.799"></status>
</kw>
<msg timestamp="20170810 02:39:56.073" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:39:56.073" status="PASS" starttime="20170810 02:39:54.799"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:39:56.073" status="PASS" starttime="20170810 02:39:56.073"></status>
</kw>
<status endtime="20170810 02:39:56.073" status="PASS" starttime="20170810 02:39:54.798"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:56.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:56.078" status="PASS" starttime="20170810 02:39:56.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:56.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:56.079" status="PASS" starttime="20170810 02:39:56.078"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:56.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:56.079" status="PASS" starttime="20170810 02:39:56.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:56.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:56.080" status="PASS" starttime="20170810 02:39:56.079"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:56.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:56.433" status="PASS" starttime="20170810 02:39:56.080"></status>
</kw>
<msg timestamp="20170810 02:39:56.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:56.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:56.433" status="PASS" starttime="20170810 02:39:56.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:56.434" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:56.434" status="PASS" starttime="20170810 02:39:56.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:56.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:56.436" status="PASS" starttime="20170810 02:39:56.435"></status>
</kw>
<status endtime="20170810 02:39:56.436" status="PASS" starttime="20170810 02:39:56.076"></status>
</kw>
<status endtime="20170810 02:39:56.436" status="PASS" starttime="20170810 02:39:56.076"></status>
</kw>
<status endtime="20170810 02:39:56.436" status="PASS" starttime="20170810 02:39:56.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:56.437" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:39:56.437" status="PASS" starttime="20170810 02:39:56.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:56.440" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:56.440" status="PASS" starttime="20170810 02:39:56.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:56.442" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:39:56.442" status="PASS" starttime="20170810 02:39:56.441"></status>
</kw>
<status endtime="20170810 02:39:56.442" status="PASS" starttime="20170810 02:39:56.441"></status>
</kw>
<status endtime="20170810 02:39:56.442" status="PASS" starttime="20170810 02:39:56.438"></status>
</kw>
<status endtime="20170810 02:39:56.443" status="PASS" starttime="20170810 02:39:56.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:57.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:39:57.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:57.080" status="PASS" starttime="20170810 02:39:56.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:57.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:57.083" status="PASS" starttime="20170810 02:39:57.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:57.083" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:57.083" status="PASS" starttime="20170810 02:39:57.083"></status>
</kw>
<status endtime="20170810 02:39:57.084" status="PASS" starttime="20170810 02:39:57.083"></status>
</kw>
<status endtime="20170810 02:39:57.084" status="PASS" starttime="20170810 02:39:57.081"></status>
</kw>
<status endtime="20170810 02:39:57.084" status="PASS" starttime="20170810 02:39:57.081"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:57.084" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:57.084" status="PASS" starttime="20170810 02:39:57.084"></status>
</kw>
<msg timestamp="20170810 02:39:57.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:57.085" status="PASS" starttime="20170810 02:39:56.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:57.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:57.085" status="PASS" starttime="20170810 02:39:57.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:57.086" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:57.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:57.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:39:57.086" status="PASS" starttime="20170810 02:39:57.085"></status>
</kw>
<msg timestamp="20170810 02:39:57.086" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:39:57.086" status="PASS" starttime="20170810 02:39:56.074"></status>
</kw>
<msg timestamp="20170810 02:39:57.087" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:39:57.087" status="PASS" starttime="20170810 02:39:56.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:39:57.087" status="PASS" starttime="20170810 02:39:57.087"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:39:57.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:39:57.092" status="PASS" starttime="20170810 02:39:57.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:39:57.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:39:57.092" status="PASS" starttime="20170810 02:39:57.092"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:39:57.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:39:57.093" status="PASS" starttime="20170810 02:39:57.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:39:57.094" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:39:57.094" status="PASS" starttime="20170810 02:39:57.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:39:57.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:39:57.286" status="PASS" starttime="20170810 02:39:57.094"></status>
</kw>
<msg timestamp="20170810 02:39:57.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:39:57.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:57.286" status="PASS" starttime="20170810 02:39:57.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:39:57.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:57.286" status="PASS" starttime="20170810 02:39:57.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:57.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:57.287" status="PASS" starttime="20170810 02:39:57.287"></status>
</kw>
<status endtime="20170810 02:39:57.287" status="PASS" starttime="20170810 02:39:57.091"></status>
</kw>
<status endtime="20170810 02:39:57.287" status="PASS" starttime="20170810 02:39:57.090"></status>
</kw>
<status endtime="20170810 02:39:57.287" status="PASS" starttime="20170810 02:39:57.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:39:57.288" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:39:57.288" status="PASS" starttime="20170810 02:39:57.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:57.290" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:57.290" status="PASS" starttime="20170810 02:39:57.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:57.291" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:39:57.291" status="PASS" starttime="20170810 02:39:57.291"></status>
</kw>
<status endtime="20170810 02:39:57.291" status="PASS" starttime="20170810 02:39:57.290"></status>
</kw>
<status endtime="20170810 02:39:57.291" status="PASS" starttime="20170810 02:39:57.289"></status>
</kw>
<status endtime="20170810 02:39:57.291" status="PASS" starttime="20170810 02:39:57.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:39:57.360" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:39:57.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:57.360" status="PASS" starttime="20170810 02:39:57.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:39:57.362" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:57.362" status="PASS" starttime="20170810 02:39:57.362"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:39:57.363" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:39:57.363" status="PASS" starttime="20170810 02:39:57.363"></status>
</kw>
<status endtime="20170810 02:39:57.363" status="PASS" starttime="20170810 02:39:57.362"></status>
</kw>
<status endtime="20170810 02:39:57.363" status="PASS" starttime="20170810 02:39:57.361"></status>
</kw>
<status endtime="20170810 02:39:57.364" status="PASS" starttime="20170810 02:39:57.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:39:57.364" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:39:57.364" status="PASS" starttime="20170810 02:39:57.364"></status>
</kw>
<msg timestamp="20170810 02:39:57.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:39:57.364" status="PASS" starttime="20170810 02:39:57.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:39:57.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:39:57.365" status="PASS" starttime="20170810 02:39:57.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:39:57.365" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:39:57.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:39:57.366" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:39:57.366" status="PASS" starttime="20170810 02:39:57.365"></status>
</kw>
<msg timestamp="20170810 02:39:57.366" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:39:57.366" status="PASS" starttime="20170810 02:39:57.088"></status>
</kw>
<msg timestamp="20170810 02:39:57.366" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:39:57.366" status="PASS" starttime="20170810 02:39:57.088"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:39:57.367" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:39:57.367" status="FAIL" starttime="20170810 02:39:57.366"></status>
</kw>
<status endtime="20170810 02:39:57.367" status="FAIL" starttime="20170810 02:39:57.087"></status>
</kw>
<status endtime="20170810 02:39:57.367" status="FAIL" starttime="20170810 02:39:54.798"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:07.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:07.374" status="PASS" starttime="20170810 02:40:07.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:07.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:07.375" status="PASS" starttime="20170810 02:40:07.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:07.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:07.376" status="PASS" starttime="20170810 02:40:07.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:07.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:07.377" status="PASS" starttime="20170810 02:40:07.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.578" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:07.578" status="PASS" starttime="20170810 02:40:07.378"></status>
</kw>
<msg timestamp="20170810 02:40:07.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:07.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:07.579" status="PASS" starttime="20170810 02:40:07.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:07.580" status="PASS" starttime="20170810 02:40:07.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:07.581" status="PASS" starttime="20170810 02:40:07.580"></status>
</kw>
<status endtime="20170810 02:40:07.581" status="PASS" starttime="20170810 02:40:07.372"></status>
</kw>
<status endtime="20170810 02:40:07.581" status="PASS" starttime="20170810 02:40:07.372"></status>
</kw>
<status endtime="20170810 02:40:07.581" status="PASS" starttime="20170810 02:40:07.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:07.582" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:40:07.582" status="PASS" starttime="20170810 02:40:07.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:07.585" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:07.585" status="PASS" starttime="20170810 02:40:07.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:07.587" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:07.587" status="PASS" starttime="20170810 02:40:07.586"></status>
</kw>
<status endtime="20170810 02:40:07.587" status="PASS" starttime="20170810 02:40:07.586"></status>
</kw>
<status endtime="20170810 02:40:07.587" status="PASS" starttime="20170810 02:40:07.583"></status>
</kw>
<status endtime="20170810 02:40:07.587" status="PASS" starttime="20170810 02:40:07.583"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:07.652" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:07.652" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:07.652" status="PASS" starttime="20170810 02:40:07.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:07.654" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:07.654" status="PASS" starttime="20170810 02:40:07.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:07.655" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:07.655" status="PASS" starttime="20170810 02:40:07.655"></status>
</kw>
<status endtime="20170810 02:40:07.655" status="PASS" starttime="20170810 02:40:07.655"></status>
</kw>
<status endtime="20170810 02:40:07.656" status="PASS" starttime="20170810 02:40:07.653"></status>
</kw>
<status endtime="20170810 02:40:07.656" status="PASS" starttime="20170810 02:40:07.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:07.656" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:07.656" status="PASS" starttime="20170810 02:40:07.656"></status>
</kw>
<msg timestamp="20170810 02:40:07.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:07.656" status="PASS" starttime="20170810 02:40:07.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:07.657" status="PASS" starttime="20170810 02:40:07.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:07.658" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:07.658" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:07.658" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:40:07.658" status="PASS" starttime="20170810 02:40:07.657"></status>
</kw>
<msg timestamp="20170810 02:40:07.658" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:40:07.658" status="PASS" starttime="20170810 02:40:07.369"></status>
</kw>
<msg timestamp="20170810 02:40:07.658" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:40:07.658" status="PASS" starttime="20170810 02:40:07.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:40:07.659" status="PASS" starttime="20170810 02:40:07.659"></status>
</kw>
<status endtime="20170810 02:40:07.659" status="PASS" starttime="20170810 02:40:07.369"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:07.663" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:07.664" status="PASS" starttime="20170810 02:40:07.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:07.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:07.664" status="PASS" starttime="20170810 02:40:07.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:07.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:07.665" status="PASS" starttime="20170810 02:40:07.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:07.665" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:07.665" status="PASS" starttime="20170810 02:40:07.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.859" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:07.859" status="PASS" starttime="20170810 02:40:07.666"></status>
</kw>
<msg timestamp="20170810 02:40:07.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:07.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:07.859" status="PASS" starttime="20170810 02:40:07.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.860" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:07.860" status="PASS" starttime="20170810 02:40:07.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:07.861" status="PASS" starttime="20170810 02:40:07.860"></status>
</kw>
<status endtime="20170810 02:40:07.861" status="PASS" starttime="20170810 02:40:07.662"></status>
</kw>
<status endtime="20170810 02:40:07.861" status="PASS" starttime="20170810 02:40:07.661"></status>
</kw>
<status endtime="20170810 02:40:07.861" status="PASS" starttime="20170810 02:40:07.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:07.862" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:40:07.862" status="PASS" starttime="20170810 02:40:07.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:07.864" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:07.864" status="PASS" starttime="20170810 02:40:07.863"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:07.865" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:07.865" status="PASS" starttime="20170810 02:40:07.864"></status>
</kw>
<status endtime="20170810 02:40:07.865" status="PASS" starttime="20170810 02:40:07.864"></status>
</kw>
<status endtime="20170810 02:40:07.865" status="PASS" starttime="20170810 02:40:07.862"></status>
</kw>
<status endtime="20170810 02:40:07.865" status="PASS" starttime="20170810 02:40:07.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:07.955" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:07.956" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:07.956" status="PASS" starttime="20170810 02:40:07.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:07.958" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:07.958" status="PASS" starttime="20170810 02:40:07.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:07.958" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:07.959" status="PASS" starttime="20170810 02:40:07.958"></status>
</kw>
<status endtime="20170810 02:40:07.959" status="PASS" starttime="20170810 02:40:07.958"></status>
</kw>
<status endtime="20170810 02:40:07.959" status="PASS" starttime="20170810 02:40:07.957"></status>
</kw>
<status endtime="20170810 02:40:07.959" status="PASS" starttime="20170810 02:40:07.956"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:07.959" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:07.959" status="PASS" starttime="20170810 02:40:07.959"></status>
</kw>
<msg timestamp="20170810 02:40:07.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:07.960" status="PASS" starttime="20170810 02:40:07.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:07.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:07.960" status="PASS" starttime="20170810 02:40:07.960"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:07.961" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:07.961" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:07.961" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:40:07.961" status="PASS" starttime="20170810 02:40:07.960"></status>
</kw>
<msg timestamp="20170810 02:40:07.961" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:40:07.961" status="PASS" starttime="20170810 02:40:07.660"></status>
</kw>
<msg timestamp="20170810 02:40:07.962" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:40:07.962" status="PASS" starttime="20170810 02:40:07.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:40:07.962" status="PASS" starttime="20170810 02:40:07.962"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:07.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:07.967" status="PASS" starttime="20170810 02:40:07.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:07.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:07.967" status="PASS" starttime="20170810 02:40:07.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:07.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:07.968" status="PASS" starttime="20170810 02:40:07.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:07.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:07.969" status="PASS" starttime="20170810 02:40:07.968"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:08.185" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:08.185" status="PASS" starttime="20170810 02:40:07.969"></status>
</kw>
<msg timestamp="20170810 02:40:08.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:08.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:08.186" status="PASS" starttime="20170810 02:40:07.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:08.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:08.186" status="PASS" starttime="20170810 02:40:08.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:08.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:08.187" status="PASS" starttime="20170810 02:40:08.187"></status>
</kw>
<status endtime="20170810 02:40:08.187" status="PASS" starttime="20170810 02:40:07.965"></status>
</kw>
<status endtime="20170810 02:40:08.187" status="PASS" starttime="20170810 02:40:07.965"></status>
</kw>
<status endtime="20170810 02:40:08.187" status="PASS" starttime="20170810 02:40:07.965"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:08.188" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:40:08.188" status="PASS" starttime="20170810 02:40:08.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:08.191" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:08.191" status="PASS" starttime="20170810 02:40:08.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:08.193" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:08.193" status="PASS" starttime="20170810 02:40:08.192"></status>
</kw>
<status endtime="20170810 02:40:08.193" status="PASS" starttime="20170810 02:40:08.192"></status>
</kw>
<status endtime="20170810 02:40:08.194" status="PASS" starttime="20170810 02:40:08.189"></status>
</kw>
<status endtime="20170810 02:40:08.194" status="PASS" starttime="20170810 02:40:08.189"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:08.273" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:40:08.273" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:08.273" status="PASS" starttime="20170810 02:40:08.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:08.275" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:08.275" status="PASS" starttime="20170810 02:40:08.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:08.276" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:08.276" status="PASS" starttime="20170810 02:40:08.276"></status>
</kw>
<status endtime="20170810 02:40:08.276" status="PASS" starttime="20170810 02:40:08.275"></status>
</kw>
<status endtime="20170810 02:40:08.277" status="PASS" starttime="20170810 02:40:08.274"></status>
</kw>
<status endtime="20170810 02:40:08.277" status="PASS" starttime="20170810 02:40:08.274"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:08.277" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:08.277" status="PASS" starttime="20170810 02:40:08.277"></status>
</kw>
<msg timestamp="20170810 02:40:08.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:08.277" status="PASS" starttime="20170810 02:40:07.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:08.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:08.278" status="PASS" starttime="20170810 02:40:08.278"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:08.279" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:08.279" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:08.279" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:40:08.279" status="PASS" starttime="20170810 02:40:08.278"></status>
</kw>
<msg timestamp="20170810 02:40:08.279" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:40:08.279" status="PASS" starttime="20170810 02:40:07.963"></status>
</kw>
<msg timestamp="20170810 02:40:08.279" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:40:08.279" status="PASS" starttime="20170810 02:40:07.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:40:08.280" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:40:08.280" status="FAIL" starttime="20170810 02:40:08.280"></status>
</kw>
<status endtime="20170810 02:40:08.280" status="FAIL" starttime="20170810 02:40:07.962"></status>
</kw>
<status endtime="20170810 02:40:08.280" status="FAIL" starttime="20170810 02:40:07.368"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:18.286" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:18.286" status="PASS" starttime="20170810 02:40:18.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:18.287" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:18.287" status="PASS" starttime="20170810 02:40:18.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:18.287" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:18.287" status="PASS" starttime="20170810 02:40:18.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:18.288" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:18.288" status="PASS" starttime="20170810 02:40:18.288"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:18.602" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:18.602" status="PASS" starttime="20170810 02:40:18.289"></status>
</kw>
<msg timestamp="20170810 02:40:18.602" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:18.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:18.602" status="PASS" starttime="20170810 02:40:18.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:18.603" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:18.603" status="PASS" starttime="20170810 02:40:18.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:18.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:18.604" status="PASS" starttime="20170810 02:40:18.603"></status>
</kw>
<status endtime="20170810 02:40:18.604" status="PASS" starttime="20170810 02:40:18.285"></status>
</kw>
<status endtime="20170810 02:40:18.604" status="PASS" starttime="20170810 02:40:18.284"></status>
</kw>
<status endtime="20170810 02:40:18.604" status="PASS" starttime="20170810 02:40:18.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:18.604" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:40:18.605" status="PASS" starttime="20170810 02:40:18.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:18.607" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:18.607" status="PASS" starttime="20170810 02:40:18.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:18.608" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:18.608" status="PASS" starttime="20170810 02:40:18.608"></status>
</kw>
<status endtime="20170810 02:40:18.608" status="PASS" starttime="20170810 02:40:18.607"></status>
</kw>
<status endtime="20170810 02:40:18.608" status="PASS" starttime="20170810 02:40:18.605"></status>
</kw>
<status endtime="20170810 02:40:18.608" status="PASS" starttime="20170810 02:40:18.605"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:18.978" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:18.978" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:18.978" status="PASS" starttime="20170810 02:40:18.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:18.980" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:18.980" status="PASS" starttime="20170810 02:40:18.980"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:18.981" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:18.981" status="PASS" starttime="20170810 02:40:18.981"></status>
</kw>
<status endtime="20170810 02:40:18.981" status="PASS" starttime="20170810 02:40:18.980"></status>
</kw>
<status endtime="20170810 02:40:18.981" status="PASS" starttime="20170810 02:40:18.979"></status>
</kw>
<status endtime="20170810 02:40:18.982" status="PASS" starttime="20170810 02:40:18.979"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:18.982" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:18.982" status="PASS" starttime="20170810 02:40:18.982"></status>
</kw>
<msg timestamp="20170810 02:40:18.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:18.982" status="PASS" starttime="20170810 02:40:18.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:18.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:18.983" status="PASS" starttime="20170810 02:40:18.983"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:18.983" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:18.983" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:18.984" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:40:18.984" status="PASS" starttime="20170810 02:40:18.983"></status>
</kw>
<msg timestamp="20170810 02:40:18.984" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:40:18.984" status="PASS" starttime="20170810 02:40:18.282"></status>
</kw>
<msg timestamp="20170810 02:40:18.984" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:40:18.984" status="PASS" starttime="20170810 02:40:18.282"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:40:18.985" status="PASS" starttime="20170810 02:40:18.985"></status>
</kw>
<status endtime="20170810 02:40:18.985" status="PASS" starttime="20170810 02:40:18.281"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:18.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:18.992" status="PASS" starttime="20170810 02:40:18.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:18.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:18.992" status="PASS" starttime="20170810 02:40:18.992"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:18.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:18.993" status="PASS" starttime="20170810 02:40:18.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:18.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:18.994" status="PASS" starttime="20170810 02:40:18.993"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:19.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:19.516" status="PASS" starttime="20170810 02:40:18.994"></status>
</kw>
<msg timestamp="20170810 02:40:19.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:19.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:19.516" status="PASS" starttime="20170810 02:40:18.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:19.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:19.517" status="PASS" starttime="20170810 02:40:19.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:19.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:19.517" status="PASS" starttime="20170810 02:40:19.517"></status>
</kw>
<status endtime="20170810 02:40:19.517" status="PASS" starttime="20170810 02:40:18.988"></status>
</kw>
<status endtime="20170810 02:40:19.517" status="PASS" starttime="20170810 02:40:18.987"></status>
</kw>
<status endtime="20170810 02:40:19.518" status="PASS" starttime="20170810 02:40:18.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:19.518" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:40:19.518" status="PASS" starttime="20170810 02:40:19.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:19.520" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:19.520" status="PASS" starttime="20170810 02:40:19.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:19.521" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:19.521" status="PASS" starttime="20170810 02:40:19.521"></status>
</kw>
<status endtime="20170810 02:40:19.521" status="PASS" starttime="20170810 02:40:19.520"></status>
</kw>
<status endtime="20170810 02:40:19.521" status="PASS" starttime="20170810 02:40:19.519"></status>
</kw>
<status endtime="20170810 02:40:19.521" status="PASS" starttime="20170810 02:40:19.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:20.220" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:20.221" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:20.221" status="PASS" starttime="20170810 02:40:19.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:20.222" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:20.223" status="PASS" starttime="20170810 02:40:20.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:20.224" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:20.224" status="PASS" starttime="20170810 02:40:20.223"></status>
</kw>
<status endtime="20170810 02:40:20.224" status="PASS" starttime="20170810 02:40:20.223"></status>
</kw>
<status endtime="20170810 02:40:20.224" status="PASS" starttime="20170810 02:40:20.221"></status>
</kw>
<status endtime="20170810 02:40:20.224" status="PASS" starttime="20170810 02:40:20.221"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:20.225" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:20.225" status="PASS" starttime="20170810 02:40:20.224"></status>
</kw>
<msg timestamp="20170810 02:40:20.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:20.225" status="PASS" starttime="20170810 02:40:18.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:20.226" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:20.226" status="PASS" starttime="20170810 02:40:20.225"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:20.226" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:20.226" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:20.226" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:40:20.226" status="PASS" starttime="20170810 02:40:20.226"></status>
</kw>
<msg timestamp="20170810 02:40:20.227" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:40:20.227" status="PASS" starttime="20170810 02:40:18.985"></status>
</kw>
<msg timestamp="20170810 02:40:20.227" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:40:20.227" status="PASS" starttime="20170810 02:40:18.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:40:20.227" status="PASS" starttime="20170810 02:40:20.227"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:20.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:20.232" status="PASS" starttime="20170810 02:40:20.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:20.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:20.232" status="PASS" starttime="20170810 02:40:20.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:20.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:20.233" status="PASS" starttime="20170810 02:40:20.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:20.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:20.233" status="PASS" starttime="20170810 02:40:20.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:20.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:20.605" status="PASS" starttime="20170810 02:40:20.234"></status>
</kw>
<msg timestamp="20170810 02:40:20.606" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:20.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:20.606" status="PASS" starttime="20170810 02:40:20.234"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:20.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:20.606" status="PASS" starttime="20170810 02:40:20.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:20.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:20.607" status="PASS" starttime="20170810 02:40:20.607"></status>
</kw>
<status endtime="20170810 02:40:20.608" status="PASS" starttime="20170810 02:40:20.230"></status>
</kw>
<status endtime="20170810 02:40:20.608" status="PASS" starttime="20170810 02:40:20.230"></status>
</kw>
<status endtime="20170810 02:40:20.608" status="PASS" starttime="20170810 02:40:20.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:20.608" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:40:20.608" status="PASS" starttime="20170810 02:40:20.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:20.610" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:20.611" status="PASS" starttime="20170810 02:40:20.610"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:20.611" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:20.612" status="PASS" starttime="20170810 02:40:20.611"></status>
</kw>
<status endtime="20170810 02:40:20.612" status="PASS" starttime="20170810 02:40:20.611"></status>
</kw>
<status endtime="20170810 02:40:20.612" status="PASS" starttime="20170810 02:40:20.609"></status>
</kw>
<status endtime="20170810 02:40:20.612" status="PASS" starttime="20170810 02:40:20.609"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:21.118" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:40:21.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:21.119" status="PASS" starttime="20170810 02:40:20.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:21.121" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:21.121" status="PASS" starttime="20170810 02:40:21.120"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:21.121" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:21.122" status="PASS" starttime="20170810 02:40:21.121"></status>
</kw>
<status endtime="20170810 02:40:21.122" status="PASS" starttime="20170810 02:40:21.121"></status>
</kw>
<status endtime="20170810 02:40:21.122" status="PASS" starttime="20170810 02:40:21.120"></status>
</kw>
<status endtime="20170810 02:40:21.122" status="PASS" starttime="20170810 02:40:21.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:21.122" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:21.122" status="PASS" starttime="20170810 02:40:21.122"></status>
</kw>
<msg timestamp="20170810 02:40:21.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:21.123" status="PASS" starttime="20170810 02:40:20.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:21.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:21.123" status="PASS" starttime="20170810 02:40:21.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:21.124" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:21.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:21.124" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:40:21.124" status="PASS" starttime="20170810 02:40:21.123"></status>
</kw>
<msg timestamp="20170810 02:40:21.124" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:40:21.124" status="PASS" starttime="20170810 02:40:20.228"></status>
</kw>
<msg timestamp="20170810 02:40:21.125" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:40:21.125" status="PASS" starttime="20170810 02:40:20.228"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:40:21.125" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:40:21.125" status="FAIL" starttime="20170810 02:40:21.125"></status>
</kw>
<status endtime="20170810 02:40:21.125" status="FAIL" starttime="20170810 02:40:20.228"></status>
</kw>
<status endtime="20170810 02:40:21.126" status="FAIL" starttime="20170810 02:40:18.281"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:31.133" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:31.134" status="PASS" starttime="20170810 02:40:31.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:31.135" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:31.135" status="PASS" starttime="20170810 02:40:31.134"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:31.135" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:31.135" status="PASS" starttime="20170810 02:40:31.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:31.136" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:31.136" status="PASS" starttime="20170810 02:40:31.136"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:31.615" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:31.615" status="PASS" starttime="20170810 02:40:31.137"></status>
</kw>
<msg timestamp="20170810 02:40:31.615" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:31.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:31.615" status="PASS" starttime="20170810 02:40:31.136"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:31.616" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:31.616" status="PASS" starttime="20170810 02:40:31.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:31.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:31.616" status="PASS" starttime="20170810 02:40:31.616"></status>
</kw>
<status endtime="20170810 02:40:31.616" status="PASS" starttime="20170810 02:40:31.131"></status>
</kw>
<status endtime="20170810 02:40:31.617" status="PASS" starttime="20170810 02:40:31.130"></status>
</kw>
<status endtime="20170810 02:40:31.617" status="PASS" starttime="20170810 02:40:31.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:31.617" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:40:31.617" status="PASS" starttime="20170810 02:40:31.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:31.619" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:31.619" status="PASS" starttime="20170810 02:40:31.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:31.620" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:31.620" status="PASS" starttime="20170810 02:40:31.620"></status>
</kw>
<status endtime="20170810 02:40:31.620" status="PASS" starttime="20170810 02:40:31.619"></status>
</kw>
<status endtime="20170810 02:40:31.621" status="PASS" starttime="20170810 02:40:31.618"></status>
</kw>
<status endtime="20170810 02:40:31.621" status="PASS" starttime="20170810 02:40:31.618"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:32.246" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:32.247" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:32.247" status="PASS" starttime="20170810 02:40:31.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:32.249" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:32.249" status="PASS" starttime="20170810 02:40:32.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:32.250" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:32.250" status="PASS" starttime="20170810 02:40:32.249"></status>
</kw>
<status endtime="20170810 02:40:32.250" status="PASS" starttime="20170810 02:40:32.249"></status>
</kw>
<status endtime="20170810 02:40:32.250" status="PASS" starttime="20170810 02:40:32.247"></status>
</kw>
<status endtime="20170810 02:40:32.250" status="PASS" starttime="20170810 02:40:32.247"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:32.251" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:32.251" status="PASS" starttime="20170810 02:40:32.251"></status>
</kw>
<msg timestamp="20170810 02:40:32.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:32.251" status="PASS" starttime="20170810 02:40:31.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:32.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:32.252" status="PASS" starttime="20170810 02:40:32.251"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:32.252" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:32.252" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:32.252" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:40:32.253" status="PASS" starttime="20170810 02:40:32.252"></status>
</kw>
<msg timestamp="20170810 02:40:32.253" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:40:32.253" status="PASS" starttime="20170810 02:40:31.127"></status>
</kw>
<msg timestamp="20170810 02:40:32.253" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:40:32.253" status="PASS" starttime="20170810 02:40:31.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:40:32.254" status="PASS" starttime="20170810 02:40:32.253"></status>
</kw>
<status endtime="20170810 02:40:32.254" status="PASS" starttime="20170810 02:40:31.127"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:32.257" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:32.258" status="PASS" starttime="20170810 02:40:32.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:32.258" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:32.258" status="PASS" starttime="20170810 02:40:32.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:32.259" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:32.259" status="PASS" starttime="20170810 02:40:32.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:32.260" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:32.260" status="PASS" starttime="20170810 02:40:32.259"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:32.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:32.611" status="PASS" starttime="20170810 02:40:32.260"></status>
</kw>
<msg timestamp="20170810 02:40:32.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:32.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:32.611" status="PASS" starttime="20170810 02:40:32.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:32.612" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:32.612" status="PASS" starttime="20170810 02:40:32.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:32.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:32.612" status="PASS" starttime="20170810 02:40:32.612"></status>
</kw>
<status endtime="20170810 02:40:32.612" status="PASS" starttime="20170810 02:40:32.257"></status>
</kw>
<status endtime="20170810 02:40:32.613" status="PASS" starttime="20170810 02:40:32.256"></status>
</kw>
<status endtime="20170810 02:40:32.613" status="PASS" starttime="20170810 02:40:32.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:32.613" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:40:32.613" status="PASS" starttime="20170810 02:40:32.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:32.616" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:32.616" status="PASS" starttime="20170810 02:40:32.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:32.617" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:32.617" status="PASS" starttime="20170810 02:40:32.616"></status>
</kw>
<status endtime="20170810 02:40:32.617" status="PASS" starttime="20170810 02:40:32.616"></status>
</kw>
<status endtime="20170810 02:40:32.617" status="PASS" starttime="20170810 02:40:32.614"></status>
</kw>
<status endtime="20170810 02:40:32.617" status="PASS" starttime="20170810 02:40:32.614"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:33.185" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:33.185" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:33.185" status="PASS" starttime="20170810 02:40:32.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:33.187" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:33.187" status="PASS" starttime="20170810 02:40:33.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:33.188" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:33.188" status="PASS" starttime="20170810 02:40:33.188"></status>
</kw>
<status endtime="20170810 02:40:33.188" status="PASS" starttime="20170810 02:40:33.187"></status>
</kw>
<status endtime="20170810 02:40:33.188" status="PASS" starttime="20170810 02:40:33.186"></status>
</kw>
<status endtime="20170810 02:40:33.188" status="PASS" starttime="20170810 02:40:33.185"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:33.189" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:33.189" status="PASS" starttime="20170810 02:40:33.188"></status>
</kw>
<msg timestamp="20170810 02:40:33.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:33.189" status="PASS" starttime="20170810 02:40:32.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:33.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:33.190" status="PASS" starttime="20170810 02:40:33.189"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:33.190" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:33.190" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:33.190" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:40:33.190" status="PASS" starttime="20170810 02:40:33.190"></status>
</kw>
<msg timestamp="20170810 02:40:33.190" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:40:33.191" status="PASS" starttime="20170810 02:40:32.254"></status>
</kw>
<msg timestamp="20170810 02:40:33.191" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:40:33.191" status="PASS" starttime="20170810 02:40:32.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:40:33.191" status="PASS" starttime="20170810 02:40:33.191"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:33.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:33.196" status="PASS" starttime="20170810 02:40:33.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:33.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:33.196" status="PASS" starttime="20170810 02:40:33.196"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:33.197" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:33.197" status="PASS" starttime="20170810 02:40:33.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:33.197" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:33.198" status="PASS" starttime="20170810 02:40:33.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:33.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:33.585" status="PASS" starttime="20170810 02:40:33.198"></status>
</kw>
<msg timestamp="20170810 02:40:33.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:33.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:33.585" status="PASS" starttime="20170810 02:40:33.198"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:33.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:33.586" status="PASS" starttime="20170810 02:40:33.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:33.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:33.586" status="PASS" starttime="20170810 02:40:33.586"></status>
</kw>
<status endtime="20170810 02:40:33.587" status="PASS" starttime="20170810 02:40:33.194"></status>
</kw>
<status endtime="20170810 02:40:33.587" status="PASS" starttime="20170810 02:40:33.194"></status>
</kw>
<status endtime="20170810 02:40:33.587" status="PASS" starttime="20170810 02:40:33.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:33.587" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:40:33.587" status="PASS" starttime="20170810 02:40:33.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:33.589" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:33.589" status="PASS" starttime="20170810 02:40:33.589"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:33.590" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:33.590" status="PASS" starttime="20170810 02:40:33.590"></status>
</kw>
<status endtime="20170810 02:40:33.590" status="PASS" starttime="20170810 02:40:33.589"></status>
</kw>
<status endtime="20170810 02:40:33.591" status="PASS" starttime="20170810 02:40:33.588"></status>
</kw>
<status endtime="20170810 02:40:33.591" status="PASS" starttime="20170810 02:40:33.588"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:34.177" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:40:34.178" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:34.178" status="PASS" starttime="20170810 02:40:33.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:34.179" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:34.179" status="PASS" starttime="20170810 02:40:34.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:34.180" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:34.180" status="PASS" starttime="20170810 02:40:34.180"></status>
</kw>
<status endtime="20170810 02:40:34.181" status="PASS" starttime="20170810 02:40:34.180"></status>
</kw>
<status endtime="20170810 02:40:34.181" status="PASS" starttime="20170810 02:40:34.178"></status>
</kw>
<status endtime="20170810 02:40:34.181" status="PASS" starttime="20170810 02:40:34.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:34.181" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:34.181" status="PASS" starttime="20170810 02:40:34.181"></status>
</kw>
<msg timestamp="20170810 02:40:34.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:34.181" status="PASS" starttime="20170810 02:40:33.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:34.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:34.182" status="PASS" starttime="20170810 02:40:34.182"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:34.183" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:34.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:34.183" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:40:34.183" status="PASS" starttime="20170810 02:40:34.182"></status>
</kw>
<msg timestamp="20170810 02:40:34.183" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:40:34.183" status="PASS" starttime="20170810 02:40:33.192"></status>
</kw>
<msg timestamp="20170810 02:40:34.183" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:40:34.183" status="PASS" starttime="20170810 02:40:33.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:40:34.184" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:40:34.184" status="FAIL" starttime="20170810 02:40:34.184"></status>
</kw>
<status endtime="20170810 02:40:34.184" status="FAIL" starttime="20170810 02:40:33.191"></status>
</kw>
<status endtime="20170810 02:40:34.184" status="FAIL" starttime="20170810 02:40:31.126"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:44.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:44.190" status="PASS" starttime="20170810 02:40:44.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:44.190" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:44.190" status="PASS" starttime="20170810 02:40:44.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:44.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:44.191" status="PASS" starttime="20170810 02:40:44.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:44.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:44.192" status="PASS" starttime="20170810 02:40:44.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:44.518" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:44.518" status="PASS" starttime="20170810 02:40:44.192"></status>
</kw>
<msg timestamp="20170810 02:40:44.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:44.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:44.519" status="PASS" starttime="20170810 02:40:44.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:44.519" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:44.520" status="PASS" starttime="20170810 02:40:44.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:44.520" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:44.520" status="PASS" starttime="20170810 02:40:44.520"></status>
</kw>
<status endtime="20170810 02:40:44.520" status="PASS" starttime="20170810 02:40:44.189"></status>
</kw>
<status endtime="20170810 02:40:44.521" status="PASS" starttime="20170810 02:40:44.188"></status>
</kw>
<status endtime="20170810 02:40:44.521" status="PASS" starttime="20170810 02:40:44.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:44.521" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:40:44.521" status="PASS" starttime="20170810 02:40:44.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:44.523" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:44.523" status="PASS" starttime="20170810 02:40:44.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:44.524" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:44.524" status="PASS" starttime="20170810 02:40:44.524"></status>
</kw>
<status endtime="20170810 02:40:44.525" status="PASS" starttime="20170810 02:40:44.524"></status>
</kw>
<status endtime="20170810 02:40:44.525" status="PASS" starttime="20170810 02:40:44.522"></status>
</kw>
<status endtime="20170810 02:40:44.525" status="PASS" starttime="20170810 02:40:44.522"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:45.230" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:45.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:45.230" status="PASS" starttime="20170810 02:40:44.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:45.232" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:45.233" status="PASS" starttime="20170810 02:40:45.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:45.233" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:45.234" status="PASS" starttime="20170810 02:40:45.233"></status>
</kw>
<status endtime="20170810 02:40:45.234" status="PASS" starttime="20170810 02:40:45.233"></status>
</kw>
<status endtime="20170810 02:40:45.234" status="PASS" starttime="20170810 02:40:45.231"></status>
</kw>
<status endtime="20170810 02:40:45.234" status="PASS" starttime="20170810 02:40:45.231"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:45.234" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:45.234" status="PASS" starttime="20170810 02:40:45.234"></status>
</kw>
<msg timestamp="20170810 02:40:45.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:45.234" status="PASS" starttime="20170810 02:40:44.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:45.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:45.235" status="PASS" starttime="20170810 02:40:45.235"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:45.236" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:45.236" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:45.236" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:40:45.236" status="PASS" starttime="20170810 02:40:45.235"></status>
</kw>
<msg timestamp="20170810 02:40:45.236" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:40:45.236" status="PASS" starttime="20170810 02:40:44.186"></status>
</kw>
<msg timestamp="20170810 02:40:45.236" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:40:45.236" status="PASS" starttime="20170810 02:40:44.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:40:45.237" status="PASS" starttime="20170810 02:40:45.237"></status>
</kw>
<status endtime="20170810 02:40:45.237" status="PASS" starttime="20170810 02:40:44.185"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:45.241" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:45.241" status="PASS" starttime="20170810 02:40:45.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:45.242" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:45.242" status="PASS" starttime="20170810 02:40:45.241"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:45.242" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:45.242" status="PASS" starttime="20170810 02:40:45.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:45.243" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:45.243" status="PASS" starttime="20170810 02:40:45.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:45.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:45.612" status="PASS" starttime="20170810 02:40:45.244"></status>
</kw>
<msg timestamp="20170810 02:40:45.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:45.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:45.613" status="PASS" starttime="20170810 02:40:45.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:45.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:45.613" status="PASS" starttime="20170810 02:40:45.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:45.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:45.614" status="PASS" starttime="20170810 02:40:45.614"></status>
</kw>
<status endtime="20170810 02:40:45.614" status="PASS" starttime="20170810 02:40:45.240"></status>
</kw>
<status endtime="20170810 02:40:45.614" status="PASS" starttime="20170810 02:40:45.239"></status>
</kw>
<status endtime="20170810 02:40:45.614" status="PASS" starttime="20170810 02:40:45.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:45.615" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:40:45.615" status="PASS" starttime="20170810 02:40:45.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:45.617" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:45.617" status="PASS" starttime="20170810 02:40:45.616"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:45.618" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:45.618" status="PASS" starttime="20170810 02:40:45.618"></status>
</kw>
<status endtime="20170810 02:40:45.618" status="PASS" starttime="20170810 02:40:45.618"></status>
</kw>
<status endtime="20170810 02:40:45.619" status="PASS" starttime="20170810 02:40:45.616"></status>
</kw>
<status endtime="20170810 02:40:45.619" status="PASS" starttime="20170810 02:40:45.615"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:46.300" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:46.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:46.300" status="PASS" starttime="20170810 02:40:45.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:46.302" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:46.302" status="PASS" starttime="20170810 02:40:46.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:46.303" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:46.303" status="PASS" starttime="20170810 02:40:46.303"></status>
</kw>
<status endtime="20170810 02:40:46.303" status="PASS" starttime="20170810 02:40:46.302"></status>
</kw>
<status endtime="20170810 02:40:46.303" status="PASS" starttime="20170810 02:40:46.301"></status>
</kw>
<status endtime="20170810 02:40:46.303" status="PASS" starttime="20170810 02:40:46.300"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:46.304" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:46.304" status="PASS" starttime="20170810 02:40:46.304"></status>
</kw>
<msg timestamp="20170810 02:40:46.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:46.304" status="PASS" starttime="20170810 02:40:45.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:46.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:46.305" status="PASS" starttime="20170810 02:40:46.304"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:46.305" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:46.305" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:46.305" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:40:46.305" status="PASS" starttime="20170810 02:40:46.305"></status>
</kw>
<msg timestamp="20170810 02:40:46.306" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:40:46.306" status="PASS" starttime="20170810 02:40:45.238"></status>
</kw>
<msg timestamp="20170810 02:40:46.306" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:40:46.306" status="PASS" starttime="20170810 02:40:45.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:40:46.307" status="PASS" starttime="20170810 02:40:46.306"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:46.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:46.311" status="PASS" starttime="20170810 02:40:46.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:46.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:46.311" status="PASS" starttime="20170810 02:40:46.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:46.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:46.312" status="PASS" starttime="20170810 02:40:46.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:46.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:46.313" status="PASS" starttime="20170810 02:40:46.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:46.490" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:46.490" status="PASS" starttime="20170810 02:40:46.313"></status>
</kw>
<msg timestamp="20170810 02:40:46.491" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:46.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:46.491" status="PASS" starttime="20170810 02:40:46.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:46.491" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:46.491" status="PASS" starttime="20170810 02:40:46.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:46.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:46.492" status="PASS" starttime="20170810 02:40:46.492"></status>
</kw>
<status endtime="20170810 02:40:46.492" status="PASS" starttime="20170810 02:40:46.310"></status>
</kw>
<status endtime="20170810 02:40:46.492" status="PASS" starttime="20170810 02:40:46.309"></status>
</kw>
<status endtime="20170810 02:40:46.492" status="PASS" starttime="20170810 02:40:46.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:46.493" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:40:46.493" status="PASS" starttime="20170810 02:40:46.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:46.495" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:46.495" status="PASS" starttime="20170810 02:40:46.494"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:46.496" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:40:46.496" status="PASS" starttime="20170810 02:40:46.496"></status>
</kw>
<status endtime="20170810 02:40:46.496" status="PASS" starttime="20170810 02:40:46.495"></status>
</kw>
<status endtime="20170810 02:40:46.496" status="PASS" starttime="20170810 02:40:46.494"></status>
</kw>
<status endtime="20170810 02:40:46.496" status="PASS" starttime="20170810 02:40:46.493"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:47.277" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:40:47.277" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:47.277" status="PASS" starttime="20170810 02:40:46.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:47.279" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:47.279" status="PASS" starttime="20170810 02:40:47.278"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:47.280" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:47.280" status="PASS" starttime="20170810 02:40:47.280"></status>
</kw>
<status endtime="20170810 02:40:47.280" status="PASS" starttime="20170810 02:40:47.279"></status>
</kw>
<status endtime="20170810 02:40:47.280" status="PASS" starttime="20170810 02:40:47.278"></status>
</kw>
<status endtime="20170810 02:40:47.280" status="PASS" starttime="20170810 02:40:47.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:47.281" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:47.281" status="PASS" starttime="20170810 02:40:47.281"></status>
</kw>
<msg timestamp="20170810 02:40:47.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:47.281" status="PASS" starttime="20170810 02:40:46.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:47.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:47.282" status="PASS" starttime="20170810 02:40:47.281"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:47.282" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:47.282" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:47.282" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:40:47.283" status="PASS" starttime="20170810 02:40:47.282"></status>
</kw>
<msg timestamp="20170810 02:40:47.283" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:40:47.283" status="PASS" starttime="20170810 02:40:46.307"></status>
</kw>
<msg timestamp="20170810 02:40:47.283" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:40:47.283" status="PASS" starttime="20170810 02:40:46.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:40:47.284" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:40:47.284" status="FAIL" starttime="20170810 02:40:47.283"></status>
</kw>
<status endtime="20170810 02:40:47.284" status="FAIL" starttime="20170810 02:40:46.307"></status>
</kw>
<status endtime="20170810 02:40:47.284" status="FAIL" starttime="20170810 02:40:44.185"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:57.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:57.290" status="PASS" starttime="20170810 02:40:57.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:57.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:57.290" status="PASS" starttime="20170810 02:40:57.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:57.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:57.291" status="PASS" starttime="20170810 02:40:57.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:57.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:57.291" status="PASS" starttime="20170810 02:40:57.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:57.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:57.634" status="PASS" starttime="20170810 02:40:57.292"></status>
</kw>
<msg timestamp="20170810 02:40:57.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:57.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:57.634" status="PASS" starttime="20170810 02:40:57.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:57.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:57.635" status="PASS" starttime="20170810 02:40:57.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:57.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:57.635" status="PASS" starttime="20170810 02:40:57.635"></status>
</kw>
<status endtime="20170810 02:40:57.635" status="PASS" starttime="20170810 02:40:57.288"></status>
</kw>
<status endtime="20170810 02:40:57.635" status="PASS" starttime="20170810 02:40:57.288"></status>
</kw>
<status endtime="20170810 02:40:57.636" status="PASS" starttime="20170810 02:40:57.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:57.636" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:40:57.636" status="PASS" starttime="20170810 02:40:57.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:57.638" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:57.638" status="PASS" starttime="20170810 02:40:57.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:57.639" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:57.639" status="PASS" starttime="20170810 02:40:57.639"></status>
</kw>
<status endtime="20170810 02:40:57.639" status="PASS" starttime="20170810 02:40:57.638"></status>
</kw>
<status endtime="20170810 02:40:57.639" status="PASS" starttime="20170810 02:40:57.637"></status>
</kw>
<status endtime="20170810 02:40:57.640" status="PASS" starttime="20170810 02:40:57.636"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:58.319" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:58.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:58.319" status="PASS" starttime="20170810 02:40:57.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:58.324" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:58.324" status="PASS" starttime="20170810 02:40:58.321"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:58.325" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:58.325" status="PASS" starttime="20170810 02:40:58.324"></status>
</kw>
<status endtime="20170810 02:40:58.325" status="PASS" starttime="20170810 02:40:58.324"></status>
</kw>
<status endtime="20170810 02:40:58.325" status="PASS" starttime="20170810 02:40:58.320"></status>
</kw>
<status endtime="20170810 02:40:58.325" status="PASS" starttime="20170810 02:40:58.320"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:58.326" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:58.326" status="PASS" starttime="20170810 02:40:58.325"></status>
</kw>
<msg timestamp="20170810 02:40:58.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:58.326" status="PASS" starttime="20170810 02:40:57.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:58.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:58.327" status="PASS" starttime="20170810 02:40:58.326"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:58.327" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:58.327" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:58.327" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:40:58.327" status="PASS" starttime="20170810 02:40:58.327"></status>
</kw>
<msg timestamp="20170810 02:40:58.328" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:40:58.328" status="PASS" starttime="20170810 02:40:57.286"></status>
</kw>
<msg timestamp="20170810 02:40:58.328" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:40:58.328" status="PASS" starttime="20170810 02:40:57.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:40:58.329" status="PASS" starttime="20170810 02:40:58.328"></status>
</kw>
<status endtime="20170810 02:40:58.329" status="PASS" starttime="20170810 02:40:57.285"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:58.332" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:58.333" status="PASS" starttime="20170810 02:40:58.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:58.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:58.334" status="PASS" starttime="20170810 02:40:58.333"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:58.334" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:58.334" status="PASS" starttime="20170810 02:40:58.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:58.335" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:58.335" status="PASS" starttime="20170810 02:40:58.334"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:40:58.903" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:40:58.903" status="PASS" starttime="20170810 02:40:58.336"></status>
</kw>
<msg timestamp="20170810 02:40:58.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:40:58.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:58.903" status="PASS" starttime="20170810 02:40:58.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:40:58.904" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:58.904" status="PASS" starttime="20170810 02:40:58.904"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:58.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:58.905" status="PASS" starttime="20170810 02:40:58.904"></status>
</kw>
<status endtime="20170810 02:40:58.905" status="PASS" starttime="20170810 02:40:58.332"></status>
</kw>
<status endtime="20170810 02:40:58.905" status="PASS" starttime="20170810 02:40:58.331"></status>
</kw>
<status endtime="20170810 02:40:58.905" status="PASS" starttime="20170810 02:40:58.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:40:58.906" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:40:58.906" status="PASS" starttime="20170810 02:40:58.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:58.908" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:58.908" status="PASS" starttime="20170810 02:40:58.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:58.909" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:40:58.909" status="PASS" starttime="20170810 02:40:58.909"></status>
</kw>
<status endtime="20170810 02:40:58.909" status="PASS" starttime="20170810 02:40:58.908"></status>
</kw>
<status endtime="20170810 02:40:58.909" status="PASS" starttime="20170810 02:40:58.906"></status>
</kw>
<status endtime="20170810 02:40:58.909" status="PASS" starttime="20170810 02:40:58.906"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:40:59.491" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:40:59.491" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:59.491" status="PASS" starttime="20170810 02:40:58.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:40:59.493" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:59.493" status="PASS" starttime="20170810 02:40:59.492"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:40:59.494" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:40:59.494" status="PASS" starttime="20170810 02:40:59.493"></status>
</kw>
<status endtime="20170810 02:40:59.494" status="PASS" starttime="20170810 02:40:59.493"></status>
</kw>
<status endtime="20170810 02:40:59.494" status="PASS" starttime="20170810 02:40:59.492"></status>
</kw>
<status endtime="20170810 02:40:59.494" status="PASS" starttime="20170810 02:40:59.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:40:59.494" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:40:59.495" status="PASS" starttime="20170810 02:40:59.494"></status>
</kw>
<msg timestamp="20170810 02:40:59.495" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:40:59.495" status="PASS" starttime="20170810 02:40:58.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:40:59.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:40:59.495" status="PASS" starttime="20170810 02:40:59.495"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:40:59.496" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:40:59.496" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:40:59.496" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:40:59.496" status="PASS" starttime="20170810 02:40:59.496"></status>
</kw>
<msg timestamp="20170810 02:40:59.497" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:40:59.497" status="PASS" starttime="20170810 02:40:58.329"></status>
</kw>
<msg timestamp="20170810 02:40:59.497" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:40:59.497" status="PASS" starttime="20170810 02:40:58.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:40:59.498" status="PASS" starttime="20170810 02:40:59.497"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:40:59.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:40:59.502" status="PASS" starttime="20170810 02:40:59.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:40:59.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:40:59.502" status="PASS" starttime="20170810 02:40:59.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:40:59.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:40:59.503" status="PASS" starttime="20170810 02:40:59.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:40:59.504" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:40:59.504" status="PASS" starttime="20170810 02:40:59.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:00.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:00.053" status="PASS" starttime="20170810 02:40:59.504"></status>
</kw>
<msg timestamp="20170810 02:41:00.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:00.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:00.053" status="PASS" starttime="20170810 02:40:59.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:00.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:00.054" status="PASS" starttime="20170810 02:41:00.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:00.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:00.055" status="PASS" starttime="20170810 02:41:00.054"></status>
</kw>
<status endtime="20170810 02:41:00.055" status="PASS" starttime="20170810 02:40:59.501"></status>
</kw>
<status endtime="20170810 02:41:00.055" status="PASS" starttime="20170810 02:40:59.500"></status>
</kw>
<status endtime="20170810 02:41:00.055" status="PASS" starttime="20170810 02:40:59.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:00.055" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:41:00.055" status="PASS" starttime="20170810 02:41:00.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:00.058" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:00.058" status="PASS" starttime="20170810 02:41:00.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:00.059" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:00.059" status="PASS" starttime="20170810 02:41:00.058"></status>
</kw>
<status endtime="20170810 02:41:00.059" status="PASS" starttime="20170810 02:41:00.058"></status>
</kw>
<status endtime="20170810 02:41:00.059" status="PASS" starttime="20170810 02:41:00.056"></status>
</kw>
<status endtime="20170810 02:41:00.059" status="PASS" starttime="20170810 02:41:00.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:00.408" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:41:00.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:00.408" status="PASS" starttime="20170810 02:41:00.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:00.410" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:00.410" status="PASS" starttime="20170810 02:41:00.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:00.411" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:00.411" status="PASS" starttime="20170810 02:41:00.411"></status>
</kw>
<status endtime="20170810 02:41:00.411" status="PASS" starttime="20170810 02:41:00.410"></status>
</kw>
<status endtime="20170810 02:41:00.411" status="PASS" starttime="20170810 02:41:00.409"></status>
</kw>
<status endtime="20170810 02:41:00.411" status="PASS" starttime="20170810 02:41:00.409"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:00.412" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:00.412" status="PASS" starttime="20170810 02:41:00.412"></status>
</kw>
<msg timestamp="20170810 02:41:00.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:00.412" status="PASS" starttime="20170810 02:40:59.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:00.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:00.413" status="PASS" starttime="20170810 02:41:00.412"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:00.413" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:00.413" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:00.413" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:41:00.414" status="PASS" starttime="20170810 02:41:00.413"></status>
</kw>
<msg timestamp="20170810 02:41:00.414" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:41:00.414" status="PASS" starttime="20170810 02:40:59.498"></status>
</kw>
<msg timestamp="20170810 02:41:00.414" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:41:00.414" status="PASS" starttime="20170810 02:40:59.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:41:00.415" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:41:00.415" status="FAIL" starttime="20170810 02:41:00.414"></status>
</kw>
<status endtime="20170810 02:41:00.415" status="FAIL" starttime="20170810 02:40:59.498"></status>
</kw>
<status endtime="20170810 02:41:00.415" status="FAIL" starttime="20170810 02:40:57.284"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:10.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:10.421" status="PASS" starttime="20170810 02:41:10.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:10.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:10.422" status="PASS" starttime="20170810 02:41:10.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:10.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:10.423" status="PASS" starttime="20170810 02:41:10.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:10.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:10.423" status="PASS" starttime="20170810 02:41:10.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:10.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:10.793" status="PASS" starttime="20170810 02:41:10.424"></status>
</kw>
<msg timestamp="20170810 02:41:10.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:10.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:10.793" status="PASS" starttime="20170810 02:41:10.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:10.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:10.794" status="PASS" starttime="20170810 02:41:10.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:10.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:10.795" status="PASS" starttime="20170810 02:41:10.794"></status>
</kw>
<status endtime="20170810 02:41:10.795" status="PASS" starttime="20170810 02:41:10.420"></status>
</kw>
<status endtime="20170810 02:41:10.795" status="PASS" starttime="20170810 02:41:10.419"></status>
</kw>
<status endtime="20170810 02:41:10.795" status="PASS" starttime="20170810 02:41:10.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:10.795" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:41:10.796" status="PASS" starttime="20170810 02:41:10.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:10.798" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:10.798" status="PASS" starttime="20170810 02:41:10.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:10.798" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:10.799" status="PASS" starttime="20170810 02:41:10.798"></status>
</kw>
<status endtime="20170810 02:41:10.799" status="PASS" starttime="20170810 02:41:10.798"></status>
</kw>
<status endtime="20170810 02:41:10.799" status="PASS" starttime="20170810 02:41:10.796"></status>
</kw>
<status endtime="20170810 02:41:10.799" status="PASS" starttime="20170810 02:41:10.796"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:10.935" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:41:10.935" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:10.935" status="PASS" starttime="20170810 02:41:10.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:10.937" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:10.937" status="PASS" starttime="20170810 02:41:10.936"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:10.938" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:10.938" status="PASS" starttime="20170810 02:41:10.938"></status>
</kw>
<status endtime="20170810 02:41:10.938" status="PASS" starttime="20170810 02:41:10.937"></status>
</kw>
<status endtime="20170810 02:41:10.938" status="PASS" starttime="20170810 02:41:10.936"></status>
</kw>
<status endtime="20170810 02:41:10.938" status="PASS" starttime="20170810 02:41:10.935"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:10.939" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:10.939" status="PASS" starttime="20170810 02:41:10.939"></status>
</kw>
<msg timestamp="20170810 02:41:10.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:10.939" status="PASS" starttime="20170810 02:41:10.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:10.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:10.940" status="PASS" starttime="20170810 02:41:10.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:10.940" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:10.940" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:10.941" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:41:10.941" status="PASS" starttime="20170810 02:41:10.940"></status>
</kw>
<msg timestamp="20170810 02:41:10.941" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:41:10.941" status="PASS" starttime="20170810 02:41:10.417"></status>
</kw>
<msg timestamp="20170810 02:41:10.941" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:41:10.941" status="PASS" starttime="20170810 02:41:10.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:41:10.942" status="PASS" starttime="20170810 02:41:10.941"></status>
</kw>
<status endtime="20170810 02:41:10.942" status="PASS" starttime="20170810 02:41:10.417"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:10.945" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:10.946" status="PASS" starttime="20170810 02:41:10.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:10.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:10.946" status="PASS" starttime="20170810 02:41:10.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:10.947" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:10.947" status="PASS" starttime="20170810 02:41:10.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:10.948" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:10.948" status="PASS" starttime="20170810 02:41:10.947"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:11.221" status="PASS" starttime="20170810 02:41:10.948"></status>
</kw>
<msg timestamp="20170810 02:41:11.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:11.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:11.221" status="PASS" starttime="20170810 02:41:10.948"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:11.222" status="PASS" starttime="20170810 02:41:11.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:11.223" status="PASS" starttime="20170810 02:41:11.222"></status>
</kw>
<status endtime="20170810 02:41:11.223" status="PASS" starttime="20170810 02:41:10.945"></status>
</kw>
<status endtime="20170810 02:41:11.223" status="PASS" starttime="20170810 02:41:10.944"></status>
</kw>
<status endtime="20170810 02:41:11.223" status="PASS" starttime="20170810 02:41:10.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:11.224" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:41:11.224" status="PASS" starttime="20170810 02:41:11.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:11.226" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:11.226" status="PASS" starttime="20170810 02:41:11.225"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:11.227" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:11.227" status="PASS" starttime="20170810 02:41:11.227"></status>
</kw>
<status endtime="20170810 02:41:11.227" status="PASS" starttime="20170810 02:41:11.226"></status>
</kw>
<status endtime="20170810 02:41:11.227" status="PASS" starttime="20170810 02:41:11.224"></status>
</kw>
<status endtime="20170810 02:41:11.227" status="PASS" starttime="20170810 02:41:11.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:11.343" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:41:11.343" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:11.343" status="PASS" starttime="20170810 02:41:11.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:11.345" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:11.345" status="PASS" starttime="20170810 02:41:11.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:11.346" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:11.346" status="PASS" starttime="20170810 02:41:11.346"></status>
</kw>
<status endtime="20170810 02:41:11.346" status="PASS" starttime="20170810 02:41:11.345"></status>
</kw>
<status endtime="20170810 02:41:11.346" status="PASS" starttime="20170810 02:41:11.344"></status>
</kw>
<status endtime="20170810 02:41:11.347" status="PASS" starttime="20170810 02:41:11.344"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:11.347" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:11.347" status="PASS" starttime="20170810 02:41:11.347"></status>
</kw>
<msg timestamp="20170810 02:41:11.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:11.347" status="PASS" starttime="20170810 02:41:10.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:11.348" status="PASS" starttime="20170810 02:41:11.347"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:11.348" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:11.348" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:11.349" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:41:11.349" status="PASS" starttime="20170810 02:41:11.348"></status>
</kw>
<msg timestamp="20170810 02:41:11.349" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:41:11.349" status="PASS" starttime="20170810 02:41:10.942"></status>
</kw>
<msg timestamp="20170810 02:41:11.349" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:41:11.349" status="PASS" starttime="20170810 02:41:10.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:41:11.350" status="PASS" starttime="20170810 02:41:11.349"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:11.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:11.354" status="PASS" starttime="20170810 02:41:11.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:11.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:11.355" status="PASS" starttime="20170810 02:41:11.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:11.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:11.355" status="PASS" starttime="20170810 02:41:11.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:11.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:11.356" status="PASS" starttime="20170810 02:41:11.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:11.614" status="PASS" starttime="20170810 02:41:11.357"></status>
</kw>
<msg timestamp="20170810 02:41:11.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:11.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:11.614" status="PASS" starttime="20170810 02:41:11.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:11.615" status="PASS" starttime="20170810 02:41:11.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:11.616" status="PASS" starttime="20170810 02:41:11.615"></status>
</kw>
<status endtime="20170810 02:41:11.616" status="PASS" starttime="20170810 02:41:11.353"></status>
</kw>
<status endtime="20170810 02:41:11.616" status="PASS" starttime="20170810 02:41:11.352"></status>
</kw>
<status endtime="20170810 02:41:11.616" status="PASS" starttime="20170810 02:41:11.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:11.616" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:41:11.616" status="PASS" starttime="20170810 02:41:11.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:11.618" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:11.619" status="PASS" starttime="20170810 02:41:11.618"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:11.619" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:11.619" status="PASS" starttime="20170810 02:41:11.619"></status>
</kw>
<status endtime="20170810 02:41:11.620" status="PASS" starttime="20170810 02:41:11.619"></status>
</kw>
<status endtime="20170810 02:41:11.620" status="PASS" starttime="20170810 02:41:11.617"></status>
</kw>
<status endtime="20170810 02:41:11.620" status="PASS" starttime="20170810 02:41:11.617"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:11.695" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:41:11.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:11.695" status="PASS" starttime="20170810 02:41:11.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:11.696" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:11.697" status="PASS" starttime="20170810 02:41:11.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:11.697" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:11.697" status="PASS" starttime="20170810 02:41:11.697"></status>
</kw>
<status endtime="20170810 02:41:11.698" status="PASS" starttime="20170810 02:41:11.697"></status>
</kw>
<status endtime="20170810 02:41:11.698" status="PASS" starttime="20170810 02:41:11.696"></status>
</kw>
<status endtime="20170810 02:41:11.698" status="PASS" starttime="20170810 02:41:11.695"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:11.698" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:11.698" status="PASS" starttime="20170810 02:41:11.698"></status>
</kw>
<msg timestamp="20170810 02:41:11.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:11.699" status="PASS" starttime="20170810 02:41:11.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:11.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:11.699" status="PASS" starttime="20170810 02:41:11.699"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:11.700" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:11.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:11.700" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:41:11.700" status="PASS" starttime="20170810 02:41:11.699"></status>
</kw>
<msg timestamp="20170810 02:41:11.700" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:41:11.700" status="PASS" starttime="20170810 02:41:11.351"></status>
</kw>
<msg timestamp="20170810 02:41:11.700" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:41:11.700" status="PASS" starttime="20170810 02:41:11.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:41:11.701" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:41:11.701" status="FAIL" starttime="20170810 02:41:11.701"></status>
</kw>
<status endtime="20170810 02:41:11.701" status="FAIL" starttime="20170810 02:41:11.350"></status>
</kw>
<status endtime="20170810 02:41:11.701" status="FAIL" starttime="20170810 02:41:10.416"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:21.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:21.707" status="PASS" starttime="20170810 02:41:21.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:21.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:21.708" status="PASS" starttime="20170810 02:41:21.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:21.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:21.709" status="PASS" starttime="20170810 02:41:21.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:21.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:21.710" status="PASS" starttime="20170810 02:41:21.709"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:22.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:22.049" status="PASS" starttime="20170810 02:41:21.711"></status>
</kw>
<msg timestamp="20170810 02:41:22.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:22.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:22.050" status="PASS" starttime="20170810 02:41:21.710"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:22.050" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:22.050" status="PASS" starttime="20170810 02:41:22.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:22.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:22.051" status="PASS" starttime="20170810 02:41:22.051"></status>
</kw>
<status endtime="20170810 02:41:22.051" status="PASS" starttime="20170810 02:41:21.706"></status>
</kw>
<status endtime="20170810 02:41:22.051" status="PASS" starttime="20170810 02:41:21.705"></status>
</kw>
<status endtime="20170810 02:41:22.052" status="PASS" starttime="20170810 02:41:21.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:22.052" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:41:22.052" status="PASS" starttime="20170810 02:41:22.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:22.054" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:22.054" status="PASS" starttime="20170810 02:41:22.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:22.055" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:22.055" status="PASS" starttime="20170810 02:41:22.055"></status>
</kw>
<status endtime="20170810 02:41:22.055" status="PASS" starttime="20170810 02:41:22.054"></status>
</kw>
<status endtime="20170810 02:41:22.056" status="PASS" starttime="20170810 02:41:22.053"></status>
</kw>
<status endtime="20170810 02:41:22.056" status="PASS" starttime="20170810 02:41:22.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:22.866" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:41:22.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:22.866" status="PASS" starttime="20170810 02:41:22.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:22.868" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:22.868" status="PASS" starttime="20170810 02:41:22.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:22.869" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:22.869" status="PASS" starttime="20170810 02:41:22.869"></status>
</kw>
<status endtime="20170810 02:41:22.869" status="PASS" starttime="20170810 02:41:22.868"></status>
</kw>
<status endtime="20170810 02:41:22.869" status="PASS" starttime="20170810 02:41:22.867"></status>
</kw>
<status endtime="20170810 02:41:22.870" status="PASS" starttime="20170810 02:41:22.866"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:22.870" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:22.870" status="PASS" starttime="20170810 02:41:22.870"></status>
</kw>
<msg timestamp="20170810 02:41:22.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:22.870" status="PASS" starttime="20170810 02:41:21.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:22.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:22.871" status="PASS" starttime="20170810 02:41:22.870"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:22.871" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:22.871" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:22.872" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:41:22.872" status="PASS" starttime="20170810 02:41:22.871"></status>
</kw>
<msg timestamp="20170810 02:41:22.872" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:41:22.872" status="PASS" starttime="20170810 02:41:21.703"></status>
</kw>
<msg timestamp="20170810 02:41:22.872" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:41:22.872" status="PASS" starttime="20170810 02:41:21.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:41:22.873" status="PASS" starttime="20170810 02:41:22.872"></status>
</kw>
<status endtime="20170810 02:41:22.873" status="PASS" starttime="20170810 02:41:21.702"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:22.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:22.877" status="PASS" starttime="20170810 02:41:22.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:22.877" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:22.877" status="PASS" starttime="20170810 02:41:22.877"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:22.878" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:22.878" status="PASS" starttime="20170810 02:41:22.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:22.879" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:22.879" status="PASS" starttime="20170810 02:41:22.878"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.424" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:23.425" status="PASS" starttime="20170810 02:41:22.879"></status>
</kw>
<msg timestamp="20170810 02:41:23.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:23.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:23.425" status="PASS" starttime="20170810 02:41:22.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:23.426" status="PASS" starttime="20170810 02:41:23.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:23.426" status="PASS" starttime="20170810 02:41:23.426"></status>
</kw>
<status endtime="20170810 02:41:23.426" status="PASS" starttime="20170810 02:41:22.876"></status>
</kw>
<status endtime="20170810 02:41:23.427" status="PASS" starttime="20170810 02:41:22.875"></status>
</kw>
<status endtime="20170810 02:41:23.427" status="PASS" starttime="20170810 02:41:22.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:23.427" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:41:23.427" status="PASS" starttime="20170810 02:41:23.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:23.430" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:23.430" status="PASS" starttime="20170810 02:41:23.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:23.431" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:23.431" status="PASS" starttime="20170810 02:41:23.431"></status>
</kw>
<status endtime="20170810 02:41:23.431" status="PASS" starttime="20170810 02:41:23.430"></status>
</kw>
<status endtime="20170810 02:41:23.431" status="PASS" starttime="20170810 02:41:23.428"></status>
</kw>
<status endtime="20170810 02:41:23.431" status="PASS" starttime="20170810 02:41:23.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:23.629" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:41:23.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:23.630" status="PASS" starttime="20170810 02:41:23.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:23.631" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:23.632" status="PASS" starttime="20170810 02:41:23.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:23.632" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:23.633" status="PASS" starttime="20170810 02:41:23.632"></status>
</kw>
<status endtime="20170810 02:41:23.633" status="PASS" starttime="20170810 02:41:23.632"></status>
</kw>
<status endtime="20170810 02:41:23.633" status="PASS" starttime="20170810 02:41:23.630"></status>
</kw>
<status endtime="20170810 02:41:23.633" status="PASS" starttime="20170810 02:41:23.630"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:23.633" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:23.633" status="PASS" starttime="20170810 02:41:23.633"></status>
</kw>
<msg timestamp="20170810 02:41:23.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:23.634" status="PASS" starttime="20170810 02:41:22.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:23.634" status="PASS" starttime="20170810 02:41:23.634"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:23.635" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:23.635" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:23.635" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:41:23.635" status="PASS" starttime="20170810 02:41:23.635"></status>
</kw>
<msg timestamp="20170810 02:41:23.635" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:41:23.635" status="PASS" starttime="20170810 02:41:22.873"></status>
</kw>
<msg timestamp="20170810 02:41:23.636" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:41:23.636" status="PASS" starttime="20170810 02:41:22.873"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:41:23.636" status="PASS" starttime="20170810 02:41:23.636"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:23.640" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:23.640" status="PASS" starttime="20170810 02:41:23.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:23.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:23.641" status="PASS" starttime="20170810 02:41:23.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:23.642" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:23.642" status="PASS" starttime="20170810 02:41:23.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:23.642" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:23.642" status="PASS" starttime="20170810 02:41:23.642"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:23.855" status="PASS" starttime="20170810 02:41:23.643"></status>
</kw>
<msg timestamp="20170810 02:41:23.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:23.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:23.855" status="PASS" starttime="20170810 02:41:23.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:23.856" status="PASS" starttime="20170810 02:41:23.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:23.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:23.857" status="PASS" starttime="20170810 02:41:23.856"></status>
</kw>
<status endtime="20170810 02:41:23.857" status="PASS" starttime="20170810 02:41:23.639"></status>
</kw>
<status endtime="20170810 02:41:23.857" status="PASS" starttime="20170810 02:41:23.639"></status>
</kw>
<status endtime="20170810 02:41:23.857" status="PASS" starttime="20170810 02:41:23.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:23.858" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:41:23.858" status="PASS" starttime="20170810 02:41:23.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:23.860" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:23.860" status="PASS" starttime="20170810 02:41:23.859"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:23.861" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:23.861" status="PASS" starttime="20170810 02:41:23.860"></status>
</kw>
<status endtime="20170810 02:41:23.861" status="PASS" starttime="20170810 02:41:23.860"></status>
</kw>
<status endtime="20170810 02:41:23.861" status="PASS" starttime="20170810 02:41:23.858"></status>
</kw>
<status endtime="20170810 02:41:23.861" status="PASS" starttime="20170810 02:41:23.858"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:24.033" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:41:24.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:24.033" status="PASS" starttime="20170810 02:41:23.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:24.035" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:24.035" status="PASS" starttime="20170810 02:41:24.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:24.036" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:24.036" status="PASS" starttime="20170810 02:41:24.036"></status>
</kw>
<status endtime="20170810 02:41:24.036" status="PASS" starttime="20170810 02:41:24.035"></status>
</kw>
<status endtime="20170810 02:41:24.036" status="PASS" starttime="20170810 02:41:24.034"></status>
</kw>
<status endtime="20170810 02:41:24.036" status="PASS" starttime="20170810 02:41:24.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:24.037" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:24.037" status="PASS" starttime="20170810 02:41:24.037"></status>
</kw>
<msg timestamp="20170810 02:41:24.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:24.037" status="PASS" starttime="20170810 02:41:23.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:24.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:24.038" status="PASS" starttime="20170810 02:41:24.037"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:24.038" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:24.038" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:24.038" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:41:24.039" status="PASS" starttime="20170810 02:41:24.038"></status>
</kw>
<msg timestamp="20170810 02:41:24.039" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:41:24.039" status="PASS" starttime="20170810 02:41:23.637"></status>
</kw>
<msg timestamp="20170810 02:41:24.039" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:41:24.039" status="PASS" starttime="20170810 02:41:23.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:41:24.040" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:41:24.040" status="FAIL" starttime="20170810 02:41:24.039"></status>
</kw>
<status endtime="20170810 02:41:24.040" status="FAIL" starttime="20170810 02:41:23.636"></status>
</kw>
<status endtime="20170810 02:41:24.040" status="FAIL" starttime="20170810 02:41:21.702"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:34.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:34.047" status="PASS" starttime="20170810 02:41:34.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:34.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:34.047" status="PASS" starttime="20170810 02:41:34.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:34.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:34.048" status="PASS" starttime="20170810 02:41:34.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:34.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:34.049" status="PASS" starttime="20170810 02:41:34.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:34.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:34.422" status="PASS" starttime="20170810 02:41:34.049"></status>
</kw>
<msg timestamp="20170810 02:41:34.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:34.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:34.422" status="PASS" starttime="20170810 02:41:34.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:34.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:34.423" status="PASS" starttime="20170810 02:41:34.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:34.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:34.424" status="PASS" starttime="20170810 02:41:34.423"></status>
</kw>
<status endtime="20170810 02:41:34.424" status="PASS" starttime="20170810 02:41:34.045"></status>
</kw>
<status endtime="20170810 02:41:34.424" status="PASS" starttime="20170810 02:41:34.045"></status>
</kw>
<status endtime="20170810 02:41:34.424" status="PASS" starttime="20170810 02:41:34.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:34.425" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:41:34.425" status="PASS" starttime="20170810 02:41:34.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:34.428" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:34.428" status="PASS" starttime="20170810 02:41:34.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:34.429" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:34.430" status="PASS" starttime="20170810 02:41:34.429"></status>
</kw>
<status endtime="20170810 02:41:34.430" status="PASS" starttime="20170810 02:41:34.428"></status>
</kw>
<status endtime="20170810 02:41:34.430" status="PASS" starttime="20170810 02:41:34.426"></status>
</kw>
<status endtime="20170810 02:41:34.430" status="PASS" starttime="20170810 02:41:34.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:39.915" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:41:39.915" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:39.915" status="PASS" starttime="20170810 02:41:34.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:39.920" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:39.920" status="PASS" starttime="20170810 02:41:39.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:39.921" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:39.921" status="PASS" starttime="20170810 02:41:39.921"></status>
</kw>
<status endtime="20170810 02:41:39.921" status="PASS" starttime="20170810 02:41:39.920"></status>
</kw>
<status endtime="20170810 02:41:39.922" status="PASS" starttime="20170810 02:41:39.916"></status>
</kw>
<status endtime="20170810 02:41:39.922" status="PASS" starttime="20170810 02:41:39.916"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:39.922" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:39.922" status="PASS" starttime="20170810 02:41:39.922"></status>
</kw>
<msg timestamp="20170810 02:41:39.922" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:39.922" status="PASS" starttime="20170810 02:41:34.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:39.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:39.923" status="PASS" starttime="20170810 02:41:39.923"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:39.924" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:39.924" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:39.924" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:41:39.924" status="PASS" starttime="20170810 02:41:39.923"></status>
</kw>
<msg timestamp="20170810 02:41:39.924" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:41:39.924" status="PASS" starttime="20170810 02:41:34.042"></status>
</kw>
<msg timestamp="20170810 02:41:39.925" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:41:39.925" status="PASS" starttime="20170810 02:41:34.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:41:39.925" status="PASS" starttime="20170810 02:41:39.925"></status>
</kw>
<status endtime="20170810 02:41:39.925" status="PASS" starttime="20170810 02:41:34.041"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:39.929" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:39.930" status="PASS" starttime="20170810 02:41:39.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:39.930" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:39.930" status="PASS" starttime="20170810 02:41:39.930"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:39.931" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:39.931" status="PASS" starttime="20170810 02:41:39.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:39.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:39.931" status="PASS" starttime="20170810 02:41:39.931"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:40.127" status="PASS" starttime="20170810 02:41:39.932"></status>
</kw>
<msg timestamp="20170810 02:41:40.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:40.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:40.127" status="PASS" starttime="20170810 02:41:39.932"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:40.128" status="PASS" starttime="20170810 02:41:40.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:40.129" status="PASS" starttime="20170810 02:41:40.128"></status>
</kw>
<status endtime="20170810 02:41:40.129" status="PASS" starttime="20170810 02:41:39.928"></status>
</kw>
<status endtime="20170810 02:41:40.129" status="PASS" starttime="20170810 02:41:39.928"></status>
</kw>
<status endtime="20170810 02:41:40.129" status="PASS" starttime="20170810 02:41:39.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:40.130" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:41:40.130" status="PASS" starttime="20170810 02:41:40.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:40.132" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:40.132" status="PASS" starttime="20170810 02:41:40.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:40.133" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:40.133" status="PASS" starttime="20170810 02:41:40.133"></status>
</kw>
<status endtime="20170810 02:41:40.133" status="PASS" starttime="20170810 02:41:40.132"></status>
</kw>
<status endtime="20170810 02:41:40.133" status="PASS" starttime="20170810 02:41:40.130"></status>
</kw>
<status endtime="20170810 02:41:40.133" status="PASS" starttime="20170810 02:41:40.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:40.379" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:41:40.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:40.380" status="PASS" starttime="20170810 02:41:40.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:40.381" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:40.381" status="PASS" starttime="20170810 02:41:40.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:40.382" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:40.382" status="PASS" starttime="20170810 02:41:40.382"></status>
</kw>
<status endtime="20170810 02:41:40.382" status="PASS" starttime="20170810 02:41:40.382"></status>
</kw>
<status endtime="20170810 02:41:40.383" status="PASS" starttime="20170810 02:41:40.380"></status>
</kw>
<status endtime="20170810 02:41:40.383" status="PASS" starttime="20170810 02:41:40.380"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:40.383" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:40.383" status="PASS" starttime="20170810 02:41:40.383"></status>
</kw>
<msg timestamp="20170810 02:41:40.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:40.383" status="PASS" starttime="20170810 02:41:39.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:40.384" status="PASS" starttime="20170810 02:41:40.384"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:40.385" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:40.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:40.385" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:41:40.385" status="PASS" starttime="20170810 02:41:40.384"></status>
</kw>
<msg timestamp="20170810 02:41:40.385" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:41:40.386" status="PASS" starttime="20170810 02:41:39.926"></status>
</kw>
<msg timestamp="20170810 02:41:40.386" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:41:40.386" status="PASS" starttime="20170810 02:41:39.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:41:40.387" status="PASS" starttime="20170810 02:41:40.386"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:40.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:40.391" status="PASS" starttime="20170810 02:41:40.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:40.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:40.392" status="PASS" starttime="20170810 02:41:40.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:40.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:40.392" status="PASS" starttime="20170810 02:41:40.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:40.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:40.393" status="PASS" starttime="20170810 02:41:40.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:40.783" status="PASS" starttime="20170810 02:41:40.394"></status>
</kw>
<msg timestamp="20170810 02:41:40.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:40.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:40.784" status="PASS" starttime="20170810 02:41:40.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:40.784" status="PASS" starttime="20170810 02:41:40.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:40.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:40.785" status="PASS" starttime="20170810 02:41:40.785"></status>
</kw>
<status endtime="20170810 02:41:40.785" status="PASS" starttime="20170810 02:41:40.390"></status>
</kw>
<status endtime="20170810 02:41:40.785" status="PASS" starttime="20170810 02:41:40.389"></status>
</kw>
<status endtime="20170810 02:41:40.785" status="PASS" starttime="20170810 02:41:40.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:40.786" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:41:40.786" status="PASS" starttime="20170810 02:41:40.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:40.788" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:40.788" status="PASS" starttime="20170810 02:41:40.787"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:40.789" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:41:40.789" status="PASS" starttime="20170810 02:41:40.789"></status>
</kw>
<status endtime="20170810 02:41:40.789" status="PASS" starttime="20170810 02:41:40.788"></status>
</kw>
<status endtime="20170810 02:41:40.789" status="PASS" starttime="20170810 02:41:40.787"></status>
</kw>
<status endtime="20170810 02:41:40.789" status="PASS" starttime="20170810 02:41:40.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:41:41.075" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:41:41.076" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:41.076" status="PASS" starttime="20170810 02:41:40.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:41.077" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:41.077" status="PASS" starttime="20170810 02:41:41.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:41.078" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:41:41.078" status="PASS" starttime="20170810 02:41:41.078"></status>
</kw>
<status endtime="20170810 02:41:41.079" status="PASS" starttime="20170810 02:41:41.078"></status>
</kw>
<status endtime="20170810 02:41:41.079" status="PASS" starttime="20170810 02:41:41.076"></status>
</kw>
<status endtime="20170810 02:41:41.079" status="PASS" starttime="20170810 02:41:41.076"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:41:41.079" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:41:41.079" status="PASS" starttime="20170810 02:41:41.079"></status>
</kw>
<msg timestamp="20170810 02:41:41.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:41.079" status="PASS" starttime="20170810 02:41:40.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:41.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:41.080" status="PASS" starttime="20170810 02:41:41.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:41:41.081" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:41:41.081" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:41:41.081" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:41:41.081" status="PASS" starttime="20170810 02:41:41.080"></status>
</kw>
<msg timestamp="20170810 02:41:41.081" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:41:41.081" status="PASS" starttime="20170810 02:41:40.388"></status>
</kw>
<msg timestamp="20170810 02:41:41.081" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:41:41.081" status="PASS" starttime="20170810 02:41:40.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:41:41.082" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:41:41.082" status="FAIL" starttime="20170810 02:41:41.082"></status>
</kw>
<status endtime="20170810 02:41:41.082" status="FAIL" starttime="20170810 02:41:40.387"></status>
</kw>
<status endtime="20170810 02:41:41.082" status="FAIL" starttime="20170810 02:41:34.041"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:41:51.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:41:51.088" status="PASS" starttime="20170810 02:41:51.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:41:51.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:41:51.089" status="PASS" starttime="20170810 02:41:51.088"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:41:51.089" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:41:51.089" status="PASS" starttime="20170810 02:41:51.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:41:51.090" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:41:51.090" status="PASS" starttime="20170810 02:41:51.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:41:52.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:41:52.168" status="PASS" starttime="20170810 02:41:51.091"></status>
</kw>
<msg timestamp="20170810 02:41:52.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:41:52.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:41:52.168" status="PASS" starttime="20170810 02:41:51.090"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:41:52.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:52.169" status="PASS" starttime="20170810 02:41:52.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:41:52.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:41:52.170" status="PASS" starttime="20170810 02:41:52.169"></status>
</kw>
<status endtime="20170810 02:41:52.170" status="PASS" starttime="20170810 02:41:51.087"></status>
</kw>
<status endtime="20170810 02:41:52.170" status="PASS" starttime="20170810 02:41:51.086"></status>
</kw>
<status endtime="20170810 02:41:52.170" status="PASS" starttime="20170810 02:41:51.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:41:52.171" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:41:52.171" status="PASS" starttime="20170810 02:41:52.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:41:52.173" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:52.173" status="PASS" starttime="20170810 02:41:52.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:41:52.174" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:41:52.174" status="PASS" starttime="20170810 02:41:52.173"></status>
</kw>
<status endtime="20170810 02:41:52.174" status="PASS" starttime="20170810 02:41:52.173"></status>
</kw>
<status endtime="20170810 02:41:52.174" status="PASS" starttime="20170810 02:41:52.171"></status>
</kw>
<status endtime="20170810 02:41:52.174" status="PASS" starttime="20170810 02:41:52.171"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:00.181" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:00.181" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:00.182" status="PASS" starttime="20170810 02:41:52.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:00.184" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:00.184" status="PASS" starttime="20170810 02:42:00.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:00.185" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:00.185" status="PASS" starttime="20170810 02:42:00.184"></status>
</kw>
<status endtime="20170810 02:42:00.185" status="PASS" starttime="20170810 02:42:00.184"></status>
</kw>
<status endtime="20170810 02:42:00.185" status="PASS" starttime="20170810 02:42:00.182"></status>
</kw>
<status endtime="20170810 02:42:00.185" status="PASS" starttime="20170810 02:42:00.182"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:00.185" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:00.186" status="PASS" starttime="20170810 02:42:00.185"></status>
</kw>
<msg timestamp="20170810 02:42:00.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:00.186" status="PASS" starttime="20170810 02:41:51.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:00.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:00.186" status="PASS" starttime="20170810 02:42:00.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:00.187" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:00.187" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:00.187" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 02:42:00.187" status="PASS" starttime="20170810 02:42:00.187"></status>
</kw>
<msg timestamp="20170810 02:42:00.188" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:42:00.188" status="PASS" starttime="20170810 02:41:51.084"></status>
</kw>
<msg timestamp="20170810 02:42:00.188" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 02:42:00.188" status="PASS" starttime="20170810 02:41:51.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 02:42:00.188" level="FAIL">On != Off</msg>
<status endtime="20170810 02:42:00.189" status="FAIL" starttime="20170810 02:42:00.188"></status>
</kw>
<status endtime="20170810 02:42:00.189" status="FAIL" starttime="20170810 02:41:51.083"></status>
</kw>
<status endtime="20170810 02:42:00.189" status="FAIL" starttime="20170810 02:41:51.083"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:10.194" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:10.194" status="PASS" starttime="20170810 02:42:10.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:10.195" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:10.195" status="PASS" starttime="20170810 02:42:10.194"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:10.195" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:10.195" status="PASS" starttime="20170810 02:42:10.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:10.196" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:10.196" status="PASS" starttime="20170810 02:42:10.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:10.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:10.423" status="PASS" starttime="20170810 02:42:10.197"></status>
</kw>
<msg timestamp="20170810 02:42:10.423" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:10.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:10.423" status="PASS" starttime="20170810 02:42:10.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:10.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:10.424" status="PASS" starttime="20170810 02:42:10.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:10.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:10.424" status="PASS" starttime="20170810 02:42:10.424"></status>
</kw>
<status endtime="20170810 02:42:10.425" status="PASS" starttime="20170810 02:42:10.193"></status>
</kw>
<status endtime="20170810 02:42:10.425" status="PASS" starttime="20170810 02:42:10.192"></status>
</kw>
<status endtime="20170810 02:42:10.425" status="PASS" starttime="20170810 02:42:10.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:10.425" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:42:10.425" status="PASS" starttime="20170810 02:42:10.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:10.427" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:10.427" status="PASS" starttime="20170810 02:42:10.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:10.428" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:10.428" status="PASS" starttime="20170810 02:42:10.428"></status>
</kw>
<status endtime="20170810 02:42:10.429" status="PASS" starttime="20170810 02:42:10.428"></status>
</kw>
<status endtime="20170810 02:42:10.429" status="PASS" starttime="20170810 02:42:10.426"></status>
</kw>
<status endtime="20170810 02:42:10.429" status="PASS" starttime="20170810 02:42:10.426"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:10.914" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:10.914" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:10.914" status="PASS" starttime="20170810 02:42:10.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:10.916" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:10.916" status="PASS" starttime="20170810 02:42:10.915"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:10.917" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:10.917" status="PASS" starttime="20170810 02:42:10.916"></status>
</kw>
<status endtime="20170810 02:42:10.917" status="PASS" starttime="20170810 02:42:10.916"></status>
</kw>
<status endtime="20170810 02:42:10.917" status="PASS" starttime="20170810 02:42:10.915"></status>
</kw>
<status endtime="20170810 02:42:10.917" status="PASS" starttime="20170810 02:42:10.914"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:10.917" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:10.918" status="PASS" starttime="20170810 02:42:10.917"></status>
</kw>
<msg timestamp="20170810 02:42:10.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:10.918" status="PASS" starttime="20170810 02:42:10.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:10.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:10.918" status="PASS" starttime="20170810 02:42:10.918"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:10.919" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:10.919" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:10.919" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:42:10.919" status="PASS" starttime="20170810 02:42:10.919"></status>
</kw>
<msg timestamp="20170810 02:42:10.919" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:42:10.919" status="PASS" starttime="20170810 02:42:10.191"></status>
</kw>
<msg timestamp="20170810 02:42:10.920" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:42:10.920" status="PASS" starttime="20170810 02:42:10.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:42:10.920" status="PASS" starttime="20170810 02:42:10.920"></status>
</kw>
<status endtime="20170810 02:42:10.920" status="PASS" starttime="20170810 02:42:10.190"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:10.924" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:10.925" status="PASS" starttime="20170810 02:42:10.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:10.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:10.925" status="PASS" starttime="20170810 02:42:10.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:10.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:10.926" status="PASS" starttime="20170810 02:42:10.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:10.927" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:10.927" status="PASS" starttime="20170810 02:42:10.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:11.114" status="PASS" starttime="20170810 02:42:10.927"></status>
</kw>
<msg timestamp="20170810 02:42:11.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:11.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:11.114" status="PASS" starttime="20170810 02:42:10.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:11.115" status="PASS" starttime="20170810 02:42:11.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:11.115" status="PASS" starttime="20170810 02:42:11.115"></status>
</kw>
<status endtime="20170810 02:42:11.115" status="PASS" starttime="20170810 02:42:10.923"></status>
</kw>
<status endtime="20170810 02:42:11.116" status="PASS" starttime="20170810 02:42:10.923"></status>
</kw>
<status endtime="20170810 02:42:11.116" status="PASS" starttime="20170810 02:42:10.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:11.116" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:42:11.116" status="PASS" starttime="20170810 02:42:11.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:11.118" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:11.118" status="PASS" starttime="20170810 02:42:11.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:11.119" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:11.119" status="PASS" starttime="20170810 02:42:11.119"></status>
</kw>
<status endtime="20170810 02:42:11.119" status="PASS" starttime="20170810 02:42:11.119"></status>
</kw>
<status endtime="20170810 02:42:11.120" status="PASS" starttime="20170810 02:42:11.117"></status>
</kw>
<status endtime="20170810 02:42:11.120" status="PASS" starttime="20170810 02:42:11.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:11.575" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:11.575" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:11.575" status="PASS" starttime="20170810 02:42:11.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:11.577" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:11.577" status="PASS" starttime="20170810 02:42:11.576"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:11.578" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:11.578" status="PASS" starttime="20170810 02:42:11.577"></status>
</kw>
<status endtime="20170810 02:42:11.578" status="PASS" starttime="20170810 02:42:11.577"></status>
</kw>
<status endtime="20170810 02:42:11.578" status="PASS" starttime="20170810 02:42:11.576"></status>
</kw>
<status endtime="20170810 02:42:11.578" status="PASS" starttime="20170810 02:42:11.575"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:11.578" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:11.579" status="PASS" starttime="20170810 02:42:11.578"></status>
</kw>
<msg timestamp="20170810 02:42:11.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:11.579" status="PASS" starttime="20170810 02:42:10.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:11.580" status="PASS" starttime="20170810 02:42:11.579"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:11.580" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:11.580" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:11.580" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:42:11.581" status="PASS" starttime="20170810 02:42:11.580"></status>
</kw>
<msg timestamp="20170810 02:42:11.581" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:42:11.581" status="PASS" starttime="20170810 02:42:10.921"></status>
</kw>
<msg timestamp="20170810 02:42:11.581" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:42:11.581" status="PASS" starttime="20170810 02:42:10.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:42:11.582" status="PASS" starttime="20170810 02:42:11.581"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:11.586" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:11.586" status="PASS" starttime="20170810 02:42:11.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:11.587" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:11.587" status="PASS" starttime="20170810 02:42:11.587"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:11.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:11.587" status="PASS" starttime="20170810 02:42:11.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:11.588" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:11.588" status="PASS" starttime="20170810 02:42:11.588"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:11.996" status="PASS" starttime="20170810 02:42:11.589"></status>
</kw>
<msg timestamp="20170810 02:42:11.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:11.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:11.996" status="PASS" starttime="20170810 02:42:11.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:11.997" status="PASS" starttime="20170810 02:42:11.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:11.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:11.998" status="PASS" starttime="20170810 02:42:11.997"></status>
</kw>
<status endtime="20170810 02:42:11.998" status="PASS" starttime="20170810 02:42:11.585"></status>
</kw>
<status endtime="20170810 02:42:11.998" status="PASS" starttime="20170810 02:42:11.585"></status>
</kw>
<status endtime="20170810 02:42:11.998" status="PASS" starttime="20170810 02:42:11.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:11.999" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:42:11.999" status="PASS" starttime="20170810 02:42:11.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:12.001" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:42:12.001" status="PASS" starttime="20170810 02:42:12.000"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:12.002" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:42:12.002" status="PASS" starttime="20170810 02:42:12.002"></status>
</kw>
<status endtime="20170810 02:42:12.002" status="PASS" starttime="20170810 02:42:12.001"></status>
</kw>
<status endtime="20170810 02:42:12.002" status="PASS" starttime="20170810 02:42:12.000"></status>
</kw>
<status endtime="20170810 02:42:12.002" status="PASS" starttime="20170810 02:42:11.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:12.246" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:42:12.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:12.246" status="PASS" starttime="20170810 02:42:12.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:12.248" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:12.248" status="PASS" starttime="20170810 02:42:12.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:12.249" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:12.249" status="PASS" starttime="20170810 02:42:12.248"></status>
</kw>
<status endtime="20170810 02:42:12.249" status="PASS" starttime="20170810 02:42:12.248"></status>
</kw>
<status endtime="20170810 02:42:12.249" status="PASS" starttime="20170810 02:42:12.247"></status>
</kw>
<status endtime="20170810 02:42:12.249" status="PASS" starttime="20170810 02:42:12.246"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:12.249" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:12.250" status="PASS" starttime="20170810 02:42:12.249"></status>
</kw>
<msg timestamp="20170810 02:42:12.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:12.250" status="PASS" starttime="20170810 02:42:11.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:12.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:12.250" status="PASS" starttime="20170810 02:42:12.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:12.251" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:12.251" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:12.251" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:42:12.251" status="PASS" starttime="20170810 02:42:12.251"></status>
</kw>
<msg timestamp="20170810 02:42:12.251" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:42:12.251" status="PASS" starttime="20170810 02:42:11.582"></status>
</kw>
<msg timestamp="20170810 02:42:12.252" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:42:12.252" status="PASS" starttime="20170810 02:42:11.582"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:42:12.252" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:42:12.252" status="FAIL" starttime="20170810 02:42:12.252"></status>
</kw>
<status endtime="20170810 02:42:12.253" status="FAIL" starttime="20170810 02:42:11.582"></status>
</kw>
<status endtime="20170810 02:42:12.253" status="FAIL" starttime="20170810 02:42:10.189"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:22.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:22.259" status="PASS" starttime="20170810 02:42:22.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:22.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:22.259" status="PASS" starttime="20170810 02:42:22.259"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:22.260" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:22.260" status="PASS" starttime="20170810 02:42:22.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:22.261" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:22.261" status="PASS" starttime="20170810 02:42:22.260"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.441" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:22.441" status="PASS" starttime="20170810 02:42:22.261"></status>
</kw>
<msg timestamp="20170810 02:42:22.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:22.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:22.441" status="PASS" starttime="20170810 02:42:22.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:22.442" status="PASS" starttime="20170810 02:42:22.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:22.443" status="PASS" starttime="20170810 02:42:22.442"></status>
</kw>
<status endtime="20170810 02:42:22.443" status="PASS" starttime="20170810 02:42:22.257"></status>
</kw>
<status endtime="20170810 02:42:22.443" status="PASS" starttime="20170810 02:42:22.257"></status>
</kw>
<status endtime="20170810 02:42:22.443" status="PASS" starttime="20170810 02:42:22.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:22.444" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:42:22.444" status="PASS" starttime="20170810 02:42:22.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:22.446" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:22.446" status="PASS" starttime="20170810 02:42:22.445"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:22.447" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:22.447" status="PASS" starttime="20170810 02:42:22.446"></status>
</kw>
<status endtime="20170810 02:42:22.447" status="PASS" starttime="20170810 02:42:22.446"></status>
</kw>
<status endtime="20170810 02:42:22.447" status="PASS" starttime="20170810 02:42:22.444"></status>
</kw>
<status endtime="20170810 02:42:22.447" status="PASS" starttime="20170810 02:42:22.444"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:22.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:22.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:22.541" status="PASS" starttime="20170810 02:42:22.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:22.543" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:22.543" status="PASS" starttime="20170810 02:42:22.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:22.544" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:22.544" status="PASS" starttime="20170810 02:42:22.544"></status>
</kw>
<status endtime="20170810 02:42:22.544" status="PASS" starttime="20170810 02:42:22.543"></status>
</kw>
<status endtime="20170810 02:42:22.544" status="PASS" starttime="20170810 02:42:22.542"></status>
</kw>
<status endtime="20170810 02:42:22.545" status="PASS" starttime="20170810 02:42:22.542"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:22.545" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:22.545" status="PASS" starttime="20170810 02:42:22.545"></status>
</kw>
<msg timestamp="20170810 02:42:22.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:22.545" status="PASS" starttime="20170810 02:42:22.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:22.546" status="PASS" starttime="20170810 02:42:22.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:22.546" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:22.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:22.547" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:42:22.547" status="PASS" starttime="20170810 02:42:22.546"></status>
</kw>
<msg timestamp="20170810 02:42:22.547" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:42:22.547" status="PASS" starttime="20170810 02:42:22.255"></status>
</kw>
<msg timestamp="20170810 02:42:22.547" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:42:22.547" status="PASS" starttime="20170810 02:42:22.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:42:22.548" status="PASS" starttime="20170810 02:42:22.547"></status>
</kw>
<status endtime="20170810 02:42:22.548" status="PASS" starttime="20170810 02:42:22.254"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:22.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:22.553" status="PASS" starttime="20170810 02:42:22.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:22.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:22.553" status="PASS" starttime="20170810 02:42:22.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:22.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:22.555" status="PASS" starttime="20170810 02:42:22.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:22.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:22.556" status="PASS" starttime="20170810 02:42:22.555"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:22.802" status="PASS" starttime="20170810 02:42:22.557"></status>
</kw>
<msg timestamp="20170810 02:42:22.803" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:22.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:22.803" status="PASS" starttime="20170810 02:42:22.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:22.803" status="PASS" starttime="20170810 02:42:22.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:22.804" status="PASS" starttime="20170810 02:42:22.804"></status>
</kw>
<status endtime="20170810 02:42:22.804" status="PASS" starttime="20170810 02:42:22.551"></status>
</kw>
<status endtime="20170810 02:42:22.804" status="PASS" starttime="20170810 02:42:22.550"></status>
</kw>
<status endtime="20170810 02:42:22.805" status="PASS" starttime="20170810 02:42:22.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:22.805" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:42:22.805" status="PASS" starttime="20170810 02:42:22.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:22.807" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:22.807" status="PASS" starttime="20170810 02:42:22.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:22.808" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:22.808" status="PASS" starttime="20170810 02:42:22.808"></status>
</kw>
<status endtime="20170810 02:42:22.808" status="PASS" starttime="20170810 02:42:22.807"></status>
</kw>
<status endtime="20170810 02:42:22.808" status="PASS" starttime="20170810 02:42:22.806"></status>
</kw>
<status endtime="20170810 02:42:22.809" status="PASS" starttime="20170810 02:42:22.805"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:22.898" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:22.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:22.898" status="PASS" starttime="20170810 02:42:22.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:22.900" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:22.900" status="PASS" starttime="20170810 02:42:22.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:22.901" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:22.901" status="PASS" starttime="20170810 02:42:22.901"></status>
</kw>
<status endtime="20170810 02:42:22.901" status="PASS" starttime="20170810 02:42:22.900"></status>
</kw>
<status endtime="20170810 02:42:22.901" status="PASS" starttime="20170810 02:42:22.899"></status>
</kw>
<status endtime="20170810 02:42:22.901" status="PASS" starttime="20170810 02:42:22.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:22.902" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:22.902" status="PASS" starttime="20170810 02:42:22.902"></status>
</kw>
<msg timestamp="20170810 02:42:22.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:22.902" status="PASS" starttime="20170810 02:42:22.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:22.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:22.903" status="PASS" starttime="20170810 02:42:22.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:22.903" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:22.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:22.903" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:42:22.903" status="PASS" starttime="20170810 02:42:22.903"></status>
</kw>
<msg timestamp="20170810 02:42:22.904" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:42:22.904" status="PASS" starttime="20170810 02:42:22.548"></status>
</kw>
<msg timestamp="20170810 02:42:22.904" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:42:22.904" status="PASS" starttime="20170810 02:42:22.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:42:22.905" status="PASS" starttime="20170810 02:42:22.904"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:22.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:22.909" status="PASS" starttime="20170810 02:42:22.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:22.910" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:22.910" status="PASS" starttime="20170810 02:42:22.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:22.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:22.910" status="PASS" starttime="20170810 02:42:22.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:22.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:22.911" status="PASS" starttime="20170810 02:42:22.911"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:23.104" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:23.104" status="PASS" starttime="20170810 02:42:22.912"></status>
</kw>
<msg timestamp="20170810 02:42:23.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:23.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:23.104" status="PASS" starttime="20170810 02:42:22.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:23.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:23.105" status="PASS" starttime="20170810 02:42:23.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:23.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:23.106" status="PASS" starttime="20170810 02:42:23.106"></status>
</kw>
<status endtime="20170810 02:42:23.106" status="PASS" starttime="20170810 02:42:22.908"></status>
</kw>
<status endtime="20170810 02:42:23.106" status="PASS" starttime="20170810 02:42:22.908"></status>
</kw>
<status endtime="20170810 02:42:23.106" status="PASS" starttime="20170810 02:42:22.907"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:23.107" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:42:23.107" status="PASS" starttime="20170810 02:42:23.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:23.109" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:42:23.109" status="PASS" starttime="20170810 02:42:23.108"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:23.113" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:42:23.113" status="PASS" starttime="20170810 02:42:23.110"></status>
</kw>
<status endtime="20170810 02:42:23.113" status="PASS" starttime="20170810 02:42:23.109"></status>
</kw>
<status endtime="20170810 02:42:23.113" status="PASS" starttime="20170810 02:42:23.108"></status>
</kw>
<status endtime="20170810 02:42:23.113" status="PASS" starttime="20170810 02:42:23.107"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:23.200" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:42:23.200" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:23.200" status="PASS" starttime="20170810 02:42:23.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:23.202" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:23.202" status="PASS" starttime="20170810 02:42:23.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:23.203" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:23.203" status="PASS" starttime="20170810 02:42:23.202"></status>
</kw>
<status endtime="20170810 02:42:23.203" status="PASS" starttime="20170810 02:42:23.202"></status>
</kw>
<status endtime="20170810 02:42:23.203" status="PASS" starttime="20170810 02:42:23.201"></status>
</kw>
<status endtime="20170810 02:42:23.203" status="PASS" starttime="20170810 02:42:23.200"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:23.203" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:23.203" status="PASS" starttime="20170810 02:42:23.203"></status>
</kw>
<msg timestamp="20170810 02:42:23.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:23.204" status="PASS" starttime="20170810 02:42:22.906"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:23.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:23.204" status="PASS" starttime="20170810 02:42:23.204"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:23.205" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:23.205" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:23.205" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:42:23.205" status="PASS" starttime="20170810 02:42:23.205"></status>
</kw>
<msg timestamp="20170810 02:42:23.205" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:42:23.205" status="PASS" starttime="20170810 02:42:22.905"></status>
</kw>
<msg timestamp="20170810 02:42:23.206" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:42:23.206" status="PASS" starttime="20170810 02:42:22.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:42:23.206" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:42:23.206" status="FAIL" starttime="20170810 02:42:23.206"></status>
</kw>
<status endtime="20170810 02:42:23.207" status="FAIL" starttime="20170810 02:42:22.905"></status>
</kw>
<status endtime="20170810 02:42:23.207" status="FAIL" starttime="20170810 02:42:22.253"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:33.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:33.213" status="PASS" starttime="20170810 02:42:33.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:33.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:33.213" status="PASS" starttime="20170810 02:42:33.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:33.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:33.214" status="PASS" starttime="20170810 02:42:33.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:33.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:33.215" status="PASS" starttime="20170810 02:42:33.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:33.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:33.692" status="PASS" starttime="20170810 02:42:33.215"></status>
</kw>
<msg timestamp="20170810 02:42:33.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:33.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:33.692" status="PASS" starttime="20170810 02:42:33.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:33.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:33.693" status="PASS" starttime="20170810 02:42:33.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:33.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:33.694" status="PASS" starttime="20170810 02:42:33.693"></status>
</kw>
<status endtime="20170810 02:42:33.694" status="PASS" starttime="20170810 02:42:33.211"></status>
</kw>
<status endtime="20170810 02:42:33.694" status="PASS" starttime="20170810 02:42:33.211"></status>
</kw>
<status endtime="20170810 02:42:33.694" status="PASS" starttime="20170810 02:42:33.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:33.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:42:33.695" status="PASS" starttime="20170810 02:42:33.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:33.697" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:33.697" status="PASS" starttime="20170810 02:42:33.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:33.698" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:33.698" status="PASS" starttime="20170810 02:42:33.697"></status>
</kw>
<status endtime="20170810 02:42:33.698" status="PASS" starttime="20170810 02:42:33.697"></status>
</kw>
<status endtime="20170810 02:42:33.698" status="PASS" starttime="20170810 02:42:33.695"></status>
</kw>
<status endtime="20170810 02:42:33.698" status="PASS" starttime="20170810 02:42:33.695"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:34.137" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:34.137" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:34.137" status="PASS" starttime="20170810 02:42:33.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:34.139" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:34.139" status="PASS" starttime="20170810 02:42:34.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:34.140" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:34.140" status="PASS" starttime="20170810 02:42:34.140"></status>
</kw>
<status endtime="20170810 02:42:34.140" status="PASS" starttime="20170810 02:42:34.139"></status>
</kw>
<status endtime="20170810 02:42:34.140" status="PASS" starttime="20170810 02:42:34.138"></status>
</kw>
<status endtime="20170810 02:42:34.140" status="PASS" starttime="20170810 02:42:34.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:34.141" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:34.141" status="PASS" starttime="20170810 02:42:34.141"></status>
</kw>
<msg timestamp="20170810 02:42:34.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:34.141" status="PASS" starttime="20170810 02:42:33.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:34.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:34.142" status="PASS" starttime="20170810 02:42:34.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:34.142" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:34.142" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:34.142" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 02:42:34.142" status="PASS" starttime="20170810 02:42:34.142"></status>
</kw>
<msg timestamp="20170810 02:42:34.143" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:42:34.143" status="PASS" starttime="20170810 02:42:33.209"></status>
</kw>
<msg timestamp="20170810 02:42:34.143" level="INFO">${power_state} = On</msg>
<status endtime="20170810 02:42:34.143" status="PASS" starttime="20170810 02:42:33.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:42:34.144" status="PASS" starttime="20170810 02:42:34.143"></status>
</kw>
<status endtime="20170810 02:42:34.144" status="PASS" starttime="20170810 02:42:33.208"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:34.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:34.148" status="PASS" starttime="20170810 02:42:34.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:34.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:34.149" status="PASS" starttime="20170810 02:42:34.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:34.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:34.150" status="PASS" starttime="20170810 02:42:34.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:34.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:34.150" status="PASS" starttime="20170810 02:42:34.150"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:34.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:34.515" status="PASS" starttime="20170810 02:42:34.151"></status>
</kw>
<msg timestamp="20170810 02:42:34.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:34.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:34.515" status="PASS" starttime="20170810 02:42:34.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:34.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:34.516" status="PASS" starttime="20170810 02:42:34.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:34.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:34.517" status="PASS" starttime="20170810 02:42:34.516"></status>
</kw>
<status endtime="20170810 02:42:34.517" status="PASS" starttime="20170810 02:42:34.147"></status>
</kw>
<status endtime="20170810 02:42:34.517" status="PASS" starttime="20170810 02:42:34.146"></status>
</kw>
<status endtime="20170810 02:42:34.517" status="PASS" starttime="20170810 02:42:34.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:34.518" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:42:34.518" status="PASS" starttime="20170810 02:42:34.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:34.520" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:34.520" status="PASS" starttime="20170810 02:42:34.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:34.521" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:34.521" status="PASS" starttime="20170810 02:42:34.521"></status>
</kw>
<status endtime="20170810 02:42:34.521" status="PASS" starttime="20170810 02:42:34.520"></status>
</kw>
<status endtime="20170810 02:42:34.521" status="PASS" starttime="20170810 02:42:34.519"></status>
</kw>
<status endtime="20170810 02:42:34.521" status="PASS" starttime="20170810 02:42:34.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:35.222" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:35.223" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:35.223" status="PASS" starttime="20170810 02:42:34.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:35.225" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:35.225" status="PASS" starttime="20170810 02:42:35.224"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:35.225" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:35.226" status="PASS" starttime="20170810 02:42:35.225"></status>
</kw>
<status endtime="20170810 02:42:35.226" status="PASS" starttime="20170810 02:42:35.225"></status>
</kw>
<status endtime="20170810 02:42:35.226" status="PASS" starttime="20170810 02:42:35.223"></status>
</kw>
<status endtime="20170810 02:42:35.226" status="PASS" starttime="20170810 02:42:35.223"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:35.226" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:35.226" status="PASS" starttime="20170810 02:42:35.226"></status>
</kw>
<msg timestamp="20170810 02:42:35.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:35.227" status="PASS" starttime="20170810 02:42:34.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:35.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:35.227" status="PASS" starttime="20170810 02:42:35.227"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:35.228" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:35.228" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:35.228" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:42:35.228" status="PASS" starttime="20170810 02:42:35.227"></status>
</kw>
<msg timestamp="20170810 02:42:35.228" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:42:35.228" status="PASS" starttime="20170810 02:42:34.144"></status>
</kw>
<msg timestamp="20170810 02:42:35.229" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:42:35.229" status="PASS" starttime="20170810 02:42:34.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:42:35.229" status="PASS" starttime="20170810 02:42:35.229"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:35.233" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:35.234" status="PASS" starttime="20170810 02:42:35.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:35.234" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:35.234" status="PASS" starttime="20170810 02:42:35.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:35.235" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:35.235" status="PASS" starttime="20170810 02:42:35.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:35.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:35.236" status="PASS" starttime="20170810 02:42:35.235"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:35.664" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:35.665" status="PASS" starttime="20170810 02:42:35.236"></status>
</kw>
<msg timestamp="20170810 02:42:35.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:35.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:35.665" status="PASS" starttime="20170810 02:42:35.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:35.665" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:35.666" status="PASS" starttime="20170810 02:42:35.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:35.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:35.666" status="PASS" starttime="20170810 02:42:35.666"></status>
</kw>
<status endtime="20170810 02:42:35.666" status="PASS" starttime="20170810 02:42:35.232"></status>
</kw>
<status endtime="20170810 02:42:35.666" status="PASS" starttime="20170810 02:42:35.232"></status>
</kw>
<status endtime="20170810 02:42:35.667" status="PASS" starttime="20170810 02:42:35.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:35.667" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:42:35.667" status="PASS" starttime="20170810 02:42:35.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:35.669" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:42:35.670" status="PASS" starttime="20170810 02:42:35.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:35.671" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:42:35.671" status="PASS" starttime="20170810 02:42:35.671"></status>
</kw>
<status endtime="20170810 02:42:35.672" status="PASS" starttime="20170810 02:42:35.670"></status>
</kw>
<status endtime="20170810 02:42:35.672" status="PASS" starttime="20170810 02:42:35.668"></status>
</kw>
<status endtime="20170810 02:42:35.672" status="PASS" starttime="20170810 02:42:35.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:36.329" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 02:42:36.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:36.329" status="PASS" starttime="20170810 02:42:35.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:36.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:36.331" status="PASS" starttime="20170810 02:42:36.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:36.332" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:36.332" status="PASS" starttime="20170810 02:42:36.331"></status>
</kw>
<status endtime="20170810 02:42:36.332" status="PASS" starttime="20170810 02:42:36.331"></status>
</kw>
<status endtime="20170810 02:42:36.332" status="PASS" starttime="20170810 02:42:36.330"></status>
</kw>
<status endtime="20170810 02:42:36.332" status="PASS" starttime="20170810 02:42:36.329"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:36.332" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:36.332" status="PASS" starttime="20170810 02:42:36.332"></status>
</kw>
<msg timestamp="20170810 02:42:36.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:36.333" status="PASS" starttime="20170810 02:42:35.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:36.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:36.333" status="PASS" starttime="20170810 02:42:36.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:36.334" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:36.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:36.334" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 02:42:36.334" status="PASS" starttime="20170810 02:42:36.334"></status>
</kw>
<msg timestamp="20170810 02:42:36.338" level="INFO">${state} = Off</msg>
<status endtime="20170810 02:42:36.338" status="PASS" starttime="20170810 02:42:35.230"></status>
</kw>
<msg timestamp="20170810 02:42:36.338" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 02:42:36.338" status="PASS" starttime="20170810 02:42:35.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 02:42:36.339" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:42:36.339" status="FAIL" starttime="20170810 02:42:36.339"></status>
</kw>
<status endtime="20170810 02:42:36.339" status="FAIL" starttime="20170810 02:42:35.229"></status>
</kw>
<status endtime="20170810 02:42:36.339" status="FAIL" starttime="20170810 02:42:33.207"></status>
</kw>
<msg timestamp="20170810 02:42:36.340" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:42:36.340" status="FAIL" starttime="20170810 02:32:28.983"></status>
</kw>
<status endtime="20170810 02:42:36.340" status="FAIL" starttime="20170810 02:32:27.611"></status>
</kw>
<status endtime="20170810 02:42:36.340" status="FAIL" starttime="20170810 02:32:20.353"></status>
</kw>
<status endtime="20170810 02:42:36.340" status="FAIL" starttime="20170810 02:32:20.353"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:36.345" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:36.347" status="PASS" starttime="20170810 02:42:36.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:36.347" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:36.347" status="PASS" starttime="20170810 02:42:36.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:36.348" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:36.348" status="PASS" starttime="20170810 02:42:36.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:36.349" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:36.349" status="PASS" starttime="20170810 02:42:36.348"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:36.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:36.718" status="PASS" starttime="20170810 02:42:36.349"></status>
</kw>
<msg timestamp="20170810 02:42:36.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:36.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:36.718" status="PASS" starttime="20170810 02:42:36.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:36.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:36.718" status="PASS" starttime="20170810 02:42:36.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:36.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:36.719" status="PASS" starttime="20170810 02:42:36.719"></status>
</kw>
<status endtime="20170810 02:42:36.719" status="PASS" starttime="20170810 02:42:36.344"></status>
</kw>
<status endtime="20170810 02:42:36.719" status="PASS" starttime="20170810 02:42:36.344"></status>
</kw>
<status endtime="20170810 02:42:36.719" status="PASS" starttime="20170810 02:42:36.343"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:36.720" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:42:36.720" status="PASS" starttime="20170810 02:42:36.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:36.722" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:36.722" status="PASS" starttime="20170810 02:42:36.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:36.723" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:42:36.723" status="PASS" starttime="20170810 02:42:36.723"></status>
</kw>
<status endtime="20170810 02:42:36.723" status="PASS" starttime="20170810 02:42:36.722"></status>
</kw>
<status endtime="20170810 02:42:36.723" status="PASS" starttime="20170810 02:42:36.721"></status>
</kw>
<status endtime="20170810 02:42:36.724" status="PASS" starttime="20170810 02:42:36.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:37.404" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 02:42:37.404" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:37.404" status="PASS" starttime="20170810 02:42:36.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 02:42:37.406" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:37.406" status="PASS" starttime="20170810 02:42:37.406"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 02:42:37.407" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:42:37.407" status="PASS" starttime="20170810 02:42:37.407"></status>
</kw>
<status endtime="20170810 02:42:37.407" status="PASS" starttime="20170810 02:42:37.406"></status>
</kw>
<status endtime="20170810 02:42:37.408" status="PASS" starttime="20170810 02:42:37.405"></status>
</kw>
<status endtime="20170810 02:42:37.408" status="PASS" starttime="20170810 02:42:37.405"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:37.408" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:37.408" status="PASS" starttime="20170810 02:42:37.408"></status>
</kw>
<msg timestamp="20170810 02:42:37.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:37.408" status="PASS" starttime="20170810 02:42:36.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:37.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:37.409" status="PASS" starttime="20170810 02:42:37.409"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:37.409" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:37.410" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:37.410" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 02:42:37.410" status="PASS" starttime="20170810 02:42:37.409"></status>
</kw>
<msg timestamp="20170810 02:42:37.410" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:42:37.410" status="PASS" starttime="20170810 02:42:36.342"></status>
</kw>
<msg timestamp="20170810 02:42:37.410" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 02:42:37.410" status="PASS" starttime="20170810 02:42:36.341"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 02:42:37.411" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 02:42:37.411" status="FAIL" starttime="20170810 02:42:37.411"></status>
</kw>
<msg timestamp="20170810 02:42:37.412" level="INFO">${status} = False</msg>
<status endtime="20170810 02:42:37.412" status="PASS" starttime="20170810 02:42:37.411"></status>
</kw>
<msg timestamp="20170810 02:42:37.412" level="INFO">${status} = False</msg>
<status endtime="20170810 02:42:37.412" status="PASS" starttime="20170810 02:42:36.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 02:42:37.437" level="INFO">Length is 12</msg>
<status endtime="20170810 02:42:37.437" status="PASS" starttime="20170810 02:42:37.437"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:42:37.442" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:42:40.452" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 02:42:40.452" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.650 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.31 ms
64 bytes from 9.41.166.169...</msg>
<status endtime="20170810 02:42:40.452" status="PASS" starttime="20170810 02:42:37.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.455" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.650 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.31 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.526 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.41 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.526/0.975/1.411/0.392 ms</msg>
<status endtime="20170810 02:42:40.456" status="PASS" starttime="20170810 02:42:40.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 02:42:40.456" status="PASS" starttime="20170810 02:42:40.456"></status>
</kw>
<status endtime="20170810 02:42:40.457" status="PASS" starttime="20170810 02:42:37.436"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:42:40.470" level="INFO">${cur_time} = 2017-08-10 02:42:40:469809</msg>
<status endtime="20170810 02:42:40.470" status="PASS" starttime="20170810 02:42:40.470"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:42:40.471" level="INFO">${cur_time} = 20170810024240469809</msg>
<status endtime="20170810 02:42:40.471" status="PASS" starttime="20170810 02:42:40.470"></status>
</kw>
<status endtime="20170810 02:42:40.471" status="PASS" starttime="20170810 02:42:40.469"></status>
</kw>
<msg timestamp="20170810 02:42:40.471" level="INFO">${FFDC_TIME} = 20170810024240469809</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 02:42:40.484" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170810 02:42:40.484" status="PASS" starttime="20170810 02:42:40.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 02:42:40.485" level="INFO">${suite_name} = 20170810024240469809_TestsTestBasicPoweron</msg>
<status endtime="20170810 02:42:40.485" status="PASS" starttime="20170810 02:42:40.485"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 02:42:40.486" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170810 02:42:40.486" status="PASS" starttime="20170810 02:42:40.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 02:42:40.486" level="INFO">${test_name} = 20170810024240469809_PowerOnTest</msg>
<status endtime="20170810 02:42:40.486" status="PASS" starttime="20170810 02:42:40.486"></status>
</kw>
<status endtime="20170810 02:42:40.486" status="PASS" starttime="20170810 02:42:40.484"></status>
</kw>
<msg timestamp="20170810 02:42:40.487" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/</msg>
<msg timestamp="20170810 02:42:40.487" level="INFO">${FFDC_PREFIX} = 20170810024240469809_</msg>
<msg timestamp="20170810 02:42:40.507" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170810 02:42:40.508" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.508" status="PASS" starttime="20170810 02:42:40.507"></status>
</kw>
<msg timestamp="20170810 02:42:40.512" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.533" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.533" status="PASS" starttime="20170810 02:42:40.533"></status>
</kw>
<status endtime="20170810 02:42:40.534" status="PASS" starttime="20170810 02:42:40.532"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.535" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.535" status="PASS" starttime="20170810 02:42:40.534"></status>
</kw>
<status endtime="20170810 02:42:40.535" status="PASS" starttime="20170810 02:42:40.534"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.536" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.536" status="PASS" starttime="20170810 02:42:40.536"></status>
</kw>
<status endtime="20170810 02:42:40.536" status="PASS" starttime="20170810 02:42:40.535"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.538" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.538" status="PASS" starttime="20170810 02:42:40.537"></status>
</kw>
<status endtime="20170810 02:42:40.538" status="PASS" starttime="20170810 02:42:40.536"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.539" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.539" status="PASS" starttime="20170810 02:42:40.539"></status>
</kw>
<status endtime="20170810 02:42:40.539" status="PASS" starttime="20170810 02:42:40.538"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.540" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.541" status="PASS" starttime="20170810 02:42:40.540"></status>
</kw>
<status endtime="20170810 02:42:40.541" status="PASS" starttime="20170810 02:42:40.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.542" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.542" status="PASS" starttime="20170810 02:42:40.541"></status>
</kw>
<status endtime="20170810 02:42:40.542" status="PASS" starttime="20170810 02:42:40.541"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.543" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.543" status="PASS" starttime="20170810 02:42:40.543"></status>
</kw>
<status endtime="20170810 02:42:40.543" status="PASS" starttime="20170810 02:42:40.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.544" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.545" status="PASS" starttime="20170810 02:42:40.544"></status>
</kw>
<status endtime="20170810 02:42:40.545" status="PASS" starttime="20170810 02:42:40.543"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.546" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.546" status="PASS" starttime="20170810 02:42:40.546"></status>
</kw>
<status endtime="20170810 02:42:40.546" status="PASS" starttime="20170810 02:42:40.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.547" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.548" status="PASS" starttime="20170810 02:42:40.547"></status>
</kw>
<status endtime="20170810 02:42:40.548" status="PASS" starttime="20170810 02:42:40.546"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.549" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.549" status="PASS" starttime="20170810 02:42:40.549"></status>
</kw>
<status endtime="20170810 02:42:40.549" status="PASS" starttime="20170810 02:42:40.548"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.550" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.550" status="PASS" starttime="20170810 02:42:40.550"></status>
</kw>
<status endtime="20170810 02:42:40.550" status="PASS" starttime="20170810 02:42:40.549"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 02:42:40.579" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:42:40.579" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 02:42:40.778" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 02:42:40.789" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 02:42:40.789" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 02:42:40.789" level="INFO">${rc} = 0</msg>
<status endtime="20170810 02:42:40.789" status="PASS" starttime="20170810 02:42:40.551"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.790" level="INFO">Length is 0</msg>
<status endtime="20170810 02:42:40.790" status="PASS" starttime="20170810 02:42:40.789"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.791" level="INFO">Length is 11</msg>
<status endtime="20170810 02:42:40.791" status="PASS" starttime="20170810 02:42:40.790"></status>
</kw>
<msg timestamp="20170810 02:42:40.791" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170810 02:42:40.791" status="PASS" starttime="20170810 02:42:40.551"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.793" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.793" status="PASS" starttime="20170810 02:42:40.792"></status>
</kw>
<status endtime="20170810 02:42:40.793" status="PASS" starttime="20170810 02:42:40.791"></status>
</kw>
<status endtime="20170810 02:42:40.793" status="PASS" starttime="20170810 02:42:40.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.794" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.794" status="PASS" starttime="20170810 02:42:40.794"></status>
</kw>
<status endtime="20170810 02:42:40.794" status="PASS" starttime="20170810 02:42:40.793"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 02:42:40.795" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170810 02:42:40.795" status="PASS" starttime="20170810 02:42:40.795"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.796" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.797" status="PASS" starttime="20170810 02:42:40.796"></status>
</kw>
<status endtime="20170810 02:42:40.797" status="PASS" starttime="20170810 02:42:40.795"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.798" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.798" status="PASS" starttime="20170810 02:42:40.797"></status>
</kw>
<status endtime="20170810 02:42:40.798" status="PASS" starttime="20170810 02:42:40.797"></status>
</kw>
<status endtime="20170810 02:42:40.798" status="PASS" starttime="20170810 02:42:40.795"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.799" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.799" status="PASS" starttime="20170810 02:42:40.799"></status>
</kw>
<status endtime="20170810 02:42:40.799" status="PASS" starttime="20170810 02:42:40.798"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.800" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.801" status="PASS" starttime="20170810 02:42:40.800"></status>
</kw>
<status endtime="20170810 02:42:40.801" status="PASS" starttime="20170810 02:42:40.800"></status>
</kw>
<status endtime="20170810 02:42:40.801" status="PASS" starttime="20170810 02:42:40.798"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.802" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.802" status="PASS" starttime="20170810 02:42:40.802"></status>
</kw>
<status endtime="20170810 02:42:40.802" status="PASS" starttime="20170810 02:42:40.801"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.803" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.803" status="PASS" starttime="20170810 02:42:40.803"></status>
</kw>
<status endtime="20170810 02:42:40.803" status="PASS" starttime="20170810 02:42:40.802"></status>
</kw>
<status endtime="20170810 02:42:40.803" status="PASS" starttime="20170810 02:42:40.801"></status>
</kw>
<status endtime="20170810 02:42:40.803" status="PASS" starttime="20170810 02:42:40.795"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:40.804" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:40.805" status="PASS" starttime="20170810 02:42:40.804"></status>
</kw>
<status endtime="20170810 02:42:40.805" status="PASS" starttime="20170810 02:42:40.804"></status>
</kw>
<status endtime="20170810 02:42:40.805" status="PASS" starttime="20170810 02:42:40.532"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 02:42:40.811" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170810 02:42:40.811" status="PASS" starttime="20170810 02:42:40.811"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170810 02:42:40.813" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') |...</msg>
<status endtime="20170810 02:42:40.813" status="PASS" starttime="20170810 02:42:40.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170810 02:42:40.814" status="PASS" starttime="20170810 02:42:40.814"></status>
</kw>
<msg timestamp="20170810 02:42:40.814" level="INFO">@{ffdc_function_list} = [ SEL Log | Core Files | Get Request FFDC | OS FFDC | FFDC Generic Report | BMC Specific Files ]</msg>
<status endtime="20170810 02:42:40.814" status="PASS" starttime="20170810 02:42:40.813"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:42:40.816" status="PASS" starttime="20170810 02:42:40.816"></status>
</kw>
<msg timestamp="20170810 02:42:40.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:40.816" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 02:42:40.816" status="PASS" starttime="20170810 02:42:40.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:42:40.817" status="PASS" starttime="20170810 02:42:40.816"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:40.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:40.845" status="PASS" starttime="20170810 02:42:40.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:40.846" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:40.846" status="PASS" starttime="20170810 02:42:40.845"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:40.846" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:40.846" status="PASS" starttime="20170810 02:42:40.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:40.847" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:40.847" status="PASS" starttime="20170810 02:42:40.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:41.189" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:41.189" status="PASS" starttime="20170810 02:42:40.848"></status>
</kw>
<msg timestamp="20170810 02:42:41.189" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:41.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:41.190" status="PASS" starttime="20170810 02:42:40.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:41.190" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:41.190" status="PASS" starttime="20170810 02:42:41.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:41.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:41.191" status="PASS" starttime="20170810 02:42:41.191"></status>
</kw>
<status endtime="20170810 02:42:41.191" status="PASS" starttime="20170810 02:42:40.843"></status>
</kw>
<status endtime="20170810 02:42:41.191" status="PASS" starttime="20170810 02:42:40.843"></status>
</kw>
<status endtime="20170810 02:42:41.191" status="PASS" starttime="20170810 02:42:40.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:41.192" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170810 02:42:41.192" status="PASS" starttime="20170810 02:42:41.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:41.193" status="PASS" starttime="20170810 02:42:41.192"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:42.664" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170810 02:42:42.664" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:42.664" status="PASS" starttime="20170810 02:42:41.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:42.665" status="PASS" starttime="20170810 02:42:42.665"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:42.665" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:42.665" status="PASS" starttime="20170810 02:42:42.665"></status>
</kw>
<msg timestamp="20170810 02:42:42.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:42.666" status="PASS" starttime="20170810 02:42:40.842"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:42.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:42.667" status="PASS" starttime="20170810 02:42:42.666"></status>
</kw>
<msg timestamp="20170810 02:42:42.667" level="INFO">${status} = True</msg>
<status endtime="20170810 02:42:42.667" status="PASS" starttime="20170810 02:42:42.666"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170810 02:42:42.667" status="PASS" starttime="20170810 02:42:42.667"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:42.669" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775748443, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 24 4d 2f a1 00 00 00 09 24 4e 7b 43 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4a 90 00 00 4a 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 33 ed 3d 17 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 33 ed 4a 36 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 33 ed 57 13 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 34 07 3c b9 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 34 07 4a f1 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 34 07 5a 9d 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 34 07 c5 98 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 34 0b 2e 33 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 34 0b b1 2a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 34 0b c4 21 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 34 0b d1 7b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 34 0b dd ce 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 34 0b ea a3 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 3a 02 01 65 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 3a 02 12 2d 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 3a 02 22 60 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 3a 02 96 46 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 3a b7 00 53 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 3a b7 8b b8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 3a b7 9e a4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 3a b7 ab 5c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 3a b7 b9 cd 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 3a b7 c6 ae 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775873729, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 25 1e d9 3d 00 00 00 09 25 67 59 0a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4b 90 00 00 4b 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 70 69 20 72 20 64 72 20 32 31 33 20 70 33 6f 20 6e 32 69 72 20 64 65 0a 31 32 33 31 35 6f 33 6e 20 32 65 20 0a 64 64 6f 6f 6e 6e 65 65 0a 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 12, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775875374, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [], 
      "Id": 13, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775881403, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775115406, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775042566, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 11 04 01 ae 02 00 00 00 11 04 02 6e 07 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 58 18 32 df 8a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 58 18 33 34 42 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 18 38 04 87 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 58 1e 28 19 08 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 58 1e 28 45 53 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 58 1e 28 93 7b 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 1e 29 b5 70 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 58 24 24 19 89 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 23 dc 54 ac 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 8e 23 fb 1f eb 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 8e 24 21 3b 54 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 8e 26 00 df e3 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 26 01 44 fa 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 8e 2b f6 e6 99 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 8e 2b f7 0c d6 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 8e 2b f7 1a 51 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 8e 2b f7 2a 8e 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 00 00 00 00 00 00 00 56 00 00 00 00 00 00 00 08 00 00 00 00 00 86 eba3 70 00 00 00 00 00 00 00 00 01 08 08 08 02 01 10 00 00 00 00 40 00 00 00 00 00 00 00 00 40 65 a4 a8 00 00 00 00 00 00 00 56 00 00 00 00 00 00 00 07 00 00 00 00 00 86 d9 00 00 60 00 03 00 0b 80 00 00 00 06 0d f8 3f 00 00 6e 6e 6e 11 00 6e 20 08 00 05 70 03 00 60 18 28 28 00 78 00 14 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 16 03 16 03 16 03 16 03 16 03 16 03 16 03 16 03 16 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9c 00 00 00 00 00 e7 00 fe a6 11 11 42 15 00 80 b3 51 00 55 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 5c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775489646, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 3b e9 14 14 00 00 00 09 3b ea 50 00 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 24 90 00 00 24 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4c 0a 95 31 4e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4c 0a 95 3d cf 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0a 95 4b 14 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4c 0a af d7 09 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 0a af e4 46 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4c 0a af f4 63 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 0a b0 63 1d 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 0b 11 47 b5 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 0b 11 d0 ae 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 0b 11 e4 1a 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 0b 11 f1 0d 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4c 0b 11 fd af 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0b 12 0a c1 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 34 bf 6a 02 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 34 bf 7b b9 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 34 bf 8b ef 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 34 bf f8 b9 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 2a 56 9a c1 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 2a 57 2d 1d 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 2a 57 40 a9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 2a 57 4f f1 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 2a 57 5c f7 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 2a 57 6a 3c 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775607454, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 30 99 6e 92 00 00 00 09 3d 91 67 8e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 25 90 00 00 25 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 72 6b 70 75 20 20 70 70 32 20 69 31 72 33 32 70 20 20 64 69 32 72 31 33 6f 35 20 20 6e 64 65 32 6f 0a 31 6e 33 65 33 0a 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775609305, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775615729, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 17 cb aa 8d 00 00 00 09 0e 4a 36 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 37 90 00 00 37 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 1b 9d d9 6c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 1b 9d e5 be 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 1b 9d f3 55 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 1b b8 00 70 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 1b b8 0e 5e 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 1b b8 1e 64 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 1b b8 8b 93 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 1b c7 ec ea 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 1b c8 71 a8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 1b c8 84 da 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 1b c8 91 63 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 1b c8 9e 02 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 1b c8 aa 4a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 22 81 e8 95 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 22 81 fc 98 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 22 82 0d 69 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 22 82 81 22 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 23 2f 99 34 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 23 30 22 dc 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 23 30 36 8f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 23 30 44 0c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 23 30 52 16 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 30 5f 4b 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775740356, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 17 cc f8 81 00 00 00 09 0f 78 a1 e6 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 38 90 00 00 38 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 20 65 20 70 69 72 20 70 0a 20 32 69 70 31 69 33 72 72 35 20 20 20 64 32 32 6f 31 31 6e 33 65 33 0a 34 32 20 64 20 6f 64 6e 6f 65 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775742055, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:42.670" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:42.670" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'Id': 4, u'Resolved': 0, u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'associations': ...</msg>
<status endtime="20170810 02:42:42.670" status="PASS" starttime="20170810 02:42:42.668"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170810 02:42:42.671" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/11/callout', u'/xyz/openbmc_project/logging/entry/12', u'/xyz/openbmc_project/...</msg>
<status endtime="20170810 02:42:42.671" status="PASS" starttime="20170810 02:42:42.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:42:42.671" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel</msg>
<status endtime="20170810 02:42:42.671" status="PASS" starttime="20170810 02:42:42.671"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170810 02:42:42.672" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:42.672" status="PASS" starttime="20170810 02:42:42.672"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:42.673" status="PASS" starttime="20170810 02:42:42.673"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:42.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:42.681" status="PASS" starttime="20170810 02:42:42.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:42.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:42.682" status="PASS" starttime="20170810 02:42:42.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:42.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:42.683" status="PASS" starttime="20170810 02:42:42.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:42.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:42.684" status="PASS" starttime="20170810 02:42:42.684"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:43.084" status="PASS" starttime="20170810 02:42:42.685"></status>
</kw>
<msg timestamp="20170810 02:42:43.084" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:43.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:43.084" status="PASS" starttime="20170810 02:42:42.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:43.085" status="PASS" starttime="20170810 02:42:43.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:43.085" status="PASS" starttime="20170810 02:42:43.085"></status>
</kw>
<status endtime="20170810 02:42:43.085" status="PASS" starttime="20170810 02:42:42.679"></status>
</kw>
<status endtime="20170810 02:42:43.085" status="PASS" starttime="20170810 02:42:42.676"></status>
</kw>
<status endtime="20170810 02:42:43.086" status="PASS" starttime="20170810 02:42:42.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:43.086" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170810 02:42:43.086" status="PASS" starttime="20170810 02:42:43.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:43.087" status="PASS" starttime="20170810 02:42:43.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:43.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:43.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:43.339" status="PASS" starttime="20170810 02:42:43.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:43.340" status="PASS" starttime="20170810 02:42:43.340"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:43.340" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:43.340" status="PASS" starttime="20170810 02:42:43.340"></status>
</kw>
<msg timestamp="20170810 02:42:43.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:43.341" status="PASS" starttime="20170810 02:42:42.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:43.341" status="PASS" starttime="20170810 02:42:43.341"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:43.342" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:43.342" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:43.342" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 02:42:43.342" status="PASS" starttime="20170810 02:42:43.342"></status>
</kw>
<msg timestamp="20170810 02:42:43.342" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 02:42:43.342" status="PASS" starttime="20170810 02:42:42.673"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:43.343" level="INFO">Length is 0</msg>
<msg timestamp="20170810 02:42:43.343" level="INFO">${length} = 0</msg>
<status endtime="20170810 02:42:43.343" status="PASS" starttime="20170810 02:42:43.343"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.343" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:43.344" status="PASS" starttime="20170810 02:42:43.343"></status>
</kw>
<status endtime="20170810 02:42:43.344" status="PASS" starttime="20170810 02:42:42.672"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:43.345" status="PASS" starttime="20170810 02:42:43.344"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:43.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:43.349" status="PASS" starttime="20170810 02:42:43.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:43.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:43.349" status="PASS" starttime="20170810 02:42:43.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:43.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:43.350" status="PASS" starttime="20170810 02:42:43.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:43.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:43.351" status="PASS" starttime="20170810 02:42:43.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:43.777" status="PASS" starttime="20170810 02:42:43.351"></status>
</kw>
<msg timestamp="20170810 02:42:43.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:43.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:43.777" status="PASS" starttime="20170810 02:42:43.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:43.778" status="PASS" starttime="20170810 02:42:43.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:43.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:43.779" status="PASS" starttime="20170810 02:42:43.778"></status>
</kw>
<status endtime="20170810 02:42:43.779" status="PASS" starttime="20170810 02:42:43.348"></status>
</kw>
<status endtime="20170810 02:42:43.779" status="PASS" starttime="20170810 02:42:43.347"></status>
</kw>
<status endtime="20170810 02:42:43.779" status="PASS" starttime="20170810 02:42:43.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:43.779" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status endtime="20170810 02:42:43.780" status="PASS" starttime="20170810 02:42:43.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:43.780" status="PASS" starttime="20170810 02:42:43.780"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:44.393" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:44.393" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:44.393" status="PASS" starttime="20170810 02:42:43.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:44.394" status="PASS" starttime="20170810 02:42:44.393"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:44.394" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:44.394" status="PASS" starttime="20170810 02:42:44.394"></status>
</kw>
<msg timestamp="20170810 02:42:44.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:44.394" status="PASS" starttime="20170810 02:42:43.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:44.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:44.395" status="PASS" starttime="20170810 02:42:44.395"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:44.396" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 24 4d 2f a1 00 00 00 09 24 4e 7b 43 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4a 90 00 00 4a 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 33 ed 3d 17 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 33 ed 4a 36 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 33 ed 57 13 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 34 07 3c b9 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 34 07 4a f1 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 34 07 5a 9d 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 34 07 c5 98 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 34 0b 2e 33 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 34 0b b1 2a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 34 0b c4 21 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 34 0b d1 7b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 34 0b dd ce 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 34 0b ea a3 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 3a 02 01 65 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 3a 02 12 2d 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 3a 02 22 60 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 3a 02 96 46 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 3a b7 00 53 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 3a b7 8b b8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 3a b7 9e a4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 3a b7 ab 5c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 3a b7 b9 cd 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 3a b7 c6 ae 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:44.396" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:44.396" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 02:42:44.396" status="PASS" starttime="20170810 02:42:44.395"></status>
</kw>
<msg timestamp="20170810 02:42:44.396" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 24 4d 2f a1 00 00 00 09 24 4e 7b 43 42 00 0...</msg>
<status endtime="20170810 02:42:44.396" status="PASS" starttime="20170810 02:42:43.345"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:44.397" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:44.397" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:44.397" status="PASS" starttime="20170810 02:42:44.397"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:44.398" status="PASS" starttime="20170810 02:42:44.397"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:44.398" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:44.399" status="PASS" starttime="20170810 02:42:44.398"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:44.400" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:44.401" status="PASS" starttime="20170810 02:42:44.400"></status>
</kw>
<status endtime="20170810 02:42:44.401" status="PASS" starttime="20170810 02:42:44.399"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:44.402" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:44.402" status="PASS" starttime="20170810 02:42:44.401"></status>
</kw>
<status endtime="20170810 02:42:44.402" status="PASS" starttime="20170810 02:42:44.401"></status>
</kw>
<status endtime="20170810 02:42:44.402" status="PASS" starttime="20170810 02:42:43.344"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:44.403" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:44.403" status="PASS" starttime="20170810 02:42:44.402"></status>
</kw>
<status endtime="20170810 02:42:44.403" status="PASS" starttime="20170810 02:42:44.402"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/12" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:44.404" status="PASS" starttime="20170810 02:42:44.404"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:44.408" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:44.408" status="PASS" starttime="20170810 02:42:44.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:44.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:44.408" status="PASS" starttime="20170810 02:42:44.408"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:44.409" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:44.409" status="PASS" starttime="20170810 02:42:44.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:44.410" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:44.410" status="PASS" starttime="20170810 02:42:44.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:44.650" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:44.650" status="PASS" starttime="20170810 02:42:44.410"></status>
</kw>
<msg timestamp="20170810 02:42:44.650" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:44.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:44.651" status="PASS" starttime="20170810 02:42:44.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:44.651" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:44.651" status="PASS" starttime="20170810 02:42:44.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:44.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:44.652" status="PASS" starttime="20170810 02:42:44.651"></status>
</kw>
<status endtime="20170810 02:42:44.652" status="PASS" starttime="20170810 02:42:44.407"></status>
</kw>
<status endtime="20170810 02:42:44.652" status="PASS" starttime="20170810 02:42:44.406"></status>
</kw>
<status endtime="20170810 02:42:44.652" status="PASS" starttime="20170810 02:42:44.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:44.653" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/12/attr/AdditionalData</msg>
<status endtime="20170810 02:42:44.653" status="PASS" starttime="20170810 02:42:44.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:44.653" status="PASS" starttime="20170810 02:42:44.653"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:45.421" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/12/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:45.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:45.421" status="PASS" starttime="20170810 02:42:44.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:45.422" status="PASS" starttime="20170810 02:42:45.422"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:45.422" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:45.422" status="PASS" starttime="20170810 02:42:45.422"></status>
</kw>
<msg timestamp="20170810 02:42:45.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:45.423" status="PASS" starttime="20170810 02:42:44.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:45.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:45.423" status="PASS" starttime="20170810 02:42:45.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:45.424" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 25 1e d9 3d 00 00 00 09 25 67 59 0a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4b 90 00 00 4b 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 70 69 20 72 20 64 72 20 32 31 33 20 70 33 6f 20 6e 32 69 72 20 64 65 0a 31 32 33 31 35 6f 33 6e 20 32 65 20 0a 64 64 6f 6f 6e 6e 65 65 0a 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:45.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:45.424" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 02:42:45.424" status="PASS" starttime="20170810 02:42:45.423"></status>
</kw>
<msg timestamp="20170810 02:42:45.424" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 25 1e d9 3d 00 00 00 09 25 67 59 0a 42 00 0...</msg>
<status endtime="20170810 02:42:45.425" status="PASS" starttime="20170810 02:42:44.404"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:45.425" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:45.425" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:45.425" status="PASS" starttime="20170810 02:42:45.425"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:45.426" status="PASS" starttime="20170810 02:42:45.425"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:45.426" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:45.426" status="PASS" starttime="20170810 02:42:45.426"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:45.428" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:45.428" status="PASS" starttime="20170810 02:42:45.427"></status>
</kw>
<status endtime="20170810 02:42:45.428" status="PASS" starttime="20170810 02:42:45.426"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:45.429" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:45.429" status="PASS" starttime="20170810 02:42:45.429"></status>
</kw>
<status endtime="20170810 02:42:45.429" status="PASS" starttime="20170810 02:42:45.428"></status>
</kw>
<status endtime="20170810 02:42:45.429" status="PASS" starttime="20170810 02:42:44.403"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/12/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:45.430" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:45.430" status="PASS" starttime="20170810 02:42:45.429"></status>
</kw>
<status endtime="20170810 02:42:45.430" status="PASS" starttime="20170810 02:42:45.429"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/13" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:45.431" status="PASS" starttime="20170810 02:42:45.430"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:45.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:45.435" status="PASS" starttime="20170810 02:42:45.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:45.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:45.435" status="PASS" starttime="20170810 02:42:45.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:45.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:45.436" status="PASS" starttime="20170810 02:42:45.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:45.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:45.436" status="PASS" starttime="20170810 02:42:45.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:45.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:45.934" status="PASS" starttime="20170810 02:42:45.437"></status>
</kw>
<msg timestamp="20170810 02:42:45.934" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:45.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:45.934" status="PASS" starttime="20170810 02:42:45.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:45.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:45.935" status="PASS" starttime="20170810 02:42:45.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:45.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:45.935" status="PASS" starttime="20170810 02:42:45.935"></status>
</kw>
<status endtime="20170810 02:42:45.935" status="PASS" starttime="20170810 02:42:45.433"></status>
</kw>
<status endtime="20170810 02:42:45.936" status="PASS" starttime="20170810 02:42:45.433"></status>
</kw>
<status endtime="20170810 02:42:45.936" status="PASS" starttime="20170810 02:42:45.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:45.936" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/13/attr/AdditionalData</msg>
<status endtime="20170810 02:42:45.936" status="PASS" starttime="20170810 02:42:45.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:45.937" status="PASS" starttime="20170810 02:42:45.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:46.502" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/13/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:46.502" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:46.502" status="PASS" starttime="20170810 02:42:45.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:46.503" status="PASS" starttime="20170810 02:42:46.503"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:46.504" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:46.504" status="PASS" starttime="20170810 02:42:46.503"></status>
</kw>
<msg timestamp="20170810 02:42:46.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:46.504" status="PASS" starttime="20170810 02:42:45.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:46.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:46.505" status="PASS" starttime="20170810 02:42:46.504"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:46.505" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:46.505" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:46.505" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 02:42:46.505" status="PASS" starttime="20170810 02:42:46.505"></status>
</kw>
<msg timestamp="20170810 02:42:46.506" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 02:42:46.506" status="PASS" starttime="20170810 02:42:45.431"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:46.506" level="INFO">Length is 0</msg>
<msg timestamp="20170810 02:42:46.506" level="INFO">${length} = 0</msg>
<status endtime="20170810 02:42:46.506" status="PASS" starttime="20170810 02:42:46.506"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 02:42:46.507" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:46.507" status="PASS" starttime="20170810 02:42:46.507"></status>
</kw>
<status endtime="20170810 02:42:46.507" status="PASS" starttime="20170810 02:42:45.430"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:46.508" status="PASS" starttime="20170810 02:42:46.507"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:46.511" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:46.512" status="PASS" starttime="20170810 02:42:46.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:46.512" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:46.512" status="PASS" starttime="20170810 02:42:46.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:46.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:46.513" status="PASS" starttime="20170810 02:42:46.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:46.513" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:46.513" status="PASS" starttime="20170810 02:42:46.513"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:46.698" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:46.698" status="PASS" starttime="20170810 02:42:46.514"></status>
</kw>
<msg timestamp="20170810 02:42:46.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:46.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:46.698" status="PASS" starttime="20170810 02:42:46.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:46.699" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:46.699" status="PASS" starttime="20170810 02:42:46.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:46.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:46.700" status="PASS" starttime="20170810 02:42:46.699"></status>
</kw>
<status endtime="20170810 02:42:46.700" status="PASS" starttime="20170810 02:42:46.510"></status>
</kw>
<status endtime="20170810 02:42:46.700" status="PASS" starttime="20170810 02:42:46.510"></status>
</kw>
<status endtime="20170810 02:42:46.700" status="PASS" starttime="20170810 02:42:46.509"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:46.701" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170810 02:42:46.701" status="PASS" starttime="20170810 02:42:46.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:46.701" status="PASS" starttime="20170810 02:42:46.701"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:47.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:47.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:47.715" status="PASS" starttime="20170810 02:42:46.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:47.716" status="PASS" starttime="20170810 02:42:47.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:47.716" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:47.716" status="PASS" starttime="20170810 02:42:47.716"></status>
</kw>
<msg timestamp="20170810 02:42:47.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:47.717" status="PASS" starttime="20170810 02:42:46.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:47.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:47.717" status="PASS" starttime="20170810 02:42:47.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:47.718" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:47.718" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:47.718" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 02:42:47.718" status="PASS" starttime="20170810 02:42:47.718"></status>
</kw>
<msg timestamp="20170810 02:42:47.718" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 02:42:47.718" status="PASS" starttime="20170810 02:42:46.508"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:47.719" level="INFO">Length is 0</msg>
<msg timestamp="20170810 02:42:47.719" level="INFO">${length} = 0</msg>
<status endtime="20170810 02:42:47.719" status="PASS" starttime="20170810 02:42:47.719"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 02:42:47.719" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:47.720" status="PASS" starttime="20170810 02:42:47.719"></status>
</kw>
<status endtime="20170810 02:42:47.720" status="PASS" starttime="20170810 02:42:46.507"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:47.720" status="PASS" starttime="20170810 02:42:47.720"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:47.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:47.724" status="PASS" starttime="20170810 02:42:47.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:47.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:47.725" status="PASS" starttime="20170810 02:42:47.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:47.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:47.726" status="PASS" starttime="20170810 02:42:47.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:47.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:47.726" status="PASS" starttime="20170810 02:42:47.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:48.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:48.053" status="PASS" starttime="20170810 02:42:47.727"></status>
</kw>
<msg timestamp="20170810 02:42:48.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:48.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:48.053" status="PASS" starttime="20170810 02:42:47.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:48.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:48.054" status="PASS" starttime="20170810 02:42:48.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:48.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:48.055" status="PASS" starttime="20170810 02:42:48.054"></status>
</kw>
<status endtime="20170810 02:42:48.055" status="PASS" starttime="20170810 02:42:47.723"></status>
</kw>
<status endtime="20170810 02:42:48.055" status="PASS" starttime="20170810 02:42:47.723"></status>
</kw>
<status endtime="20170810 02:42:48.055" status="PASS" starttime="20170810 02:42:47.722"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:48.056" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170810 02:42:48.056" status="PASS" starttime="20170810 02:42:48.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:48.056" status="PASS" starttime="20170810 02:42:48.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:48.782" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:48.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:48.783" status="PASS" starttime="20170810 02:42:48.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:48.783" status="PASS" starttime="20170810 02:42:48.783"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:48.784" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:48.784" status="PASS" starttime="20170810 02:42:48.784"></status>
</kw>
<msg timestamp="20170810 02:42:48.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:48.784" status="PASS" starttime="20170810 02:42:47.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:48.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:48.785" status="PASS" starttime="20170810 02:42:48.784"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:48.785" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:48.785" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:48.786" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 02:42:48.786" status="PASS" starttime="20170810 02:42:48.785"></status>
</kw>
<msg timestamp="20170810 02:42:48.786" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 02:42:48.786" status="PASS" starttime="20170810 02:42:47.721"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:48.786" level="INFO">Length is 0</msg>
<msg timestamp="20170810 02:42:48.787" level="INFO">${length} = 0</msg>
<status endtime="20170810 02:42:48.787" status="PASS" starttime="20170810 02:42:48.786"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 02:42:48.787" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:48.787" status="PASS" starttime="20170810 02:42:48.787"></status>
</kw>
<status endtime="20170810 02:42:48.787" status="PASS" starttime="20170810 02:42:47.720"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:48.788" status="PASS" starttime="20170810 02:42:48.788"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:48.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:48.792" status="PASS" starttime="20170810 02:42:48.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:48.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:48.792" status="PASS" starttime="20170810 02:42:48.792"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:48.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:48.793" status="PASS" starttime="20170810 02:42:48.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:48.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:48.794" status="PASS" starttime="20170810 02:42:48.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:49.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:49.094" status="PASS" starttime="20170810 02:42:48.794"></status>
</kw>
<msg timestamp="20170810 02:42:49.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:49.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:49.094" status="PASS" starttime="20170810 02:42:48.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:49.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:49.095" status="PASS" starttime="20170810 02:42:49.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:49.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:49.096" status="PASS" starttime="20170810 02:42:49.095"></status>
</kw>
<status endtime="20170810 02:42:49.096" status="PASS" starttime="20170810 02:42:48.791"></status>
</kw>
<status endtime="20170810 02:42:49.096" status="PASS" starttime="20170810 02:42:48.790"></status>
</kw>
<status endtime="20170810 02:42:49.096" status="PASS" starttime="20170810 02:42:48.790"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:49.096" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170810 02:42:49.097" status="PASS" starttime="20170810 02:42:49.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:49.097" status="PASS" starttime="20170810 02:42:49.097"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:49.901" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:49.901" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:49.901" status="PASS" starttime="20170810 02:42:49.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:49.902" status="PASS" starttime="20170810 02:42:49.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:49.903" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:49.903" status="PASS" starttime="20170810 02:42:49.903"></status>
</kw>
<msg timestamp="20170810 02:42:49.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:49.903" status="PASS" starttime="20170810 02:42:48.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:49.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:49.904" status="PASS" starttime="20170810 02:42:49.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:49.904" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 11 04 01 ae 02 00 00 00 11 04 02 6e 07 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 58 18 32 df 8a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 58 18 33 34 42 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 18 38 04 87 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 58 1e 28 19 08 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 58 1e 28 45 53 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 58 1e 28 93 7b 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 1e 29 b5 70 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 58 24 24 19 89 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 23 dc 54 ac 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 8e 23 fb 1f eb 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 8e 24 21 3b 54 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 8e 26 00 df e3 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 26 01 44 fa 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 8e 2b f6 e6 99 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 8e 2b f7 0c d6 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 8e 2b f7 1a 51 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 8e 2b f7 2a 8e 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 00 00 00 00 00 00 00 56 00 00 00 00 00 00 00 08 00 00 00 00 00 86 eba3 70 00 00 00 00 00 00 00 00 01 08 08 08 02 01 10 00 00 00 00 40 00 00 00 00 00 00 00 00 40 65 a4 a8 00 00 00 00 00 00 00 56 00 00 00 00 00 00 00 07 00 00 00 00 00 86 d9 00 00 60 00 03 00 0b 80 00 00 00 06 0d f8 3f 00 00 6e 6e 6e 11 00 6e 20 08 00 05 70 03 00 60 18 28 28 00 78 00 14 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 16 03 16 03 16 03 16 03 16 03 16 03 16 03 16 03 16 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9c 00 00 00 00 00 e7 00 fe a6 11 11 42 15 00 80 b3 51 00 55 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 5c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:49.905" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:49.906" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 0...</msg>
<status endtime="20170810 02:42:49.906" status="PASS" starttime="20170810 02:42:49.904"></status>
</kw>
<msg timestamp="20170810 02:42:49.906" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 11 04 01 ae 02 00 00 00 11 04 02 6e 07 42 00 0...</msg>
<status endtime="20170810 02:42:49.906" status="PASS" starttime="20170810 02:42:48.788"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:49.907" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:49.907" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:49.907" status="PASS" starttime="20170810 02:42:49.906"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:49.907" status="PASS" starttime="20170810 02:42:49.907"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:49.908" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:49.908" status="PASS" starttime="20170810 02:42:49.908"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:49.910" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:49.910" status="PASS" starttime="20170810 02:42:49.909"></status>
</kw>
<status endtime="20170810 02:42:49.910" status="PASS" starttime="20170810 02:42:49.908"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:49.911" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:49.911" status="PASS" starttime="20170810 02:42:49.911"></status>
</kw>
<status endtime="20170810 02:42:49.911" status="PASS" starttime="20170810 02:42:49.910"></status>
</kw>
<status endtime="20170810 02:42:49.911" status="PASS" starttime="20170810 02:42:48.787"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:49.912" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:49.912" status="PASS" starttime="20170810 02:42:49.911"></status>
</kw>
<status endtime="20170810 02:42:49.912" status="PASS" starttime="20170810 02:42:49.911"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:49.913" status="PASS" starttime="20170810 02:42:49.912"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:49.917" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:49.917" status="PASS" starttime="20170810 02:42:49.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:49.918" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:49.918" status="PASS" starttime="20170810 02:42:49.917"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:49.918" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:49.918" status="PASS" starttime="20170810 02:42:49.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:49.919" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:49.919" status="PASS" starttime="20170810 02:42:49.919"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:50.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:50.265" status="PASS" starttime="20170810 02:42:49.920"></status>
</kw>
<msg timestamp="20170810 02:42:50.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:50.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:50.265" status="PASS" starttime="20170810 02:42:49.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:50.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:50.266" status="PASS" starttime="20170810 02:42:50.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:50.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:50.266" status="PASS" starttime="20170810 02:42:50.266"></status>
</kw>
<status endtime="20170810 02:42:50.266" status="PASS" starttime="20170810 02:42:49.915"></status>
</kw>
<status endtime="20170810 02:42:50.267" status="PASS" starttime="20170810 02:42:49.915"></status>
</kw>
<status endtime="20170810 02:42:50.267" status="PASS" starttime="20170810 02:42:49.914"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:50.267" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170810 02:42:50.267" status="PASS" starttime="20170810 02:42:50.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:50.268" status="PASS" starttime="20170810 02:42:50.268"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:50.902" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:50.902" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:50.902" status="PASS" starttime="20170810 02:42:50.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:50.903" status="PASS" starttime="20170810 02:42:50.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:50.903" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:50.904" status="PASS" starttime="20170810 02:42:50.903"></status>
</kw>
<msg timestamp="20170810 02:42:50.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:50.904" status="PASS" starttime="20170810 02:42:49.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:50.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:50.905" status="PASS" starttime="20170810 02:42:50.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:50.906" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 3b e9 14 14 00 00 00 09 3b ea 50 00 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 24 90 00 00 24 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4c 0a 95 31 4e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4c 0a 95 3d cf 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0a 95 4b 14 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4c 0a af d7 09 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 0a af e4 46 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4c 0a af f4 63 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 0a b0 63 1d 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 0b 11 47 b5 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 0b 11 d0 ae 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 0b 11 e4 1a 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 0b 11 f1 0d 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4c 0b 11 fd af 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0b 12 0a c1 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 34 bf 6a 02 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 34 bf 7b b9 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 34 bf 8b ef 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 34 bf f8 b9 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 2a 56 9a c1 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 2a 57 2d 1d 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 2a 57 40 a9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 2a 57 4f f1 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 2a 57 5c f7 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 2a 57 6a 3c 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:50.906" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:50.906" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 02:42:50.906" status="PASS" starttime="20170810 02:42:50.905"></status>
</kw>
<msg timestamp="20170810 02:42:50.907" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 3b e9 14 14 00 00 00 09 3b ea 50 00 42 00 0...</msg>
<status endtime="20170810 02:42:50.907" status="PASS" starttime="20170810 02:42:49.913"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:50.907" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:50.907" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:50.907" status="PASS" starttime="20170810 02:42:50.907"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:50.908" status="PASS" starttime="20170810 02:42:50.908"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:50.909" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:50.909" status="PASS" starttime="20170810 02:42:50.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:50.910" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:50.910" status="PASS" starttime="20170810 02:42:50.910"></status>
</kw>
<status endtime="20170810 02:42:50.910" status="PASS" starttime="20170810 02:42:50.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:50.912" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:50.912" status="PASS" starttime="20170810 02:42:50.911"></status>
</kw>
<status endtime="20170810 02:42:50.912" status="PASS" starttime="20170810 02:42:50.911"></status>
</kw>
<status endtime="20170810 02:42:50.912" status="PASS" starttime="20170810 02:42:49.912"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:50.913" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:50.913" status="PASS" starttime="20170810 02:42:50.912"></status>
</kw>
<status endtime="20170810 02:42:50.913" status="PASS" starttime="20170810 02:42:50.912"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:50.914" status="PASS" starttime="20170810 02:42:50.913"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:50.917" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:50.918" status="PASS" starttime="20170810 02:42:50.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:50.919" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:50.919" status="PASS" starttime="20170810 02:42:50.918"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:50.919" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:50.919" status="PASS" starttime="20170810 02:42:50.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:50.920" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:50.920" status="PASS" starttime="20170810 02:42:50.919"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:51.349" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:51.350" status="PASS" starttime="20170810 02:42:50.921"></status>
</kw>
<msg timestamp="20170810 02:42:51.350" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:51.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:51.350" status="PASS" starttime="20170810 02:42:50.920"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:51.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:51.351" status="PASS" starttime="20170810 02:42:51.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:51.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:51.351" status="PASS" starttime="20170810 02:42:51.351"></status>
</kw>
<status endtime="20170810 02:42:51.351" status="PASS" starttime="20170810 02:42:50.916"></status>
</kw>
<status endtime="20170810 02:42:51.351" status="PASS" starttime="20170810 02:42:50.916"></status>
</kw>
<status endtime="20170810 02:42:51.352" status="PASS" starttime="20170810 02:42:50.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:51.352" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170810 02:42:51.352" status="PASS" starttime="20170810 02:42:51.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:51.353" status="PASS" starttime="20170810 02:42:51.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:51.974" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:51.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:51.974" status="PASS" starttime="20170810 02:42:51.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:51.975" status="PASS" starttime="20170810 02:42:51.975"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:51.975" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:51.975" status="PASS" starttime="20170810 02:42:51.975"></status>
</kw>
<msg timestamp="20170810 02:42:51.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:51.976" status="PASS" starttime="20170810 02:42:50.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:51.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:51.976" status="PASS" starttime="20170810 02:42:51.976"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:51.977" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 30 99 6e 92 00 00 00 09 3d 91 67 8e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 25 90 00 00 25 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 72 6b 70 75 20 20 70 70 32 20 69 31 72 33 32 70 20 20 64 69 32 72 31 33 6f 35 20 20 6e 64 65 32 6f 0a 31 6e 33 65 33 0a 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:51.977" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:51.977" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 02:42:51.977" status="PASS" starttime="20170810 02:42:51.977"></status>
</kw>
<msg timestamp="20170810 02:42:51.977" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 30 99 6e 92 00 00 00 09 3d 91 67 8e 42 00 0...</msg>
<status endtime="20170810 02:42:51.978" status="PASS" starttime="20170810 02:42:50.914"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:51.978" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:51.978" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:51.978" status="PASS" starttime="20170810 02:42:51.978"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:51.979" status="PASS" starttime="20170810 02:42:51.978"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:51.979" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:51.979" status="PASS" starttime="20170810 02:42:51.979"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:51.981" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:51.981" status="PASS" starttime="20170810 02:42:51.980"></status>
</kw>
<status endtime="20170810 02:42:51.981" status="PASS" starttime="20170810 02:42:51.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:51.982" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:51.982" status="PASS" starttime="20170810 02:42:51.982"></status>
</kw>
<status endtime="20170810 02:42:51.982" status="PASS" starttime="20170810 02:42:51.981"></status>
</kw>
<status endtime="20170810 02:42:51.983" status="PASS" starttime="20170810 02:42:50.913"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:51.983" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:51.983" status="PASS" starttime="20170810 02:42:51.983"></status>
</kw>
<status endtime="20170810 02:42:51.983" status="PASS" starttime="20170810 02:42:51.983"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:51.984" status="PASS" starttime="20170810 02:42:51.984"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:51.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:51.988" status="PASS" starttime="20170810 02:42:51.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:51.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:51.989" status="PASS" starttime="20170810 02:42:51.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:51.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:51.990" status="PASS" starttime="20170810 02:42:51.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:51.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:51.990" status="PASS" starttime="20170810 02:42:51.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:52.566" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:52.566" status="PASS" starttime="20170810 02:42:51.991"></status>
</kw>
<msg timestamp="20170810 02:42:52.566" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:52.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:52.566" status="PASS" starttime="20170810 02:42:51.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:52.567" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:52.567" status="PASS" starttime="20170810 02:42:52.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:52.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:52.568" status="PASS" starttime="20170810 02:42:52.567"></status>
</kw>
<status endtime="20170810 02:42:52.568" status="PASS" starttime="20170810 02:42:51.987"></status>
</kw>
<status endtime="20170810 02:42:52.568" status="PASS" starttime="20170810 02:42:51.987"></status>
</kw>
<status endtime="20170810 02:42:52.568" status="PASS" starttime="20170810 02:42:51.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:52.569" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170810 02:42:52.569" status="PASS" starttime="20170810 02:42:52.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:52.569" status="PASS" starttime="20170810 02:42:52.569"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:53.256" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:53.256" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:53.256" status="PASS" starttime="20170810 02:42:52.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:53.257" status="PASS" starttime="20170810 02:42:53.257"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:53.258" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:53.258" status="PASS" starttime="20170810 02:42:53.257"></status>
</kw>
<msg timestamp="20170810 02:42:53.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:53.258" status="PASS" starttime="20170810 02:42:51.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:53.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:53.259" status="PASS" starttime="20170810 02:42:53.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:53.259" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:53.259" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:53.259" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 02:42:53.259" status="PASS" starttime="20170810 02:42:53.259"></status>
</kw>
<msg timestamp="20170810 02:42:53.260" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 02:42:53.260" status="PASS" starttime="20170810 02:42:51.984"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:53.260" level="INFO">Length is 0</msg>
<msg timestamp="20170810 02:42:53.260" level="INFO">${length} = 0</msg>
<status endtime="20170810 02:42:53.260" status="PASS" starttime="20170810 02:42:53.260"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 02:42:53.261" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:53.261" status="PASS" starttime="20170810 02:42:53.260"></status>
</kw>
<status endtime="20170810 02:42:53.261" status="PASS" starttime="20170810 02:42:51.984"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:53.262" status="PASS" starttime="20170810 02:42:53.261"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:53.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:53.265" status="PASS" starttime="20170810 02:42:53.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:53.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:53.266" status="PASS" starttime="20170810 02:42:53.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:53.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:53.267" status="PASS" starttime="20170810 02:42:53.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:53.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:53.267" status="PASS" starttime="20170810 02:42:53.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:53.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:53.692" status="PASS" starttime="20170810 02:42:53.268"></status>
</kw>
<msg timestamp="20170810 02:42:53.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:53.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:53.692" status="PASS" starttime="20170810 02:42:53.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:53.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:53.693" status="PASS" starttime="20170810 02:42:53.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:53.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:53.694" status="PASS" starttime="20170810 02:42:53.693"></status>
</kw>
<status endtime="20170810 02:42:53.694" status="PASS" starttime="20170810 02:42:53.264"></status>
</kw>
<status endtime="20170810 02:42:53.694" status="PASS" starttime="20170810 02:42:53.264"></status>
</kw>
<status endtime="20170810 02:42:53.694" status="PASS" starttime="20170810 02:42:53.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:53.695" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170810 02:42:53.695" status="PASS" starttime="20170810 02:42:53.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:53.695" status="PASS" starttime="20170810 02:42:53.695"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:54.374" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:54.374" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:54.374" status="PASS" starttime="20170810 02:42:53.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:54.375" status="PASS" starttime="20170810 02:42:54.375"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:54.375" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:54.376" status="PASS" starttime="20170810 02:42:54.375"></status>
</kw>
<msg timestamp="20170810 02:42:54.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:54.376" status="PASS" starttime="20170810 02:42:53.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:54.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:54.376" status="PASS" starttime="20170810 02:42:54.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:54.377" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 17 cb aa 8d 00 00 00 09 0e 4a 36 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 37 90 00 00 37 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 1b 9d d9 6c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 1b 9d e5 be 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 1b 9d f3 55 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 1b b8 00 70 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 1b b8 0e 5e 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 1b b8 1e 64 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 1b b8 8b 93 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 1b c7 ec ea 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 1b c8 71 a8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 1b c8 84 da 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 1b c8 91 63 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 1b c8 9e 02 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 1b c8 aa 4a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 22 81 e8 95 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 22 81 fc 98 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 22 82 0d 69 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 22 82 81 22 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 23 2f 99 34 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 23 30 22 dc 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 23 30 36 8f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 23 30 44 0c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 23 30 52 16 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 30 5f 4b 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:54.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:54.377" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 02:42:54.378" status="PASS" starttime="20170810 02:42:54.377"></status>
</kw>
<msg timestamp="20170810 02:42:54.378" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 17 cb aa 8d 00 00 00 09 0e 4a 36 6d 42 00 0...</msg>
<status endtime="20170810 02:42:54.378" status="PASS" starttime="20170810 02:42:53.262"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:54.378" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:54.378" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:54.379" status="PASS" starttime="20170810 02:42:54.378"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:54.379" status="PASS" starttime="20170810 02:42:54.379"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:54.380" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:54.380" status="PASS" starttime="20170810 02:42:54.379"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:54.381" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:54.381" status="PASS" starttime="20170810 02:42:54.381"></status>
</kw>
<status endtime="20170810 02:42:54.381" status="PASS" starttime="20170810 02:42:54.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:54.382" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:54.382" status="PASS" starttime="20170810 02:42:54.382"></status>
</kw>
<status endtime="20170810 02:42:54.382" status="PASS" starttime="20170810 02:42:54.381"></status>
</kw>
<status endtime="20170810 02:42:54.382" status="PASS" starttime="20170810 02:42:53.261"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:54.383" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:54.383" status="PASS" starttime="20170810 02:42:54.383"></status>
</kw>
<status endtime="20170810 02:42:54.383" status="PASS" starttime="20170810 02:42:54.383"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:42:54.384" status="PASS" starttime="20170810 02:42:54.384"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:42:54.388" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:42:54.388" status="PASS" starttime="20170810 02:42:54.387"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:42:54.389" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:42:54.389" status="PASS" starttime="20170810 02:42:54.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:42:54.389" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:42:54.390" status="PASS" starttime="20170810 02:42:54.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:42:54.390" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:42:54.390" status="PASS" starttime="20170810 02:42:54.390"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:42:54.780" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:42:54.780" status="PASS" starttime="20170810 02:42:54.391"></status>
</kw>
<msg timestamp="20170810 02:42:54.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:54.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:54.781" status="PASS" starttime="20170810 02:42:54.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:42:54.781" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:54.781" status="PASS" starttime="20170810 02:42:54.781"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:54.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:54.782" status="PASS" starttime="20170810 02:42:54.782"></status>
</kw>
<status endtime="20170810 02:42:54.782" status="PASS" starttime="20170810 02:42:54.387"></status>
</kw>
<status endtime="20170810 02:42:54.782" status="PASS" starttime="20170810 02:42:54.386"></status>
</kw>
<status endtime="20170810 02:42:54.782" status="PASS" starttime="20170810 02:42:54.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:42:54.783" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170810 02:42:54.783" status="PASS" starttime="20170810 02:42:54.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:42:54.784" status="PASS" starttime="20170810 02:42:54.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:42:55.326" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 02:42:55.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:55.327" status="PASS" starttime="20170810 02:42:54.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:42:55.327" status="PASS" starttime="20170810 02:42:55.327"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:42:55.328" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:42:55.328" status="PASS" starttime="20170810 02:42:55.328"></status>
</kw>
<msg timestamp="20170810 02:42:55.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:42:55.328" status="PASS" starttime="20170810 02:42:54.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:42:55.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:42:55.329" status="PASS" starttime="20170810 02:42:55.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 02:42:55.329" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 17 cc f8 81 00 00 00 09 0f 78 a1 e6 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 38 90 00 00 38 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 20 65 20 70 69 72 20 70 0a 20 32 69 70 31 69 33 72 72 35 20 20 20 64 32 32 6f 31 31 6e 33 65 33 0a 34 32 20 64 20 6f 64 6e 6f 65 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:42:55.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 02:42:55.330" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 02:42:55.330" status="PASS" starttime="20170810 02:42:55.329"></status>
</kw>
<msg timestamp="20170810 02:42:55.330" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 17 cc f8 81 00 00 00 09 0f 78 a1 e6 42 00 0...</msg>
<status endtime="20170810 02:42:55.330" status="PASS" starttime="20170810 02:42:54.384"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 02:42:55.330" level="INFO">Length is 2</msg>
<msg timestamp="20170810 02:42:55.331" level="INFO">${length} = 2</msg>
<status endtime="20170810 02:42:55.331" status="PASS" starttime="20170810 02:42:55.330"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:42:55.331" status="PASS" starttime="20170810 02:42:55.331"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 02:42:55.332" level="INFO">${index} = 1</msg>
<status endtime="20170810 02:42:55.332" status="PASS" starttime="20170810 02:42:55.331"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:55.333" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:55.333" status="PASS" starttime="20170810 02:42:55.333"></status>
</kw>
<status endtime="20170810 02:42:55.333" status="PASS" starttime="20170810 02:42:55.332"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:42:55.334" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:42:55.335" status="PASS" starttime="20170810 02:42:55.334"></status>
</kw>
<status endtime="20170810 02:42:55.335" status="PASS" starttime="20170810 02:42:55.334"></status>
</kw>
<status endtime="20170810 02:42:55.335" status="PASS" starttime="20170810 02:42:54.384"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 02:42:55.336" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:42:55.336" status="PASS" starttime="20170810 02:42:55.335"></status>
</kw>
<status endtime="20170810 02:42:55.336" status="PASS" starttime="20170810 02:42:55.335"></status>
</kw>
<status endtime="20170810 02:42:55.336" status="PASS" starttime="20170810 02:42:42.672"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170810 02:42:55.343" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:42:55.348" level="INFO">${out} = </msg>
<status endtime="20170810 02:42:55.348" status="PASS" starttime="20170810 02:42:55.336"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170810 02:42:55.352" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170810 02:42:55.352" status="FAIL" starttime="20170810 02:42:55.351"></status>
</kw>
<msg timestamp="20170810 02:42:55.352" level="INFO">${status} = False</msg>
<status endtime="20170810 02:42:55.352" status="PASS" starttime="20170810 02:42:55.350"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170810 02:42:55.353" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 02:42:55.353" status="PASS" starttime="20170810 02:42:55.353"></status>
</kw>
<status endtime="20170810 02:42:55.354" status="PASS" starttime="20170810 02:42:40.841"></status>
</kw>
<status endtime="20170810 02:42:55.354" status="PASS" starttime="20170810 02:42:40.817"></status>
</kw>
<status endtime="20170810 02:42:55.354" status="PASS" starttime="20170810 02:42:40.814"></status>
</kw>
<status endtime="20170810 02:42:55.354" status="PASS" starttime="20170810 02:42:40.814"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:42:55.358" status="PASS" starttime="20170810 02:42:55.357"></status>
</kw>
<msg timestamp="20170810 02:42:55.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:42:55.358" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 02:42:55.358" status="PASS" starttime="20170810 02:42:55.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:42:55.358" status="PASS" starttime="20170810 02:42:55.358"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 02:42:55.426" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:42:55.426" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170810 02:42:55.487" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 02:42:55.498" level="INFO">${core_files} = /tmp/core_openpower-occ-c.1106
/tmp/core_openpower-occ-c.1563
/tmp/core_openpower-occ-c.1565
/tmp/core_openpower-occ-c.1567
/tmp/core_openpower-occ-c.1569
/tmp/core_openpower-occ-c.1571</msg>
<msg timestamp="20170810 02:42:55.498" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 02:42:55.498" level="INFO">${rc} = 0</msg>
<status endtime="20170810 02:42:55.498" status="PASS" starttime="20170810 02:42:55.387"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170810 02:42:55.499" level="INFO">@{core_list} = [ /tmp/core_openpower-occ-c.1106 | /tmp/core_openpower-occ-c.1563 | /tmp/core_openpower-occ-c.1565 | /tmp/core_openpower-occ-c.1567 | /tmp/core_openpower-occ-c.1569 | /tmp/core_openpower-occ-c.1571 ]</msg>
<status endtime="20170810 02:42:55.499" status="PASS" starttime="20170810 02:42:55.499"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170810 02:42:55.518" status="PASS" starttime="20170810 02:42:55.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170810 02:42:56.801" status="PASS" starttime="20170810 02:42:55.521"></status>
</kw>
<status endtime="20170810 02:42:56.801" status="PASS" starttime="20170810 02:42:55.519"></status>
</kw>
<status endtime="20170810 02:42:56.801" status="PASS" starttime="20170810 02:42:55.518"></status>
</kw>
<status endtime="20170810 02:42:56.801" status="PASS" starttime="20170810 02:42:55.508"></status>
</kw>
<status endtime="20170810 02:42:56.801" status="PASS" starttime="20170810 02:42:55.499"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_openpower-occ-c.1106" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:42:57.477" status="PASS" starttime="20170810 02:42:56.802"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 02:42:57.510" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:42:57.510" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1106'.</msg>
<msg timestamp="20170810 02:42:57.647" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:42:57.659" status="PASS" starttime="20170810 02:42:57.478"></status>
</kw>
<status endtime="20170810 02:42:57.659" status="PASS" starttime="20170810 02:42:56.802"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1563" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:42:57.905" status="PASS" starttime="20170810 02:42:57.659"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 02:42:57.942" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:42:57.942" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1563'.</msg>
<msg timestamp="20170810 02:42:58.160" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:42:58.172" status="PASS" starttime="20170810 02:42:57.906"></status>
</kw>
<status endtime="20170810 02:42:58.172" status="PASS" starttime="20170810 02:42:57.659"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1565" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:42:58.865" status="PASS" starttime="20170810 02:42:58.172"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 02:42:58.898" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:42:58.899" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1565'.</msg>
<msg timestamp="20170810 02:42:59.146" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:42:59.158" status="PASS" starttime="20170810 02:42:58.865"></status>
</kw>
<status endtime="20170810 02:42:59.158" status="PASS" starttime="20170810 02:42:58.172"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1567" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:43:00.270" status="PASS" starttime="20170810 02:42:59.159"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 02:43:00.304" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:00.305" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1567'.</msg>
<msg timestamp="20170810 02:43:00.351" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:00.363" status="PASS" starttime="20170810 02:43:00.270"></status>
</kw>
<status endtime="20170810 02:43:00.363" status="PASS" starttime="20170810 02:42:59.158"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1569" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:43:01.317" status="PASS" starttime="20170810 02:43:00.363"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 02:43:01.354" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:01.354" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1569'.</msg>
<msg timestamp="20170810 02:43:01.401" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:01.413" status="PASS" starttime="20170810 02:43:01.317"></status>
</kw>
<status endtime="20170810 02:43:01.413" status="PASS" starttime="20170810 02:43:00.363"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1571" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:43:02.332" status="PASS" starttime="20170810 02:43:01.413"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 02:43:02.371" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:02.371" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1571'.</msg>
<msg timestamp="20170810 02:43:02.428" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:43:02.333"></status>
</kw>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:43:01.413"></status>
</kw>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:42:56.802"></status>
</kw>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:42:55.387"></status>
</kw>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:42:55.359"></status>
</kw>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:42:55.355"></status>
</kw>
<status endtime="20170810 02:43:02.440" status="PASS" starttime="20170810 02:42:55.354"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:43:02.442" status="PASS" starttime="20170810 02:43:02.442"></status>
</kw>
<msg timestamp="20170810 02:43:02.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:02.442" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 02:43:02.442" status="PASS" starttime="20170810 02:43:02.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:43:02.443" status="PASS" starttime="20170810 02:43:02.442"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 02:43:02.468" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170810 02:43:02.468" status="PASS" starttime="20170810 02:43:02.468"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 02:43:02.470" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170810 02:43:02.470" status="PASS" starttime="20170810 02:43:02.470"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:02.471" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_sensor_list.txt</msg>
<status endtime="20170810 02:43:02.471" status="PASS" starttime="20170810 02:43:02.471"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:43:02.476" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:43:02.478" status="PASS" starttime="20170810 02:43:02.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:43:02.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:43:02.479" status="PASS" starttime="20170810 02:43:02.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:43:02.479" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:43:02.479" status="PASS" starttime="20170810 02:43:02.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:43:02.480" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:43:02.480" status="PASS" starttime="20170810 02:43:02.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:43:02.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:43:02.969" status="PASS" starttime="20170810 02:43:02.481"></status>
</kw>
<msg timestamp="20170810 02:43:02.969" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:02.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:02.969" status="PASS" starttime="20170810 02:43:02.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:43:02.969" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:02.970" status="PASS" starttime="20170810 02:43:02.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:02.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:02.970" status="PASS" starttime="20170810 02:43:02.970"></status>
</kw>
<status endtime="20170810 02:43:02.970" status="PASS" starttime="20170810 02:43:02.474"></status>
</kw>
<status endtime="20170810 02:43:02.970" status="PASS" starttime="20170810 02:43:02.473"></status>
</kw>
<status endtime="20170810 02:43:02.971" status="PASS" starttime="20170810 02:43:02.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:43:02.971" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170810 02:43:02.971" status="PASS" starttime="20170810 02:43:02.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:43:02.972" status="PASS" starttime="20170810 02:43:02.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:43:04.449" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 02:43:04.450" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:04.450" status="PASS" starttime="20170810 02:43:02.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:43:04.450" status="PASS" starttime="20170810 02:43:04.450"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:43:04.451" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:43:04.451" status="PASS" starttime="20170810 02:43:04.451"></status>
</kw>
<msg timestamp="20170810 02:43:04.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:04.451" status="PASS" starttime="20170810 02:43:02.472"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:04.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:04.452" status="PASS" starttime="20170810 02:43:04.452"></status>
</kw>
<msg timestamp="20170810 02:43:04.452" level="INFO">${status} = True</msg>
<status endtime="20170810 02:43:04.452" status="PASS" starttime="20170810 02:43:04.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 02:43:04.453" status="PASS" starttime="20170810 02:43:04.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 02:43:04.454" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:43:04.454" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 02:43:04.454" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170810 02:43:04.454" status="PASS" starttime="20170810 02:43:04.453"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:04.456" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_sensor_list.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:04.456" status="PASS" starttime="20170810 02:43:04.455"></status>
</kw>
<status endtime="20170810 02:43:04.456" status="PASS" starttime="20170810 02:43:04.454"></status>
</kw>
<status endtime="20170810 02:43:04.456" status="PASS" starttime="20170810 02:43:02.470"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:04.457" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_inventory.txt</msg>
<status endtime="20170810 02:43:04.457" status="PASS" starttime="20170810 02:43:04.457"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:43:04.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:43:04.460" status="PASS" starttime="20170810 02:43:04.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:43:04.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:43:04.461" status="PASS" starttime="20170810 02:43:04.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:43:04.462" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:43:04.462" status="PASS" starttime="20170810 02:43:04.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:43:04.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:43:04.462" status="PASS" starttime="20170810 02:43:04.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:43:04.918" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:43:04.918" status="PASS" starttime="20170810 02:43:04.463"></status>
</kw>
<msg timestamp="20170810 02:43:04.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:04.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:04.918" status="PASS" starttime="20170810 02:43:04.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:43:04.919" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:04.919" status="PASS" starttime="20170810 02:43:04.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:04.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:04.920" status="PASS" starttime="20170810 02:43:04.919"></status>
</kw>
<status endtime="20170810 02:43:04.920" status="PASS" starttime="20170810 02:43:04.459"></status>
</kw>
<status endtime="20170810 02:43:04.920" status="PASS" starttime="20170810 02:43:04.458"></status>
</kw>
<status endtime="20170810 02:43:04.920" status="PASS" starttime="20170810 02:43:04.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:43:04.921" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170810 02:43:04.921" status="PASS" starttime="20170810 02:43:04.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:43:04.921" status="PASS" starttime="20170810 02:43:04.921"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:43:09.605" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 02:43:09.605" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:09.605" status="PASS" starttime="20170810 02:43:04.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:43:09.606" status="PASS" starttime="20170810 02:43:09.606"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:43:09.606" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:43:09.607" status="PASS" starttime="20170810 02:43:09.606"></status>
</kw>
<msg timestamp="20170810 02:43:09.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:09.607" status="PASS" starttime="20170810 02:43:04.457"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:09.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:09.608" status="PASS" starttime="20170810 02:43:09.608"></status>
</kw>
<msg timestamp="20170810 02:43:09.608" level="INFO">${status} = True</msg>
<status endtime="20170810 02:43:09.608" status="PASS" starttime="20170810 02:43:09.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 02:43:09.609" status="PASS" starttime="20170810 02:43:09.608"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 02:43:09.612" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/12", 
        "/xyz/openbmc_project/logging/entry/11", 
        "/xyz/openbmc_project/logging/entry/9", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/6", 
        "/xyz/openbmc_project/logging/entry/5", 
        "/xyz/openbmc_project/logging/entry/4"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:43:09.613" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 02:43:09.613" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170810 02:43:09.613" status="PASS" starttime="20170810 02:43:09.609"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:09.615" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_inventory.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:09.615" status="PASS" starttime="20170810 02:43:09.614"></status>
</kw>
<status endtime="20170810 02:43:09.615" status="PASS" starttime="20170810 02:43:09.613"></status>
</kw>
<status endtime="20170810 02:43:09.616" status="PASS" starttime="20170810 02:43:04.456"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:09.616" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_led.txt</msg>
<status endtime="20170810 02:43:09.616" status="PASS" starttime="20170810 02:43:09.616"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:43:09.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:43:09.620" status="PASS" starttime="20170810 02:43:09.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:43:09.620" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:43:09.621" status="PASS" starttime="20170810 02:43:09.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:43:09.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:43:09.621" status="PASS" starttime="20170810 02:43:09.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:43:09.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:43:09.622" status="PASS" starttime="20170810 02:43:09.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.125" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:43:10.126" status="PASS" starttime="20170810 02:43:09.622"></status>
</kw>
<msg timestamp="20170810 02:43:10.126" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:10.126" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:10.126" status="PASS" starttime="20170810 02:43:09.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.127" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:10.127" status="PASS" starttime="20170810 02:43:10.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:10.127" status="PASS" starttime="20170810 02:43:10.127"></status>
</kw>
<status endtime="20170810 02:43:10.127" status="PASS" starttime="20170810 02:43:09.618"></status>
</kw>
<status endtime="20170810 02:43:10.128" status="PASS" starttime="20170810 02:43:09.618"></status>
</kw>
<status endtime="20170810 02:43:10.128" status="PASS" starttime="20170810 02:43:09.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:43:10.128" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170810 02:43:10.128" status="PASS" starttime="20170810 02:43:10.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:43:10.129" status="PASS" starttime="20170810 02:43:10.129"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:43:10.491" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 02:43:10.491" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:43:10.491" status="PASS" starttime="20170810 02:43:10.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:43:10.492" status="PASS" starttime="20170810 02:43:10.492"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:43:10.492" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:43:10.492" status="PASS" starttime="20170810 02:43:10.492"></status>
</kw>
<msg timestamp="20170810 02:43:10.493" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:43:10.493" status="PASS" starttime="20170810 02:43:09.617"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 02:43:10.494" level="FAIL">404 != 200</msg>
<status endtime="20170810 02:43:10.494" status="FAIL" starttime="20170810 02:43:10.493"></status>
</kw>
<msg timestamp="20170810 02:43:10.494" level="INFO">${status} = False</msg>
<status endtime="20170810 02:43:10.494" status="PASS" starttime="20170810 02:43:10.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 02:43:10.495" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:43:10.495" status="PASS" starttime="20170810 02:43:10.495"></status>
</kw>
<status endtime="20170810 02:43:10.495" status="PASS" starttime="20170810 02:43:10.494"></status>
</kw>
<status endtime="20170810 02:43:10.495" status="PASS" starttime="20170810 02:43:09.616"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:10.496" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_elog.txt</msg>
<status endtime="20170810 02:43:10.496" status="PASS" starttime="20170810 02:43:10.496"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:43:10.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:43:10.499" status="PASS" starttime="20170810 02:43:10.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:43:10.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:43:10.500" status="PASS" starttime="20170810 02:43:10.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:43:10.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:43:10.501" status="PASS" starttime="20170810 02:43:10.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:43:10.501" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:43:10.501" status="PASS" starttime="20170810 02:43:10.501"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.684" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:43:10.684" status="PASS" starttime="20170810 02:43:10.502"></status>
</kw>
<msg timestamp="20170810 02:43:10.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:10.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:10.685" status="PASS" starttime="20170810 02:43:10.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.685" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:10.685" status="PASS" starttime="20170810 02:43:10.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:10.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:10.686" status="PASS" starttime="20170810 02:43:10.686"></status>
</kw>
<status endtime="20170810 02:43:10.686" status="PASS" starttime="20170810 02:43:10.498"></status>
</kw>
<status endtime="20170810 02:43:10.686" status="PASS" starttime="20170810 02:43:10.498"></status>
</kw>
<status endtime="20170810 02:43:10.687" status="PASS" starttime="20170810 02:43:10.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:43:10.687" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170810 02:43:10.687" status="PASS" starttime="20170810 02:43:10.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:43:10.688" status="PASS" starttime="20170810 02:43:10.687"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:43:13.768" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 02:43:13.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:13.769" status="PASS" starttime="20170810 02:43:10.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:43:13.770" status="PASS" starttime="20170810 02:43:13.769"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:43:13.770" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:43:13.770" status="PASS" starttime="20170810 02:43:13.770"></status>
</kw>
<msg timestamp="20170810 02:43:13.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:13.770" status="PASS" starttime="20170810 02:43:10.496"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:13.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:13.771" status="PASS" starttime="20170810 02:43:13.771"></status>
</kw>
<msg timestamp="20170810 02:43:13.771" level="INFO">${status} = True</msg>
<status endtime="20170810 02:43:13.771" status="PASS" starttime="20170810 02:43:13.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 02:43:13.772" status="PASS" starttime="20170810 02:43:13.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 02:43:13.774" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775748443, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 24 4d 2f a1 00 00 00 09 24 4e 7b 43 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4a 90 00 00 4a 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 33 ed 3d 17 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 33 ed 4a 36 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 33 ed 57 13 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 34 07 3c b9 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 34 07 4a f1 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 34 07 5a 9d 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 34 07 c5 98 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 34 0b 2e 33 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 34 0b b1 2a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 34 0b c4 21 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 34 0b d1 7b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 34 0b dd ce 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 34 0b ea a3 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 3a 02 01 65 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 3a 02 12 2d 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 3a 02 22 60 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 3a 02 96 46 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 3a b7 00 53 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 3a b7 8b b8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 3a b7 9e a4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 3a b7 ab 5c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 3a b7 b9 cd 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 3a b7 c6 ae 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775873729, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 25 1e d9 3d 00 00 00 09 25 67 59 0a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4b 90 00 00 4b 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 70 69 20 72 20 64 72 20 32 31 33 20 70 33 6f 20 6e 32 69 72 20 64 65 0a 31 32 33 31 35 6f 33 6e 20 32 65 20 0a 64 64 6f 6f 6e 6e 65 65 0a 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 12, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775875374, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [], 
      "Id": 13, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775881403, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775115406, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775042566, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 11 04 01 ae 02 00 00 00 11 04 02 6e 07 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 58 18 32 df 8a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 58 18 33 34 42 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 18 38 04 87 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 58 1e 28 19 08 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 58 1e 28 45 53 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 58 1e 28 93 7b 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 1e 29 b5 70 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 58 24 24 19 89 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 23 dc 54 ac 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 8e 23 fb 1f eb 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 8e 24 21 3b 54 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 8e 26 00 df e3 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 26 01 44 fa 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 8e 2b f6 e6 99 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 8e 2b f7 0c d6 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 8e 2b f7 1a 51 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 8e 2b f7 2a 8e 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 00 00 00 00 00 00 00 56 00 00 00 00 00 00 00 08 00 00 00 00 00 86 eba3 70 00 00 00 00 00 00 00 00 01 08 08 08 02 01 10 00 00 00 00 40 00 00 00 00 00 00 00 00 40 65 a4 a8 00 00 00 00 00 00 00 56 00 00 00 00 00 00 00 07 00 00 00 00 00 86 d9 00 00 60 00 03 00 0b 80 00 00 00 06 0d f8 3f 00 00 6e 6e 6e 11 00 6e 20 08 00 05 70 03 00 60 18 28 28 00 78 00 14 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 16 03 16 03 16 03 16 03 16 03 16 03 16 03 16 03 16 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9c 00 00 00 00 00 e7 00 fe a6 11 11 42 15 00 80 b3 51 00 55 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 5c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775489646, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 3b e9 14 14 00 00 00 09 3b ea 50 00 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 24 90 00 00 24 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4c 0a 95 31 4e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4c 0a 95 3d cf 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0a 95 4b 14 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4c 0a af d7 09 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 0a af e4 46 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4c 0a af f4 63 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 0a b0 63 1d 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 0b 11 47 b5 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 0b 11 d0 ae 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 0b 11 e4 1a 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 0b 11 f1 0d 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4c 0b 11 fd af 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0b 12 0a c1 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 34 bf 6a 02 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 34 bf 7b b9 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 34 bf 8b ef 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 34 bf f8 b9 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 2a 56 9a c1 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 2a 57 2d 1d 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 2a 57 40 a9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 2a 57 4f f1 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 2a 57 5c f7 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 2a 57 6a 3c 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775607454, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 30 99 6e 92 00 00 00 09 3d 91 67 8e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 25 90 00 00 25 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 72 6b 70 75 20 20 70 70 32 20 69 31 72 33 32 70 20 20 64 69 32 72 31 33 6f 35 20 20 6e 64 65 32 6f 0a 31 6e 33 65 33 0a 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775609305, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775615729, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 17 cb aa 8d 00 00 00 09 0e 4a 36 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 37 90 00 00 37 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 1b 9d d9 6c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 1b 9d e5 be 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 1b 9d f3 55 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 1b b8 00 70 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 1b b8 0e 5e 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 1b b8 1e 64 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 1b b8 8b 93 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 1b c7 ec ea 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 1b c8 71 a8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 1b c8 84 da 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 1b c8 91 63 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 1b c8 9e 02 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 1b c8 aa 4a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 22 81 e8 95 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 22 81 fc 98 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 22 82 0d 69 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 22 82 81 22 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 23 2f 99 34 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 23 30 22 dc 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 23 30 36 8f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 23 30 44 0c 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 23 30 52 16 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 30 5f 4b 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775740356, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 17 cc f8 81 00 00 00 09 0f 78 a1 e6 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 38 90 00 00 38 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 20 65 20 70 69 72 20 70 0a 20 32 69 70 31 69 33 72 72 35 20 20 20 64 32 32 6f 31 31 6e 33 65 33 0a 34 32 20 64 20 6f 64 6e 6f 65 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775742055, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 02:43:13.775" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 02:43:13.776" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [],
            "Id": 10,
            "Message": "org.open_power.Host.Error.Checkstop",
            "Re...</msg>
<status endtime="20170810 02:43:13.776" status="PASS" starttime="20170810 02:43:13.772"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:13.778" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_elog.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:13.778" status="PASS" starttime="20170810 02:43:13.777"></status>
</kw>
<status endtime="20170810 02:43:13.778" status="PASS" starttime="20170810 02:43:13.776"></status>
</kw>
<status endtime="20170810 02:43:13.778" status="PASS" starttime="20170810 02:43:10.495"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:13.779" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_record_log.txt</msg>
<status endtime="20170810 02:43:13.779" status="PASS" starttime="20170810 02:43:13.778"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 02:43:13.782" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:43:13.782" status="PASS" starttime="20170810 02:43:13.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 02:43:13.783" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:43:13.783" status="PASS" starttime="20170810 02:43:13.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 02:43:13.783" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:43:13.784" status="PASS" starttime="20170810 02:43:13.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 02:43:13.784" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:43:13.784" status="PASS" starttime="20170810 02:43:13.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:43:14.346" status="PASS" starttime="20170810 02:43:13.785"></status>
</kw>
<msg timestamp="20170810 02:43:14.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:14.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:43:14.346" status="PASS" starttime="20170810 02:43:13.785"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.346" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:14.347" status="PASS" starttime="20170810 02:43:14.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:43:14.347" status="PASS" starttime="20170810 02:43:14.347"></status>
</kw>
<status endtime="20170810 02:43:14.347" status="PASS" starttime="20170810 02:43:13.781"></status>
</kw>
<status endtime="20170810 02:43:14.347" status="PASS" starttime="20170810 02:43:13.780"></status>
</kw>
<status endtime="20170810 02:43:14.348" status="PASS" starttime="20170810 02:43:13.780"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 02:43:14.348" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170810 02:43:14.348" status="PASS" starttime="20170810 02:43:14.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:43:14.349" status="PASS" starttime="20170810 02:43:14.348"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 02:43:14.467" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 02:43:14.467" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:43:14.467" status="PASS" starttime="20170810 02:43:14.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:43:14.467" status="PASS" starttime="20170810 02:43:14.467"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 02:43:14.468" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 02:43:14.468" status="PASS" starttime="20170810 02:43:14.468"></status>
</kw>
<msg timestamp="20170810 02:43:14.468" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:43:14.468" status="PASS" starttime="20170810 02:43:13.779"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 02:43:14.469" level="FAIL">404 != 200</msg>
<status endtime="20170810 02:43:14.469" status="FAIL" starttime="20170810 02:43:14.469"></status>
</kw>
<msg timestamp="20170810 02:43:14.470" level="INFO">${status} = False</msg>
<status endtime="20170810 02:43:14.470" status="PASS" starttime="20170810 02:43:14.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 02:43:14.470" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:14.470"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:14.470"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:13.778"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.470"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.469"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.469"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.468"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.467"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.443"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.440"></status>
</kw>
<status endtime="20170810 02:43:14.471" status="PASS" starttime="20170810 02:43:02.440"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:43:14.473" status="PASS" starttime="20170810 02:43:14.473"></status>
</kw>
<msg timestamp="20170810 02:43:14.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:14.473" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 02:43:14.473" status="PASS" starttime="20170810 02:43:14.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:43:14.474" status="PASS" starttime="20170810 02:43:14.474"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170810 02:43:14.503" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 02:43:14.503" status="PASS" starttime="20170810 02:43:14.503"></status>
</kw>
<status endtime="20170810 02:43:14.503" status="PASS" starttime="20170810 02:43:14.502"></status>
</kw>
<status endtime="20170810 02:43:14.503" status="PASS" starttime="20170810 02:43:14.474"></status>
</kw>
<status endtime="20170810 02:43:14.503" status="PASS" starttime="20170810 02:43:14.472"></status>
</kw>
<status endtime="20170810 02:43:14.504" status="PASS" starttime="20170810 02:43:14.471"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:43:14.505" status="PASS" starttime="20170810 02:43:14.505"></status>
</kw>
<msg timestamp="20170810 02:43:14.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:14.506" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 02:43:14.506" status="PASS" starttime="20170810 02:43:14.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:43:14.506" status="PASS" starttime="20170810 02:43:14.506"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 02:43:14.532" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170810 02:43:14.532" status="PASS" starttime="20170810 02:43:14.532"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 02:43:14.533" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170810 02:43:14.534" status="PASS" starttime="20170810 02:43:14.533"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.539" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170810 02:43:14.539" status="PASS" starttime="20170810 02:43:14.534"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.543" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:14.543" status="PASS" starttime="20170810 02:43:14.542"></status>
</kw>
<status endtime="20170810 02:43:14.543" status="PASS" starttime="20170810 02:43:14.541"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.544" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:14.545" status="PASS" starttime="20170810 02:43:14.544"></status>
</kw>
<status endtime="20170810 02:43:14.545" status="PASS" starttime="20170810 02:43:14.543"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.546" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:14.546" status="PASS" starttime="20170810 02:43:14.545"></status>
</kw>
<status endtime="20170810 02:43:14.546" status="PASS" starttime="20170810 02:43:14.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:14.547" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:14.547" status="PASS" starttime="20170810 02:43:14.547"></status>
</kw>
<status endtime="20170810 02:43:14.547" status="PASS" starttime="20170810 02:43:14.546"></status>
</kw>
<status endtime="20170810 02:43:14.547" status="PASS" starttime="20170810 02:43:14.540"></status>
</kw>
<status endtime="20170810 02:43:14.547" status="PASS" starttime="20170810 02:43:14.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:14.548" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170810 02:43:14.548" status="PASS" starttime="20170810 02:43:14.548"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:14.614" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:14.615" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170810 02:43:15.074" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:15.075" status="PASS" starttime="20170810 02:43:14.579"></status>
</kw>
<msg timestamp="20170810 02:43:15.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:15.075" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Thu Aug 10 01:57:52 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170810 02:43:15.075" status="PASS" starttime="20170810 02:43:14.548"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:15.076" level="INFO">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Thu Aug 10 01:57:52 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170810 02:43:15.076" status="PASS" starttime="20170810 02:43:15.075"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:15.076" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:15.076" status="PASS" starttime="20170810 02:43:15.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.083" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.083" status="PASS" starttime="20170810 02:43:15.082"></status>
</kw>
<status endtime="20170810 02:43:15.083" status="PASS" starttime="20170810 02:43:15.082"></status>
</kw>
<status endtime="20170810 02:43:15.083" status="PASS" starttime="20170810 02:43:15.076"></status>
</kw>
<status endtime="20170810 02:43:15.083" status="PASS" starttime="20170810 02:43:14.539"></status>
</kw>
<status endtime="20170810 02:43:15.083" status="PASS" starttime="20170810 02:43:14.539"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.086" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.086" status="PASS" starttime="20170810 02:43:15.086"></status>
</kw>
<status endtime="20170810 02:43:15.086" status="PASS" starttime="20170810 02:43:15.085"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.088" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.088" status="PASS" starttime="20170810 02:43:15.087"></status>
</kw>
<status endtime="20170810 02:43:15.088" status="PASS" starttime="20170810 02:43:15.087"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.089" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.089" status="PASS" starttime="20170810 02:43:15.089"></status>
</kw>
<status endtime="20170810 02:43:15.089" status="PASS" starttime="20170810 02:43:15.088"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.090" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.090" status="PASS" starttime="20170810 02:43:15.090"></status>
</kw>
<status endtime="20170810 02:43:15.090" status="PASS" starttime="20170810 02:43:15.089"></status>
</kw>
<status endtime="20170810 02:43:15.090" status="PASS" starttime="20170810 02:43:15.085"></status>
</kw>
<status endtime="20170810 02:43:15.091" status="PASS" starttime="20170810 02:43:15.084"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:15.091" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170810 02:43:15.091" status="PASS" starttime="20170810 02:43:15.091"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:15.163" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:15.164" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170810 02:43:15.370" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:15.370" status="PASS" starttime="20170810 02:43:15.127"></status>
</kw>
<msg timestamp="20170810 02:43:15.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:15.370" level="INFO">${ret_values} = (u' 15:59:46 up 17 min,  load average: 1.89, 1.86, 1.29', u'', 0)</msg>
<status endtime="20170810 02:43:15.370" status="PASS" starttime="20170810 02:43:15.092"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:15.371" level="INFO">${stdout} =  15:59:46 up 17 min,  load average: 1.89, 1.86, 1.29</msg>
<status endtime="20170810 02:43:15.371" status="PASS" starttime="20170810 02:43:15.371"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:15.372" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:15.372" status="PASS" starttime="20170810 02:43:15.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.378" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.378" status="PASS" starttime="20170810 02:43:15.378"></status>
</kw>
<status endtime="20170810 02:43:15.379" status="PASS" starttime="20170810 02:43:15.377"></status>
</kw>
<status endtime="20170810 02:43:15.379" status="PASS" starttime="20170810 02:43:15.372"></status>
</kw>
<status endtime="20170810 02:43:15.379" status="PASS" starttime="20170810 02:43:15.083"></status>
</kw>
<status endtime="20170810 02:43:15.379" status="PASS" starttime="20170810 02:43:15.083"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.382" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.382" status="PASS" starttime="20170810 02:43:15.381"></status>
</kw>
<status endtime="20170810 02:43:15.382" status="PASS" starttime="20170810 02:43:15.381"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.383" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.383" status="PASS" starttime="20170810 02:43:15.383"></status>
</kw>
<status endtime="20170810 02:43:15.383" status="PASS" starttime="20170810 02:43:15.382"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.384" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.384" status="PASS" starttime="20170810 02:43:15.384"></status>
</kw>
<status endtime="20170810 02:43:15.385" status="PASS" starttime="20170810 02:43:15.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.386" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.386" status="PASS" starttime="20170810 02:43:15.385"></status>
</kw>
<status endtime="20170810 02:43:15.386" status="PASS" starttime="20170810 02:43:15.385"></status>
</kw>
<status endtime="20170810 02:43:15.386" status="PASS" starttime="20170810 02:43:15.380"></status>
</kw>
<status endtime="20170810 02:43:15.386" status="PASS" starttime="20170810 02:43:15.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:15.387" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170810 02:43:15.387" status="PASS" starttime="20170810 02:43:15.386"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:15.496" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:15.496" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170810 02:43:15.563" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:15.563" status="PASS" starttime="20170810 02:43:15.460"></status>
</kw>
<msg timestamp="20170810 02:43:15.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:15.563" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170810 02:43:15.563" status="PASS" starttime="20170810 02:43:15.387"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:15.564" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170810 02:43:15.564" status="PASS" starttime="20170810 02:43:15.564"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:15.565" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:15.565" status="PASS" starttime="20170810 02:43:15.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.571" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:15.571"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:15.570"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:15.565"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:15.379"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:15.379"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:14.539"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:14.533"></status>
</kw>
<status endtime="20170810 02:43:15.572" status="PASS" starttime="20170810 02:43:14.533"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 02:43:15.573" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170810 02:43:15.573" status="PASS" starttime="20170810 02:43:15.573"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.574" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170810 02:43:15.574" status="PASS" starttime="20170810 02:43:15.573"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.577" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.577" status="PASS" starttime="20170810 02:43:15.577"></status>
</kw>
<status endtime="20170810 02:43:15.577" status="PASS" starttime="20170810 02:43:15.576"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.579" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.579" status="PASS" starttime="20170810 02:43:15.578"></status>
</kw>
<status endtime="20170810 02:43:15.579" status="PASS" starttime="20170810 02:43:15.578"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.580" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.580" status="PASS" starttime="20170810 02:43:15.580"></status>
</kw>
<status endtime="20170810 02:43:15.580" status="PASS" starttime="20170810 02:43:15.579"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.581" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.581" status="PASS" starttime="20170810 02:43:15.581"></status>
</kw>
<status endtime="20170810 02:43:15.581" status="PASS" starttime="20170810 02:43:15.580"></status>
</kw>
<status endtime="20170810 02:43:15.582" status="PASS" starttime="20170810 02:43:15.576"></status>
</kw>
<status endtime="20170810 02:43:15.582" status="PASS" starttime="20170810 02:43:15.575"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:15.582" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170810 02:43:15.582" status="PASS" starttime="20170810 02:43:15.582"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:15.655" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:15.655" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170810 02:43:15.785" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:15.785" status="PASS" starttime="20170810 02:43:15.618"></status>
</kw>
<msg timestamp="20170810 02:43:15.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:15.785" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-208"\nVERSION_ID="v1.99.8-208-ge32c8f2"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170810 02:43:15.785" status="PASS" starttime="20170810 02:43:15.583"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:15.786" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-208"
VERSION_ID="v1.99.8-208-ge32c8f2"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170810 02:43:15.786" status="PASS" starttime="20170810 02:43:15.786"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:15.786" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:15.787" status="PASS" starttime="20170810 02:43:15.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.796" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.796" status="PASS" starttime="20170810 02:43:15.793"></status>
</kw>
<status endtime="20170810 02:43:15.796" status="PASS" starttime="20170810 02:43:15.792"></status>
</kw>
<status endtime="20170810 02:43:15.796" status="PASS" starttime="20170810 02:43:15.787"></status>
</kw>
<status endtime="20170810 02:43:15.797" status="PASS" starttime="20170810 02:43:15.574"></status>
</kw>
<status endtime="20170810 02:43:15.797" status="PASS" starttime="20170810 02:43:15.574"></status>
</kw>
<status endtime="20170810 02:43:15.797" status="PASS" starttime="20170810 02:43:15.574"></status>
</kw>
<status endtime="20170810 02:43:15.797" status="PASS" starttime="20170810 02:43:15.572"></status>
</kw>
<status endtime="20170810 02:43:15.797" status="PASS" starttime="20170810 02:43:15.572"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 02:43:15.798" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170810 02:43:15.798" status="PASS" starttime="20170810 02:43:15.798"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.799" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170810 02:43:15.799" status="PASS" starttime="20170810 02:43:15.799"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.803" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.803" status="PASS" starttime="20170810 02:43:15.802"></status>
</kw>
<status endtime="20170810 02:43:15.803" status="PASS" starttime="20170810 02:43:15.802"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.804" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.804" status="PASS" starttime="20170810 02:43:15.804"></status>
</kw>
<status endtime="20170810 02:43:15.804" status="PASS" starttime="20170810 02:43:15.803"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.805" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.806" status="PASS" starttime="20170810 02:43:15.805"></status>
</kw>
<status endtime="20170810 02:43:15.806" status="PASS" starttime="20170810 02:43:15.804"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:15.807" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:15.807" status="PASS" starttime="20170810 02:43:15.806"></status>
</kw>
<status endtime="20170810 02:43:15.807" status="PASS" starttime="20170810 02:43:15.806"></status>
</kw>
<status endtime="20170810 02:43:15.807" status="PASS" starttime="20170810 02:43:15.801"></status>
</kw>
<status endtime="20170810 02:43:15.807" status="PASS" starttime="20170810 02:43:15.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:15.808" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170810 02:43:15.808" status="PASS" starttime="20170810 02:43:15.807"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:15.876" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:15.876" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170810 02:43:18.631" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:18.631" status="PASS" starttime="20170810 02:43:15.839"></status>
</kw>
<msg timestamp="20170810 02:43:18.631" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:18.631" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170810 02:43:18.631" status="PASS" starttime="20170810 02:43:15.808"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:18.632" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170810 02:43:18.632" status="PASS" starttime="20170810 02:43:18.632"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:18.633" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:18.633" status="PASS" starttime="20170810 02:43:18.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:18.639" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:18.639" status="PASS" starttime="20170810 02:43:18.639"></status>
</kw>
<status endtime="20170810 02:43:18.639" status="PASS" starttime="20170810 02:43:18.638"></status>
</kw>
<status endtime="20170810 02:43:18.639" status="PASS" starttime="20170810 02:43:18.633"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:15.800"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:15.799"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:15.799"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:15.797"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:15.797"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:14.532"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:14.532"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:14.506"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:14.504"></status>
</kw>
<status endtime="20170810 02:43:18.640" status="PASS" starttime="20170810 02:43:14.504"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:43:18.642" status="PASS" starttime="20170810 02:43:18.642"></status>
</kw>
<msg timestamp="20170810 02:43:18.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:18.642" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 02:43:18.642" status="PASS" starttime="20170810 02:43:18.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:43:18.643" status="PASS" starttime="20170810 02:43:18.642"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 02:43:18.671" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170810 02:43:18.671" status="PASS" starttime="20170810 02:43:18.671"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 02:43:18.673" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_j...</msg>
<status endtime="20170810 02:43:18.673" status="PASS" starttime="20170810 02:43:18.672"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:18.674" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170810 02:43:18.674" status="PASS" starttime="20170810 02:43:18.673"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:43:18.675" status="PASS" starttime="20170810 02:43:18.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:18.676" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170810 02:43:18.676" status="PASS" starttime="20170810 02:43:18.675"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:18.742" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:18.742" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170810 02:43:19.798" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:19.798" status="PASS" starttime="20170810 02:43:18.706"></status>
</kw>
<msg timestamp="20170810 02:43:19.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:19.800" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170810 02:43:19.800" status="PASS" starttime="20170810 02:43:18.676"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:19.801" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170810 02:43:19.801" status="PASS" starttime="20170810 02:43:19.800"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:19.801" level="INFO">${stderr} = ls: /proc/3299/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170810 02:43:19.801" status="PASS" starttime="20170810 02:43:19.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:19.808" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:19.809" status="PASS" starttime="20170810 02:43:19.808"></status>
</kw>
<status endtime="20170810 02:43:19.809" status="PASS" starttime="20170810 02:43:19.807"></status>
</kw>
<status endtime="20170810 02:43:19.809" status="PASS" starttime="20170810 02:43:19.801"></status>
</kw>
<status endtime="20170810 02:43:19.809" status="PASS" starttime="20170810 02:43:18.674"></status>
</kw>
<status endtime="20170810 02:43:19.809" status="PASS" starttime="20170810 02:43:18.673"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:19.810" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_dmesg.txt</msg>
<status endtime="20170810 02:43:19.810" status="PASS" starttime="20170810 02:43:19.810"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:43:19.811" status="PASS" starttime="20170810 02:43:19.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:19.812" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170810 02:43:19.812" status="PASS" starttime="20170810 02:43:19.812"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:19.885" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:19.885" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170810 02:43:20.240" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:20.240" status="PASS" starttime="20170810 02:43:19.844"></status>
</kw>
<msg timestamp="20170810 02:43:20.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:20.241" level="INFO">${ret_values} = (u'[    3.940000] rtc-rv8803 11-0032: rtc core: registered rx8900 as rtc0\n[    3.940000] at24 11-0051: 8192 byte 24c64 EEPROM, writable, 1 bytes/write\n[    3.940000] aspeed-i2c-bus 1e78a400.i2c-bus:...</msg>
<status endtime="20170810 02:43:20.241" status="PASS" starttime="20170810 02:43:19.812"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:20.242" level="INFO">${stdout} = [    3.940000] rtc-rv8803 11-0032: rtc core: registered rx8900 as rtc0
[    3.940000] at24 11-0051: 8192 byte 24c64 EEPROM, writable, 1 bytes/write
[    3.940000] aspeed-i2c-bus 1e78a400.i2c-bus: i2c ...</msg>
<status endtime="20170810 02:43:20.242" status="PASS" starttime="20170810 02:43:20.241"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:20.242" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:20.242" status="PASS" starttime="20170810 02:43:20.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:20.249" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_dmesg.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:20.249" status="PASS" starttime="20170810 02:43:20.248"></status>
</kw>
<status endtime="20170810 02:43:20.250" status="PASS" starttime="20170810 02:43:20.248"></status>
</kw>
<status endtime="20170810 02:43:20.250" status="PASS" starttime="20170810 02:43:20.243"></status>
</kw>
<status endtime="20170810 02:43:20.250" status="PASS" starttime="20170810 02:43:19.810"></status>
</kw>
<status endtime="20170810 02:43:20.250" status="PASS" starttime="20170810 02:43:19.809"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:20.250" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_proc_list.txt</msg>
<status endtime="20170810 02:43:20.251" status="PASS" starttime="20170810 02:43:20.250"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:43:20.252" status="PASS" starttime="20170810 02:43:20.251"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:20.253" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170810 02:43:20.253" status="PASS" starttime="20170810 02:43:20.252"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:20.318" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:20.319" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170810 02:43:21.241" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:21.241" status="PASS" starttime="20170810 02:43:20.283"></status>
</kw>
<msg timestamp="20170810 02:43:21.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:21.242" level="INFO">${ret_values} = (u'Mem: 191124K used, 241132K free, 14932K shrd, 16936K buff, 75740K cached\nCPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 1.83 1.85 1.29 4/166 3301\n  PID  PPID ...</msg>
<status endtime="20170810 02:43:21.242" status="PASS" starttime="20170810 02:43:20.253"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:21.242" level="INFO">${stdout} = Mem: 191124K used, 241132K free, 14932K shrd, 16936K buff, 75740K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 1.83 1.85 1.29 4/166 3301
  PID  PPID USER  ...</msg>
<status endtime="20170810 02:43:21.242" status="PASS" starttime="20170810 02:43:21.242"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:21.243" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:21.243" status="PASS" starttime="20170810 02:43:21.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:21.250" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_proc_list.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:21.250" status="PASS" starttime="20170810 02:43:21.249"></status>
</kw>
<status endtime="20170810 02:43:21.250" status="PASS" starttime="20170810 02:43:21.248"></status>
</kw>
<status endtime="20170810 02:43:21.250" status="PASS" starttime="20170810 02:43:21.243"></status>
</kw>
<status endtime="20170810 02:43:21.250" status="PASS" starttime="20170810 02:43:20.251"></status>
</kw>
<status endtime="20170810 02:43:21.250" status="PASS" starttime="20170810 02:43:20.250"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:21.251" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_meminfo.txt</msg>
<status endtime="20170810 02:43:21.251" status="PASS" starttime="20170810 02:43:21.250"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:43:21.252" status="PASS" starttime="20170810 02:43:21.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:21.253" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170810 02:43:21.253" status="PASS" starttime="20170810 02:43:21.252"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:21.319" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:21.319" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170810 02:43:21.694" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:21.694" status="PASS" starttime="20170810 02:43:21.283"></status>
</kw>
<msg timestamp="20170810 02:43:21.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:21.695" level="INFO">${ret_values} = (u'MemTotal:         432256 kB\nMemFree:          241132 kB\nMemAvailable:     317560 kB\nBuffers:           16936 kB\nCached:            75740 kB\nSwapCached:            0 kB\nActive:           13130...</msg>
<status endtime="20170810 02:43:21.695" status="PASS" starttime="20170810 02:43:21.253"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:21.695" level="INFO">${stdout} = MemTotal:         432256 kB
MemFree:          241132 kB
MemAvailable:     317560 kB
Buffers:           16936 kB
Cached:            75740 kB
SwapCached:            0 kB
Active:           131300 kB
Inac...</msg>
<status endtime="20170810 02:43:21.695" status="PASS" starttime="20170810 02:43:21.695"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:21.696" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:21.696" status="PASS" starttime="20170810 02:43:21.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:21.702" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_meminfo.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:21.703" status="PASS" starttime="20170810 02:43:21.702"></status>
</kw>
<status endtime="20170810 02:43:21.703" status="PASS" starttime="20170810 02:43:21.701"></status>
</kw>
<status endtime="20170810 02:43:21.703" status="PASS" starttime="20170810 02:43:21.696"></status>
</kw>
<status endtime="20170810 02:43:21.703" status="PASS" starttime="20170810 02:43:21.251"></status>
</kw>
<status endtime="20170810 02:43:21.703" status="PASS" starttime="20170810 02:43:21.250"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:21.704" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_procinfo.txt</msg>
<status endtime="20170810 02:43:21.704" status="PASS" starttime="20170810 02:43:21.703"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:43:21.705" status="PASS" starttime="20170810 02:43:21.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:21.706" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170810 02:43:21.706" status="PASS" starttime="20170810 02:43:21.705"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:21.784" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:21.784" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170810 02:43:22.243" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:22.243" status="PASS" starttime="20170810 02:43:21.742"></status>
</kw>
<msg timestamp="20170810 02:43:22.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:22.243" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170810 02:43:22.244" status="PASS" starttime="20170810 02:43:21.706"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:22.244" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170810 02:43:22.244" status="PASS" starttime="20170810 02:43:22.244"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:22.245" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:22.245" status="PASS" starttime="20170810 02:43:22.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:22.251" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_procinfo.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:22.251" status="PASS" starttime="20170810 02:43:22.251"></status>
</kw>
<status endtime="20170810 02:43:22.251" status="PASS" starttime="20170810 02:43:22.250"></status>
</kw>
<status endtime="20170810 02:43:22.252" status="PASS" starttime="20170810 02:43:22.245"></status>
</kw>
<status endtime="20170810 02:43:22.252" status="PASS" starttime="20170810 02:43:21.704"></status>
</kw>
<status endtime="20170810 02:43:22.252" status="PASS" starttime="20170810 02:43:21.703"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 02:43:22.252" level="INFO">${logpath} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_journalctl.txt</msg>
<status endtime="20170810 02:43:22.252" status="PASS" starttime="20170810 02:43:22.252"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:43:22.254" status="PASS" starttime="20170810 02:43:22.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:22.254" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170810 02:43:22.254" status="PASS" starttime="20170810 02:43:22.254"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 02:43:22.321" level="INFO">width=80
height=24
port=22
term_type=vt100
host=9.41.166.169
path_separator=/
alias=bmc_connection
newline=

encoding=UTF-8
prompt=# 
index=1
timeout=25 seconds</msg>
<msg timestamp="20170810 02:43:22.321" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170810 02:43:29.836" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 02:43:29.837" status="PASS" starttime="20170810 02:43:22.285"></status>
</kw>
<msg timestamp="20170810 02:43:29.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 02:43:29.843" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:58 UTC, end at Thu 2017-08-03 15:59:45 UTC. --\nAug 03 15:42:58 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:58 witherspoon kernel: Linu...</msg>
<status endtime="20170810 02:43:29.843" status="PASS" starttime="20170810 02:43:22.255"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 02:43:29.845" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:58 UTC, end at Thu 2017-08-03 15:59:45 UTC. --
Aug 03 15:42:58 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:58 witherspoon kernel: Linux ver...</msg>
<status endtime="20170810 02:43:29.846" status="PASS" starttime="20170810 02:43:29.844"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 02:43:29.846" level="INFO">${stderr} = </msg>
<status endtime="20170810 02:43:29.846" status="PASS" starttime="20170810 02:43:29.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 02:43:29.856" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_journalctl.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/20170810024240469809_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:29.856" status="PASS" starttime="20170810 02:43:29.854"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:29.852"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:29.847"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:22.253"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:22.252"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.673"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.672"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.671"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.671"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.670"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.643"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.641"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:43:18.640"></status>
</kw>
<status endtime="20170810 02:43:29.857" status="PASS" starttime="20170810 02:42:40.814"></status>
</kw>
<status endtime="20170810 02:43:29.858" status="PASS" starttime="20170810 02:42:40.811"></status>
</kw>
<status endtime="20170810 02:43:29.858" status="PASS" starttime="20170810 02:42:40.811"></status>
</kw>
<status endtime="20170810 02:43:29.858" status="PASS" starttime="20170810 02:42:40.811"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170810 02:43:29.865" status="PASS" starttime="20170810 02:43:29.865"></status>
</kw>
<status endtime="20170810 02:43:29.866" status="PASS" starttime="20170810 02:43:29.858"></status>
</kw>
<status endtime="20170810 02:43:29.866" status="PASS" starttime="20170810 02:42:40.810"></status>
</kw>
<status endtime="20170810 02:43:29.866" status="PASS" starttime="20170810 02:42:37.413"></status>
</kw>
<status endtime="20170810 02:43:29.866" status="PASS" starttime="20170810 02:42:37.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 02:43:29.866" status="PASS" starttime="20170810 02:43:29.866"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 02:43:29.876" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 02:43:29.876" status="PASS" starttime="20170810 02:43:29.867"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 02:43:29.877" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/15815/obmc-robot/logs/20170810024240469809_TestsTestBasicPoweron/20170810024240469809_PowerOnTest/</msg>
<status endtime="20170810 02:43:29.877" status="PASS" starttime="20170810 02:43:29.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170810 02:43:29.877" status="PASS" starttime="20170810 02:43:29.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 02:43:29.878" status="PASS" starttime="20170810 02:43:29.878"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170810 02:43:29.879" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs"&gt;/tmp/fspcibld/15815/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170810 02:43:29.879" status="PASS" starttime="20170810 02:43:29.878"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 02:43:29.880" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170810 02:43:29.880" status="PASS" starttime="20170810 02:43:29.879"></status>
</kw>
<msg timestamp="20170810 02:43:29.880" level="INFO">${exist} = True</msg>
<status endtime="20170810 02:43:29.880" status="PASS" starttime="20170810 02:43:29.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170810 02:43:29.880" status="PASS" starttime="20170810 02:43:29.880"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 02:43:29.881" status="PASS" starttime="20170810 02:43:29.881"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:43:29.882" level="INFO">${cur_time} = 2017-08-10 02:43:29:881701</msg>
<status endtime="20170810 02:43:29.882" status="PASS" starttime="20170810 02:43:29.882"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 02:43:29.882" level="INFO">${cur_time} = 20170810024329881701</msg>
<status endtime="20170810 02:43:29.882" status="PASS" starttime="20170810 02:43:29.882"></status>
</kw>
<msg timestamp="20170810 02:43:29.883" level="INFO">${cur_time} = 20170810024329881701</msg>
<status endtime="20170810 02:43:29.883" status="PASS" starttime="20170810 02:43:29.881"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170810 02:43:29.884" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/15815/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:29.884" status="PASS" starttime="20170810 02:43:29.883"></status>
</kw>
<status endtime="20170810 02:43:29.884" status="PASS" starttime="20170810 02:43:29.867"></status>
</kw>
<status endtime="20170810 02:43:29.884" status="PASS" starttime="20170810 02:42:36.341"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 02:43:29.885" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:43:29.886" status="PASS" starttime="20170810 02:43:29.885"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 02:43:29.886" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:43:29.886" status="PASS" starttime="20170810 02:43:29.886"></status>
</kw>
<msg timestamp="20170810 02:43:29.886" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 02:43:29.886" status="PASS" starttime="20170810 02:43:29.885"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:29.887" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 02:43:29.887" status="PASS" starttime="20170810 02:43:29.887"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:43:29.888" status="PASS" starttime="20170810 02:43:29.888"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:43:29.896" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:43:29.903" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:43:29.903" level="INFO">${output} = /tmp/fspcibld/15815/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 02:43:29.903" status="PASS" starttime="20170810 02:43:29.888"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:43:29.906" status="PASS" starttime="20170810 02:43:29.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 02:43:29.907" status="PASS" starttime="20170810 02:43:29.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:29.908" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 02:43:29.908" status="PASS" starttime="20170810 02:43:29.907"></status>
</kw>
<msg timestamp="20170810 02:43:29.908" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 02:43:29.908" status="PASS" starttime="20170810 02:43:29.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:29.909" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 02:43:29.909" status="PASS" starttime="20170810 02:43:29.909"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:43:29.910" status="PASS" starttime="20170810 02:43:29.909"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170810 02:43:29.916" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 02:43:29.926" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:43:29.926" level="INFO">${os_con_pid} = </msg>
<status endtime="20170810 02:43:29.926" status="PASS" starttime="20170810 02:43:29.910"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 02:43:29.929" status="PASS" starttime="20170810 02:43:29.928"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 02:43:29.930" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 02:43:29.930" status="PASS" starttime="20170810 02:43:29.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:43:29.934" status="PASS" starttime="20170810 02:43:29.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:43:29.935" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 02:43:29.935" level="INFO">${output} = None</msg>
<status endtime="20170810 02:43:29.935" status="PASS" starttime="20170810 02:43:29.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:43:29.936" status="PASS" starttime="20170810 02:43:29.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170810 02:43:29.940" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/15815/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/15815/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 02:43:29.940" status="PASS" starttime="20170810 02:43:29.937"></status>
</kw>
<status endtime="20170810 02:43:29.940" status="PASS" starttime="20170810 02:43:29.937"></status>
</kw>
<status endtime="20170810 02:43:29.940" status="PASS" starttime="20170810 02:43:29.936"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170810 02:43:29.941" level="INFO">${output} = </msg>
<status endtime="20170810 02:43:29.941" status="PASS" starttime="20170810 02:43:29.941"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170810 02:43:29.942" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170810 02:43:29.942" status="PASS" starttime="20170810 02:43:29.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 02:43:30.012" status="PASS" starttime="20170810 02:43:29.943"></status>
</kw>
<msg timestamp="20170810 02:43:30.013" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 02:43:30.014" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170810 02:43:30.014" status="PASS" starttime="20170810 02:43:29.942"></status>
</kw>
<msg timestamp="20170810 02:43:30.015" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170810 02:43:30.015" status="PASS" starttime="20170810 02:43:29.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170810 02:43:30.017" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09267|secure|Booting in non-secure mode.
  4.09269|secure|SecureROM invalid - skipping functionality
  6.83881|ISTEP  6. 5 - host_init_fsi
  6.99309|ISTEP  6. 6 - host_set_ipl_parms
  7.01806|ISTEP  6. 7 - host_discover_targets
 12.46167|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.46168|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.50183|ISTEP  6. 8 - host_update_master_tpm
 12.51271|SECURE|Security Access Bit&gt; 0x0000000000000000
 12.51271|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 12.51289|ISTEP  6. 9 - host_gard
 12.54868|ISTEP  6.10 - host_revert_sbe_mcs_setup
 12.56022|ISTEP  6.11 - host_start_occ_xstop_handler
 12.56130|ISTEP  6.12 - host_voltage_config
 12.59558|ISTEP  7. 2 - mss_volt
 13.27291|ISTEP  7. 3 - mss_freq
 13.57409|ISTEP  7. 4 - mss_eff_config
 16.86402|ISTEP  7. 5 - mss_attr_update
 16.87643|ISTEP  8. 1 - host_slave_sbe_config
 16.91248|ISTEP  8. 2 - host_setup_sbe
 16.91939|ISTEP  8. 3 - host_cbs_start
 16.92725|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 26.54250|ISTEP  8. 5 - host_attnlisten_proc
 26.54399|ISTEP  8. 6 - host_p9_fbc_eff_config
 26.55086|ISTEP  8. 7 - host_p9_eff_config_links
 26.56037|ISTEP  8. 8 - proc_attr_update
 26.56232|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 26.61545|ISTEP  8.10 - proc_xbus_scominit
 29.85418|ISTEP  8.11 - proc_xbus_enable_ridi
 29.85889|ISTEP  9. 1 - fabric_erepair
 29.86755|ISTEP  9. 2 - fabric_io_dccal
 30.72390|ISTEP  9. 3 - fabric_pre_trainadv
 30.73265|ISTEP  9. 4 - fabric_io_run_training
 30.94767|ISTEP  9. 5 - fabric_post_trainadv
 30.95198|ISTEP  9. 6 - proc_smp_link_layer
 30.95723|ISTEP  9. 7 - proc_fab_iovalid
 30.98412|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 30.99479|ISTEP 10. 1 - proc_build_smp
 31.70746|ISTEP 10. 2 - host_slave_sbe_update
142.73770|sbe|System Rebooting To Perform SBE Update

142.75033|================================================
142.75384|Error reported by ipmi (0x2500) PLID 0x90000012
142.75560|  Requested sensor is not present.
142.75561|  ModuleId   0x03 IPMI::MOD_IPMISENSOR
142.75562|  ReasonCode 0x2507 IPMI::RC_SENSOR_NOT_PRESENT
142.75563|  UserData1  BMC IPMI Completion code. : 0x00000000000000cb
142.75565|  UserData2  bytes [0-3]sensor number bytes [4-7]HUID of target. : 0x0000000700000000
142.75566|------------------------------------------------
142.75567|  Callout type             : Procedure Callout
142.75567|  Procedure                : EPUB_PRC_HB_CODE
142.75568|  Priority                 : SRCI_PRIORITY_HIGH
142.75569|------------------------------------------------
142.75570|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
142.75570|================================================
142.76584|IPMI: Initiate power cycle
142.84735|Stopping istep dispatcher
147.97664|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01776|secure|Booting in non-secure mode.
  4.01778|secure|SecureROM invalid - skipping functionality
  5.33204|ERRL|Dumping errors reported prior to registration
  6.08723|ISTEP  6. 5 - host_init_fsi
  6.17157|ISTEP  6. 6 - host_set_ipl_parms
  6.18152|ISTEP  6. 7 - host_discover_targets
  6.64786|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.64787|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.67531|ISTEP  6. 8 - host_update_master_tpm
  6.68386|SECURE|Security Access Bit&gt; 0x0000000000000000
  6.68386|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  6.68405|ISTEP  6. 9 - host_gard
  6.73401|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.74622|ISTEP  6.11 - host_start_occ_xstop_handler
  6.74777|ISTEP  6.12 - host_voltage_config
  6.78259|ISTEP  7. 2 - mss_volt
  7.09868|ISTEP  7. 3 - mss_freq
  7.24621|ISTEP  7. 4 - mss_eff_config
 10.52013|ISTEP  7. 5 - mss_attr_update
 10.53239|ISTEP  8. 1 - host_slave_sbe_config
 10.57189|ISTEP  8. 2 - host_setup_sbe
 10.57916|ISTEP  8. 3 - host_cbs_start
 10.58741|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.00203|ISTEP  8. 5 - host_attnlisten_proc
 19.00321|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.01046|ISTEP  8. 7 - host_p9_eff_config_links
 19.02041|ISTEP  8. 8 - proc_attr_update
 19.02259|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.07582|ISTEP  8.10 - proc_xbus_scominit
 22.30527|ISTEP  8.11 - proc_xbus_enable_ridi
 22.31056|ISTEP  9. 1 - fabric_erepair
 22.32054|ISTEP  9. 2 - fabric_io_dccal
 23.17559|ISTEP  9. 3 - fabric_pre_trainadv
 23.18209|ISTEP  9. 4 - fabric_io_run_training
 23.39962|ISTEP  9. 5 - fabric_post_trainadv
 23.40401|ISTEP  9. 6 - proc_smp_link_layer
 23.41090|ISTEP  9. 7 - proc_fab_iovalid
 23.43725|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.44744|ISTEP 10. 1 - proc_build_smp
 23.81045|ISTEP 10. 2 - host_slave_sbe_update
 24.16693|ISTEP 10. 3 - host_set_voltages
 24.22277|ISTEP 10. 4 - proc_cen_ref_clk_enable
 24.22903|ISTEP 10. 5 - proc_enable_osclite
 24.23017|ISTEP 10. 6 - proc_chiplet_scominit
 24.27495|ISTEP 10. 7 - proc_abus_scominit
 24.28380|ISTEP 10. 8 - proc_obus_scominit
 24.68712|ISTEP 10. 9 - proc_npu_scominit
 24.71065|ISTEP 10.10 - proc_pcie_scominit
 24.77161|ISTEP 10.11 - proc_scomoverride_chiplets
 24.77361|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.77750|ISTEP 10.13 - host_rng_bist
 24.78296|ISTEP 10.14 - host_update_redundant_tpm
 24.85289|ISTEP 11. 1 - host_prd_hwreconfig
 24.85842|ISTEP 12. 1 - mss_getecid
 24.86383|ISTEP 13. 1 - host_disable_memvolt
 24.95753|ISTEP 13. 2 - mem_pll_reset
 24.97147|ISTEP 13. 3 - mem_pll_initf
 25.00408|ISTEP 13. 4 - mem_pll_setup
 25.03108|ISTEP 13. 6 - mem_startclocks
 25.05159|ISTEP 13. 7 - host_enable_memvolt
 25.05390|ISTEP 13. 8 - mss_scominit
 25.54655|ISTEP 13. 9 - mss_ddr_phy_reset
 25.65834|ISTEP 13.10 - mss_draminit
 25.87072|ISTEP 13.11 - mss_draminit_training
 26.22088|ISTEP 13.12 - mss_draminit_trainadv
 26.22382|ISTEP 13.13 - mss_draminit_mc
 26.26181|ISTEP 14. 1 - mss_memdiag
 69.68892|ISTEP 14. 2 - mss_thermal_init
 69.69796|ISTEP 14. 3 - proc_pcie_config
 69.71226|ISTEP 14. 4 - mss_power_cleanup
 69.71562|ISTEP 14. 5 - proc_setup_bars
 69.75399|ISTEP 14. 6 - proc_htm_setup
 69.76506|ISTEP 14. 7 - proc_exit_cache_contained
 69.78484|ISTEP 15. 1 - host_build_stop_image
 70.15575|ISTEP 15. 2 - proc_set_pba_homer_bar
 70.16094|ISTEP 15. 3 - host_establish_ex_chiplet
 70.17174|ISTEP 15. 4 - host_start_stop_engine
 70.27813|ISTEP 16. 1 - host_activate_master
  0.00638|ISTEP 16. 2 - host_activate_slave_cores
 71.50066|ISTEP 16. 3 - host_secure_rng
 71.52550|ISTEP 16. 4 - mss_scrub
 71.53615|ISTEP 16. 5 - host_ipl_complete
 71.53752|ISTEP 16. 6 - host_load_io_ppe
 71.54024|ISTEP 18.11 - proc_tod_setup
 71.59475|ISTEP 18.12 - proc_tod_init
 71.62711|ISTEP 20. 1 - host_load_payload
 71.95677|ISTEP 20. 2 - host_load_hdat
 75.84631|ISTEP 21. 1 - host_runtime_setup
 77.10152|================================================
 77.10493|Error reported by lpc (0x2400) PLID 0x90000024
 77.10666|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 77.10667|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 77.10668|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 77.10840|  UserData1  LPC Address : 0x0ffffe0000000002
 77.10841|  UserData2  LPC Transaction Type : 0x0000000000000200
 77.10842|------------------------------------------------
 77.10843|  Callout type             : Procedure Callout
 77.10844|  Procedure                : EPUB_PRC_HB_CODE
 77.10845|  Priority                 : SRCI_PRIORITY_HIGH
 77.10845|------------------------------------------------
 77.10846|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 77.10847|================================================
 77.51492|System shutting down with error status 0x90000025
 77.51494|================================================
 77.51495|Error reported by initservice (0x0500) PLID 0x90000025
 77.51931|  Initialization Service launched a function and the task returned an error.
 77.51932|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 77.51932|  ReasonCode 0x0506 WAIT_FN_FAILED
 77.51933|  UserData1  task id or task return code : 0x00000000000001b3
 77.51934|  UserData2  returned status from task : 0x0000000000000001
 77.51935|------------------------------------------------
 77.51936|  Callout type             : Procedure Callout
 77.51937|  Procedure                : EPUB_PRC_HB_CODE
 77.51937|  Priority                 : SRCI_PRIORITY_HIGH
 77.51938|------------------------------------------------
 77.51939|  host_runtime_setup
 77.51940|------------------------------------------------
 77.51940|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 77.51941|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01948|secure|Booting in non-secure mode.
  4.01950|secure|SecureROM invalid - skipping functionality
  4.66028|ERRL|Dumping errors reported prior to registration
  5.21003|ISTEP  6. 5 - host_init_fsi
  5.29490|ISTEP  6. 6 - host_set_ipl_parms
  5.31486|ISTEP  6. 7 - host_discover_targets
  5.88934|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.88936|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.91819|ISTEP  6. 8 - host_update_master_tpm
  5.92677|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.92678|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.92696|ISTEP  6. 9 - host_gard
  5.96057|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.97155|ISTEP  6.11 - host_start_occ_xstop_handler
  5.97248|ISTEP  6.12 - host_voltage_config
  6.00897|ISTEP  7. 2 - mss_volt
  6.46878|ISTEP  7. 3 - mss_freq
  6.61548|ISTEP  7. 4 - mss_eff_config
  9.91401|ISTEP  7. 5 - mss_attr_update
  9.92615|ISTEP  8. 1 - host_slave_sbe_config
  9.96243|ISTEP  8. 2 - host_setup_sbe
  9.96877|ISTEP  8. 3 - host_cbs_start
  9.97725|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.39187|ISTEP  8. 5 - host_attnlisten_proc
 18.39281|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.39906|ISTEP  8. 7 - host_p9_eff_config_links
 18.40873|ISTEP  8. 8 - proc_attr_update
 18.41054|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.46357|ISTEP  8.10 - proc_xbus_scominit
 21.70592|ISTEP  8.11 - proc_xbus_enable_ridi
 21.71124|ISTEP  9. 1 - fabric_erepair
 21.71931|ISTEP  9. 2 - fabric_io_dccal
 22.57678|ISTEP  9. 3 - fabric_pre_trainadv
 22.58503|ISTEP  9. 4 - fabric_io_run_training
 22.80491|ISTEP  9. 5 - fabric_post_trainadv
 22.80922|ISTEP  9. 6 - proc_smp_link_layer
 22.81490|ISTEP  9. 7 - proc_fab_iovalid
 22.84031|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.85096|ISTEP 10. 1 - proc_build_smp
 23.10006|ISTEP 10. 2 - host_slave_sbe_update
 23.49168|ISTEP 10. 3 - host_set_voltages
 23.53142|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.54296|ISTEP 10. 5 - proc_enable_osclite
 23.54410|ISTEP 10. 6 - proc_chiplet_scominit
 23.58988|ISTEP 10. 7 - proc_abus_scominit
 23.59743|ISTEP 10. 8 - proc_obus_scominit
 23.70512|ISTEP 10. 9 - proc_npu_scominit
 23.73687|ISTEP 10.10 - proc_pcie_scominit
 23.79807|ISTEP 10.11 - proc_scomoverride_chiplets
 23.80045|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.80392|ISTEP 10.13 - host_rng_bist
 23.80925|ISTEP 10.14 - host_update_redundant_tpm
 23.87979|ISTEP 11. 1 - host_prd_hwreconfig
 23.88480|ISTEP 12. 1 - mss_getecid
 23.89069|ISTEP 13. 1 - host_disable_memvolt
 23.98634|ISTEP 13. 2 - mem_pll_reset
 23.99934|ISTEP 13. 3 - mem_pll_initf
 24.03015|ISTEP 13. 4 - mem_pll_setup
 24.05693|ISTEP 13. 6 - mem_startclocks
 24.07733|ISTEP 13. 7 - host_enable_memvolt
 24.08149|ISTEP 13. 8 - mss_scominit
 24.54629|ISTEP 13. 9 - mss_ddr_phy_reset
 24.65793|ISTEP 13.10 - mss_draminit
 24.86675|ISTEP 13.11 - mss_draminit_training
 25.21223|ISTEP 13.12 - mss_draminit_trainadv
 25.21537|ISTEP 13.13 - mss_draminit_mc
 25.25113|ISTEP 14. 1 - mss_memdiag
 68.80550|ISTEP 14. 2 - mss_thermal_init
 68.81775|ISTEP 14. 3 - proc_pcie_config
 68.83151|ISTEP 14. 4 - mss_power_cleanup
 68.83501|ISTEP 14. 5 - proc_setup_bars
 68.87081|ISTEP 14. 6 - proc_htm_setup
 68.88174|ISTEP 14. 7 - proc_exit_cache_contained
 68.90147|ISTEP 15. 1 - host_build_stop_image
 69.27257|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.27763|ISTEP 15. 3 - host_establish_ex_chiplet
 69.28855|ISTEP 15. 4 - host_start_stop_engine
 69.39526|ISTEP 16. 1 - host_activate_master
  0.00837|ISTEP 16. 2 - host_activate_slave_cores
 70.61589|ISTEP 16. 3 - host_secure_rng
 70.64199|ISTEP 16. 4 - mss_scrub
 70.66094|ISTEP 16. 5 - host_ipl_complete
 70.65027|ISTEP 16. 6 - host_load_io_ppe
 70.67787|ISTEP 18.11 - proc_tod_setup
 70.74067|ISTEP 18.12 - proc_tod_init
 70.74989|ISTEP 20. 1 - host_load_payload
 71.05901|ISTEP 20. 2 - host_load_hdat
 74.96554|ISTEP 21. 1 - host_runtime_setup
 75.98037|================================================
 75.98382|Error reported by lpc (0x2400) PLID 0x90000037
 75.98555|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 75.98556|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 75.98557|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 75.98729|  UserData1  LPC Address : 0x0ffffe0000000002
 75.98730|  UserData2  LPC Transaction Type : 0x0000000000000200
 75.98731|------------------------------------------------
 75.98732|  Callout type             : Procedure Callout
 75.98733|  Procedure                : EPUB_PRC_HB_CODE
 75.98734|  Priority                 : SRCI_PRIORITY_HIGH
 75.98735|------------------------------------------------
 75.98736|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 75.98737|================================================
 76.00442|System shutting down with error status 0x90000038
 76.00445|================================================
 76.00446|Error reported by initservice (0x0500) PLID 0x90000038
 76.00674|  Initialization Service launched a function and the task returned an error.
 76.00675|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.00676|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.00677|  UserData1  task id or task return code : 0x00000000000001b3
 76.00678|  UserData2  returned status from task : 0x0000000000000001
 76.00679|------------------------------------------------
 76.00679|  Callout type             : Procedure Callout
 76.00680|  Procedure                : EPUB_PRC_HB_CODE
 76.00681|  Priority                 : SRCI_PRIORITY_HIGH
 76.00682|------------------------------------------------
 76.00683|  host_runtime_setup
 76.00683|------------------------------------------------
 76.00684|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.00685|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01794|secure|Booting in non-secure mode.
  4.01796|secure|SecureROM invalid - skipping functionality
  4.66060|ERRL|Dumping errors reported prior to registration
  5.21512|ISTEP  6. 5 - host_init_fsi
  5.29367|ISTEP  6. 6 - host_set_ipl_parms
  5.31270|ISTEP  6. 7 - host_discover_targets
  5.86124|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.86125|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.88831|ISTEP  6. 8 - host_update_master_tpm
  5.89687|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.89688|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.89708|ISTEP  6. 9 - host_gard
  5.93110|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.94019|ISTEP  6.11 - host_start_occ_xstop_handler
  5.94134|ISTEP  6.12 - host_voltage_config
  5.97626|ISTEP  7. 2 - mss_volt
  6.31306|ISTEP  7. 3 - mss_freq
  6.45965|ISTEP  7. 4 - mss_eff_config
 10.02457|ISTEP  7. 5 - mss_attr_update
 10.03717|ISTEP  8. 1 - host_slave_sbe_config
 10.07578|ISTEP  8. 2 - host_setup_sbe
 10.08247|ISTEP  8. 3 - host_cbs_start
 10.09052|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.50518|ISTEP  8. 5 - host_attnlisten_proc
 18.50642|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.51306|ISTEP  8. 7 - host_p9_eff_config_links
 18.52276|ISTEP  8. 8 - proc_attr_update
 18.52455|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.57760|ISTEP  8.10 - proc_xbus_scominit
 21.80859|ISTEP  8.11 - proc_xbus_enable_ridi
 21.81362|ISTEP  9. 1 - fabric_erepair
 21.82179|ISTEP  9. 2 - fabric_io_dccal
 22.67807|ISTEP  9. 3 - fabric_pre_trainadv
 22.68456|ISTEP  9. 4 - fabric_io_run_training
 22.90163|ISTEP  9. 5 - fabric_post_trainadv
 22.90666|ISTEP  9. 6 - proc_smp_link_layer
 22.91188|ISTEP  9. 7 - proc_fab_iovalid
 22.93752|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.94770|ISTEP 10. 1 - proc_build_smp
 23.12023|ISTEP 10. 2 - host_slave_sbe_update
 23.47854|ISTEP 10. 3 - host_set_voltages
 23.51858|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.52469|ISTEP 10. 5 - proc_enable_osclite
 23.52602|ISTEP 10. 6 - proc_chiplet_scominit
 23.57145|ISTEP 10. 7 - proc_abus_scominit
 23.57929|ISTEP 10. 8 - proc_obus_scominit
 24.18148|ISTEP 10. 9 - proc_npu_scominit
 24.20450|ISTEP 10.10 - proc_pcie_scominit
 24.27296|ISTEP 10.11 - proc_scomoverride_chiplets
 24.27555|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.27915|ISTEP 10.13 - host_rng_bist
 24.28741|ISTEP 10.14 - host_update_redundant_tpm
 24.35790|ISTEP 11. 1 - host_prd_hwreconfig
 24.36285|ISTEP 12. 1 - mss_getecid
 24.36875|ISTEP 13. 1 - host_disable_memvolt
 24.46174|ISTEP 13. 2 - mem_pll_reset
 24.47524|ISTEP 13. 3 - mem_pll_initf
 24.51007|ISTEP 13. 4 - mem_pll_setup
 24.54380|ISTEP 13. 6 - mem_startclocks
 24.56459|ISTEP 13. 7 - host_enable_memvolt
 24.56662|ISTEP 13. 8 - mss_scominit
 25.03109|ISTEP 13. 9 - mss_ddr_phy_reset
 25.14557|ISTEP 13.10 - mss_draminit
 25.35633|ISTEP 13.11 - mss_draminit_training
 25.72437|ISTEP 13.12 - mss_draminit_trainadv
 25.72725|ISTEP 13.13 - mss_draminit_mc
 25.76618|ISTEP 14. 1 - mss_memdiag
 69.20822|ISTEP 14. 2 - mss_thermal_init
 69.21796|ISTEP 14. 3 - proc_pcie_config
 69.23203|ISTEP 14. 4 - mss_power_cleanup
 69.23536|ISTEP 14. 5 - proc_setup_bars
 69.27497|ISTEP 14. 6 - proc_htm_setup
 69.28582|ISTEP 14. 7 - proc_exit_cache_contained
 69.30631|ISTEP 15. 1 - host_build_stop_image
 69.67131|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.69370|ISTEP 15. 3 - host_establish_ex_chiplet
 69.70457|ISTEP 15. 4 - host_start_stop_engine
 69.81088|ISTEP 16. 1 - host_activate_master
  0.00635|ISTEP 16. 2 - host_activate_slave_cores
 71.04188|ISTEP 16. 3 - host_secure_rng
 71.06389|ISTEP 16. 4 - mss_scrub
 71.07465|ISTEP 16. 5 - host_ipl_complete
 71.09923|ISTEP 16. 6 - host_load_io_ppe
 71.10230|ISTEP 18.11 - proc_tod_setup
 71.13756|ISTEP 18.12 - proc_tod_init
 71.14301|ISTEP 20. 1 - host_load_payload
 71.48629|ISTEP 20. 2 - host_load_hdat
 75.38512|ISTEP 21. 1 - host_runtime_setup
 76.69703|================================================
 76.70046|Error reported by lpc (0x2400) PLID 0x9000004A
 76.70218|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 76.70219|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 76.70220|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 76.70393|  UserData1  LPC Address : 0x0ffffe0000000002
 76.70394|  UserData2  LPC Transaction Type : 0x0000000000000200
 76.70395|------------------------------------------------
 76.70395|  Callout type             : Procedure Callout
 76.70396|  Procedure                : EPUB_PRC_HB_CODE
 76.70397|  Priority                 : SRCI_PRIORITY_HIGH
 76.70398|------------------------------------------------
 76.70399|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.70400|================================================
 76.72310|System shutting down with error status 0x9000004B
 76.72313|================================================
 76.72314|Error reported by initservice (0x0500) PLID 0x9000004B
 76.72560|  Initialization Service launched a function and the task returned an error.
 76.72561|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.72562|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.72563|  UserData1  task id or task return code : 0x00000000000001b3
 76.72564|  UserData2  returned status from task : 0x0000000000000001
 76.72564|------------------------------------------------
 76.72565|  Callout type             : Procedure Callout
 76.72566|  Procedure                : EPUB_PRC_HB_CODE
 76.72567|  Priority                 : SRCI_PRIORITY_HIGH
 76.72567|------------------------------------------------
 76.72568|  host_runtime_setup
 76.72569|------------------------------------------------
 76.72570|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.72571|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.02252|secure|Booting in non-secure mode.
  4.02253|secure|SecureROM invalid - skipping functionality
  4.64370|ERRL|Dumping errors reported prior to registration
  5.26799|ISTEP  6. 5 - host_init_fsi
  5.38178|ISTEP  6. 6 - host_set_ipl_parms
  5.40194|ISTEP  6. 7 - host_discover_targets
  5.93354|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.93356|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.96115|ISTEP  6. 8 - host_update_master_tpm
  5.96985|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.96987|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.97007|ISTEP  6. 9 - host_gard
  6.00441|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.01401|ISTEP  6.11 - host_start_occ_xstop_handler
  6.01516|ISTEP  6.12 - host_voltage_config
  6.04946|ISTEP  7. 2 - mss_volt
  6.28063|ISTEP  7. 3 - mss_freq
  6.42975|ISTEP  7. 4 - mss_eff_config
  9.70930|ISTEP  7. 5 - mss_attr_update
  9.72373|ISTEP  8. 1 - host_slave_sbe_config
  9.75960|ISTEP  8. 2 - host_setup_sbe
  9.76606|ISTEP  8. 3 - host_cbs_start
  9.77418|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.18885|ISTEP  8. 5 - host_attnlisten_proc
 18.18988|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.19632|ISTEP  8. 7 - host_p9_eff_config_links
 18.20595|ISTEP  8. 8 - proc_attr_update
 18.20772|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.26079|ISTEP  8.10 - proc_xbus_scominit
 21.49224|ISTEP  8.11 - proc_xbus_enable_ridi
 21.49732|ISTEP  9. 1 - fabric_erepair
 21.50750|ISTEP  9. 2 - fabric_io_dccal
 22.36753|ISTEP  9. 3 - fabric_pre_trainadv
 22.37401|ISTEP  9. 4 - fabric_io_run_training
 22.58942|ISTEP  9. 5 - fabric_post_trainadv
 22.59554|ISTEP  9. 6 - proc_smp_link_layer
 22.60070|ISTEP  9. 7 - proc_fab_iovalid
 22.62618|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.63681|ISTEP 10. 1 - proc_build_smp
 22.80822|ISTEP 10. 2 - host_slave_sbe_update
 23.28490|ISTEP 10. 3 - host_set_voltages
 23.34057|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.36273|ISTEP 10. 5 - proc_enable_osclite
 23.36386|ISTEP 10. 6 - proc_chiplet_scominit
 23.41175|ISTEP 10. 7 - proc_abus_scominit
 23.41943|ISTEP 10. 8 - proc_obus_scominit
 23.52675|ISTEP 10. 9 - proc_npu_scominit
 23.55242|ISTEP 10.10 - proc_pcie_scominit
 23.61176|ISTEP 10.11 - proc_scomoverride_chiplets
 23.61384|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.61781|ISTEP 10.13 - host_rng_bist
 23.62315|ISTEP 10.14 - host_update_redundant_tpm
 24.02288|================================================
 24.02639|Error reported by prdf (0xE500) PLID 0x90000053
 24.02640|  PRD Signature            : 0x280003 0xC51E003C
 24.02827|  Signature Description    : pu.obus:k0:n0:s0:p00:c3 (IOOLFIR[60]) link0 internal error
 24.03003|  UserData1   : 0x0028000300000303
 24.03004|  UserData2   : 0xc51e003c00000000
 24.03005|------------------------------------------------
 24.03006|  Callout type             : Hardware Callout
 24.03006|  CPU id                   : 4
 24.03008|  Target                   : Physical:/Sys0/Node0/Proc0/OBUS3
 24.03009|  Deconfig State           : DELAYED_DECONFIG
 24.03010|  GARD Error Type          : GARD_Predictive
 24.03010|  Priority                 : SRCI_PRIORITY_MED
 24.03011|------------------------------------------------
 24.03012|  
 24.03012|------------------------------------------------
 24.03013|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 24.03014|================================================
</msg>
<status endtime="20170810 02:43:30.018" status="PASS" starttime="20170810 02:43:30.016"></status>
</kw>
<status endtime="20170810 02:43:30.018" status="PASS" starttime="20170810 02:42:36.340"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170810 02:43:30.018" status="FAIL" starttime="20170810 02:32:20.233">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170810 02:43:30.019" status="FAIL" starttime="20170810 02:32:20.199"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170810 02:43:30.022" status="FAIL" starttime="20170810 02:32:14.107"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
