<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161217 01:51:59.715" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161217 01:52:00.171" level="INFO">
PATH: /home/fspcibld/barreleye-20161217013834.all.tar</msg>
<status status="PASS" endtime="20161217 01:52:00.171" starttime="20161217 01:52:00.171"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161217 01:52:00.172" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161217013834.all.tar"&gt;/home/fspcibld/barreleye-20161217013834.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161217 01:52:00.172" starttime="20161217 01:52:00.171"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161217 01:52:00.172" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161217013834.all.tar</msg>
<status status="PASS" endtime="20161217 01:52:00.172" starttime="20161217 01:52:00.172"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:00.172" starttime="20161217 01:52:00.170"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161217 01:52:00.174" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161217 01:52:00.175" starttime="20161217 01:52:00.174"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161217 01:52:00.179" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161217 01:52:03.183" level="INFO">${RC} = 0</msg>
<msg timestamp="20161217 01:52:03.183" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.15 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.799 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161217 01:52:03.183" starttime="20161217 01:52:00.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161217 01:52:03.186" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.15 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.799 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.756 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.757 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.756/0.867/1.158/0.171 ms</msg>
<status status="PASS" endtime="20161217 01:52:03.187" starttime="20161217 01:52:03.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:03.188" starttime="20161217 01:52:03.187"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:03.188" starttime="20161217 01:52:00.174"></status>
</kw>
<msg timestamp="20161217 01:52:03.189" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161217 01:52:03.189" starttime="20161217 01:52:00.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:03.194" starttime="20161217 01:52:03.189"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:52:03.196" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:52:03.197" starttime="20161217 01:52:03.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:03.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:03.198" starttime="20161217 01:52:03.197"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:52:03.199" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:52:03.199" starttime="20161217 01:52:03.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:52:03.199" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:52:03.199" starttime="20161217 01:52:03.199"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:52:03.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:03.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:03.556" starttime="20161217 01:52:03.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:03.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:52:03.557" starttime="20161217 01:52:03.556"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:03.557" starttime="20161217 01:52:03.195"></status>
</kw>
<msg timestamp="20161217 01:52:03.557" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161217 01:52:03.557" starttime="20161217 01:52:03.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:03.560" starttime="20161217 01:52:03.557"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:52:03.561" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:52:03.561" starttime="20161217 01:52:03.561"></status>
</kw>
<msg timestamp="20161217 01:52:03.561" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:52:03.561" starttime="20161217 01:52:03.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:03.565" starttime="20161217 01:52:03.564"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:03.565" starttime="20161217 01:52:03.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:03.567" starttime="20161217 01:52:03.565"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:52:03.568" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:52:03.568" starttime="20161217 01:52:03.568"></status>
</kw>
<msg timestamp="20161217 01:52:03.568" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:52:03.568" starttime="20161217 01:52:03.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:03.572" starttime="20161217 01:52:03.572"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:03.572" starttime="20161217 01:52:03.572"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:03.572" starttime="20161217 01:52:03.569"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:52:03.573" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:52:05.868" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:52:05.868" starttime="20161217 01:52:03.573"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:05.868" starttime="20161217 01:52:03.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:52:05.869" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161217 01:52:06.028" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:52:06.029" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161217 01:52:06.029" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:52:06.029" starttime="20161217 01:52:05.869"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:52:06.030" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:52:06.030" starttime="20161217 01:52:06.029"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:06.030" starttime="20161217 01:52:00.173"></status>
</kw>
<msg timestamp="20161217 01:52:06.030" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161217 01:52:06.030" starttime="20161217 01:52:00.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:06.035" starttime="20161217 01:52:06.031"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:06.035" starttime="20161217 01:52:00.173"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:52:06.040" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:52:06.040" starttime="20161217 01:52:06.039"></status>
</kw>
<msg timestamp="20161217 01:52:06.040" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:52:06.040" starttime="20161217 01:52:06.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:06.046" starttime="20161217 01:52:06.045"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:06.046" starttime="20161217 01:52:06.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:06.049" starttime="20161217 01:52:06.046"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:52:06.049" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:52:06.049" starttime="20161217 01:52:06.049"></status>
</kw>
<msg timestamp="20161217 01:52:06.050" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:52:06.050" starttime="20161217 01:52:06.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:06.054" starttime="20161217 01:52:06.053"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:06.054" starttime="20161217 01:52:06.053"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:06.054" starttime="20161217 01:52:06.050"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:52:06.054" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:52:08.399" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:52:08.399" starttime="20161217 01:52:06.054"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:08.400" starttime="20161217 01:52:06.037"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:52:08.401" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161217 01:52:08.469" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:52:08.469" level="INFO">${version} = 20161216222224</msg>
<msg timestamp="20161217 01:52:08.470" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:52:08.470" starttime="20161217 01:52:08.400"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:52:08.470" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:52:08.470" starttime="20161217 01:52:08.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:08.476" starttime="20161217 01:52:08.476"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:08.476" starttime="20161217 01:52:08.471"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:08.476" starttime="20161217 01:52:06.036"></status>
</kw>
<msg timestamp="20161217 01:52:08.477" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161217 01:52:08.477" starttime="20161217 01:52:06.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:08.481" starttime="20161217 01:52:08.477"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:52:08.484" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:52:08.484" starttime="20161217 01:52:08.483"></status>
</kw>
<msg timestamp="20161217 01:52:08.484" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:52:08.484" starttime="20161217 01:52:08.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:08.488" starttime="20161217 01:52:08.487"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:08.488" starttime="20161217 01:52:08.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:08.491" starttime="20161217 01:52:08.488"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:52:08.491" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:52:08.492" starttime="20161217 01:52:08.491"></status>
</kw>
<msg timestamp="20161217 01:52:08.492" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:52:08.492" starttime="20161217 01:52:08.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:08.496" starttime="20161217 01:52:08.495"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:08.496" starttime="20161217 01:52:08.495"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:08.496" starttime="20161217 01:52:08.492"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:52:08.496" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:52:10.701" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:52:10.701" starttime="20161217 01:52:08.496"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:10.701" starttime="20161217 01:52:08.482"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20161217 01:52:10.702" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20161217 01:52:10.780" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:52:10.780" level="INFO">${output} = </msg>
<msg timestamp="20161217 01:52:10.780" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals on disk.</msg>
<msg timestamp="20161217 01:52:10.780" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20161217 01:52:10.781" starttime="20161217 01:52:10.702"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:10.781" starttime="20161217 01:52:10.781"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${stderr}</arg>
<arg>Vacuuming done</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:10.782" starttime="20161217 01:52:10.782"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:10.782" starttime="20161217 01:52:08.481"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161217 01:52:10.784" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161217 01:52:10.784" starttime="20161217 01:52:10.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161217 01:52:10.786" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161217 01:52:10.786" starttime="20161217 01:52:10.785"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:52:10.789" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161217 01:52:10.789" starttime="20161217 01:52:10.788"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:52:10.792" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161217 01:52:10.792" starttime="20161217 01:52:10.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:10.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:10.793" starttime="20161217 01:52:10.792"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:10.794" starttime="20161217 01:52:10.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:52:10.802" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:52:10.802" starttime="20161217 01:52:10.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:52:10.804" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:52:10.804" starttime="20161217 01:52:10.803"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:10.805" starttime="20161217 01:52:10.803"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:10.805" starttime="20161217 01:52:10.800"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:10.805" starttime="20161217 01:52:10.795"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:52:10.806" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:52:10.807" starttime="20161217 01:52:10.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:10.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:10.808" starttime="20161217 01:52:10.807"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:52:10.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:52:10.809" starttime="20161217 01:52:10.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:52:10.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:52:10.810" starttime="20161217 01:52:10.809"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:52:11.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:11.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:11.565" starttime="20161217 01:52:10.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:11.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:52:11.566" starttime="20161217 01:52:11.565"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:11.566" starttime="20161217 01:52:10.805"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161217 01:52:12.006" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:12.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.007" starttime="20161217 01:52:11.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:52:12.016" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:52:12.016" starttime="20161217 01:52:12.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:52:12.020" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:52:12.020" starttime="20161217 01:52:12.019"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.020" starttime="20161217 01:52:12.017"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.020" starttime="20161217 01:52:12.014"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.020" starttime="20161217 01:52:12.007"></status>
</kw>
<msg timestamp="20161217 01:52:12.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.021" starttime="20161217 01:52:10.789"></status>
</kw>
<msg timestamp="20161217 01:52:12.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.021" starttime="20161217 01:52:10.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:12.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.022" starttime="20161217 01:52:12.022"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161217 01:52:12.025" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161217 01:52:12.025" starttime="20161217 01:52:12.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161217 01:52:12.026" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161217 01:52:12.026" starttime="20161217 01:52:12.026"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:52:12.027" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161217 01:52:12.027" starttime="20161217 01:52:12.027"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:52:12.028" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161217 01:52:12.028" starttime="20161217 01:52:12.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:12.029" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:12.029" starttime="20161217 01:52:12.029"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:12.029" starttime="20161217 01:52:12.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:52:12.033" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:52:12.033" starttime="20161217 01:52:12.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:52:12.034" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:52:12.034" starttime="20161217 01:52:12.034"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.034" starttime="20161217 01:52:12.034"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.034" starttime="20161217 01:52:12.032"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.034" starttime="20161217 01:52:12.029"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:52:12.035" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:52:12.036" starttime="20161217 01:52:12.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:12.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:12.036" starttime="20161217 01:52:12.036"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:52:12.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:52:12.037" starttime="20161217 01:52:12.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:52:12.037" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:52:12.037" starttime="20161217 01:52:12.037"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:52:12.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:12.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.382" starttime="20161217 01:52:12.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:12.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.382" starttime="20161217 01:52:12.382"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.383" starttime="20161217 01:52:12.035"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161217 01:52:12.644" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:12.644" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.644" starttime="20161217 01:52:12.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:52:12.648" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:52:12.648" starttime="20161217 01:52:12.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:52:12.649" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:52:12.649" starttime="20161217 01:52:12.649"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.649" starttime="20161217 01:52:12.648"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.649" starttime="20161217 01:52:12.647"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.649" starttime="20161217 01:52:12.644"></status>
</kw>
<msg timestamp="20161217 01:52:12.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.649" starttime="20161217 01:52:12.027"></status>
</kw>
<msg timestamp="20161217 01:52:12.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.650" starttime="20161217 01:52:12.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:12.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:52:12.651" starttime="20161217 01:52:12.650"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161217 01:52:12.651" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161217 01:52:12.651" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161217 01:52:12.651" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161217 01:52:12.652" starttime="20161217 01:52:12.651"></status>
</kw>
<msg timestamp="20161217 01:52:12.652" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161217 01:52:12.652" starttime="20161217 01:52:12.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:12.652" starttime="20161217 01:52:12.652"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.652" starttime="20161217 01:52:12.023"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.652" starttime="20161217 01:52:12.023"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.653" starttime="20161217 01:52:10.783"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161217 01:52:12.654" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161217 01:52:12.654" starttime="20161217 01:52:12.653"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:52:12.655" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161217 01:52:12.655" starttime="20161217 01:52:12.654"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:52:12.656" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161217 01:52:12.656" starttime="20161217 01:52:12.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:12.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:12.656" starttime="20161217 01:52:12.656"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:12.657" starttime="20161217 01:52:12.656"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:52:12.658" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:52:12.658" starttime="20161217 01:52:12.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:52:12.659" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:52:12.659" starttime="20161217 01:52:12.659"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.659" starttime="20161217 01:52:12.658"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:12.659" starttime="20161217 01:52:12.657"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:52:12.661" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:52:12.661" starttime="20161217 01:52:12.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:52:12.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:52:12.661" starttime="20161217 01:52:12.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:52:12.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:52:12.662" starttime="20161217 01:52:12.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:52:12.662" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:52:12.662" starttime="20161217 01:52:12.662"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:52:13.008" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:13.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:13.008" starttime="20161217 01:52:12.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:13.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:52:13.009" starttime="20161217 01:52:13.008"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:13.009" starttime="20161217 01:52:12.659"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161217 01:52:13.066" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161217 01:52:13.067" level="INFO">${ret} = &lt;Response [403]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:13.067" starttime="20161217 01:52:13.009"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:52:13.068" level="INFO">${msg} = Response code:403, Content:{
  "data": {
    "description": "The specified resource cannot be created: '/org/openbmc/settings/host0'"
  }, 
  "message": "403 Forbidden", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161217 01:52:13.068" starttime="20161217 01:52:13.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:52:13.070" level="INFO">Response code:403, Content:{
  "data": {
    "description": "The specified resource cannot be created: '/org/openbmc/settings/host0'"
  }, 
  "message": "403 Forbidden", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161217 01:52:13.070" starttime="20161217 01:52:13.069"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:13.070" starttime="20161217 01:52:13.069"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:13.070" starttime="20161217 01:52:13.067"></status>
</kw>
<msg timestamp="20161217 01:52:13.070" level="INFO">${resp} = &lt;Response [403]&gt;</msg>
<status status="PASS" endtime="20161217 01:52:13.071" starttime="20161217 01:52:12.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:52:13.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20161217 01:52:13.072" level="FAIL">403 != 200</msg>
<status status="FAIL" endtime="20161217 01:52:13.073" starttime="20161217 01:52:13.071"></status>
</kw>
<status status="FAIL" endtime="20161217 01:52:13.073" starttime="20161217 01:52:12.654"></status>
</kw>
<status status="FAIL" endtime="20161217 01:52:13.073" starttime="20161217 01:52:12.653"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="FAIL" endtime="20161217 01:52:13.074" critical="yes" starttime="20161217 01:52:00.170">403 != 200</status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:52:13.078" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:52:13.078" starttime="20161217 01:52:13.077"></status>
</kw>
<msg timestamp="20161217 01:52:13.078" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:52:13.078" starttime="20161217 01:52:13.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:13.084" starttime="20161217 01:52:13.083"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:13.084" starttime="20161217 01:52:13.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:13.087" starttime="20161217 01:52:13.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:52:13.088" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:52:13.088" starttime="20161217 01:52:13.088"></status>
</kw>
<msg timestamp="20161217 01:52:13.088" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:52:13.088" starttime="20161217 01:52:13.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:13.093" starttime="20161217 01:52:13.092"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:13.093" starttime="20161217 01:52:13.092"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:13.093" starttime="20161217 01:52:13.089"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:52:13.093" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:52:15.287" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:52:15.287" starttime="20161217 01:52:13.093"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:15.287" starttime="20161217 01:52:13.076"></status>
</kw>
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:52:15.290" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161217 01:52:15.722" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:52:15.722" level="INFO">${bmc_cpu_usage_output} = 00%</msg>
<msg timestamp="20161217 01:52:15.722" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:52:15.722" starttime="20161217 01:52:15.290"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:52:15.723" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:52:15.723" starttime="20161217 01:52:15.723"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161217 01:52:15.724" level="INFO">${bmc_cpu_percentage} = 00</msg>
<status status="PASS" endtime="20161217 01:52:15.724" starttime="20161217 01:52:15.723"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161217 01:52:15.731" starttime="20161217 01:52:15.724"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:15.731" starttime="20161217 01:52:15.289"></status>
</kw>
<status status="PASS" endtime="20161217 01:52:15.731" starttime="20161217 01:52:15.289"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:52:15.733" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161217 01:52:16.192" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:52:16.192" level="INFO">${bmc_cpu_usage_output} = 90%</msg>
<msg timestamp="20161217 01:52:16.193" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:52:16.193" starttime="20161217 01:52:15.732"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:52:16.193" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:52:16.193" starttime="20161217 01:52:16.193"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161217 01:52:16.194" level="INFO">${bmc_cpu_percentage} = 90</msg>
<status status="PASS" endtime="20161217 01:52:16.194" starttime="20161217 01:52:16.194"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<msg timestamp="20161217 01:52:16.198" level="FAIL">'90 &lt; 90' should be true.</msg>
<status status="FAIL" endtime="20161217 01:52:16.198" starttime="20161217 01:52:16.194"></status>
</kw>
<status status="FAIL" endtime="20161217 01:52:16.199" starttime="20161217 01:52:15.731"></status>
</kw>
<status status="FAIL" endtime="20161217 01:52:16.199" starttime="20161217 01:52:15.731"></status>
</kw>
<status status="FAIL" endtime="20161217 01:52:16.199" starttime="20161217 01:52:15.289"></status>
</kw>
<status status="FAIL" endtime="20161217 01:52:16.199" starttime="20161217 01:52:15.288"></status>
</kw>
<doc>Check performance of memory and BMC CPU.</doc>
<status status="FAIL" endtime="20161217 01:52:16.199" critical="yes" starttime="20161217 01:52:13.074">'90 &lt; 90' should be true.</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161217 01:52:16.201" starttime="20161217 01:51:59.717"></status>
</suite>
<statistics>
<total>
<stat fail="2" pass="0">Critical Tests</stat>
<stat fail="2" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="2" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
